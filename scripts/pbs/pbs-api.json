{
  "openapi": "3.0.3",
  "info": {
    "title": "Proxmox Backup Server API",
    "description": "Complete Proxmox Backup Server API specification for comprehensive data protection and backup management.\n\nThis specification covers all aspects of Proxmox Backup Server operations including:\n- **Backup Operations**: Create, manage, and monitor backup jobs\n- **Data Store Management**: Configure and manage backup storage\n- **Access Control**: User authentication and authorization\n- **Sync & Replication**: Cross-site backup synchronization\n- **Prune & GC**: Automated cleanup and garbage collection\n- **Encryption**: Client-side encryption and key management\n- **Monitoring**: Backup status and performance tracking\n- **Configuration**: Server and client configuration management\n\nThe API supports token-based authentication with CSRF protection for secure backup operations.",
    "version": "3.0.0",
    "contact": {
      "name": "Proxmox Support",
      "url": "https://www.proxmox.com",
      "email": "support@proxmox.com"
    },
    "license": {
      "name": "AGPL-3.0",
      "url": "https://www.gnu.org/licenses/agpl-3.0.html"
    }
  },
  "servers": [
    {
      "url": "https://{host}:8007",
      "description": "Proxmox Backup Server",
      "variables": {
        "host": {
          "default": "localhost",
          "description": "Proxmox Backup server hostname or IP address"
        }
      }
    }
  ],
  "tags": [
    {
      "name": "Access Control",
      "description": "Access Control related operations"
    },
    {
      "name": "Administration",
      "description": "Administration related operations"
    },
    {
      "name": "Backup Operations",
      "description": "Backup Operations related operations"
    },
    {
      "name": "Configuration",
      "description": "Configuration related operations"
    },
    {
      "name": "Default",
      "description": "Default related operations"
    },
    {
      "name": "Nodes",
      "description": "Nodes related operations"
    },
    {
      "name": "Ping",
      "description": "Ping related operations"
    },
    {
      "name": "Pull",
      "description": "Pull related operations"
    },
    {
      "name": "Push",
      "description": "Push related operations"
    },
    {
      "name": "Reader",
      "description": "Reader related operations"
    },
    {
      "name": "Status & Monitoring",
      "description": "Status & Monitoring related operations"
    },
    {
      "name": "Tape",
      "description": "Tape related operations"
    },
    {
      "name": "Version",
      "description": "Version related operations"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_",
        "tags": [
          "Default"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//access": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_access",
        "tags": [
          "Access Control"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//access/access/acl": {
      "get": {
        "summary": "Read Access Control List (ACLs).",
        "description": "Read Access Control List (ACLs).",
        "operationId": "get_access_access_acl",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "exact",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "If set, returns only ACL for the exact path.",
              "default": false
            },
            "description": "If set, returns only ACL for the exact path."
          },
          {
            "name": "path",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Access control path.",
              "minLength": 1,
              "maxLength": 128,
              "pattern": "^(?:/|(?:/(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))+)$"
            },
            "description": "Access control path."
          }
        ],
        "responses": {
          "200": {
            "description": "ACL entry list.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "path": {
                        "type": "string",
                        "description": "Access control path."
                      },
                      "propagate": {
                        "type": "boolean",
                        "description": "Allow to propagate (inherit) permissions."
                      },
                      "roleid": {
                        "type": "string",
                        "description": "Enum representing roles via their [PRIVILEGES] combination.\n\nSince privileges are implemented as bitflags, each unique combination of privileges maps to a\nsingle, unique `u64` value that is used in this enum definition."
                      },
                      "ugid": {
                        "type": "string",
                        "description": "User or Group ID."
                      },
                      "ugid_type": {
                        "type": "string",
                        "description": "Type of 'ugid' property."
                      }
                    },
                    "description": "ACL list entry."
                  },
                  "description": "ACL entry list."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update Access Control List (ACLs).",
        "description": "Update Access Control List (ACLs).",
        "operationId": "put_access_access_acl",
        "tags": [
          "Access Control"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "auth-id": {
                    "type": "string",
                    "description": "Authentication ID",
                    "minLength": 3,
                    "maxLength": 64,
                    "pattern": "^(?:(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)|(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)!(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))$"
                  },
                  "delete": {
                    "type": "boolean",
                    "description": "Remove permissions (instead of adding it)."
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "group": {
                    "type": "string",
                    "description": "Group ID",
                    "minLength": 3,
                    "maxLength": 64,
                    "pattern": "^(?:[^\\s:/[:cntrl:]]+)$"
                  },
                  "path": {
                    "type": "string",
                    "description": "Access control path.",
                    "minLength": 1,
                    "maxLength": 128,
                    "pattern": "^(?:/|(?:/(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))+)$"
                  },
                  "propagate": {
                    "type": "boolean",
                    "description": "Allow to propagate (inherit) permissions.",
                    "default": true
                  },
                  "role": {
                    "type": "string",
                    "description": "Enum representing roles via their [PRIVILEGES] combination.\n\nSince privileges are implemented as bitflags, each unique combination of privileges maps to a\nsingle, unique `u64` value that is used in this enum definition.",
                    "enum": [
                      "Admin",
                      "Audit",
                      "NoAccess",
                      "DatastoreAdmin",
                      "DatastoreReader",
                      "DatastoreBackup",
                      "DatastorePowerUser",
                      "DatastoreAudit",
                      "RemoteAudit",
                      "RemoteAdmin",
                      "RemoteSyncOperator",
                      "RemoteSyncPushOperator",
                      "RemoteDatastorePowerUser",
                      "RemoteDatastoreAdmin",
                      "TapeAudit",
                      "TapeAdmin",
                      "TapeOperator",
                      "TapeReader"
                    ]
                  }
                },
                "required": [
                  "path",
                  "role"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//access/access/domains": {
      "get": {
        "summary": "Authentication domain/realm index.",
        "description": "Authentication domain/realm index.",
        "operationId": "get_access_access_domains",
        "tags": [
          "Access Control"
        ],
        "responses": {
          "200": {
            "description": "List of realms with basic info.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "default": {
                        "type": "boolean",
                        "description": "True if it is the default realm"
                      },
                      "realm": {
                        "type": "string",
                        "description": "Realm name."
                      },
                      "type": {
                        "type": "string",
                        "description": "type of the realm"
                      }
                    },
                    "description": "Basic Information about a realm"
                  },
                  "description": "List of realms with basic info."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//access/access/domains/access/domains/{realm}/access/domains/{realm}/sync": {
      "post": {
        "summary": "Synchronize users of a given realm",
        "description": "Synchronize users of a given realm",
        "operationId": "post_access_access_domains_access_domains_realm_access_domains_realm_sync",
        "tags": [
          "Access Control"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "dry-run": {
                    "type": "boolean",
                    "description": "If set, do not create/delete anything",
                    "default": false
                  },
                  "enable-new": {
                    "type": "boolean",
                    "description": "Enable newly synced users immediately"
                  },
                  "remove-vanished": {
                    "type": "string",
                    "format": {
                      "description": "Array of remove-vanished options",
                      "items": {
                        "description": "remove-vanished options",
                        "enum": [
                          "acl",
                          "entry",
                          "properties"
                        ],
                        "type": "string"
                      },
                      "maxLength": 1,
                      "minLength": 1,
                      "type": "array"
                    },
                    "description": "A semicolon-separated list of things to remove when they or the user vanishes during user synchronization. The following values are possible: ``entry`` removes the user when not returned from the sync; ``properties`` removes any  properties on existing user that do not appear in the source. ``acl`` removes ACLs when the user is not returned from the sync."
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "realm",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxResourceName"
            },
            "description": "The realm parameter"
          },
          {
            "name": "realm",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxResourceName"
            },
            "description": "The realm parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Unique Process/Task Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Unique Process/Task Identifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//access/access/openid": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_access_access_openid",
        "tags": [
          "Access Control"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//access/access/openid/access/openid/auth-url": {
      "post": {
        "summary": "Create OpenID Redirect Session",
        "description": "Create OpenID Redirect Session",
        "operationId": "post_access_access_openid_access_openid_auth-url",
        "tags": [
          "Access Control"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "realm": {
                    "type": "string",
                    "description": "Realm name.",
                    "minLength": 2,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "redirect-url": {
                    "type": "string",
                    "description": "Redirection Url. The client should set this to used server url."
                  }
                },
                "required": [
                  "realm",
                  "redirect-url"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Redirection URL.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Redirection URL."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//access/access/openid/access/openid/login": {
      "post": {
        "summary": "Verify OpenID authorization code and create a ticket",
        "description": "Verify OpenID authorization code and create a ticket",
        "operationId": "post_access_access_openid_access_openid_login",
        "tags": [
          "Access Control"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "OpenId authorization code."
                  },
                  "redirect-url": {
                    "type": "string",
                    "description": "Redirection Url. The client should set this to used server url."
                  },
                  "state": {
                    "type": "string",
                    "description": "OpenId state."
                  }
                },
                "required": [
                  "code",
                  "redirect-url",
                  "state"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "An authentication ticket with additional infos.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "CSRFPreventionToken": {
                      "type": "string",
                      "description": "Cross Site Request Forgery Prevention Token."
                    },
                    "ticket": {
                      "type": "string",
                      "description": "Auth ticket."
                    },
                    "username": {
                      "type": "string",
                      "description": "User name."
                    }
                  },
                  "description": "An authentication ticket with additional infos."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//access/access/password": {
      "put": {
        "summary": "Change user password\n\nEach user is allowed to change his own password. Superuser\ncan change all passwords.",
        "description": "Change user password\n\nEach user is allowed to change his own password. Superuser\ncan change all passwords.",
        "operationId": "put_access_access_password",
        "tags": [
          "Access Control"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "confirmation-password": {
                    "type": "string",
                    "description": "The current password for confirmation, unless logged in as root@pam",
                    "minLength": 1,
                    "maxLength": 1024,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "password": {
                    "type": "string",
                    "description": "User Password.",
                    "minLength": 8,
                    "maxLength": 64,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "userid": {
                    "type": "string",
                    "description": "User ID",
                    "minLength": 3,
                    "maxLength": 64,
                    "pattern": "^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  }
                },
                "required": [
                  "password",
                  "userid"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//access/access/permissions": {
      "get": {
        "summary": "List permissions of given or currently authenticated user / API token.\n\nOptionally limited to specific path.",
        "description": "List permissions of given or currently authenticated user / API token.\n\nOptionally limited to specific path.",
        "operationId": "get_access_access_permissions",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "auth-id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Authentication ID",
              "minLength": 3,
              "maxLength": 64,
              "pattern": "^(?:(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)|(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)!(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))$"
            },
            "description": "Authentication ID"
          },
          {
            "name": "path",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Access control path.",
              "minLength": 1,
              "maxLength": 128,
              "pattern": "^(?:/|(?:/(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))+)$"
            },
            "description": "Access control path."
          }
        ],
        "responses": {
          "200": {
            "description": "Map of ACL path to Map of privilege to propagate bit",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Map of ACL path to Map of privilege to propagate bit"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//access/access/roles": {
      "get": {
        "summary": "Role list",
        "description": "Role list",
        "operationId": "get_access_access_roles",
        "tags": [
          "Access Control"
        ],
        "responses": {
          "200": {
            "description": "List of roles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "privs": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "A Privilege"
                        },
                        "description": "List of Privileges"
                      },
                      "roleid": {
                        "type": "string",
                        "description": "Enum representing roles via their [PRIVILEGES] combination.\n\nSince privileges are implemented as bitflags, each unique combination of privileges maps to a\nsingle, unique `u64` value that is used in this enum definition."
                      }
                    },
                    "description": "Role with description and privileges."
                  },
                  "description": "List of roles."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//access/access/tfa": {
      "get": {
        "summary": "List user TFA configuration.",
        "description": "List user TFA configuration.",
        "operationId": "get_access_access_tfa",
        "tags": [
          "Access Control"
        ],
        "responses": {
          "200": {
            "description": "The list tuples of user and TFA entries.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "entries": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "integer",
                              "description": "Creation time of this entry as unix epoch."
                            },
                            "description": {
                              "type": "string",
                              "description": "User chosen description for this entry."
                            },
                            "enable": {
                              "type": "boolean",
                              "description": "Whether this TFA entry is currently enabled."
                            },
                            "id": {
                              "type": "string",
                              "description": "The id used to reference this entry."
                            },
                            "type": {
                              "type": "string",
                              "description": "A TFA entry type."
                            }
                          },
                          "description": "A TFA entry for a user."
                        },
                        "description": "TFA entries."
                      },
                      "tfa-locked-until": {
                        "type": "integer",
                        "description": "If a user's second factor is blocked, this contains the block's expiration time."
                      },
                      "totp-locked": {
                        "type": "boolean",
                        "description": "The user is locked out of TOTP authentication."
                      },
                      "userid": {
                        "type": "string",
                        "description": "The user this entry belongs to."
                      }
                    },
                    "description": "Over the API we only provide the descriptions for TFA data."
                  },
                  "description": "The list tuples of user and TFA entries."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//access/access/tfa/access/tfa/{userid}": {
      "get": {
        "summary": "Add a TOTP secret to the user.",
        "description": "Add a TOTP secret to the user.",
        "operationId": "get_access_access_tfa_access_tfa_userid",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxUserId"
            },
            "description": "The userid parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of TFA entries.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "created": {
                        "type": "integer",
                        "description": "Creation time of this entry as unix epoch."
                      },
                      "description": {
                        "type": "string",
                        "description": "User chosen description for this entry."
                      },
                      "enable": {
                        "type": "boolean",
                        "description": "Whether this TFA entry is currently enabled."
                      },
                      "id": {
                        "type": "string",
                        "description": "The id used to reference this entry."
                      },
                      "type": {
                        "type": "string",
                        "description": "A TFA entry type."
                      }
                    },
                    "description": "A TFA entry for a user."
                  },
                  "description": "The list of TFA entries."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Add a TFA entry to the user.",
        "description": "Add a TFA entry to the user.",
        "operationId": "post_access_access_tfa_access_tfa_userid",
        "tags": [
          "Access Control"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "challenge": {
                    "type": "string",
                    "description": "When responding to a u2f challenge: the original challenge string"
                  },
                  "description": {
                    "type": "string",
                    "description": "A description to distinguish multiple entries from one another",
                    "maxLength": 255
                  },
                  "password": {
                    "type": "string",
                    "description": "Password.",
                    "minLength": 1,
                    "maxLength": 1024,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "totp": {
                    "type": "string",
                    "description": "A totp URI."
                  },
                  "type": {
                    "type": "string",
                    "description": "A TFA entry type.",
                    "enum": [
                      "totp",
                      "u2f",
                      "webauthn",
                      "recovery",
                      "yubico"
                    ]
                  },
                  "value": {
                    "type": "string",
                    "description": "The current value for the provided totp URI, or a Webauthn/U2F challenge response"
                  }
                },
                "required": [
                  "type"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxUserId"
            },
            "description": "The userid parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The result returned when adding TFA entries to a user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "challenge": {
                      "type": "string",
                      "description": "When adding u2f entries, this contains a challenge the user must respond to in order to\nfinish the registration."
                    },
                    "id": {
                      "type": "string",
                      "description": "The id if a newly added TFA entry."
                    },
                    "recovery": {
                      "type": "array",
                      "items": {
                        "type": "integer",
                        "description": "A one-time usable recovery code entry."
                      },
                      "description": "A list of recovery codes as integers."
                    }
                  },
                  "description": "The result returned when adding TFA entries to a user."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//access/access/tfa/access/tfa/{userid}/access/tfa/{userid}/{id}": {
      "delete": {
        "summary": "Delete a single TFA entry.",
        "description": "Delete a single TFA entry.",
        "operationId": "delete_access_access_tfa_access_tfa_userid_access_tfa_userid_id",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxUserId"
            },
            "description": "The userid parameter"
          },
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxUserId"
            },
            "description": "The userid parameter"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          },
          {
            "name": "password",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Password.",
              "minLength": 1,
              "maxLength": 1024,
              "pattern": "^[[:^cntrl:]]*$"
            },
            "description": "Password."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Get a single TFA entry.",
        "description": "Get a single TFA entry.",
        "operationId": "get_access_access_tfa_access_tfa_userid_access_tfa_userid_id",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxUserId"
            },
            "description": "The userid parameter"
          },
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxUserId"
            },
            "description": "The userid parameter"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update user's TFA entry description.",
        "description": "Update user's TFA entry description.",
        "operationId": "put_access_access_tfa_access_tfa_userid_access_tfa_userid_id",
        "tags": [
          "Access Control"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "A description to distinguish multiple entries from one another",
                    "maxLength": 255
                  },
                  "enable": {
                    "type": "boolean",
                    "description": "Whether this entry should currently be enabled or disabled"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password.",
                    "minLength": 1,
                    "maxLength": 1024,
                    "pattern": "^[[:^cntrl:]]*$"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxUserId"
            },
            "description": "The userid parameter"
          },
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxUserId"
            },
            "description": "The userid parameter"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//access/access/ticket": {
      "post": {
        "summary": "Create or verify authentication ticket.",
        "description": "Create or verify authentication ticket.",
        "operationId": "post_access_access_ticket",
        "tags": [
          "Access Control"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "description": "The secret password. This can also be a valid ticket. Only optional if the ticket is\nprovided in a cookie header and only if the endpoint supports this."
                  },
                  "path": {
                    "type": "string",
                    "description": "Verify ticket, and check if user have access 'privs' on 'path'."
                  },
                  "port": {
                    "type": "integer",
                    "description": "Port for verifying terminal tickets.",
                    "minimum": 0,
                    "maximum": 65535
                  },
                  "privs": {
                    "type": "string",
                    "description": "Verify ticket, and check if user have access 'privs' on 'path'."
                  },
                  "tfa-challenge": {
                    "type": "string",
                    "description": "The signed TFA challenge string the user wants to respond to."
                  },
                  "username": {
                    "type": "string",
                    "description": "User ID",
                    "minLength": 3,
                    "maxLength": 64,
                    "pattern": "^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  }
                },
                "required": [
                  "username"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The API response for a ticket call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "CSRFPreventionToken": {
                      "type": "string",
                      "description": "The CSRF prevention token."
                    },
                    "ticket": {
                      "type": "string",
                      "description": "The ticket as is supposed to be used in the authentication header. Not provided here if the\nendpoint uses HttpOnly cookies to supply the actual ticket."
                    },
                    "ticket-info": {
                      "type": "string",
                      "description": "Like a full ticket, except the signature is missing. Useful in HttpOnly-contexts\n(browsers)."
                    },
                    "username": {
                      "type": "string",
                      "description": "User ID"
                    }
                  },
                  "description": "The API response for a ticket call."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//access/access/users": {
      "get": {
        "summary": "List users",
        "description": "List users",
        "operationId": "get_access_access_users",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "include_tokens",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include user's API tokens in returned list.",
              "default": false
            },
            "description": "Include user's API tokens in returned list."
          }
        ],
        "responses": {
          "200": {
            "description": "List users (with config digest).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "email": {
                        "type": "string",
                        "description": "E-Mail Address."
                      },
                      "enable": {
                        "type": "boolean",
                        "description": "Enable the account (default). You can set this to '0' to disable the account."
                      },
                      "expire": {
                        "type": "integer",
                        "description": "Account expiration date (seconds since epoch). '0' means no expiration date."
                      },
                      "firstname": {
                        "type": "string",
                        "description": "First name."
                      },
                      "lastname": {
                        "type": "string",
                        "description": "Last name."
                      },
                      "tfa-locked-until": {
                        "type": "integer",
                        "description": "Contains a timestamp until when a user is locked out of 2nd factors"
                      },
                      "tokens": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "comment": {
                              "type": "string",
                              "description": "Comment."
                            },
                            "enable": {
                              "type": "boolean",
                              "description": "Enable the account (default). You can set this to '0' to disable the account."
                            },
                            "expire": {
                              "type": "integer",
                              "description": "Account expiration date (seconds since epoch). '0' means no expiration date."
                            },
                            "tokenid": {
                              "type": "string",
                              "description": "API Token ID"
                            }
                          },
                          "description": "ApiToken properties."
                        },
                        "description": "List of user's API tokens."
                      },
                      "totp-locked": {
                        "type": "boolean",
                        "description": "True if the user is currently locked out of TOTP factors"
                      },
                      "userid": {
                        "type": "string",
                        "description": "User ID"
                      }
                    },
                    "description": "User properties with added list of ApiTokens"
                  },
                  "description": "List users (with config digest)."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Create new user.",
        "description": "Create new user.",
        "operationId": "post_access_access_users",
        "tags": [
          "Access Control"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "email": {
                    "type": "string",
                    "description": "E-Mail Address.",
                    "minLength": 2,
                    "maxLength": 64,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "enable": {
                    "type": "boolean",
                    "description": "Enable the account (default). You can set this to '0' to disable the account.",
                    "default": true
                  },
                  "expire": {
                    "type": "integer",
                    "description": "Account expiration date (seconds since epoch). '0' means no expiration date.",
                    "minimum": 0,
                    "default": 0
                  },
                  "firstname": {
                    "type": "string",
                    "description": "First name.",
                    "minLength": 2,
                    "maxLength": 64,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "lastname": {
                    "type": "string",
                    "description": "Last name.",
                    "minLength": 2,
                    "maxLength": 64,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "password": {
                    "type": "string",
                    "description": "User Password.",
                    "minLength": 8,
                    "maxLength": 64,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "userid": {
                    "type": "string",
                    "description": "User ID",
                    "minLength": 3,
                    "maxLength": 64,
                    "pattern": "^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  }
                },
                "required": [
                  "userid"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//access/access/users/access/users/{userid}": {
      "delete": {
        "summary": "Remove a user from the configuration file.",
        "description": "Remove a user from the configuration file.",
        "operationId": "delete_access_access_users_access_users_userid",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxUserId"
            },
            "description": "The userid parameter"
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
              "pattern": "^[a-f0-9]{64}$"
            },
            "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Read user configuration data.",
        "description": "Read user configuration data.",
        "operationId": "get_access_access_users_access_users_userid",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxUserId"
            },
            "description": "The userid parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "User properties.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "comment": {
                      "type": "string",
                      "description": "Comment."
                    },
                    "email": {
                      "type": "string",
                      "description": "E-Mail Address."
                    },
                    "enable": {
                      "type": "boolean",
                      "description": "Enable the account (default). You can set this to '0' to disable the account."
                    },
                    "expire": {
                      "type": "integer",
                      "description": "Account expiration date (seconds since epoch). '0' means no expiration date."
                    },
                    "firstname": {
                      "type": "string",
                      "description": "First name."
                    },
                    "lastname": {
                      "type": "string",
                      "description": "Last name."
                    },
                    "userid": {
                      "type": "string",
                      "description": "User ID"
                    }
                  },
                  "description": "User properties."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update user configuration. To change a user's password use the 'PUT /access/password' endpoint.",
        "description": "Update user configuration. To change a user's password use the 'PUT /access/password' endpoint.",
        "operationId": "put_access_access_users_access_users_userid",
        "tags": [
          "Access Control"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "email": {
                    "type": "string",
                    "description": "E-Mail Address.",
                    "minLength": 2,
                    "maxLength": 64,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "enable": {
                    "type": "boolean",
                    "description": "Enable the account (default). You can set this to '0' to disable the account.",
                    "default": true
                  },
                  "expire": {
                    "type": "integer",
                    "description": "Account expiration date (seconds since epoch). '0' means no expiration date.",
                    "minimum": 0,
                    "default": 0
                  },
                  "firstname": {
                    "type": "string",
                    "description": "First name.",
                    "minLength": 2,
                    "maxLength": 64,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "lastname": {
                    "type": "string",
                    "description": "Last name.",
                    "minLength": 2,
                    "maxLength": 64,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "password": {
                    "type": "string",
                    "description": "This parameter is ignored, please use 'PUT /access/password' to change a user's password",
                    "minLength": 1,
                    "maxLength": 1024,
                    "pattern": "^[[:^cntrl:]]*$"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxUserId"
            },
            "description": "The userid parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//access/access/users/access/users/{userid}/access/users/{userid}/token": {
      "get": {
        "summary": "List user's API tokens",
        "description": "List user's API tokens",
        "operationId": "get_access_access_users_access_users_userid_access_users_userid_token",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxUserId"
            },
            "description": "The userid parameter"
          },
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxUserId"
            },
            "description": "The userid parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List user's API tokens (with config digest).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "enable": {
                        "type": "boolean",
                        "description": "Enable the account (default). You can set this to '0' to disable the account."
                      },
                      "expire": {
                        "type": "integer",
                        "description": "Account expiration date (seconds since epoch). '0' means no expiration date."
                      },
                      "token-name": {
                        "type": "string",
                        "description": "The token ID part of an API token authentication id.\n\nThis alone does NOT uniquely identify the API token - use a full `Authid` for such use cases."
                      },
                      "tokenid": {
                        "type": "string",
                        "description": "API Token ID"
                      }
                    },
                    "description": "A Token Entry that contains the token-name"
                  },
                  "description": "List user's API tokens (with config digest)."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//access/access/users/access/users/{userid}/access/users/{userid}/token/access/users/{userid}/token/{token-name}": {
      "delete": {
        "summary": "Delete a user's API token",
        "description": "Delete a user's API token",
        "operationId": "delete_access_access_users_access_users_userid_access_users_userid_token_access_users_userid_token_token-name",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxUserId"
            },
            "description": "The userid parameter"
          },
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxUserId"
            },
            "description": "The userid parameter"
          },
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxUserId"
            },
            "description": "The userid parameter"
          },
          {
            "name": "token-name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The token-name parameter"
            },
            "description": "The token-name parameter"
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
              "pattern": "^[a-f0-9]{64}$"
            },
            "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Read user's API token metadata",
        "description": "Read user's API token metadata",
        "operationId": "get_access_access_users_access_users_userid_access_users_userid_token_access_users_userid_token_token-name",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxUserId"
            },
            "description": "The userid parameter"
          },
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxUserId"
            },
            "description": "The userid parameter"
          },
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxUserId"
            },
            "description": "The userid parameter"
          },
          {
            "name": "token-name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The token-name parameter"
            },
            "description": "The token-name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ApiToken properties.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "comment": {
                      "type": "string",
                      "description": "Comment."
                    },
                    "enable": {
                      "type": "boolean",
                      "description": "Enable the account (default). You can set this to '0' to disable the account."
                    },
                    "expire": {
                      "type": "integer",
                      "description": "Account expiration date (seconds since epoch). '0' means no expiration date."
                    },
                    "tokenid": {
                      "type": "string",
                      "description": "API Token ID"
                    }
                  },
                  "description": "ApiToken properties."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Generate a new API token with given metadata",
        "description": "Generate a new API token with given metadata",
        "operationId": "post_access_access_users_access_users_userid_access_users_userid_token_access_users_userid_token_token-name",
        "tags": [
          "Access Control"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "enable": {
                    "type": "boolean",
                    "description": "Enable the account (default). You can set this to '0' to disable the account.",
                    "default": true
                  },
                  "expire": {
                    "type": "integer",
                    "description": "Account expiration date (seconds since epoch). '0' means no expiration date.",
                    "minimum": 0,
                    "default": 0
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxUserId"
            },
            "description": "The userid parameter"
          },
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxUserId"
            },
            "description": "The userid parameter"
          },
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxUserId"
            },
            "description": "The userid parameter"
          },
          {
            "name": "token-name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The token-name parameter"
            },
            "description": "The token-name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "API token identifier + generated secret.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tokenid": {
                      "type": "string",
                      "description": "The API token identifier"
                    },
                    "value": {
                      "type": "string",
                      "description": "The API token secret"
                    }
                  },
                  "description": "API token identifier + generated secret."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update user's API token metadata",
        "description": "Update user's API token metadata",
        "operationId": "put_access_access_users_access_users_userid_access_users_userid_token_access_users_userid_token_token-name",
        "tags": [
          "Access Control"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "enable": {
                    "type": "boolean",
                    "description": "Enable the account (default). You can set this to '0' to disable the account.",
                    "default": true
                  },
                  "expire": {
                    "type": "integer",
                    "description": "Account expiration date (seconds since epoch). '0' means no expiration date.",
                    "minimum": 0,
                    "default": 0
                  },
                  "regenerate": {
                    "type": "boolean",
                    "description": "Regenerate token secret while keeping permissions.",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxUserId"
            },
            "description": "The userid parameter"
          },
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxUserId"
            },
            "description": "The userid parameter"
          },
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxUserId"
            },
            "description": "The userid parameter"
          },
          {
            "name": "token-name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The token-name parameter"
            },
            "description": "The token-name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Regenerated secret, if regenerate is set.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "secret": {
                      "type": "string",
                      "description": "The new API token secret"
                    }
                  },
                  "description": "Regenerated secret, if regenerate is set."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//access/access/users/access/users/{userid}/access/users/{userid}/unlock-tfa": {
      "put": {
        "summary": "Unlock a user's TFA authentication.",
        "description": "Unlock a user's TFA authentication.",
        "operationId": "put_access_access_users_access_users_userid_access_users_userid_unlock-tfa",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxUserId"
            },
            "description": "The userid parameter"
          },
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxUserId"
            },
            "description": "The userid parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Whether the user was previously locked out of any 2nd factor.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "description": "Whether the user was previously locked out of any 2nd factor."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_admin",
        "tags": [
          "Administration"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/datastore": {
      "get": {
        "summary": "Datastore list",
        "description": "Datastore list",
        "operationId": "get_admin_admin_datastore",
        "tags": [
          "Administration"
        ],
        "responses": {
          "200": {
            "description": "List the accessible datastores.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "maintenance": {
                        "type": "string",
                        "format": {
                          "additionalProperties": false,
                          "default_key": "type",
                          "description": "Maintenance mode",
                          "properties": {
                            "message": {
                              "description": "Message describing the reason for the maintenance.",
                              "maxLength": 64,
                              "optional": 1,
                              "pattern": "/^[[:^cntrl:]]*$/",
                              "type": "string"
                            },
                            "type": {
                              "description": "Maintenance type.",
                              "enum": [
                                "read-only",
                                "offline",
                                "delete",
                                "unmount"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "description": "If the datastore is in maintenance mode, information about it"
                      },
                      "mount-status": {
                        "type": "string",
                        "description": "Current mounting status of a datastore, useful for removable datastores."
                      },
                      "store": {
                        "type": "string",
                        "description": "Datastore name."
                      }
                    },
                    "description": "Basic information about a datastore."
                  },
                  "description": "List the accessible datastores."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/datastore/admin/datastore/{store}": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_admin_admin_datastore_admin_datastore_store",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/datastore/admin/datastore/{store}/admin/datastore/{store}/active-operations": {
      "get": {
        "summary": "Read datastore stats",
        "description": "Read datastore stats",
        "operationId": "get_admin_admin_datastore_admin_datastore_store_admin_datastore_store_active-operations",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/datastore/admin/datastore/{store}/admin/datastore/{store}/catalog": {
      "get": {
        "summary": "Get the entries of the given path of the catalog",
        "description": "Get the entries of the given path of the catalog",
        "operationId": "get_admin_admin_datastore_admin_datastore_store_admin_datastore_store_catalog",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "archive-name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Backup archive name.",
              "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
            },
            "description": "Backup archive name."
          },
          {
            "name": "backup-id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup ID.",
              "pattern": "^[A-Za-z0-9_][A-Za-z0-9._\\-]*$"
            },
            "description": "Backup ID."
          },
          {
            "name": "backup-time",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Backup time (Unix epoch.)",
              "minimum": 1
            },
            "description": "Backup time (Unix epoch.)"
          },
          {
            "name": "backup-type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup types.",
              "enum": [
                "vm",
                "ct",
                "host"
              ]
            },
            "description": "Backup types."
          },
          {
            "name": "filepath",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Base64 encoded path."
            },
            "description": "Base64 encoded path."
          },
          {
            "name": "ns",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Namespace.",
              "maxLength": 256,
              "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
            },
            "description": "Namespace."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/datastore/admin/datastore/{store}/admin/datastore/{store}/change-owner": {
      "post": {
        "summary": "Change owner of a backup group",
        "description": "Change owner of a backup group",
        "operationId": "post_admin_admin_datastore_admin_datastore_store_admin_datastore_store_change-owner",
        "tags": [
          "Administration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "backup-id": {
                    "type": "string",
                    "description": "Backup ID.",
                    "pattern": "^[A-Za-z0-9_][A-Za-z0-9._\\-]*$"
                  },
                  "backup-type": {
                    "type": "string",
                    "description": "Backup types.",
                    "enum": [
                      "vm",
                      "ct",
                      "host"
                    ]
                  },
                  "new-owner": {
                    "type": "string",
                    "description": "Authentication ID",
                    "minLength": 3,
                    "maxLength": 64,
                    "pattern": "^(?:(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)|(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)!(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))$"
                  },
                  "ns": {
                    "type": "string",
                    "description": "Namespace.",
                    "maxLength": 256,
                    "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
                  }
                },
                "required": [
                  "backup-id",
                  "backup-type",
                  "new-owner"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/datastore/admin/datastore/{store}/admin/datastore/{store}/download": {
      "get": {
        "summary": "Download single raw file from backup snapshot.",
        "description": "Download single raw file from backup snapshot.",
        "operationId": "get_admin_admin_datastore_admin_datastore_store_admin_datastore_store_download",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "backup-id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup ID.",
              "pattern": "^[A-Za-z0-9_][A-Za-z0-9._\\-]*$"
            },
            "description": "Backup ID."
          },
          {
            "name": "backup-time",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Backup time (Unix epoch.)",
              "minimum": 1
            },
            "description": "Backup time (Unix epoch.)"
          },
          {
            "name": "backup-type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup type.",
              "enum": [
                "vm",
                "ct",
                "host"
              ]
            },
            "description": "Backup type."
          },
          {
            "name": "file-name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup archive name.",
              "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
            },
            "description": "Backup archive name."
          },
          {
            "name": "ns",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Namespace.",
              "maxLength": 256,
              "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
            },
            "description": "Namespace."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/datastore/admin/datastore/{store}/admin/datastore/{store}/download-decoded": {
      "get": {
        "summary": "Download single decoded file from backup snapshot. Only works if it's not encrypted.",
        "description": "Download single decoded file from backup snapshot. Only works if it's not encrypted.",
        "operationId": "get_admin_admin_datastore_admin_datastore_store_admin_datastore_store_download-decoded",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "backup-id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup ID.",
              "pattern": "^[A-Za-z0-9_][A-Za-z0-9._\\-]*$"
            },
            "description": "Backup ID."
          },
          {
            "name": "backup-time",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Backup time (Unix epoch.)",
              "minimum": 1
            },
            "description": "Backup time (Unix epoch.)"
          },
          {
            "name": "backup-type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup type.",
              "enum": [
                "vm",
                "ct",
                "host"
              ]
            },
            "description": "Backup type."
          },
          {
            "name": "file-name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup archive name.",
              "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
            },
            "description": "Backup archive name."
          },
          {
            "name": "ns",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Namespace.",
              "maxLength": 256,
              "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
            },
            "description": "Namespace."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/datastore/admin/datastore/{store}/admin/datastore/{store}/files": {
      "get": {
        "summary": "List snapshot files.",
        "description": "List snapshot files.",
        "operationId": "get_admin_admin_datastore_admin_datastore_store_admin_datastore_store_files",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "backup-id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup ID.",
              "pattern": "^[A-Za-z0-9_][A-Za-z0-9._\\-]*$"
            },
            "description": "Backup ID."
          },
          {
            "name": "backup-time",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Backup time (Unix epoch.)",
              "minimum": 1
            },
            "description": "Backup time (Unix epoch.)"
          },
          {
            "name": "backup-type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup types.",
              "enum": [
                "vm",
                "ct",
                "host"
              ]
            },
            "description": "Backup types."
          },
          {
            "name": "ns",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Namespace.",
              "maxLength": 256,
              "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
            },
            "description": "Namespace."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of archive files inside a backup snapshots.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "crypt-mode": {
                        "type": "string",
                        "description": "Defines whether data is encrypted (using an AEAD cipher), only signed, or neither."
                      },
                      "filename": {
                        "type": "string",
                        "description": "Backup archive name."
                      },
                      "size": {
                        "type": "integer",
                        "description": "Archive size (from backup manifest)."
                      }
                    },
                    "description": "Basic information about archive files inside a backup snapshot."
                  },
                  "description": "Returns the list of archive files inside a backup snapshots."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/datastore/admin/datastore/{store}/admin/datastore/{store}/gc": {
      "get": {
        "summary": "Garbage collection status.",
        "description": "Garbage collection status.",
        "operationId": "get_admin_admin_datastore_admin_datastore_store_admin_datastore_store_gc",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Garbage Collection general info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "disk-bytes": {
                      "type": "integer",
                      "description": "Bytes used on disk."
                    },
                    "disk-chunks": {
                      "type": "integer",
                      "description": "Chunks used on disk."
                    },
                    "duration": {
                      "type": "integer",
                      "description": "Duration of last gc run"
                    },
                    "index-data-bytes": {
                      "type": "integer",
                      "description": "Sum of bytes referred by index files."
                    },
                    "index-file-count": {
                      "type": "integer",
                      "description": "Number of processed index files."
                    },
                    "last-run-endtime": {
                      "type": "integer",
                      "description": "Endtime of the last gc run"
                    },
                    "last-run-state": {
                      "type": "string",
                      "description": "State of the last gc run"
                    },
                    "next-run": {
                      "type": "integer",
                      "description": "Time of the next gc run"
                    },
                    "pending-bytes": {
                      "type": "integer",
                      "description": "Sum of pending bytes (pending removal - kept for safety)."
                    },
                    "pending-chunks": {
                      "type": "integer",
                      "description": "Number of pending chunks (pending removal - kept for safety)."
                    },
                    "removed-bad": {
                      "type": "integer",
                      "description": "Number of chunks marked as .bad by verify that have been removed by GC."
                    },
                    "removed-bytes": {
                      "type": "integer",
                      "description": "Sum of removed bytes."
                    },
                    "removed-chunks": {
                      "type": "integer",
                      "description": "Number of removed chunks."
                    },
                    "schedule": {
                      "type": "string",
                      "description": "Schedule of the gc job"
                    },
                    "still-bad": {
                      "type": "integer",
                      "description": "Number of chunks still marked as .bad after garbage collection."
                    },
                    "store": {
                      "type": "string",
                      "description": "Datastore"
                    },
                    "upid": {
                      "type": "string",
                      "description": "Unique Process/Task Identifier"
                    }
                  },
                  "description": "Garbage Collection general info"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Start garbage collection.",
        "description": "Start garbage collection.",
        "operationId": "post_admin_admin_datastore_admin_datastore_store_admin_datastore_store_gc",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Unique Process/Task Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Unique Process/Task Identifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/datastore/admin/datastore/{store}/admin/datastore/{store}/group-notes": {
      "get": {
        "summary": "Get \"notes\" for a backup group",
        "description": "Get \"notes\" for a backup group",
        "operationId": "get_admin_admin_datastore_admin_datastore_store_admin_datastore_store_group-notes",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "backup-id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup ID.",
              "pattern": "^[A-Za-z0-9_][A-Za-z0-9._\\-]*$"
            },
            "description": "Backup ID."
          },
          {
            "name": "backup-type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup types.",
              "enum": [
                "vm",
                "ct",
                "host"
              ]
            },
            "description": "Backup types."
          },
          {
            "name": "ns",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Namespace.",
              "maxLength": 256,
              "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
            },
            "description": "Namespace."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Set \"notes\" for a backup group",
        "description": "Set \"notes\" for a backup group",
        "operationId": "put_admin_admin_datastore_admin_datastore_store_admin_datastore_store_group-notes",
        "tags": [
          "Administration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "backup-id": {
                    "type": "string",
                    "description": "Backup ID.",
                    "pattern": "^[A-Za-z0-9_][A-Za-z0-9._\\-]*$"
                  },
                  "backup-type": {
                    "type": "string",
                    "description": "Backup types.",
                    "enum": [
                      "vm",
                      "ct",
                      "host"
                    ]
                  },
                  "notes": {
                    "type": "string",
                    "description": "A multiline text."
                  },
                  "ns": {
                    "type": "string",
                    "description": "Namespace.",
                    "maxLength": 256,
                    "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
                  }
                },
                "required": [
                  "backup-id",
                  "backup-type",
                  "notes"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/datastore/admin/datastore/{store}/admin/datastore/{store}/groups": {
      "delete": {
        "summary": "Delete backup group including all snapshots.",
        "description": "Delete backup group including all snapshots.",
        "operationId": "delete_admin_admin_datastore_admin_datastore_store_admin_datastore_store_groups",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "backup-id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup ID.",
              "pattern": "^[A-Za-z0-9_][A-Za-z0-9._\\-]*$"
            },
            "description": "Backup ID."
          },
          {
            "name": "backup-type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup types.",
              "enum": [
                "vm",
                "ct",
                "host"
              ]
            },
            "description": "Backup types."
          },
          {
            "name": "error-on-protected",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Return error when group cannot be deleted because of protected snapshots",
              "default": true
            },
            "description": "Return error when group cannot be deleted because of protected snapshots"
          },
          {
            "name": "ns",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Namespace.",
              "maxLength": 256,
              "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
            },
            "description": "Namespace."
          }
        ],
        "responses": {
          "200": {
            "description": "Statistics for removed backup groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "protected-snapshots": {
                      "type": "integer",
                      "description": "Number of entities"
                    },
                    "removed-groups": {
                      "type": "integer",
                      "description": "Number of entities"
                    },
                    "removed-snapshots": {
                      "type": "integer",
                      "description": "Number of entities"
                    }
                  },
                  "description": "Statistics for removed backup groups"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "List backup groups.",
        "description": "List backup groups.",
        "operationId": "get_admin_admin_datastore_admin_datastore_store_admin_datastore_store_groups",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "ns",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Namespace.",
              "maxLength": 256,
              "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
            },
            "description": "Namespace."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of backup groups.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "backup-count": {
                        "type": "integer",
                        "description": "Number of contained snapshots"
                      },
                      "backup-id": {
                        "type": "string",
                        "description": "Backup ID."
                      },
                      "backup-type": {
                        "type": "string",
                        "description": "Backup types."
                      },
                      "comment": {
                        "type": "string",
                        "description": "The first line from group \"notes\""
                      },
                      "files": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "Backup archive name."
                        },
                        "description": "List of contained archive files."
                      },
                      "last-backup": {
                        "type": "integer",
                        "description": "Backup time (Unix epoch.)"
                      },
                      "owner": {
                        "type": "string",
                        "description": "Authentication ID"
                      }
                    },
                    "description": "Basic information about a backup group."
                  },
                  "description": "Returns the list of backup groups."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/datastore/admin/datastore/{store}/admin/datastore/{store}/mount": {
      "post": {
        "summary": "Mount removable datastore.",
        "description": "Mount removable datastore.",
        "operationId": "post_admin_admin_datastore_admin_datastore_store_admin_datastore_store_mount",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Unique Process/Task Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Unique Process/Task Identifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/datastore/admin/datastore/{store}/admin/datastore/{store}/namespace": {
      "delete": {
        "summary": "Delete a backup namespace including all snapshots.",
        "description": "Delete a backup namespace including all snapshots.",
        "operationId": "delete_admin_admin_datastore_admin_datastore_store_admin_datastore_store_namespace",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "delete-groups",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "If set, all groups will be destroyed in the whole hierarchy below andincluding `ns`. If not set, only empty namespaces will be pruned.",
              "default": false
            },
            "description": "If set, all groups will be destroyed in the whole hierarchy below andincluding `ns`. If not set, only empty namespaces will be pruned."
          },
          {
            "name": "error-on-protected",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Return error when namespace cannot be deleted because of protected snapshots",
              "default": true
            },
            "description": "Return error when namespace cannot be deleted because of protected snapshots"
          },
          {
            "name": "ns",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Namespace.",
              "maxLength": 256,
              "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
            },
            "description": "Namespace."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "List the namespaces of a datastore.",
        "description": "List the namespaces of a datastore.",
        "operationId": "get_admin_admin_datastore_admin_datastore_store_admin_datastore_store_namespace",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "max-depth",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "How many levels of namespaces should be operated on (0 == no recursion)",
              "minimum": 0,
              "maximum": 7,
              "default": 7
            },
            "description": "How many levels of namespaces should be operated on (0 == no recursion)"
          },
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Namespace.",
              "maxLength": 256,
              "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
            },
            "description": "Namespace."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of backup namespaces.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "comment": {
                        "type": "string",
                        "description": "The first line from the namespace's \"notes\""
                      },
                      "ns": {
                        "type": "string",
                        "description": "Namespace."
                      }
                    },
                    "description": "Basic information about a backup namespace."
                  },
                  "description": "Returns the list of backup namespaces."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Create a new datastore namespace.",
        "description": "Create a new datastore namespace.",
        "operationId": "post_admin_admin_datastore_admin_datastore_store_admin_datastore_store_namespace",
        "tags": [
          "Administration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the new namespace to add at the parent.",
                    "minLength": 1,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "parent": {
                    "type": "string",
                    "description": "Namespace.",
                    "maxLength": 256,
                    "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Namespace.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Namespace."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/datastore/admin/datastore/{store}/admin/datastore/{store}/notes": {
      "get": {
        "summary": "Get \"notes\" for a specific backup",
        "description": "Get \"notes\" for a specific backup",
        "operationId": "get_admin_admin_datastore_admin_datastore_store_admin_datastore_store_notes",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "backup-id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup ID.",
              "pattern": "^[A-Za-z0-9_][A-Za-z0-9._\\-]*$"
            },
            "description": "Backup ID."
          },
          {
            "name": "backup-time",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Backup time (Unix epoch.)",
              "minimum": 1
            },
            "description": "Backup time (Unix epoch.)"
          },
          {
            "name": "backup-type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup types.",
              "enum": [
                "vm",
                "ct",
                "host"
              ]
            },
            "description": "Backup types."
          },
          {
            "name": "ns",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Namespace.",
              "maxLength": 256,
              "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
            },
            "description": "Namespace."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Set \"notes\" for a specific backup",
        "description": "Set \"notes\" for a specific backup",
        "operationId": "put_admin_admin_datastore_admin_datastore_store_admin_datastore_store_notes",
        "tags": [
          "Administration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "backup-id": {
                    "type": "string",
                    "description": "Backup ID.",
                    "pattern": "^[A-Za-z0-9_][A-Za-z0-9._\\-]*$"
                  },
                  "backup-time": {
                    "type": "integer",
                    "description": "Backup time (Unix epoch.)",
                    "minimum": 1
                  },
                  "backup-type": {
                    "type": "string",
                    "description": "Backup types.",
                    "enum": [
                      "vm",
                      "ct",
                      "host"
                    ]
                  },
                  "notes": {
                    "type": "string",
                    "description": "A multiline text."
                  },
                  "ns": {
                    "type": "string",
                    "description": "Namespace.",
                    "maxLength": 256,
                    "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
                  }
                },
                "required": [
                  "backup-id",
                  "backup-time",
                  "backup-type",
                  "notes"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/datastore/admin/datastore/{store}/admin/datastore/{store}/protected": {
      "get": {
        "summary": "Query protection for a specific backup",
        "description": "Query protection for a specific backup",
        "operationId": "get_admin_admin_datastore_admin_datastore_store_admin_datastore_store_protected",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "backup-id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup ID.",
              "pattern": "^[A-Za-z0-9_][A-Za-z0-9._\\-]*$"
            },
            "description": "Backup ID."
          },
          {
            "name": "backup-time",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Backup time (Unix epoch.)",
              "minimum": 1
            },
            "description": "Backup time (Unix epoch.)"
          },
          {
            "name": "backup-type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup types.",
              "enum": [
                "vm",
                "ct",
                "host"
              ]
            },
            "description": "Backup types."
          },
          {
            "name": "ns",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Namespace.",
              "maxLength": 256,
              "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
            },
            "description": "Namespace."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "En- or disable protection for a specific backup",
        "description": "En- or disable protection for a specific backup",
        "operationId": "put_admin_admin_datastore_admin_datastore_store_admin_datastore_store_protected",
        "tags": [
          "Administration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "backup-id": {
                    "type": "string",
                    "description": "Backup ID.",
                    "pattern": "^[A-Za-z0-9_][A-Za-z0-9._\\-]*$"
                  },
                  "backup-time": {
                    "type": "integer",
                    "description": "Backup time (Unix epoch.)",
                    "minimum": 1
                  },
                  "backup-type": {
                    "type": "string",
                    "description": "Backup types.",
                    "enum": [
                      "vm",
                      "ct",
                      "host"
                    ]
                  },
                  "ns": {
                    "type": "string",
                    "description": "Namespace.",
                    "maxLength": 256,
                    "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
                  },
                  "protected": {
                    "type": "boolean",
                    "description": "Enable/disable protection."
                  }
                },
                "required": [
                  "backup-id",
                  "backup-time",
                  "backup-type",
                  "protected"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/datastore/admin/datastore/{store}/admin/datastore/{store}/prune": {
      "post": {
        "summary": "Prune a group on the datastore",
        "description": "Prune a group on the datastore",
        "operationId": "post_admin_admin_datastore_admin_datastore_store_admin_datastore_store_prune",
        "tags": [
          "Administration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "backup-id": {
                    "type": "string",
                    "description": "Backup ID.",
                    "pattern": "^[A-Za-z0-9_][A-Za-z0-9._\\-]*$"
                  },
                  "backup-type": {
                    "type": "string",
                    "description": "Backup types.",
                    "enum": [
                      "vm",
                      "ct",
                      "host"
                    ]
                  },
                  "dry-run": {
                    "type": "boolean",
                    "description": "Just show what prune would do, but do not delete anything.",
                    "default": false
                  },
                  "keep-daily": {
                    "type": "integer",
                    "description": "Number of daily backups to keep.",
                    "minimum": 1
                  },
                  "keep-hourly": {
                    "type": "integer",
                    "description": "Number of hourly backups to keep.",
                    "minimum": 1
                  },
                  "keep-last": {
                    "type": "integer",
                    "description": "Number of backups to keep.",
                    "minimum": 1
                  },
                  "keep-monthly": {
                    "type": "integer",
                    "description": "Number of monthly backups to keep.",
                    "minimum": 1
                  },
                  "keep-weekly": {
                    "type": "integer",
                    "description": "Number of weekly backups to keep.",
                    "minimum": 1
                  },
                  "keep-yearly": {
                    "type": "integer",
                    "description": "Number of yearly backups to keep.",
                    "minimum": 1
                  },
                  "ns": {
                    "type": "string",
                    "description": "Namespace.",
                    "maxLength": 256,
                    "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
                  },
                  "use-task": {
                    "type": "boolean",
                    "description": "Spins up an asynchronous task that does the work.",
                    "default": false
                  }
                },
                "required": [
                  "backup-id",
                  "backup-type"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of snapshots and a flag indicating if there are kept or removed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "backup-id": {
                        "type": "string",
                        "description": "Backup ID."
                      },
                      "backup-time": {
                        "type": "integer",
                        "description": "Backup time (Unix epoch.)"
                      },
                      "backup-type": {
                        "type": "string",
                        "description": "Backup types."
                      },
                      "keep": {
                        "type": "boolean",
                        "description": "Keep snapshot"
                      }
                    },
                    "description": "Prune result."
                  },
                  "description": "Returns the list of snapshots and a flag indicating if there are kept or removed."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/datastore/admin/datastore/{store}/admin/datastore/{store}/prune-datastore": {
      "post": {
        "summary": "Prune the datastore",
        "description": "Prune the datastore",
        "operationId": "post_admin_admin_datastore_admin_datastore_store_admin_datastore_store_prune-datastore",
        "tags": [
          "Administration"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "dry-run": {
                    "type": "boolean",
                    "description": "Just show what prune would do, but do not delete anything.",
                    "default": false
                  },
                  "keep-daily": {
                    "type": "integer",
                    "description": "Number of daily backups to keep.",
                    "minimum": 1
                  },
                  "keep-hourly": {
                    "type": "integer",
                    "description": "Number of hourly backups to keep.",
                    "minimum": 1
                  },
                  "keep-last": {
                    "type": "integer",
                    "description": "Number of backups to keep.",
                    "minimum": 1
                  },
                  "keep-monthly": {
                    "type": "integer",
                    "description": "Number of monthly backups to keep.",
                    "minimum": 1
                  },
                  "keep-weekly": {
                    "type": "integer",
                    "description": "Number of weekly backups to keep.",
                    "minimum": 1
                  },
                  "keep-yearly": {
                    "type": "integer",
                    "description": "Number of yearly backups to keep.",
                    "minimum": 1
                  },
                  "max-depth": {
                    "type": "integer",
                    "description": "How many levels of namespaces should be operated on (0 == no recursion, empty == automatic full recursion, namespace depths reduce maximum allowed value)",
                    "minimum": 0,
                    "maximum": 7
                  },
                  "ns": {
                    "type": "string",
                    "description": "Namespace.",
                    "maxLength": 256,
                    "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Unique Process/Task Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Unique Process/Task Identifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/datastore/admin/datastore/{store}/admin/datastore/{store}/pxar-file-download": {
      "get": {
        "summary": "Download single file from pxar file of a backup snapshot. Only works if it's not encrypted.",
        "description": "Download single file from pxar file of a backup snapshot. Only works if it's not encrypted.",
        "operationId": "get_admin_admin_datastore_admin_datastore_store_admin_datastore_store_pxar-file-download",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "archive-name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Backup archive name.",
              "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
            },
            "description": "Backup archive name."
          },
          {
            "name": "backup-id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup ID.",
              "pattern": "^[A-Za-z0-9_][A-Za-z0-9._\\-]*$"
            },
            "description": "Backup ID."
          },
          {
            "name": "backup-time",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Backup time (Unix epoch.)",
              "minimum": 1
            },
            "description": "Backup time (Unix epoch.)"
          },
          {
            "name": "backup-type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup type.",
              "enum": [
                "vm",
                "ct",
                "host"
              ]
            },
            "description": "Backup type."
          },
          {
            "name": "filepath",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Base64 encoded path"
            },
            "description": "Base64 encoded path"
          },
          {
            "name": "ns",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Namespace.",
              "maxLength": 256,
              "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
            },
            "description": "Namespace."
          },
          {
            "name": "tar",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Download as .tar.zst"
            },
            "description": "Download as .tar.zst"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/datastore/admin/datastore/{store}/admin/datastore/{store}/rrd": {
      "get": {
        "summary": "Read datastore stats",
        "description": "Read datastore stats",
        "operationId": "get_admin_admin_datastore_admin_datastore_store_admin_datastore_store_rrd",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "cf",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "RRD consolidation mode",
              "enum": [
                "MAX",
                "AVERAGE"
              ]
            },
            "description": "RRD consolidation mode"
          },
          {
            "name": "timeframe",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "RRD time frame",
              "enum": [
                "hour",
                "day",
                "week",
                "month",
                "year",
                "decade"
              ]
            },
            "description": "RRD time frame"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/datastore/admin/datastore/{store}/admin/datastore/{store}/snapshots": {
      "delete": {
        "summary": "Delete backup snapshot.",
        "description": "Delete backup snapshot.",
        "operationId": "delete_admin_admin_datastore_admin_datastore_store_admin_datastore_store_snapshots",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "backup-id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup ID.",
              "pattern": "^[A-Za-z0-9_][A-Za-z0-9._\\-]*$"
            },
            "description": "Backup ID."
          },
          {
            "name": "backup-time",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Backup time (Unix epoch.)",
              "minimum": 1
            },
            "description": "Backup time (Unix epoch.)"
          },
          {
            "name": "backup-type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup types.",
              "enum": [
                "vm",
                "ct",
                "host"
              ]
            },
            "description": "Backup types."
          },
          {
            "name": "ns",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Namespace.",
              "maxLength": 256,
              "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
            },
            "description": "Namespace."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "List backup snapshots.",
        "description": "List backup snapshots.",
        "operationId": "get_admin_admin_datastore_admin_datastore_store_admin_datastore_store_snapshots",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "backup-id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Backup ID.",
              "pattern": "^[A-Za-z0-9_][A-Za-z0-9._\\-]*$"
            },
            "description": "Backup ID."
          },
          {
            "name": "backup-type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Backup types.",
              "enum": [
                "vm",
                "ct",
                "host"
              ]
            },
            "description": "Backup types."
          },
          {
            "name": "ns",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Namespace.",
              "maxLength": 256,
              "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
            },
            "description": "Namespace."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of snapshots.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "backup-id": {
                        "type": "string",
                        "description": "Backup ID."
                      },
                      "backup-time": {
                        "type": "integer",
                        "description": "Backup time (Unix epoch.)"
                      },
                      "backup-type": {
                        "type": "string",
                        "description": "Backup types."
                      },
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "files": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "Backup archive name."
                        },
                        "description": "List of contained archive files."
                      },
                      "fingerprint": {
                        "type": "string",
                        "description": "Fingerprint of encryption key"
                      },
                      "owner": {
                        "type": "string",
                        "description": "Authentication ID"
                      },
                      "protected": {
                        "type": "boolean",
                        "description": "Protection from prunes"
                      },
                      "size": {
                        "type": "integer",
                        "description": "Overall snapshot size (sum of all archive sizes)."
                      },
                      "verification": {
                        "type": "object",
                        "properties": {
                          "state": {
                            "type": "string",
                            "description": "Result of a verify operation."
                          },
                          "upid": {
                            "type": "string",
                            "description": "Unique Process/Task Identifier"
                          }
                        },
                        "description": "Task properties."
                      }
                    },
                    "description": "Basic information about backup snapshot."
                  },
                  "description": "Returns the list of snapshots."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/datastore/admin/datastore/{store}/admin/datastore/{store}/status": {
      "get": {
        "summary": "Get datastore status.",
        "description": "Get datastore status.",
        "operationId": "get_admin_admin_datastore_admin_datastore_store_admin_datastore_store_status",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "verbose",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include additional information like snapshot counts and GC status.",
              "default": false
            },
            "description": "Include additional information like snapshot counts and GC status."
          }
        ],
        "responses": {
          "200": {
            "description": "Overall Datastore status and useful information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "avail": {
                      "type": "integer",
                      "description": "Available space (bytes)."
                    },
                    "counts": {
                      "type": "object",
                      "properties": {
                        "ct": {
                          "type": "object",
                          "properties": {
                            "groups": {
                              "type": "integer",
                              "description": "The number of groups of the type."
                            },
                            "snapshots": {
                              "type": "integer",
                              "description": "The number of snapshots of the type."
                            }
                          },
                          "description": "Backup Type group/snapshot counts."
                        },
                        "host": {
                          "type": "object",
                          "properties": {
                            "groups": {
                              "type": "integer",
                              "description": "The number of groups of the type."
                            },
                            "snapshots": {
                              "type": "integer",
                              "description": "The number of snapshots of the type."
                            }
                          },
                          "description": "Backup Type group/snapshot counts."
                        },
                        "other": {
                          "type": "object",
                          "properties": {
                            "groups": {
                              "type": "integer",
                              "description": "The number of groups of the type."
                            },
                            "snapshots": {
                              "type": "integer",
                              "description": "The number of snapshots of the type."
                            }
                          },
                          "description": "Backup Type group/snapshot counts."
                        },
                        "vm": {
                          "type": "object",
                          "properties": {
                            "groups": {
                              "type": "integer",
                              "description": "The number of groups of the type."
                            },
                            "snapshots": {
                              "type": "integer",
                              "description": "The number of snapshots of the type."
                            }
                          },
                          "description": "Backup Type group/snapshot counts."
                        }
                      },
                      "description": "Counts of groups/snapshots per BackupType."
                    },
                    "gc-status": {
                      "type": "object",
                      "properties": {
                        "disk-bytes": {
                          "type": "integer",
                          "description": "Bytes used on disk."
                        },
                        "disk-chunks": {
                          "type": "integer",
                          "description": "Chunks used on disk."
                        },
                        "index-data-bytes": {
                          "type": "integer",
                          "description": "Sum of bytes referred by index files."
                        },
                        "index-file-count": {
                          "type": "integer",
                          "description": "Number of processed index files."
                        },
                        "pending-bytes": {
                          "type": "integer",
                          "description": "Sum of pending bytes (pending removal - kept for safety)."
                        },
                        "pending-chunks": {
                          "type": "integer",
                          "description": "Number of pending chunks (pending removal - kept for safety)."
                        },
                        "removed-bad": {
                          "type": "integer",
                          "description": "Number of chunks marked as .bad by verify that have been removed by GC."
                        },
                        "removed-bytes": {
                          "type": "integer",
                          "description": "Sum of removed bytes."
                        },
                        "removed-chunks": {
                          "type": "integer",
                          "description": "Number of removed chunks."
                        },
                        "still-bad": {
                          "type": "integer",
                          "description": "Number of chunks still marked as .bad after garbage collection."
                        },
                        "upid": {
                          "type": "string",
                          "description": "Unique Process/Task Identifier"
                        }
                      },
                      "description": "Garbage collection status."
                    },
                    "total": {
                      "type": "integer",
                      "description": "Total space (bytes)."
                    },
                    "used": {
                      "type": "integer",
                      "description": "Used space (bytes)."
                    }
                  },
                  "description": "Overall Datastore status and useful information."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/datastore/admin/datastore/{store}/admin/datastore/{store}/unmount": {
      "post": {
        "summary": "Unmount a removable device that is associated with the datastore",
        "description": "Unmount a removable device that is associated with the datastore",
        "operationId": "post_admin_admin_datastore_admin_datastore_store_admin_datastore_store_unmount",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Unique Process/Task Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Unique Process/Task Identifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/datastore/admin/datastore/{store}/admin/datastore/{store}/upload-backup-log": {
      "post": {
        "summary": "Upload the client backup log file into a backup snapshot ('client.log.blob').",
        "description": "Upload the client backup log file into a backup snapshot ('client.log.blob').",
        "operationId": "post_admin_admin_datastore_admin_datastore_store_admin_datastore_store_upload-backup-log",
        "tags": [
          "Administration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "backup-id": {
                    "type": "string",
                    "description": "Backup ID.",
                    "pattern": "^[A-Za-z0-9_][A-Za-z0-9._\\-]*$"
                  },
                  "backup-time": {
                    "type": "integer",
                    "description": "Backup time (Unix epoch.)",
                    "minimum": 1
                  },
                  "backup-type": {
                    "type": "string",
                    "description": "Backup type.",
                    "enum": [
                      "vm",
                      "ct",
                      "host"
                    ]
                  },
                  "ns": {
                    "type": "string",
                    "description": "Namespace.",
                    "maxLength": 256,
                    "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
                  }
                },
                "required": [
                  "backup-id",
                  "backup-time",
                  "backup-type"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/datastore/admin/datastore/{store}/admin/datastore/{store}/verify": {
      "post": {
        "summary": "Verify backups.\n\nThis function can verify a single backup snapshot, all backup from a backup group,\nor all backups in the datastore.",
        "description": "Verify backups.\n\nThis function can verify a single backup snapshot, all backup from a backup group,\nor all backups in the datastore.",
        "operationId": "post_admin_admin_datastore_admin_datastore_store_admin_datastore_store_verify",
        "tags": [
          "Administration"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "backup-id": {
                    "type": "string",
                    "description": "Backup ID.",
                    "pattern": "^[A-Za-z0-9_][A-Za-z0-9._\\-]*$"
                  },
                  "backup-time": {
                    "type": "integer",
                    "description": "Backup time (Unix epoch.)",
                    "minimum": 1
                  },
                  "backup-type": {
                    "type": "string",
                    "description": "Backup types.",
                    "enum": [
                      "vm",
                      "ct",
                      "host"
                    ]
                  },
                  "ignore-verified": {
                    "type": "boolean",
                    "description": "Do not verify backups that are already verified if their verification is not outdated.",
                    "default": true
                  },
                  "max-depth": {
                    "type": "integer",
                    "description": "How many levels of namespaces should be operated on (0 == no recursion)",
                    "minimum": 0,
                    "maximum": 7,
                    "default": 7
                  },
                  "ns": {
                    "type": "string",
                    "description": "Namespace.",
                    "maxLength": 256,
                    "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
                  },
                  "outdated-after": {
                    "type": "integer",
                    "description": "Days after that a verification becomes outdated. (0 is deprecated)'",
                    "minimum": 0
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Unique Process/Task Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Unique Process/Task Identifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/gc": {
      "get": {
        "summary": "List all GC jobs (max one per datastore)",
        "description": "List all GC jobs (max one per datastore)",
        "operationId": "get_admin_admin_gc",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "store",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Datastore name.",
              "minLength": 3,
              "maxLength": 32,
              "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
            },
            "description": "Datastore name."
          }
        ],
        "responses": {
          "200": {
            "description": "List configured gc jobs and their status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "disk-bytes": {
                        "type": "integer",
                        "description": "Bytes used on disk."
                      },
                      "disk-chunks": {
                        "type": "integer",
                        "description": "Chunks used on disk."
                      },
                      "duration": {
                        "type": "integer",
                        "description": "Duration of last gc run"
                      },
                      "index-data-bytes": {
                        "type": "integer",
                        "description": "Sum of bytes referred by index files."
                      },
                      "index-file-count": {
                        "type": "integer",
                        "description": "Number of processed index files."
                      },
                      "last-run-endtime": {
                        "type": "integer",
                        "description": "Endtime of the last gc run"
                      },
                      "last-run-state": {
                        "type": "string",
                        "description": "State of the last gc run"
                      },
                      "next-run": {
                        "type": "integer",
                        "description": "Time of the next gc run"
                      },
                      "pending-bytes": {
                        "type": "integer",
                        "description": "Sum of pending bytes (pending removal - kept for safety)."
                      },
                      "pending-chunks": {
                        "type": "integer",
                        "description": "Number of pending chunks (pending removal - kept for safety)."
                      },
                      "removed-bad": {
                        "type": "integer",
                        "description": "Number of chunks marked as .bad by verify that have been removed by GC."
                      },
                      "removed-bytes": {
                        "type": "integer",
                        "description": "Sum of removed bytes."
                      },
                      "removed-chunks": {
                        "type": "integer",
                        "description": "Number of removed chunks."
                      },
                      "schedule": {
                        "type": "string",
                        "description": "Schedule of the gc job"
                      },
                      "still-bad": {
                        "type": "integer",
                        "description": "Number of chunks still marked as .bad after garbage collection."
                      },
                      "store": {
                        "type": "string",
                        "description": "Datastore"
                      },
                      "upid": {
                        "type": "string",
                        "description": "Unique Process/Task Identifier"
                      }
                    },
                    "description": "Garbage Collection general info"
                  },
                  "description": "List configured gc jobs and their status"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/gc/admin/gc/{store}": {
      "get": {
        "summary": "List all GC jobs (max one per datastore)",
        "description": "List all GC jobs (max one per datastore)",
        "operationId": "get_admin_admin_gc_admin_gc_store",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List configured gc jobs and their status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "disk-bytes": {
                        "type": "integer",
                        "description": "Bytes used on disk."
                      },
                      "disk-chunks": {
                        "type": "integer",
                        "description": "Chunks used on disk."
                      },
                      "duration": {
                        "type": "integer",
                        "description": "Duration of last gc run"
                      },
                      "index-data-bytes": {
                        "type": "integer",
                        "description": "Sum of bytes referred by index files."
                      },
                      "index-file-count": {
                        "type": "integer",
                        "description": "Number of processed index files."
                      },
                      "last-run-endtime": {
                        "type": "integer",
                        "description": "Endtime of the last gc run"
                      },
                      "last-run-state": {
                        "type": "string",
                        "description": "State of the last gc run"
                      },
                      "next-run": {
                        "type": "integer",
                        "description": "Time of the next gc run"
                      },
                      "pending-bytes": {
                        "type": "integer",
                        "description": "Sum of pending bytes (pending removal - kept for safety)."
                      },
                      "pending-chunks": {
                        "type": "integer",
                        "description": "Number of pending chunks (pending removal - kept for safety)."
                      },
                      "removed-bad": {
                        "type": "integer",
                        "description": "Number of chunks marked as .bad by verify that have been removed by GC."
                      },
                      "removed-bytes": {
                        "type": "integer",
                        "description": "Sum of removed bytes."
                      },
                      "removed-chunks": {
                        "type": "integer",
                        "description": "Number of removed chunks."
                      },
                      "schedule": {
                        "type": "string",
                        "description": "Schedule of the gc job"
                      },
                      "still-bad": {
                        "type": "integer",
                        "description": "Number of chunks still marked as .bad after garbage collection."
                      },
                      "store": {
                        "type": "string",
                        "description": "Datastore"
                      },
                      "upid": {
                        "type": "string",
                        "description": "Unique Process/Task Identifier"
                      }
                    },
                    "description": "Garbage Collection general info"
                  },
                  "description": "List configured gc jobs and their status"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/metrics": {
      "get": {
        "summary": "List configured metric servers.",
        "description": "List configured metric servers.",
        "operationId": "get_admin_admin_metrics",
        "tags": [
          "Administration"
        ],
        "responses": {
          "200": {
            "description": "List of configured metric servers.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "enable": {
                        "type": "boolean",
                        "description": "Enables or disables the metrics server"
                      },
                      "name": {
                        "type": "string",
                        "description": "Metrics Server ID."
                      },
                      "server": {
                        "type": "string",
                        "description": "The target server"
                      },
                      "type": {
                        "type": "string",
                        "description": "Type of the metric server"
                      }
                    },
                    "description": "Basic information about a metric server that's available for all types"
                  },
                  "description": "List of configured metric servers."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/prune": {
      "get": {
        "summary": "List all prune jobs",
        "description": "List all prune jobs",
        "operationId": "get_admin_admin_prune",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "store",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Datastore name.",
              "minLength": 3,
              "maxLength": 32,
              "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
            },
            "description": "Datastore name."
          }
        ],
        "responses": {
          "200": {
            "description": "List configured jobs and their status (filtered by access)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "disable": {
                        "type": "boolean",
                        "description": "Disable this job."
                      },
                      "id": {
                        "type": "string",
                        "description": "Job ID."
                      },
                      "keep-daily": {
                        "type": "integer",
                        "description": "Number of daily backups to keep."
                      },
                      "keep-hourly": {
                        "type": "integer",
                        "description": "Number of hourly backups to keep."
                      },
                      "keep-last": {
                        "type": "integer",
                        "description": "Number of backups to keep."
                      },
                      "keep-monthly": {
                        "type": "integer",
                        "description": "Number of monthly backups to keep."
                      },
                      "keep-weekly": {
                        "type": "integer",
                        "description": "Number of weekly backups to keep."
                      },
                      "keep-yearly": {
                        "type": "integer",
                        "description": "Number of yearly backups to keep."
                      },
                      "last-run-endtime": {
                        "type": "integer",
                        "description": "Endtime of the last run."
                      },
                      "last-run-state": {
                        "type": "string",
                        "description": "Result of the last run."
                      },
                      "last-run-upid": {
                        "type": "string",
                        "description": "Task UPID of the last run."
                      },
                      "max-depth": {
                        "type": "integer",
                        "description": "How many levels of namespaces should be operated on (0 == no recursion, empty == automatic full recursion, namespace depths reduce maximum allowed value)"
                      },
                      "next-run": {
                        "type": "integer",
                        "description": "Estimated time of the next run (UNIX epoch)."
                      },
                      "ns": {
                        "type": "string",
                        "description": "Namespace."
                      },
                      "schedule": {
                        "type": "string",
                        "description": "Run prune job at specified schedule."
                      },
                      "store": {
                        "type": "string",
                        "description": "Datastore name."
                      }
                    },
                    "description": "Status of prune job"
                  },
                  "description": "List configured jobs and their status (filtered by access)"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/prune/admin/prune/{id}": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_admin_admin_prune_admin_prune_id",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/prune/admin/prune/{id}/admin/prune/{id}/run": {
      "post": {
        "summary": "Runs a prune job manually.",
        "description": "Runs a prune job manually.",
        "operationId": "post_admin_admin_prune_admin_prune_id_admin_prune_id_run",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/sync": {
      "get": {
        "summary": "List all configured sync jobs",
        "description": "List all configured sync jobs",
        "operationId": "get_admin_admin_sync",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "store",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Datastore name.",
              "minLength": 3,
              "maxLength": 32,
              "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
            },
            "description": "Datastore name."
          },
          {
            "name": "sync-direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The direction of the listed sync jobs: push, pull or all.",
              "enum": [
                "all",
                "push",
                "pull"
              ],
              "default": "pull"
            },
            "description": "The direction of the listed sync jobs: push, pull or all."
          }
        ],
        "responses": {
          "200": {
            "description": "List configured jobs and their status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "burst-in": {
                        "type": "string",
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...)."
                      },
                      "burst-out": {
                        "type": "string",
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...)."
                      },
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "encrypted-only": {
                        "type": "boolean",
                        "description": "Only synchronize encrypted backup snapshots, exclude others."
                      },
                      "group-filter": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "Group filter based on group identifier ('group:GROUP'), group type ('type:<vm|ct|host>'), or regex ('regex:RE'). Can be inverted by prepending 'exclude:'."
                        },
                        "description": "List of group filters."
                      },
                      "id": {
                        "type": "string",
                        "description": "Job ID."
                      },
                      "last-run-endtime": {
                        "type": "integer",
                        "description": "Endtime of the last run."
                      },
                      "last-run-state": {
                        "type": "string",
                        "description": "Result of the last run."
                      },
                      "last-run-upid": {
                        "type": "string",
                        "description": "Task UPID of the last run."
                      },
                      "max-depth": {
                        "type": "integer",
                        "description": "How many levels of namespaces should be operated on (0 == no recursion, empty == automatic full recursion, namespace depths reduce maximum allowed value)"
                      },
                      "next-run": {
                        "type": "integer",
                        "description": "Estimated time of the next run (UNIX epoch)."
                      },
                      "ns": {
                        "type": "string",
                        "description": "Namespace."
                      },
                      "owner": {
                        "type": "string",
                        "description": "Authentication ID"
                      },
                      "rate-in": {
                        "type": "string",
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...)."
                      },
                      "rate-out": {
                        "type": "string",
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...)."
                      },
                      "remote": {
                        "type": "string",
                        "description": "Remote ID."
                      },
                      "remote-ns": {
                        "type": "string",
                        "description": "Namespace."
                      },
                      "remote-store": {
                        "type": "string",
                        "description": "Datastore name."
                      },
                      "remove-vanished": {
                        "type": "boolean",
                        "description": "Delete vanished backups. This remove the local copy if the remote backup was deleted."
                      },
                      "resync-corrupt": {
                        "type": "boolean",
                        "description": "If the verification failed for a local snapshot, try to pull it again."
                      },
                      "schedule": {
                        "type": "string",
                        "description": "Run sync job at specified schedule."
                      },
                      "store": {
                        "type": "string",
                        "description": "Datastore name."
                      },
                      "sync-direction": {
                        "type": "string",
                        "description": "Direction of the sync job, push or pull"
                      },
                      "transfer-last": {
                        "type": "integer",
                        "description": "Limit transfer to last N snapshots (per group), skipping others"
                      },
                      "verified-only": {
                        "type": "boolean",
                        "description": "Only synchronize verified backup snapshots, exclude others."
                      }
                    },
                    "description": "Status of Sync Job"
                  },
                  "description": "List configured jobs and their status."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/sync/admin/sync/{id}": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_admin_admin_sync_admin_sync_id",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/sync/admin/sync/{id}/admin/sync/{id}/run": {
      "post": {
        "summary": "Runs the sync jobs manually.",
        "description": "Runs the sync jobs manually.",
        "operationId": "post_admin_admin_sync_admin_sync_id_admin_sync_id_run",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/traffic-control": {
      "get": {
        "summary": "Show current traffic for all traffic control rules.",
        "description": "Show current traffic for all traffic control rules.",
        "operationId": "get_admin_admin_traffic-control",
        "tags": [
          "Administration"
        ],
        "responses": {
          "200": {
            "description": "Show current traffic control rates.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "burst-in": {
                        "type": "string",
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...)."
                      },
                      "burst-out": {
                        "type": "string",
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...)."
                      },
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "cur-rate-in": {
                        "type": "integer",
                        "description": "Current ingress rate in bytes/second"
                      },
                      "cur-rate-out": {
                        "type": "integer",
                        "description": "Current egress rate in bytes/second"
                      },
                      "name": {
                        "type": "string",
                        "description": "Rule ID."
                      },
                      "network": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "IP address (IPv4 or IPv6) with netmask (CIDR notation)."
                        },
                        "description": "Rule applies to Source IPs within this networks"
                      },
                      "rate-in": {
                        "type": "string",
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...)."
                      },
                      "rate-out": {
                        "type": "string",
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...)."
                      },
                      "timeframe": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "Timeframe to specify when the rule is active."
                        },
                        "description": "Enable the rule at specific times"
                      }
                    },
                    "description": "Traffic control rule config with current rates"
                  },
                  "description": "Show current traffic control rates."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/verify": {
      "get": {
        "summary": "List all verification jobs",
        "description": "List all verification jobs",
        "operationId": "get_admin_admin_verify",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "store",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Datastore name.",
              "minLength": 3,
              "maxLength": 32,
              "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
            },
            "description": "Datastore name."
          }
        ],
        "responses": {
          "200": {
            "description": "List configured jobs and their status (filtered by access)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "id": {
                        "type": "string",
                        "description": "Job ID."
                      },
                      "ignore-verified": {
                        "type": "boolean",
                        "description": "Do not verify backups that are already verified if their verification is not outdated."
                      },
                      "last-run-endtime": {
                        "type": "integer",
                        "description": "Endtime of the last run."
                      },
                      "last-run-state": {
                        "type": "string",
                        "description": "Result of the last run."
                      },
                      "last-run-upid": {
                        "type": "string",
                        "description": "Task UPID of the last run."
                      },
                      "max-depth": {
                        "type": "integer",
                        "description": "How many levels of namespaces should be operated on (0 == no recursion)"
                      },
                      "next-run": {
                        "type": "integer",
                        "description": "Estimated time of the next run (UNIX epoch)."
                      },
                      "ns": {
                        "type": "string",
                        "description": "Namespace."
                      },
                      "outdated-after": {
                        "type": "integer",
                        "description": "Days after that a verification becomes outdated. (0 is deprecated)'"
                      },
                      "schedule": {
                        "type": "string",
                        "description": "Run verify job at specified schedule."
                      },
                      "store": {
                        "type": "string",
                        "description": "Datastore name."
                      }
                    },
                    "description": "Status of Verification Job"
                  },
                  "description": "List configured jobs and their status (filtered by access)"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/verify/admin/verify/{id}": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_admin_admin_verify_admin_verify_id",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//admin/admin/verify/admin/verify/{id}/admin/verify/{id}/run": {
      "post": {
        "summary": "Runs a verification job manually.",
        "description": "Runs a verification job manually.",
        "operationId": "post_admin_admin_verify_admin_verify_id_admin_verify_id_run",
        "tags": [
          "Administration"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//backup": {
      "get": {
        "summary": "Upgraded to backup protocol ('proxmox-backup-protocol-v1').",
        "description": "Upgraded to backup protocol ('proxmox-backup-protocol-v1').",
        "operationId": "get_backup",
        "tags": [
          "Backup Operations"
        ],
        "parameters": [
          {
            "name": "backup-id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup ID.",
              "pattern": "^[A-Za-z0-9_][A-Za-z0-9._\\-]*$"
            },
            "description": "Backup ID."
          },
          {
            "name": "backup-time",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Backup time (Unix epoch.)",
              "minimum": 1
            },
            "description": "Backup time (Unix epoch.)"
          },
          {
            "name": "backup-type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup type.",
              "enum": [
                "vm",
                "ct",
                "host"
              ]
            },
            "description": "Backup type."
          },
          {
            "name": "benchmark",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Job is a benchmark (do not keep data)."
            },
            "description": "Job is a benchmark (do not keep data)."
          },
          {
            "name": "debug",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Enable verbose debug logging."
            },
            "description": "Enable verbose debug logging."
          },
          {
            "name": "ns",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Namespace.",
              "maxLength": 256,
              "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
            },
            "description": "Namespace."
          },
          {
            "name": "store",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Datastore name.",
              "minLength": 3,
              "maxLength": 32,
              "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
            },
            "description": "Datastore name."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_config",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/access": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_config_config_access",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/access/config/access/ad": {
      "get": {
        "summary": "List configured AD realms",
        "description": "List configured AD realms",
        "operationId": "get_config_config_access_config_access_ad",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "List of configured AD realms.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "base-dn": {
                        "type": "string",
                        "description": "LDAP Domain"
                      },
                      "bind-dn": {
                        "type": "string",
                        "description": "LDAP Domain"
                      },
                      "capath": {
                        "type": "string",
                        "description": "CA certificate to use for the server. The path can point to\neither a file, or a directory. If it points to a file,\nthe PEM-formatted X.509 certificate stored at the path\nwill be added as a trusted certificate.\nIf the path points to a directory,\nthe directory replaces the system's default certificate\nstore at `/etc/ssl/certs` - Every file in the directory\nwill be loaded as a trusted certificate."
                      },
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "default": {
                        "type": "boolean",
                        "description": "True if you want this to be the default realm selected on login."
                      },
                      "filter": {
                        "type": "string",
                        "description": "Custom LDAP search filter for user sync"
                      },
                      "mode": {
                        "type": "string",
                        "description": "LDAP connection type"
                      },
                      "port": {
                        "type": "integer",
                        "description": "AD server Port"
                      },
                      "realm": {
                        "type": "string",
                        "description": "Realm name."
                      },
                      "server1": {
                        "type": "string",
                        "description": "AD server address"
                      },
                      "server2": {
                        "type": "string",
                        "description": "Fallback AD server address"
                      },
                      "sync-attributes": {
                        "type": "string",
                        "format": {
                          "additionalProperties": false,
                          "description": "Determine which LDAP attributes should be synced to which user attributes",
                          "properties": {
                            "email": {
                              "description": "Name of the LDAP attribute containing the user's email address",
                              "optional": 1,
                              "type": "string"
                            },
                            "firstname": {
                              "description": "Name of the LDAP attribute containing the user's first name",
                              "optional": 1,
                              "type": "string"
                            },
                            "lastname": {
                              "description": "Name of the LDAP attribute containing the user's last name",
                              "optional": 1,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "description": "Comma-separated list of key=value pairs for specifying which LDAP attributes map to which PBS user field. For example, to map the LDAP attribute ``mail`` to PBS's ``email``, write ``email=mail``."
                      },
                      "sync-defaults-options": {
                        "type": "string",
                        "format": {
                          "additionalProperties": false,
                          "description": "Default options for LDAP synchronization runs",
                          "properties": {
                            "enable-new": {
                              "description": "Enable new users after sync",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "remove-vanished": {
                              "description": "A semicolon-separated list of things to remove when they or the user vanishes during user synchronization. The following values are possible: ``entry`` removes the user when not returned from the sync; ``properties`` removes any  properties on existing user that do not appear in the source. ``acl`` removes ACLs when the user is not returned from the sync.",
                              "format": {
                                "description": "Array of remove-vanished options",
                                "items": {
                                  "description": "remove-vanished options",
                                  "enum": [
                                    "acl",
                                    "entry",
                                    "properties"
                                  ],
                                  "type": "string"
                                },
                                "maxLength": 1,
                                "minLength": 1,
                                "type": "array"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[acl|entry|properties, ...]"
                            }
                          },
                          "type": "object"
                        },
                        "description": "sync defaults options"
                      },
                      "user-classes": {
                        "type": "string",
                        "format": {
                          "description": "Array of user classes",
                          "items": {
                            "description": "user class",
                            "type": "string"
                          },
                          "maxLength": 1,
                          "minLength": 1,
                          "type": "array"
                        },
                        "description": "Comma-separated list of allowed objectClass values for user synchronization. For instance, if ``user-classes`` is set to ``person,user``, then user synchronization will consider all LDAP entities where ``objectClass: person`` `or` ``objectClass: user``."
                      },
                      "verify": {
                        "type": "boolean",
                        "description": "Verify server certificate"
                      }
                    },
                    "description": "AD realm configuration properties."
                  },
                  "description": "List of configured AD realms."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Create a new AD realm",
        "description": "Create a new AD realm",
        "operationId": "post_config_config_access_config_access_ad",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "base-dn": {
                    "type": "string",
                    "description": "LDAP Domain"
                  },
                  "bind-dn": {
                    "type": "string",
                    "description": "LDAP Domain"
                  },
                  "capath": {
                    "type": "string",
                    "description": "CA certificate to use for the server. The path can point to\neither a file, or a directory. If it points to a file,\nthe PEM-formatted X.509 certificate stored at the path\nwill be added as a trusted certificate.\nIf the path points to a directory,\nthe directory replaces the system's default certificate\nstore at `/etc/ssl/certs` - Every file in the directory\nwill be loaded as a trusted certificate."
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "default": {
                    "type": "boolean",
                    "description": "True if you want this to be the default realm selected on login.",
                    "default": false
                  },
                  "filter": {
                    "type": "string",
                    "description": "Custom LDAP search filter for user sync"
                  },
                  "mode": {
                    "type": "string",
                    "description": "LDAP connection type",
                    "enum": [
                      "ldap",
                      "ldap+starttls",
                      "ldaps"
                    ],
                    "default": "ldap"
                  },
                  "password": {
                    "type": "string",
                    "description": "AD bind password"
                  },
                  "port": {
                    "type": "integer",
                    "description": "AD server Port",
                    "minimum": 0,
                    "maximum": 65535
                  },
                  "realm": {
                    "type": "string",
                    "description": "Realm name.",
                    "minLength": 2,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "server1": {
                    "type": "string",
                    "description": "AD server address"
                  },
                  "server2": {
                    "type": "string",
                    "description": "Fallback AD server address"
                  },
                  "sync-attributes": {
                    "type": "string",
                    "format": {
                      "additionalProperties": false,
                      "description": "Determine which LDAP attributes should be synced to which user attributes",
                      "properties": {
                        "email": {
                          "description": "Name of the LDAP attribute containing the user's email address",
                          "optional": 1,
                          "type": "string"
                        },
                        "firstname": {
                          "description": "Name of the LDAP attribute containing the user's first name",
                          "optional": 1,
                          "type": "string"
                        },
                        "lastname": {
                          "description": "Name of the LDAP attribute containing the user's last name",
                          "optional": 1,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "description": "Comma-separated list of key=value pairs for specifying which LDAP attributes map to which PBS user field. For example, to map the LDAP attribute ``mail`` to PBS's ``email``, write ``email=mail``."
                  },
                  "sync-defaults-options": {
                    "type": "string",
                    "format": {
                      "additionalProperties": false,
                      "description": "Default options for LDAP synchronization runs",
                      "properties": {
                        "enable-new": {
                          "description": "Enable new users after sync",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "remove-vanished": {
                          "description": "A semicolon-separated list of things to remove when they or the user vanishes during user synchronization. The following values are possible: ``entry`` removes the user when not returned from the sync; ``properties`` removes any  properties on existing user that do not appear in the source. ``acl`` removes ACLs when the user is not returned from the sync.",
                          "format": {
                            "description": "Array of remove-vanished options",
                            "items": {
                              "description": "remove-vanished options",
                              "enum": [
                                "acl",
                                "entry",
                                "properties"
                              ],
                              "type": "string"
                            },
                            "maxLength": 1,
                            "minLength": 1,
                            "type": "array"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[acl|entry|properties, ...]"
                        }
                      },
                      "type": "object"
                    },
                    "description": "sync defaults options"
                  },
                  "user-classes": {
                    "type": "string",
                    "format": {
                      "description": "Array of user classes",
                      "items": {
                        "description": "user class",
                        "type": "string"
                      },
                      "maxLength": 1,
                      "minLength": 1,
                      "type": "array"
                    },
                    "description": "Comma-separated list of allowed objectClass values for user synchronization. For instance, if ``user-classes`` is set to ``person,user``, then user synchronization will consider all LDAP entities where ``objectClass: person`` `or` ``objectClass: user``.",
                    "default": "inetorgperson,posixaccount,person,user"
                  },
                  "verify": {
                    "type": "boolean",
                    "description": "Verify server certificate",
                    "default": false
                  }
                },
                "required": [
                  "realm",
                  "server1"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/access/config/access/ad/config/access/ad/{realm}": {
      "delete": {
        "summary": "Remove an LDAP realm configuration",
        "description": "Remove an LDAP realm configuration",
        "operationId": "delete_config_config_access_config_access_ad_config_access_ad_realm",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "realm",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxResourceName"
            },
            "description": "The realm parameter"
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
              "pattern": "^[a-f0-9]{64}$"
            },
            "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Read the AD realm configuration",
        "description": "Read the AD realm configuration",
        "operationId": "get_config_config_access_config_access_ad_config_access_ad_realm",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "realm",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxResourceName"
            },
            "description": "The realm parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "AD realm configuration properties.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "base-dn": {
                      "type": "string",
                      "description": "LDAP Domain"
                    },
                    "bind-dn": {
                      "type": "string",
                      "description": "LDAP Domain"
                    },
                    "capath": {
                      "type": "string",
                      "description": "CA certificate to use for the server. The path can point to\neither a file, or a directory. If it points to a file,\nthe PEM-formatted X.509 certificate stored at the path\nwill be added as a trusted certificate.\nIf the path points to a directory,\nthe directory replaces the system's default certificate\nstore at `/etc/ssl/certs` - Every file in the directory\nwill be loaded as a trusted certificate."
                    },
                    "comment": {
                      "type": "string",
                      "description": "Comment."
                    },
                    "default": {
                      "type": "boolean",
                      "description": "True if you want this to be the default realm selected on login."
                    },
                    "filter": {
                      "type": "string",
                      "description": "Custom LDAP search filter for user sync"
                    },
                    "mode": {
                      "type": "string",
                      "description": "LDAP connection type"
                    },
                    "port": {
                      "type": "integer",
                      "description": "AD server Port"
                    },
                    "realm": {
                      "type": "string",
                      "description": "Realm name."
                    },
                    "server1": {
                      "type": "string",
                      "description": "AD server address"
                    },
                    "server2": {
                      "type": "string",
                      "description": "Fallback AD server address"
                    },
                    "sync-attributes": {
                      "type": "string",
                      "format": {
                        "additionalProperties": false,
                        "description": "Determine which LDAP attributes should be synced to which user attributes",
                        "properties": {
                          "email": {
                            "description": "Name of the LDAP attribute containing the user's email address",
                            "optional": 1,
                            "type": "string"
                          },
                          "firstname": {
                            "description": "Name of the LDAP attribute containing the user's first name",
                            "optional": 1,
                            "type": "string"
                          },
                          "lastname": {
                            "description": "Name of the LDAP attribute containing the user's last name",
                            "optional": 1,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "description": "Comma-separated list of key=value pairs for specifying which LDAP attributes map to which PBS user field. For example, to map the LDAP attribute ``mail`` to PBS's ``email``, write ``email=mail``."
                    },
                    "sync-defaults-options": {
                      "type": "string",
                      "format": {
                        "additionalProperties": false,
                        "description": "Default options for LDAP synchronization runs",
                        "properties": {
                          "enable-new": {
                            "description": "Enable new users after sync",
                            "optional": 1,
                            "type": "boolean"
                          },
                          "remove-vanished": {
                            "description": "A semicolon-separated list of things to remove when they or the user vanishes during user synchronization. The following values are possible: ``entry`` removes the user when not returned from the sync; ``properties`` removes any  properties on existing user that do not appear in the source. ``acl`` removes ACLs when the user is not returned from the sync.",
                            "format": {
                              "description": "Array of remove-vanished options",
                              "items": {
                                "description": "remove-vanished options",
                                "enum": [
                                  "acl",
                                  "entry",
                                  "properties"
                                ],
                                "type": "string"
                              },
                              "maxLength": 1,
                              "minLength": 1,
                              "type": "array"
                            },
                            "optional": 1,
                            "type": "string",
                            "typetext": "[acl|entry|properties, ...]"
                          }
                        },
                        "type": "object"
                      },
                      "description": "sync defaults options"
                    },
                    "user-classes": {
                      "type": "string",
                      "format": {
                        "description": "Array of user classes",
                        "items": {
                          "description": "user class",
                          "type": "string"
                        },
                        "maxLength": 1,
                        "minLength": 1,
                        "type": "array"
                      },
                      "description": "Comma-separated list of allowed objectClass values for user synchronization. For instance, if ``user-classes`` is set to ``person,user``, then user synchronization will consider all LDAP entities where ``objectClass: person`` `or` ``objectClass: user``."
                    },
                    "verify": {
                      "type": "boolean",
                      "description": "Verify server certificate"
                    }
                  },
                  "description": "AD realm configuration properties."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update an AD realm configuration",
        "description": "Update an AD realm configuration",
        "operationId": "put_config_config_access_config_access_ad_config_access_ad_realm",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "base-dn": {
                    "type": "string",
                    "description": "LDAP Domain"
                  },
                  "bind-dn": {
                    "type": "string",
                    "description": "LDAP Domain"
                  },
                  "capath": {
                    "type": "string",
                    "description": "CA certificate to use for the server. The path can point to\neither a file, or a directory. If it points to a file,\nthe PEM-formatted X.509 certificate stored at the path\nwill be added as a trusted certificate.\nIf the path points to a directory,\nthe directory replaces the system's default certificate\nstore at `/etc/ssl/certs` - Every file in the directory\nwill be loaded as a trusted certificate."
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "default": {
                    "type": "boolean",
                    "description": "True if you want this to be the default realm selected on login.",
                    "default": false
                  },
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "filter": {
                    "type": "string",
                    "description": "Custom LDAP search filter for user sync"
                  },
                  "mode": {
                    "type": "string",
                    "description": "LDAP connection type",
                    "enum": [
                      "ldap",
                      "ldap+starttls",
                      "ldaps"
                    ],
                    "default": "ldap"
                  },
                  "password": {
                    "type": "string",
                    "description": "AD bind password"
                  },
                  "port": {
                    "type": "integer",
                    "description": "AD server Port",
                    "minimum": 0,
                    "maximum": 65535
                  },
                  "server1": {
                    "type": "string",
                    "description": "AD server address"
                  },
                  "server2": {
                    "type": "string",
                    "description": "Fallback AD server address"
                  },
                  "sync-attributes": {
                    "type": "string",
                    "format": {
                      "additionalProperties": false,
                      "description": "Determine which LDAP attributes should be synced to which user attributes",
                      "properties": {
                        "email": {
                          "description": "Name of the LDAP attribute containing the user's email address",
                          "optional": 1,
                          "type": "string"
                        },
                        "firstname": {
                          "description": "Name of the LDAP attribute containing the user's first name",
                          "optional": 1,
                          "type": "string"
                        },
                        "lastname": {
                          "description": "Name of the LDAP attribute containing the user's last name",
                          "optional": 1,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "description": "Comma-separated list of key=value pairs for specifying which LDAP attributes map to which PBS user field. For example, to map the LDAP attribute ``mail`` to PBS's ``email``, write ``email=mail``."
                  },
                  "sync-defaults-options": {
                    "type": "string",
                    "format": {
                      "additionalProperties": false,
                      "description": "Default options for LDAP synchronization runs",
                      "properties": {
                        "enable-new": {
                          "description": "Enable new users after sync",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "remove-vanished": {
                          "description": "A semicolon-separated list of things to remove when they or the user vanishes during user synchronization. The following values are possible: ``entry`` removes the user when not returned from the sync; ``properties`` removes any  properties on existing user that do not appear in the source. ``acl`` removes ACLs when the user is not returned from the sync.",
                          "format": {
                            "description": "Array of remove-vanished options",
                            "items": {
                              "description": "remove-vanished options",
                              "enum": [
                                "acl",
                                "entry",
                                "properties"
                              ],
                              "type": "string"
                            },
                            "maxLength": 1,
                            "minLength": 1,
                            "type": "array"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[acl|entry|properties, ...]"
                        }
                      },
                      "type": "object"
                    },
                    "description": "sync defaults options"
                  },
                  "user-classes": {
                    "type": "string",
                    "format": {
                      "description": "Array of user classes",
                      "items": {
                        "description": "user class",
                        "type": "string"
                      },
                      "maxLength": 1,
                      "minLength": 1,
                      "type": "array"
                    },
                    "description": "Comma-separated list of allowed objectClass values for user synchronization. For instance, if ``user-classes`` is set to ``person,user``, then user synchronization will consider all LDAP entities where ``objectClass: person`` `or` ``objectClass: user``.",
                    "default": "inetorgperson,posixaccount,person,user"
                  },
                  "verify": {
                    "type": "boolean",
                    "description": "Verify server certificate",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "realm",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxResourceName"
            },
            "description": "The realm parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "AD realm configuration properties.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "base-dn": {
                      "type": "string",
                      "description": "LDAP Domain"
                    },
                    "bind-dn": {
                      "type": "string",
                      "description": "LDAP Domain"
                    },
                    "capath": {
                      "type": "string",
                      "description": "CA certificate to use for the server. The path can point to\neither a file, or a directory. If it points to a file,\nthe PEM-formatted X.509 certificate stored at the path\nwill be added as a trusted certificate.\nIf the path points to a directory,\nthe directory replaces the system's default certificate\nstore at `/etc/ssl/certs` - Every file in the directory\nwill be loaded as a trusted certificate."
                    },
                    "comment": {
                      "type": "string",
                      "description": "Comment."
                    },
                    "default": {
                      "type": "boolean",
                      "description": "True if you want this to be the default realm selected on login."
                    },
                    "filter": {
                      "type": "string",
                      "description": "Custom LDAP search filter for user sync"
                    },
                    "mode": {
                      "type": "string",
                      "description": "LDAP connection type"
                    },
                    "port": {
                      "type": "integer",
                      "description": "AD server Port"
                    },
                    "realm": {
                      "type": "string",
                      "description": "Realm name."
                    },
                    "server1": {
                      "type": "string",
                      "description": "AD server address"
                    },
                    "server2": {
                      "type": "string",
                      "description": "Fallback AD server address"
                    },
                    "sync-attributes": {
                      "type": "string",
                      "format": {
                        "additionalProperties": false,
                        "description": "Determine which LDAP attributes should be synced to which user attributes",
                        "properties": {
                          "email": {
                            "description": "Name of the LDAP attribute containing the user's email address",
                            "optional": 1,
                            "type": "string"
                          },
                          "firstname": {
                            "description": "Name of the LDAP attribute containing the user's first name",
                            "optional": 1,
                            "type": "string"
                          },
                          "lastname": {
                            "description": "Name of the LDAP attribute containing the user's last name",
                            "optional": 1,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "description": "Comma-separated list of key=value pairs for specifying which LDAP attributes map to which PBS user field. For example, to map the LDAP attribute ``mail`` to PBS's ``email``, write ``email=mail``."
                    },
                    "sync-defaults-options": {
                      "type": "string",
                      "format": {
                        "additionalProperties": false,
                        "description": "Default options for LDAP synchronization runs",
                        "properties": {
                          "enable-new": {
                            "description": "Enable new users after sync",
                            "optional": 1,
                            "type": "boolean"
                          },
                          "remove-vanished": {
                            "description": "A semicolon-separated list of things to remove when they or the user vanishes during user synchronization. The following values are possible: ``entry`` removes the user when not returned from the sync; ``properties`` removes any  properties on existing user that do not appear in the source. ``acl`` removes ACLs when the user is not returned from the sync.",
                            "format": {
                              "description": "Array of remove-vanished options",
                              "items": {
                                "description": "remove-vanished options",
                                "enum": [
                                  "acl",
                                  "entry",
                                  "properties"
                                ],
                                "type": "string"
                              },
                              "maxLength": 1,
                              "minLength": 1,
                              "type": "array"
                            },
                            "optional": 1,
                            "type": "string",
                            "typetext": "[acl|entry|properties, ...]"
                          }
                        },
                        "type": "object"
                      },
                      "description": "sync defaults options"
                    },
                    "user-classes": {
                      "type": "string",
                      "format": {
                        "description": "Array of user classes",
                        "items": {
                          "description": "user class",
                          "type": "string"
                        },
                        "maxLength": 1,
                        "minLength": 1,
                        "type": "array"
                      },
                      "description": "Comma-separated list of allowed objectClass values for user synchronization. For instance, if ``user-classes`` is set to ``person,user``, then user synchronization will consider all LDAP entities where ``objectClass: person`` `or` ``objectClass: user``."
                    },
                    "verify": {
                      "type": "boolean",
                      "description": "Verify server certificate"
                    }
                  },
                  "description": "AD realm configuration properties."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/access/config/access/ldap": {
      "get": {
        "summary": "List configured LDAP realms",
        "description": "List configured LDAP realms",
        "operationId": "get_config_config_access_config_access_ldap",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "List of configured LDAP realms.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "base-dn": {
                        "type": "string",
                        "description": "LDAP Domain"
                      },
                      "bind-dn": {
                        "type": "string",
                        "description": "LDAP Domain"
                      },
                      "capath": {
                        "type": "string",
                        "description": "CA certificate to use for the server. The path can point to\neither a file, or a directory. If it points to a file,\nthe PEM-formatted X.509 certificate stored at the path\nwill be added as a trusted certificate.\nIf the path points to a directory,\nthe directory replaces the system's default certificate\nstore at `/etc/ssl/certs` - Every file in the directory\nwill be loaded as a trusted certificate."
                      },
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "default": {
                        "type": "boolean",
                        "description": "True if you want this to be the default realm selected on login."
                      },
                      "filter": {
                        "type": "string",
                        "description": "Custom LDAP search filter for user sync"
                      },
                      "mode": {
                        "type": "string",
                        "description": "LDAP connection type"
                      },
                      "port": {
                        "type": "integer",
                        "description": "Port"
                      },
                      "realm": {
                        "type": "string",
                        "description": "Realm name."
                      },
                      "server1": {
                        "type": "string",
                        "description": "LDAP server address"
                      },
                      "server2": {
                        "type": "string",
                        "description": "Fallback LDAP server address"
                      },
                      "sync-attributes": {
                        "type": "string",
                        "format": {
                          "additionalProperties": false,
                          "description": "Determine which LDAP attributes should be synced to which user attributes",
                          "properties": {
                            "email": {
                              "description": "Name of the LDAP attribute containing the user's email address",
                              "optional": 1,
                              "type": "string"
                            },
                            "firstname": {
                              "description": "Name of the LDAP attribute containing the user's first name",
                              "optional": 1,
                              "type": "string"
                            },
                            "lastname": {
                              "description": "Name of the LDAP attribute containing the user's last name",
                              "optional": 1,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "description": "Comma-separated list of key=value pairs for specifying which LDAP attributes map to which PBS user field. For example, to map the LDAP attribute ``mail`` to PBS's ``email``, write ``email=mail``."
                      },
                      "sync-defaults-options": {
                        "type": "string",
                        "format": {
                          "additionalProperties": false,
                          "description": "Default options for LDAP synchronization runs",
                          "properties": {
                            "enable-new": {
                              "description": "Enable new users after sync",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "remove-vanished": {
                              "description": "A semicolon-separated list of things to remove when they or the user vanishes during user synchronization. The following values are possible: ``entry`` removes the user when not returned from the sync; ``properties`` removes any  properties on existing user that do not appear in the source. ``acl`` removes ACLs when the user is not returned from the sync.",
                              "format": {
                                "description": "Array of remove-vanished options",
                                "items": {
                                  "description": "remove-vanished options",
                                  "enum": [
                                    "acl",
                                    "entry",
                                    "properties"
                                  ],
                                  "type": "string"
                                },
                                "maxLength": 1,
                                "minLength": 1,
                                "type": "array"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[acl|entry|properties, ...]"
                            }
                          },
                          "type": "object"
                        },
                        "description": "sync defaults options"
                      },
                      "user-attr": {
                        "type": "string",
                        "description": "Username attribute. Used to map a ``userid`` to LDAP to an LDAP ``dn``."
                      },
                      "user-classes": {
                        "type": "string",
                        "format": {
                          "description": "Array of user classes",
                          "items": {
                            "description": "user class",
                            "type": "string"
                          },
                          "maxLength": 1,
                          "minLength": 1,
                          "type": "array"
                        },
                        "description": "Comma-separated list of allowed objectClass values for user synchronization. For instance, if ``user-classes`` is set to ``person,user``, then user synchronization will consider all LDAP entities where ``objectClass: person`` `or` ``objectClass: user``."
                      },
                      "verify": {
                        "type": "boolean",
                        "description": "Verify server certificate"
                      }
                    },
                    "description": "LDAP configuration properties."
                  },
                  "description": "List of configured LDAP realms."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Create a new LDAP realm",
        "description": "Create a new LDAP realm",
        "operationId": "post_config_config_access_config_access_ldap",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "base-dn": {
                    "type": "string",
                    "description": "LDAP Domain"
                  },
                  "bind-dn": {
                    "type": "string",
                    "description": "LDAP Domain"
                  },
                  "capath": {
                    "type": "string",
                    "description": "CA certificate to use for the server. The path can point to\neither a file, or a directory. If it points to a file,\nthe PEM-formatted X.509 certificate stored at the path\nwill be added as a trusted certificate.\nIf the path points to a directory,\nthe directory replaces the system's default certificate\nstore at `/etc/ssl/certs` - Every file in the directory\nwill be loaded as a trusted certificate."
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "default": {
                    "type": "boolean",
                    "description": "True if you want this to be the default realm selected on login.",
                    "default": false
                  },
                  "filter": {
                    "type": "string",
                    "description": "Custom LDAP search filter for user sync"
                  },
                  "mode": {
                    "type": "string",
                    "description": "LDAP connection type",
                    "enum": [
                      "ldap",
                      "ldap+starttls",
                      "ldaps"
                    ],
                    "default": "ldap"
                  },
                  "password": {
                    "type": "string",
                    "description": "LDAP bind password"
                  },
                  "port": {
                    "type": "integer",
                    "description": "Port",
                    "minimum": 0,
                    "maximum": 65535
                  },
                  "realm": {
                    "type": "string",
                    "description": "Realm name.",
                    "minLength": 2,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "server1": {
                    "type": "string",
                    "description": "LDAP server address"
                  },
                  "server2": {
                    "type": "string",
                    "description": "Fallback LDAP server address"
                  },
                  "sync-attributes": {
                    "type": "string",
                    "format": {
                      "additionalProperties": false,
                      "description": "Determine which LDAP attributes should be synced to which user attributes",
                      "properties": {
                        "email": {
                          "description": "Name of the LDAP attribute containing the user's email address",
                          "optional": 1,
                          "type": "string"
                        },
                        "firstname": {
                          "description": "Name of the LDAP attribute containing the user's first name",
                          "optional": 1,
                          "type": "string"
                        },
                        "lastname": {
                          "description": "Name of the LDAP attribute containing the user's last name",
                          "optional": 1,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "description": "Comma-separated list of key=value pairs for specifying which LDAP attributes map to which PBS user field. For example, to map the LDAP attribute ``mail`` to PBS's ``email``, write ``email=mail``."
                  },
                  "sync-defaults-options": {
                    "type": "string",
                    "format": {
                      "additionalProperties": false,
                      "description": "Default options for LDAP synchronization runs",
                      "properties": {
                        "enable-new": {
                          "description": "Enable new users after sync",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "remove-vanished": {
                          "description": "A semicolon-separated list of things to remove when they or the user vanishes during user synchronization. The following values are possible: ``entry`` removes the user when not returned from the sync; ``properties`` removes any  properties on existing user that do not appear in the source. ``acl`` removes ACLs when the user is not returned from the sync.",
                          "format": {
                            "description": "Array of remove-vanished options",
                            "items": {
                              "description": "remove-vanished options",
                              "enum": [
                                "acl",
                                "entry",
                                "properties"
                              ],
                              "type": "string"
                            },
                            "maxLength": 1,
                            "minLength": 1,
                            "type": "array"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[acl|entry|properties, ...]"
                        }
                      },
                      "type": "object"
                    },
                    "description": "sync defaults options"
                  },
                  "user-attr": {
                    "type": "string",
                    "description": "Username attribute. Used to map a ``userid`` to LDAP to an LDAP ``dn``."
                  },
                  "user-classes": {
                    "type": "string",
                    "format": {
                      "description": "Array of user classes",
                      "items": {
                        "description": "user class",
                        "type": "string"
                      },
                      "maxLength": 1,
                      "minLength": 1,
                      "type": "array"
                    },
                    "description": "Comma-separated list of allowed objectClass values for user synchronization. For instance, if ``user-classes`` is set to ``person,user``, then user synchronization will consider all LDAP entities where ``objectClass: person`` `or` ``objectClass: user``.",
                    "default": "inetorgperson,posixaccount,person,user"
                  },
                  "verify": {
                    "type": "boolean",
                    "description": "Verify server certificate",
                    "default": false
                  }
                },
                "required": [
                  "base-dn",
                  "realm",
                  "server1",
                  "user-attr"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/access/config/access/ldap/config/access/ldap/{realm}": {
      "delete": {
        "summary": "Remove an LDAP realm configuration",
        "description": "Remove an LDAP realm configuration",
        "operationId": "delete_config_config_access_config_access_ldap_config_access_ldap_realm",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "realm",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxResourceName"
            },
            "description": "The realm parameter"
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
              "pattern": "^[a-f0-9]{64}$"
            },
            "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Read the LDAP realm configuration",
        "description": "Read the LDAP realm configuration",
        "operationId": "get_config_config_access_config_access_ldap_config_access_ldap_realm",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "realm",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxResourceName"
            },
            "description": "The realm parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "LDAP configuration properties.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "base-dn": {
                      "type": "string",
                      "description": "LDAP Domain"
                    },
                    "bind-dn": {
                      "type": "string",
                      "description": "LDAP Domain"
                    },
                    "capath": {
                      "type": "string",
                      "description": "CA certificate to use for the server. The path can point to\neither a file, or a directory. If it points to a file,\nthe PEM-formatted X.509 certificate stored at the path\nwill be added as a trusted certificate.\nIf the path points to a directory,\nthe directory replaces the system's default certificate\nstore at `/etc/ssl/certs` - Every file in the directory\nwill be loaded as a trusted certificate."
                    },
                    "comment": {
                      "type": "string",
                      "description": "Comment."
                    },
                    "default": {
                      "type": "boolean",
                      "description": "True if you want this to be the default realm selected on login."
                    },
                    "filter": {
                      "type": "string",
                      "description": "Custom LDAP search filter for user sync"
                    },
                    "mode": {
                      "type": "string",
                      "description": "LDAP connection type"
                    },
                    "port": {
                      "type": "integer",
                      "description": "Port"
                    },
                    "realm": {
                      "type": "string",
                      "description": "Realm name."
                    },
                    "server1": {
                      "type": "string",
                      "description": "LDAP server address"
                    },
                    "server2": {
                      "type": "string",
                      "description": "Fallback LDAP server address"
                    },
                    "sync-attributes": {
                      "type": "string",
                      "format": {
                        "additionalProperties": false,
                        "description": "Determine which LDAP attributes should be synced to which user attributes",
                        "properties": {
                          "email": {
                            "description": "Name of the LDAP attribute containing the user's email address",
                            "optional": 1,
                            "type": "string"
                          },
                          "firstname": {
                            "description": "Name of the LDAP attribute containing the user's first name",
                            "optional": 1,
                            "type": "string"
                          },
                          "lastname": {
                            "description": "Name of the LDAP attribute containing the user's last name",
                            "optional": 1,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "description": "Comma-separated list of key=value pairs for specifying which LDAP attributes map to which PBS user field. For example, to map the LDAP attribute ``mail`` to PBS's ``email``, write ``email=mail``."
                    },
                    "sync-defaults-options": {
                      "type": "string",
                      "format": {
                        "additionalProperties": false,
                        "description": "Default options for LDAP synchronization runs",
                        "properties": {
                          "enable-new": {
                            "description": "Enable new users after sync",
                            "optional": 1,
                            "type": "boolean"
                          },
                          "remove-vanished": {
                            "description": "A semicolon-separated list of things to remove when they or the user vanishes during user synchronization. The following values are possible: ``entry`` removes the user when not returned from the sync; ``properties`` removes any  properties on existing user that do not appear in the source. ``acl`` removes ACLs when the user is not returned from the sync.",
                            "format": {
                              "description": "Array of remove-vanished options",
                              "items": {
                                "description": "remove-vanished options",
                                "enum": [
                                  "acl",
                                  "entry",
                                  "properties"
                                ],
                                "type": "string"
                              },
                              "maxLength": 1,
                              "minLength": 1,
                              "type": "array"
                            },
                            "optional": 1,
                            "type": "string",
                            "typetext": "[acl|entry|properties, ...]"
                          }
                        },
                        "type": "object"
                      },
                      "description": "sync defaults options"
                    },
                    "user-attr": {
                      "type": "string",
                      "description": "Username attribute. Used to map a ``userid`` to LDAP to an LDAP ``dn``."
                    },
                    "user-classes": {
                      "type": "string",
                      "format": {
                        "description": "Array of user classes",
                        "items": {
                          "description": "user class",
                          "type": "string"
                        },
                        "maxLength": 1,
                        "minLength": 1,
                        "type": "array"
                      },
                      "description": "Comma-separated list of allowed objectClass values for user synchronization. For instance, if ``user-classes`` is set to ``person,user``, then user synchronization will consider all LDAP entities where ``objectClass: person`` `or` ``objectClass: user``."
                    },
                    "verify": {
                      "type": "boolean",
                      "description": "Verify server certificate"
                    }
                  },
                  "description": "LDAP configuration properties."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update an LDAP realm configuration",
        "description": "Update an LDAP realm configuration",
        "operationId": "put_config_config_access_config_access_ldap_config_access_ldap_realm",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "base-dn": {
                    "type": "string",
                    "description": "LDAP Domain"
                  },
                  "bind-dn": {
                    "type": "string",
                    "description": "LDAP Domain"
                  },
                  "capath": {
                    "type": "string",
                    "description": "CA certificate to use for the server. The path can point to\neither a file, or a directory. If it points to a file,\nthe PEM-formatted X.509 certificate stored at the path\nwill be added as a trusted certificate.\nIf the path points to a directory,\nthe directory replaces the system's default certificate\nstore at `/etc/ssl/certs` - Every file in the directory\nwill be loaded as a trusted certificate."
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "default": {
                    "type": "boolean",
                    "description": "True if you want this to be the default realm selected on login.",
                    "default": false
                  },
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "filter": {
                    "type": "string",
                    "description": "Custom LDAP search filter for user sync"
                  },
                  "mode": {
                    "type": "string",
                    "description": "LDAP connection type",
                    "enum": [
                      "ldap",
                      "ldap+starttls",
                      "ldaps"
                    ],
                    "default": "ldap"
                  },
                  "password": {
                    "type": "string",
                    "description": "LDAP bind password"
                  },
                  "port": {
                    "type": "integer",
                    "description": "Port",
                    "minimum": 0,
                    "maximum": 65535
                  },
                  "server1": {
                    "type": "string",
                    "description": "LDAP server address"
                  },
                  "server2": {
                    "type": "string",
                    "description": "Fallback LDAP server address"
                  },
                  "sync-attributes": {
                    "type": "string",
                    "format": {
                      "additionalProperties": false,
                      "description": "Determine which LDAP attributes should be synced to which user attributes",
                      "properties": {
                        "email": {
                          "description": "Name of the LDAP attribute containing the user's email address",
                          "optional": 1,
                          "type": "string"
                        },
                        "firstname": {
                          "description": "Name of the LDAP attribute containing the user's first name",
                          "optional": 1,
                          "type": "string"
                        },
                        "lastname": {
                          "description": "Name of the LDAP attribute containing the user's last name",
                          "optional": 1,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "description": "Comma-separated list of key=value pairs for specifying which LDAP attributes map to which PBS user field. For example, to map the LDAP attribute ``mail`` to PBS's ``email``, write ``email=mail``."
                  },
                  "sync-defaults-options": {
                    "type": "string",
                    "format": {
                      "additionalProperties": false,
                      "description": "Default options for LDAP synchronization runs",
                      "properties": {
                        "enable-new": {
                          "description": "Enable new users after sync",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "remove-vanished": {
                          "description": "A semicolon-separated list of things to remove when they or the user vanishes during user synchronization. The following values are possible: ``entry`` removes the user when not returned from the sync; ``properties`` removes any  properties on existing user that do not appear in the source. ``acl`` removes ACLs when the user is not returned from the sync.",
                          "format": {
                            "description": "Array of remove-vanished options",
                            "items": {
                              "description": "remove-vanished options",
                              "enum": [
                                "acl",
                                "entry",
                                "properties"
                              ],
                              "type": "string"
                            },
                            "maxLength": 1,
                            "minLength": 1,
                            "type": "array"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[acl|entry|properties, ...]"
                        }
                      },
                      "type": "object"
                    },
                    "description": "sync defaults options"
                  },
                  "user-attr": {
                    "type": "string",
                    "description": "Username attribute. Used to map a ``userid`` to LDAP to an LDAP ``dn``."
                  },
                  "user-classes": {
                    "type": "string",
                    "format": {
                      "description": "Array of user classes",
                      "items": {
                        "description": "user class",
                        "type": "string"
                      },
                      "maxLength": 1,
                      "minLength": 1,
                      "type": "array"
                    },
                    "description": "Comma-separated list of allowed objectClass values for user synchronization. For instance, if ``user-classes`` is set to ``person,user``, then user synchronization will consider all LDAP entities where ``objectClass: person`` `or` ``objectClass: user``.",
                    "default": "inetorgperson,posixaccount,person,user"
                  },
                  "verify": {
                    "type": "boolean",
                    "description": "Verify server certificate",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "realm",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxResourceName"
            },
            "description": "The realm parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "LDAP configuration properties.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "base-dn": {
                      "type": "string",
                      "description": "LDAP Domain"
                    },
                    "bind-dn": {
                      "type": "string",
                      "description": "LDAP Domain"
                    },
                    "capath": {
                      "type": "string",
                      "description": "CA certificate to use for the server. The path can point to\neither a file, or a directory. If it points to a file,\nthe PEM-formatted X.509 certificate stored at the path\nwill be added as a trusted certificate.\nIf the path points to a directory,\nthe directory replaces the system's default certificate\nstore at `/etc/ssl/certs` - Every file in the directory\nwill be loaded as a trusted certificate."
                    },
                    "comment": {
                      "type": "string",
                      "description": "Comment."
                    },
                    "default": {
                      "type": "boolean",
                      "description": "True if you want this to be the default realm selected on login."
                    },
                    "filter": {
                      "type": "string",
                      "description": "Custom LDAP search filter for user sync"
                    },
                    "mode": {
                      "type": "string",
                      "description": "LDAP connection type"
                    },
                    "port": {
                      "type": "integer",
                      "description": "Port"
                    },
                    "realm": {
                      "type": "string",
                      "description": "Realm name."
                    },
                    "server1": {
                      "type": "string",
                      "description": "LDAP server address"
                    },
                    "server2": {
                      "type": "string",
                      "description": "Fallback LDAP server address"
                    },
                    "sync-attributes": {
                      "type": "string",
                      "format": {
                        "additionalProperties": false,
                        "description": "Determine which LDAP attributes should be synced to which user attributes",
                        "properties": {
                          "email": {
                            "description": "Name of the LDAP attribute containing the user's email address",
                            "optional": 1,
                            "type": "string"
                          },
                          "firstname": {
                            "description": "Name of the LDAP attribute containing the user's first name",
                            "optional": 1,
                            "type": "string"
                          },
                          "lastname": {
                            "description": "Name of the LDAP attribute containing the user's last name",
                            "optional": 1,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "description": "Comma-separated list of key=value pairs for specifying which LDAP attributes map to which PBS user field. For example, to map the LDAP attribute ``mail`` to PBS's ``email``, write ``email=mail``."
                    },
                    "sync-defaults-options": {
                      "type": "string",
                      "format": {
                        "additionalProperties": false,
                        "description": "Default options for LDAP synchronization runs",
                        "properties": {
                          "enable-new": {
                            "description": "Enable new users after sync",
                            "optional": 1,
                            "type": "boolean"
                          },
                          "remove-vanished": {
                            "description": "A semicolon-separated list of things to remove when they or the user vanishes during user synchronization. The following values are possible: ``entry`` removes the user when not returned from the sync; ``properties`` removes any  properties on existing user that do not appear in the source. ``acl`` removes ACLs when the user is not returned from the sync.",
                            "format": {
                              "description": "Array of remove-vanished options",
                              "items": {
                                "description": "remove-vanished options",
                                "enum": [
                                  "acl",
                                  "entry",
                                  "properties"
                                ],
                                "type": "string"
                              },
                              "maxLength": 1,
                              "minLength": 1,
                              "type": "array"
                            },
                            "optional": 1,
                            "type": "string",
                            "typetext": "[acl|entry|properties, ...]"
                          }
                        },
                        "type": "object"
                      },
                      "description": "sync defaults options"
                    },
                    "user-attr": {
                      "type": "string",
                      "description": "Username attribute. Used to map a ``userid`` to LDAP to an LDAP ``dn``."
                    },
                    "user-classes": {
                      "type": "string",
                      "format": {
                        "description": "Array of user classes",
                        "items": {
                          "description": "user class",
                          "type": "string"
                        },
                        "maxLength": 1,
                        "minLength": 1,
                        "type": "array"
                      },
                      "description": "Comma-separated list of allowed objectClass values for user synchronization. For instance, if ``user-classes`` is set to ``person,user``, then user synchronization will consider all LDAP entities where ``objectClass: person`` `or` ``objectClass: user``."
                    },
                    "verify": {
                      "type": "boolean",
                      "description": "Verify server certificate"
                    }
                  },
                  "description": "LDAP configuration properties."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/access/config/access/openid": {
      "get": {
        "summary": "List configured OpenId realms",
        "description": "List configured OpenId realms",
        "operationId": "get_config_config_access_config_access_openid",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "List of configured OpenId realms.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "acr-values": {
                        "type": "string",
                        "format": {
                          "description": "Array of OpenId ACRs.",
                          "items": {
                            "description": "OpenID Authentication Context Class Reference.",
                            "pattern": "/^[^\\x00-\\x1F\\x7F <>#\"]*$/",
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "description": "OpenID ACR List"
                      },
                      "autocreate": {
                        "type": "boolean",
                        "description": "Automatically create users if they do not exist."
                      },
                      "client-id": {
                        "type": "string",
                        "description": "OpenID Client ID"
                      },
                      "client-key": {
                        "type": "string",
                        "description": "OpenID Client Key"
                      },
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "default": {
                        "type": "boolean",
                        "description": "True if you want this to be the default realm selected on login."
                      },
                      "issuer-url": {
                        "type": "string",
                        "description": "OpenID Issuer Url"
                      },
                      "prompt": {
                        "type": "string",
                        "description": "OpenID Prompt"
                      },
                      "realm": {
                        "type": "string",
                        "description": "Realm name."
                      },
                      "scopes": {
                        "type": "string",
                        "format": {
                          "description": "Array of OpenId Scopes.",
                          "items": {
                            "description": "OpenID Scope Name.",
                            "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "description": "OpenID Scope List"
                      },
                      "username-claim": {
                        "type": "string",
                        "description": "Use the value of this attribute/claim as unique user name. It is up to the identity provider to guarantee the uniqueness. The OpenID specification only guarantees that Subject ('sub') is unique. Also make sure that the user is not allowed to change that attribute by himself!"
                      }
                    },
                    "description": "OpenID configuration properties."
                  },
                  "description": "List of configured OpenId realms."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Create a new OpenId realm",
        "description": "Create a new OpenId realm",
        "operationId": "post_config_config_access_config_access_openid",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "acr-values": {
                    "type": "string",
                    "format": {
                      "description": "Array of OpenId ACRs.",
                      "items": {
                        "description": "OpenID Authentication Context Class Reference.",
                        "pattern": "/^[^\\x00-\\x1F\\x7F <>#\"]*$/",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "description": "OpenID ACR List"
                  },
                  "autocreate": {
                    "type": "boolean",
                    "description": "Automatically create users if they do not exist.",
                    "default": false
                  },
                  "client-id": {
                    "type": "string",
                    "description": "OpenID Client ID"
                  },
                  "client-key": {
                    "type": "string",
                    "description": "OpenID Client Key"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "default": {
                    "type": "boolean",
                    "description": "True if you want this to be the default realm selected on login.",
                    "default": false
                  },
                  "issuer-url": {
                    "type": "string",
                    "description": "OpenID Issuer Url"
                  },
                  "prompt": {
                    "type": "string",
                    "description": "OpenID Prompt",
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "realm": {
                    "type": "string",
                    "description": "Realm name.",
                    "minLength": 2,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "scopes": {
                    "type": "string",
                    "format": {
                      "description": "Array of OpenId Scopes.",
                      "items": {
                        "description": "OpenID Scope Name.",
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "description": "OpenID Scope List",
                    "default": "email profile"
                  },
                  "username-claim": {
                    "type": "string",
                    "description": "Use the value of this attribute/claim as unique user name. It is up to the identity provider to guarantee the uniqueness. The OpenID specification only guarantees that Subject ('sub') is unique. Also make sure that the user is not allowed to change that attribute by himself!",
                    "minLength": 1,
                    "maxLength": 64,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  }
                },
                "required": [
                  "client-id",
                  "issuer-url",
                  "realm"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/access/config/access/openid/config/access/openid/{realm}": {
      "delete": {
        "summary": "Remove a OpenID realm configuration",
        "description": "Remove a OpenID realm configuration",
        "operationId": "delete_config_config_access_config_access_openid_config_access_openid_realm",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "realm",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxResourceName"
            },
            "description": "The realm parameter"
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
              "pattern": "^[a-f0-9]{64}$"
            },
            "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Read the OpenID realm configuration",
        "description": "Read the OpenID realm configuration",
        "operationId": "get_config_config_access_config_access_openid_config_access_openid_realm",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "realm",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxResourceName"
            },
            "description": "The realm parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OpenID configuration properties.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "acr-values": {
                      "type": "string",
                      "format": {
                        "description": "Array of OpenId ACRs.",
                        "items": {
                          "description": "OpenID Authentication Context Class Reference.",
                          "pattern": "/^[^\\x00-\\x1F\\x7F <>#\"]*$/",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "description": "OpenID ACR List"
                    },
                    "autocreate": {
                      "type": "boolean",
                      "description": "Automatically create users if they do not exist."
                    },
                    "client-id": {
                      "type": "string",
                      "description": "OpenID Client ID"
                    },
                    "client-key": {
                      "type": "string",
                      "description": "OpenID Client Key"
                    },
                    "comment": {
                      "type": "string",
                      "description": "Comment."
                    },
                    "default": {
                      "type": "boolean",
                      "description": "True if you want this to be the default realm selected on login."
                    },
                    "issuer-url": {
                      "type": "string",
                      "description": "OpenID Issuer Url"
                    },
                    "prompt": {
                      "type": "string",
                      "description": "OpenID Prompt"
                    },
                    "realm": {
                      "type": "string",
                      "description": "Realm name."
                    },
                    "scopes": {
                      "type": "string",
                      "format": {
                        "description": "Array of OpenId Scopes.",
                        "items": {
                          "description": "OpenID Scope Name.",
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "description": "OpenID Scope List"
                    },
                    "username-claim": {
                      "type": "string",
                      "description": "Use the value of this attribute/claim as unique user name. It is up to the identity provider to guarantee the uniqueness. The OpenID specification only guarantees that Subject ('sub') is unique. Also make sure that the user is not allowed to change that attribute by himself!"
                    }
                  },
                  "description": "OpenID configuration properties."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update an OpenID realm configuration",
        "description": "Update an OpenID realm configuration",
        "operationId": "put_config_config_access_config_access_openid_config_access_openid_realm",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "acr-values": {
                    "type": "string",
                    "format": {
                      "description": "Array of OpenId ACRs.",
                      "items": {
                        "description": "OpenID Authentication Context Class Reference.",
                        "pattern": "/^[^\\x00-\\x1F\\x7F <>#\"]*$/",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "description": "OpenID ACR List"
                  },
                  "autocreate": {
                    "type": "boolean",
                    "description": "Automatically create users if they do not exist.",
                    "default": false
                  },
                  "client-id": {
                    "type": "string",
                    "description": "OpenID Client ID"
                  },
                  "client-key": {
                    "type": "string",
                    "description": "OpenID Client Key"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "default": {
                    "type": "boolean",
                    "description": "True if you want this to be the default realm selected on login.",
                    "default": false
                  },
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "issuer-url": {
                    "type": "string",
                    "description": "OpenID Issuer Url"
                  },
                  "prompt": {
                    "type": "string",
                    "description": "OpenID Prompt",
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "scopes": {
                    "type": "string",
                    "format": {
                      "description": "Array of OpenId Scopes.",
                      "items": {
                        "description": "OpenID Scope Name.",
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "description": "OpenID Scope List",
                    "default": "email profile"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "realm",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxResourceName"
            },
            "description": "The realm parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OpenID configuration properties.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "acr-values": {
                      "type": "string",
                      "format": {
                        "description": "Array of OpenId ACRs.",
                        "items": {
                          "description": "OpenID Authentication Context Class Reference.",
                          "pattern": "/^[^\\x00-\\x1F\\x7F <>#\"]*$/",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "description": "OpenID ACR List"
                    },
                    "autocreate": {
                      "type": "boolean",
                      "description": "Automatically create users if they do not exist."
                    },
                    "client-id": {
                      "type": "string",
                      "description": "OpenID Client ID"
                    },
                    "client-key": {
                      "type": "string",
                      "description": "OpenID Client Key"
                    },
                    "comment": {
                      "type": "string",
                      "description": "Comment."
                    },
                    "default": {
                      "type": "boolean",
                      "description": "True if you want this to be the default realm selected on login."
                    },
                    "issuer-url": {
                      "type": "string",
                      "description": "OpenID Issuer Url"
                    },
                    "prompt": {
                      "type": "string",
                      "description": "OpenID Prompt"
                    },
                    "realm": {
                      "type": "string",
                      "description": "Realm name."
                    },
                    "scopes": {
                      "type": "string",
                      "format": {
                        "description": "Array of OpenId Scopes.",
                        "items": {
                          "description": "OpenID Scope Name.",
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "description": "OpenID Scope List"
                    },
                    "username-claim": {
                      "type": "string",
                      "description": "Use the value of this attribute/claim as unique user name. It is up to the identity provider to guarantee the uniqueness. The OpenID specification only guarantees that Subject ('sub') is unique. Also make sure that the user is not allowed to change that attribute by himself!"
                    }
                  },
                  "description": "OpenID configuration properties."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/access/config/access/pam": {
      "get": {
        "summary": "Read the PAM realm configuration",
        "description": "Read the PAM realm configuration",
        "operationId": "get_config_config_access_config_access_pam",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "Built-in PAM realm configuration properties.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "comment": {
                      "type": "string",
                      "description": "Comment."
                    },
                    "default": {
                      "type": "boolean",
                      "description": "True if you want this to be the default realm selected on login."
                    },
                    "realm": {
                      "type": "string",
                      "description": "Realm name."
                    },
                    "type": {
                      "type": "string",
                      "description": "type of the realm"
                    }
                  },
                  "description": "Built-in PAM realm configuration properties."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update the PAM realm configuration",
        "description": "Update the PAM realm configuration",
        "operationId": "put_config_config_access_config_access_pam",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "default": {
                    "type": "boolean",
                    "description": "True if you want this to be the default realm selected on login.",
                    "default": false
                  },
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Built-in PAM realm configuration properties.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "comment": {
                      "type": "string",
                      "description": "Comment."
                    },
                    "default": {
                      "type": "boolean",
                      "description": "True if you want this to be the default realm selected on login."
                    },
                    "realm": {
                      "type": "string",
                      "description": "Realm name."
                    },
                    "type": {
                      "type": "string",
                      "description": "type of the realm"
                    }
                  },
                  "description": "Built-in PAM realm configuration properties."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/access/config/access/pbs": {
      "get": {
        "summary": "Read the Proxmox Backup authentication server realm configuration",
        "description": "Read the Proxmox Backup authentication server realm configuration",
        "operationId": "get_config_config_access_config_access_pbs",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "Built-in Proxmox Backup Server realm configuration properties.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "comment": {
                      "type": "string",
                      "description": "Comment."
                    },
                    "default": {
                      "type": "boolean",
                      "description": "True if you want this to be the default realm selected on login."
                    },
                    "realm": {
                      "type": "string",
                      "description": "Realm name."
                    },
                    "type": {
                      "type": "string",
                      "description": "type of the realm"
                    }
                  },
                  "description": "Built-in Proxmox Backup Server realm configuration properties."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update the Proxmox Backup authentication server realm configuration",
        "description": "Update the Proxmox Backup authentication server realm configuration",
        "operationId": "put_config_config_access_config_access_pbs",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "default": {
                    "type": "boolean",
                    "description": "True if you want this to be the default realm selected on login.",
                    "default": false
                  },
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Built-in Proxmox Backup Server realm configuration properties.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "comment": {
                      "type": "string",
                      "description": "Comment."
                    },
                    "default": {
                      "type": "boolean",
                      "description": "True if you want this to be the default realm selected on login."
                    },
                    "realm": {
                      "type": "string",
                      "description": "Realm name."
                    },
                    "type": {
                      "type": "string",
                      "description": "type of the realm"
                    }
                  },
                  "description": "Built-in Proxmox Backup Server realm configuration properties."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/access/config/access/tfa": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_config_config_access_config_access_tfa",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/access/config/access/tfa/config/access/tfa/webauthn": {
      "get": {
        "summary": "Get the TFA configuration.",
        "description": "Get the TFA configuration.",
        "operationId": "get_config_config_access_config_access_tfa_config_access_tfa_webauthn",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "Server side webauthn server configuration.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "allow-subdomains": {
                      "type": "boolean",
                      "description": "If an `origin` is specified, this specifies whether subdomains should be considered valid\nas well.\n\nMay be changed at any time.\n\nDefaults to `true`."
                    },
                    "id": {
                      "type": "string",
                      "description": "Relying party ID. Must be the domain name without protocol, port or location.\n\nChanging this *will* break existing credentials."
                    },
                    "origin": {
                      "type": "string",
                      "description": "Site origin. Must be a `https://` URL (or `http://localhost`). Should contain the address\nusers type in their browsers to access the web interface.\n\nChanging this *may* break existing credentials."
                    },
                    "rp": {
                      "type": "string",
                      "description": "Relying party name. Any text identifier.\n\nChanging this *may* break existing credentials."
                    }
                  },
                  "description": "Server side webauthn server configuration."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update the TFA configuration.",
        "description": "Update the TFA configuration.",
        "operationId": "put_config_config_access_config_access_tfa_config_access_tfa_webauthn",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "allow-subdomains": {
                    "type": "boolean",
                    "description": "If an `origin` is specified, this specifies whether subdomains should be considered valid\nas well.\n\nMay be changed at any time.\n\nDefaults to `true`."
                  },
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "id": {
                    "type": "string",
                    "description": "Relying party ID. Must be the domain name without protocol, port or location.\n\nChanging this *will* break existing credentials."
                  },
                  "origin": {
                    "type": "string",
                    "description": "Site origin. Must be a `https://` URL (or `http://localhost`). Should contain the address\nusers type in their browsers to access the web interface.\n\nChanging this *may* break existing credentials."
                  },
                  "rp": {
                    "type": "string",
                    "description": "Relying party name. Any text identifier.\n\nChanging this *may* break existing credentials."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/acme": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_config_config_acme",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/acme/config/acme/account": {
      "get": {
        "summary": "List ACME accounts.",
        "description": "List ACME accounts.",
        "operationId": "get_config_config_acme_config_acme_account",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "List of ACME accounts.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "ACME account name."
                      }
                    },
                    "description": "An ACME Account entry.\n\nCurrently only contains a 'name' property."
                  },
                  "description": "List of ACME accounts."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Register an ACME account.",
        "description": "Register an ACME account.",
        "operationId": "post_config_config_acme_config_acme_account",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contact": {
                    "type": "string",
                    "description": "List of email addresses."
                  },
                  "directory": {
                    "type": "string",
                    "description": "The ACME Directory."
                  },
                  "eab_hmac_key": {
                    "type": "string",
                    "description": "HMAC Key for External Account Binding."
                  },
                  "eab_kid": {
                    "type": "string",
                    "description": "Key Identifier for External Account Binding."
                  },
                  "name": {
                    "type": "string",
                    "description": "ACME account name.",
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "tos_url": {
                    "type": "string",
                    "description": "URL of CA TermsOfService - setting this indicates agreement."
                  }
                },
                "required": [
                  "contact"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/acme/config/acme/account/config/acme/account/{name}": {
      "delete": {
        "summary": "Deactivate an ACME account.",
        "description": "Deactivate an ACME account.",
        "operationId": "delete_config_config_acme_config_acme_account_config_acme_account_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Delete account data even if the server refuses to deactivate the account.",
              "default": false
            },
            "description": "Delete account data even if the server refuses to deactivate the account."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Return existing ACME account information.",
        "description": "Return existing ACME account information.",
        "operationId": "get_config_config_acme_config_acme_account_config_acme_account_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ACME Account information.\n\nThis is what we return via the API.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "account": {
                      "type": "object",
                      "description": "Raw account data."
                    },
                    "directory": {
                      "type": "string",
                      "description": "The ACME directory URL the account was created at."
                    },
                    "location": {
                      "type": "string",
                      "description": "The account's own URL within the ACME directory."
                    },
                    "tos": {
                      "type": "string",
                      "description": "The ToS URL, if the user agreed to one."
                    }
                  },
                  "description": "ACME Account information.\n\nThis is what we return via the API."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update an ACME account.",
        "description": "Update an ACME account.",
        "operationId": "put_config_config_acme_config_acme_account_config_acme_account_name",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contact": {
                    "type": "string",
                    "description": "List of email addresses."
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/acme/config/acme/challenge-schema": {
      "get": {
        "summary": "Get named known ACME directory endpoints.",
        "description": "Get named known ACME directory endpoints.",
        "operationId": "get_config_config_acme_config_acme_challenge-schema",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "ACME Challenge Plugin Shema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Plugin ID."
                      },
                      "name": {
                        "type": "string",
                        "description": "Human readable name, falls back to id."
                      },
                      "schema": {
                        "type": "object",
                        "description": "The plugin's parameter schema."
                      },
                      "type": {
                        "type": "string",
                        "description": "Plugin Type."
                      }
                    },
                    "description": "Schema for an ACME challenge plugin."
                  },
                  "description": "ACME Challenge Plugin Shema."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/acme/config/acme/directories": {
      "get": {
        "summary": "Get named known ACME directory endpoints.",
        "description": "Get named known ACME directory endpoints.",
        "operationId": "get_config_config_acme_config_acme_directories",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "List of known ACME directories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The ACME directory's name."
                      },
                      "url": {
                        "type": "string",
                        "description": "The ACME directory's endpoint URL."
                      }
                    },
                    "description": "An ACME directory endpoint with a name and URL."
                  },
                  "description": "List of known ACME directories."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/acme/config/acme/plugins": {
      "get": {
        "summary": "List ACME challenge plugins.",
        "description": "List ACME challenge plugins.",
        "operationId": "get_config_config_acme_config_acme_plugins",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "List of ACME plugin configurations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "api": {
                        "type": "string",
                        "description": "DNS Api name."
                      },
                      "data": {
                        "type": "string",
                        "description": "Plugin configuration data."
                      },
                      "disable": {
                        "type": "boolean",
                        "description": "Flag to disable the config."
                      },
                      "plugin": {
                        "type": "string",
                        "description": "Plugin ID."
                      },
                      "type": {
                        "type": "string",
                        "description": "Plugin type."
                      },
                      "validation-delay": {
                        "type": "integer",
                        "description": "Extra delay in seconds to wait before requesting validation.\n\nAllows to cope with long TTL of DNS records."
                      }
                    },
                    "description": "The API's format is inherited from PVE/PMG:"
                  },
                  "description": "List of ACME plugin configurations."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Add ACME plugin configuration.",
        "description": "Add ACME plugin configuration.",
        "operationId": "post_config_config_acme_config_acme_plugins",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "api": {
                    "type": "string",
                    "description": "DNS API Plugin Id."
                  },
                  "data": {
                    "type": "string",
                    "description": "DNS plugin data (base64 encoded with padding)."
                  },
                  "disable": {
                    "type": "boolean",
                    "description": "Flag to disable the config.",
                    "default": false
                  },
                  "id": {
                    "type": "string",
                    "description": "ACME Challenge Plugin ID.",
                    "minLength": 1,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "type": {
                    "type": "string",
                    "description": "The ACME challenge plugin type."
                  },
                  "validation-delay": {
                    "type": "integer",
                    "description": "Extra delay in seconds to wait before requesting validation.\n\nAllows to cope with long TTL of DNS records.",
                    "minimum": 0,
                    "maximum": 172800,
                    "default": 30
                  }
                },
                "required": [
                  "api",
                  "data",
                  "id",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/acme/config/acme/plugins/config/acme/plugins/{id}": {
      "delete": {
        "summary": "Delete an ACME plugin configuration.",
        "description": "Delete an ACME plugin configuration.",
        "operationId": "delete_config_config_acme_config_acme_plugins_config_acme_plugins_id",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "List ACME challenge plugins.",
        "description": "List ACME challenge plugins.",
        "operationId": "get_config_config_acme_config_acme_plugins_config_acme_plugins_id",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The API's format is inherited from PVE/PMG:",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "api": {
                      "type": "string",
                      "description": "DNS Api name."
                    },
                    "data": {
                      "type": "string",
                      "description": "Plugin configuration data."
                    },
                    "disable": {
                      "type": "boolean",
                      "description": "Flag to disable the config."
                    },
                    "plugin": {
                      "type": "string",
                      "description": "Plugin ID."
                    },
                    "type": {
                      "type": "string",
                      "description": "Plugin type."
                    },
                    "validation-delay": {
                      "type": "integer",
                      "description": "Extra delay in seconds to wait before requesting validation.\n\nAllows to cope with long TTL of DNS records."
                    }
                  },
                  "description": "The API's format is inherited from PVE/PMG:"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update an ACME plugin configuration.",
        "description": "Update an ACME plugin configuration.",
        "operationId": "put_config_config_acme_config_acme_plugins_config_acme_plugins_id",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "api": {
                    "type": "string",
                    "description": "DNS API Plugin Id."
                  },
                  "data": {
                    "type": "string",
                    "description": "DNS plugin data (base64 encoded with padding)."
                  },
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "digest": {
                    "type": "string",
                    "description": "Digest to protect against concurrent updates"
                  },
                  "disable": {
                    "type": "boolean",
                    "description": "Flag to disable the config.",
                    "default": false
                  },
                  "validation-delay": {
                    "type": "integer",
                    "description": "Extra delay in seconds to wait before requesting validation.\n\nAllows to cope with long TTL of DNS records.",
                    "minimum": 0,
                    "maximum": 172800,
                    "default": 30
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/acme/config/acme/tos": {
      "get": {
        "summary": "Get the Terms of Service URL for an ACME directory.",
        "description": "Get the Terms of Service URL for an ACME directory.",
        "operationId": "get_config_config_acme_config_acme_tos",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "directory",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ACME Directory."
            },
            "description": "The ACME Directory."
          }
        ],
        "responses": {
          "200": {
            "description": "The ACME Directory's ToS URL, if any.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "The ACME Directory's ToS URL, if any."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/changer": {
      "get": {
        "summary": "List changers",
        "description": "List changers",
        "operationId": "get_config_config_changer",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "The list of configured changers (with config digest).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "eject-before-unload": {
                        "type": "boolean",
                        "description": "if set to true, tapes are ejected manually before unloading"
                      },
                      "export-slots": {
                        "type": "string",
                        "format": {
                          "description": "Slot list.",
                          "items": {
                            "description": "Slot number",
                            "minimum": 1,
                            "type": "integer"
                          },
                          "type": "array"
                        },
                        "description": "A list of slot numbers, comma separated. Those slots are reserved for\nImport/Export, i.e. any media in those slots are considered to be\n'offline'.\n"
                      },
                      "name": {
                        "type": "string",
                        "description": "Tape Changer Identifier."
                      },
                      "path": {
                        "type": "string",
                        "description": "Path to Linux generic SCSI device (e.g. '/dev/sg4')"
                      }
                    },
                    "description": "SCSI tape changer"
                  },
                  "description": "The list of configured changers (with config digest)."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Create a new changer device",
        "description": "Create a new changer device",
        "operationId": "post_config_config_changer",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "eject-before-unload": {
                    "type": "boolean",
                    "description": "if set to true, tapes are ejected manually before unloading",
                    "default": false
                  },
                  "export-slots": {
                    "type": "string",
                    "format": {
                      "description": "Slot list.",
                      "items": {
                        "description": "Slot number",
                        "minimum": 1,
                        "type": "integer"
                      },
                      "type": "array"
                    },
                    "description": "A list of slot numbers, comma separated. Those slots are reserved for\nImport/Export, i.e. any media in those slots are considered to be\n'offline'.\n"
                  },
                  "name": {
                    "type": "string",
                    "description": "Tape Changer Identifier.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "path": {
                    "type": "string",
                    "description": "Path to Linux generic SCSI device (e.g. '/dev/sg4')"
                  }
                },
                "required": [
                  "name",
                  "path"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/changer/config/changer/{name}": {
      "delete": {
        "summary": "Delete a tape changer configuration",
        "description": "Delete a tape changer configuration",
        "operationId": "delete_config_config_changer_config_changer_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Get tape changer configuration",
        "description": "Get tape changer configuration",
        "operationId": "get_config_config_changer_config_changer_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "SCSI tape changer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "eject-before-unload": {
                      "type": "boolean",
                      "description": "if set to true, tapes are ejected manually before unloading"
                    },
                    "export-slots": {
                      "type": "string",
                      "format": {
                        "description": "Slot list.",
                        "items": {
                          "description": "Slot number",
                          "minimum": 1,
                          "type": "integer"
                        },
                        "type": "array"
                      },
                      "description": "A list of slot numbers, comma separated. Those slots are reserved for\nImport/Export, i.e. any media in those slots are considered to be\n'offline'.\n"
                    },
                    "name": {
                      "type": "string",
                      "description": "Tape Changer Identifier."
                    },
                    "path": {
                      "type": "string",
                      "description": "Path to Linux generic SCSI device (e.g. '/dev/sg4')"
                    }
                  },
                  "description": "SCSI tape changer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update a tape changer configuration",
        "description": "Update a tape changer configuration",
        "operationId": "put_config_config_changer_config_changer_name",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "eject-before-unload": {
                    "type": "boolean",
                    "description": "if set to true, tapes are ejected manually before unloading",
                    "default": false
                  },
                  "export-slots": {
                    "type": "string",
                    "format": {
                      "description": "Slot list.",
                      "items": {
                        "description": "Slot number",
                        "minimum": 1,
                        "type": "integer"
                      },
                      "type": "array"
                    },
                    "description": "A list of slot numbers, comma separated. Those slots are reserved for\nImport/Export, i.e. any media in those slots are considered to be\n'offline'.\n"
                  },
                  "path": {
                    "type": "string",
                    "description": "Path to Linux generic SCSI device (e.g. '/dev/sg4')"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/datastore": {
      "get": {
        "summary": "List all datastores",
        "description": "List all datastores",
        "operationId": "get_config_config_datastore",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "List the configured datastores (with config digest).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "backing-device": {
                        "type": "string",
                        "description": "The UUID of the filesystem partition for removable datastores."
                      },
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "gc-schedule": {
                        "type": "string",
                        "description": "Run garbage collection job at specified schedule."
                      },
                      "keep-daily": {
                        "type": "integer",
                        "description": "Number of daily backups to keep."
                      },
                      "keep-hourly": {
                        "type": "integer",
                        "description": "Number of hourly backups to keep."
                      },
                      "keep-last": {
                        "type": "integer",
                        "description": "Number of backups to keep."
                      },
                      "keep-monthly": {
                        "type": "integer",
                        "description": "Number of monthly backups to keep."
                      },
                      "keep-weekly": {
                        "type": "integer",
                        "description": "Number of weekly backups to keep."
                      },
                      "keep-yearly": {
                        "type": "integer",
                        "description": "Number of yearly backups to keep."
                      },
                      "maintenance-mode": {
                        "type": "string",
                        "format": {
                          "additionalProperties": false,
                          "default_key": "type",
                          "description": "Maintenance mode",
                          "properties": {
                            "message": {
                              "description": "Message describing the reason for the maintenance.",
                              "maxLength": 64,
                              "optional": 1,
                              "pattern": "/^[[:^cntrl:]]*$/",
                              "type": "string"
                            },
                            "type": {
                              "description": "Maintenance type.",
                              "enum": [
                                "read-only",
                                "offline",
                                "delete",
                                "unmount"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "description": "Maintenance mode, type is either 'offline' or 'read-only', message should be enclosed in \""
                      },
                      "name": {
                        "type": "string",
                        "description": "Datastore name."
                      },
                      "notification-mode": {
                        "type": "string",
                        "description": "Configure how notifications for this datastore should be sent.\n`legacy-sendmail` sends email notifications to the user configured\nin `notify-user` via the system's `sendmail` executable.\n`notification-system` emits matchable notification events to the\nnotification system."
                      },
                      "notify": {
                        "type": "string",
                        "format": {
                          "additionalProperties": false,
                          "description": "Datastore notify settings",
                          "properties": {
                            "gc": {
                              "description": "When do we send notifications",
                              "enum": [
                                "never",
                                "always",
                                "error"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "prune": {
                              "description": "When do we send notifications",
                              "enum": [
                                "never",
                                "always",
                                "error"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "sync": {
                              "description": "When do we send notifications",
                              "enum": [
                                "never",
                                "always",
                                "error"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "verify": {
                              "description": "When do we send notifications",
                              "enum": [
                                "never",
                                "always",
                                "error"
                              ],
                              "optional": 1,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "description": "Datastore notification setting, enum can be one of 'always', 'never', or 'error'."
                      },
                      "notify-user": {
                        "type": "string",
                        "description": "User ID"
                      },
                      "path": {
                        "type": "string",
                        "description": "Either the absolute path to the datastore directory, or a relative on-device path for removable datastores."
                      },
                      "prune-schedule": {
                        "type": "string",
                        "description": "Run prune job at specified schedule."
                      },
                      "tuning": {
                        "type": "string",
                        "format": {
                          "additionalProperties": false,
                          "description": "Datastore tuning options",
                          "properties": {
                            "chunk-order": {
                              "default": "inode",
                              "description": "The order to sort chunks by",
                              "enum": [
                                "none",
                                "inode"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "gc-atime-cutoff": {
                              "default": 1445,
                              "description": "Cutoff (in minutes) for chunk cleanup atime check in garbage collection phase 2 (default 24h 5m)",
                              "maximum": 2880,
                              "minimum": 1,
                              "optional": 1,
                              "type": "integer"
                            },
                            "gc-atime-safety-check": {
                              "default": true,
                              "description": "Check filesystem atime updates are honored during store creation and garbage collection",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "gc-cache-capacity": {
                              "default": 1048576,
                              "description": "Garbage collection chunk digest cache capacity",
                              "maximum": 8388608,
                              "minimum": 0,
                              "optional": 1,
                              "type": "integer"
                            },
                            "sync-level": {
                              "default": "filesystem",
                              "description": "The level of syncing that is done when writing into a datastore.",
                              "enum": [
                                "none",
                                "file",
                                "filesystem"
                              ],
                              "optional": 1,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "description": "Datastore tuning options"
                      },
                      "verify-new": {
                        "type": "boolean",
                        "description": "If enabled, all new backups will be verified right after completion."
                      }
                    },
                    "description": "Datastore configuration properties."
                  },
                  "description": "List the configured datastores (with config digest)."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Create new datastore config.",
        "description": "Create new datastore config.",
        "operationId": "post_config_config_datastore",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "backing-device": {
                    "type": "string",
                    "description": "The UUID of the filesystem partition for removable datastores.",
                    "pattern": "^[0-9a-f]{8}(?:-[0-9a-f]{4}){3}-[0-9a-f]{12}$"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "gc-schedule": {
                    "type": "string",
                    "description": "Run garbage collection job at specified schedule."
                  },
                  "keep-daily": {
                    "type": "integer",
                    "description": "Number of daily backups to keep.",
                    "minimum": 1
                  },
                  "keep-hourly": {
                    "type": "integer",
                    "description": "Number of hourly backups to keep.",
                    "minimum": 1
                  },
                  "keep-last": {
                    "type": "integer",
                    "description": "Number of backups to keep.",
                    "minimum": 1
                  },
                  "keep-monthly": {
                    "type": "integer",
                    "description": "Number of monthly backups to keep.",
                    "minimum": 1
                  },
                  "keep-weekly": {
                    "type": "integer",
                    "description": "Number of weekly backups to keep.",
                    "minimum": 1
                  },
                  "keep-yearly": {
                    "type": "integer",
                    "description": "Number of yearly backups to keep.",
                    "minimum": 1
                  },
                  "maintenance-mode": {
                    "type": "string",
                    "format": {
                      "additionalProperties": false,
                      "default_key": "type",
                      "description": "Maintenance mode",
                      "properties": {
                        "message": {
                          "description": "Message describing the reason for the maintenance.",
                          "maxLength": 64,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "type": {
                          "description": "Maintenance type.",
                          "enum": [
                            "read-only",
                            "offline",
                            "delete",
                            "unmount"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "description": "Maintenance mode, type is either 'offline' or 'read-only', message should be enclosed in \""
                  },
                  "name": {
                    "type": "string",
                    "description": "Datastore name.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "notification-mode": {
                    "type": "string",
                    "description": "Configure how notifications for this datastore should be sent.\n`legacy-sendmail` sends email notifications to the user configured\nin `notify-user` via the system's `sendmail` executable.\n`notification-system` emits matchable notification events to the\nnotification system.",
                    "enum": [
                      "legacy-sendmail",
                      "notification-system"
                    ],
                    "default": "legacy-sendmail"
                  },
                  "notify": {
                    "type": "string",
                    "format": {
                      "additionalProperties": false,
                      "description": "Datastore notify settings",
                      "properties": {
                        "gc": {
                          "description": "When do we send notifications",
                          "enum": [
                            "never",
                            "always",
                            "error"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "prune": {
                          "description": "When do we send notifications",
                          "enum": [
                            "never",
                            "always",
                            "error"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "sync": {
                          "description": "When do we send notifications",
                          "enum": [
                            "never",
                            "always",
                            "error"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "verify": {
                          "description": "When do we send notifications",
                          "enum": [
                            "never",
                            "always",
                            "error"
                          ],
                          "optional": 1,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "description": "Datastore notification setting, enum can be one of 'always', 'never', or 'error'."
                  },
                  "notify-user": {
                    "type": "string",
                    "description": "User ID",
                    "minLength": 3,
                    "maxLength": 64,
                    "pattern": "^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "path": {
                    "type": "string",
                    "description": "Either the absolute path to the datastore directory, or a relative on-device path for removable datastores.",
                    "minLength": 1,
                    "maxLength": 4096
                  },
                  "prune-schedule": {
                    "type": "string",
                    "description": "Run prune job at specified schedule."
                  },
                  "reuse-datastore": {
                    "type": "boolean",
                    "description": "Re-use existing datastore directory.",
                    "default": false
                  },
                  "tuning": {
                    "type": "string",
                    "format": {
                      "additionalProperties": false,
                      "description": "Datastore tuning options",
                      "properties": {
                        "chunk-order": {
                          "default": "inode",
                          "description": "The order to sort chunks by",
                          "enum": [
                            "none",
                            "inode"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "gc-atime-cutoff": {
                          "default": 1445,
                          "description": "Cutoff (in minutes) for chunk cleanup atime check in garbage collection phase 2 (default 24h 5m)",
                          "maximum": 2880,
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "gc-atime-safety-check": {
                          "default": true,
                          "description": "Check filesystem atime updates are honored during store creation and garbage collection",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "gc-cache-capacity": {
                          "default": 1048576,
                          "description": "Garbage collection chunk digest cache capacity",
                          "maximum": 8388608,
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "sync-level": {
                          "default": "filesystem",
                          "description": "The level of syncing that is done when writing into a datastore.",
                          "enum": [
                            "none",
                            "file",
                            "filesystem"
                          ],
                          "optional": 1,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "description": "Datastore tuning options"
                  },
                  "verify-new": {
                    "type": "boolean",
                    "description": "If enabled, all new backups will be verified right after completion."
                  }
                },
                "required": [
                  "name",
                  "path"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/datastore/config/datastore/{name}": {
      "delete": {
        "summary": "Remove a datastore configuration and optionally delete all its contents.",
        "description": "Remove a datastore configuration and optionally delete all its contents.",
        "operationId": "delete_config_config_datastore_config_datastore_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          },
          {
            "name": "destroy-data",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Delete the datastore's underlying contents",
              "default": false
            },
            "description": "Delete the datastore's underlying contents"
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
              "pattern": "^[a-f0-9]{64}$"
            },
            "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications."
          },
          {
            "name": "keep-job-configs",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "If enabled, the job configurations related to this datastore will be kept.",
              "default": false
            },
            "description": "If enabled, the job configurations related to this datastore will be kept."
          }
        ],
        "responses": {
          "200": {
            "description": "Unique Process/Task Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Unique Process/Task Identifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Read a datastore configuration.",
        "description": "Read a datastore configuration.",
        "operationId": "get_config_config_datastore_config_datastore_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Datastore configuration properties.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "backing-device": {
                      "type": "string",
                      "description": "The UUID of the filesystem partition for removable datastores."
                    },
                    "comment": {
                      "type": "string",
                      "description": "Comment."
                    },
                    "gc-schedule": {
                      "type": "string",
                      "description": "Run garbage collection job at specified schedule."
                    },
                    "keep-daily": {
                      "type": "integer",
                      "description": "Number of daily backups to keep."
                    },
                    "keep-hourly": {
                      "type": "integer",
                      "description": "Number of hourly backups to keep."
                    },
                    "keep-last": {
                      "type": "integer",
                      "description": "Number of backups to keep."
                    },
                    "keep-monthly": {
                      "type": "integer",
                      "description": "Number of monthly backups to keep."
                    },
                    "keep-weekly": {
                      "type": "integer",
                      "description": "Number of weekly backups to keep."
                    },
                    "keep-yearly": {
                      "type": "integer",
                      "description": "Number of yearly backups to keep."
                    },
                    "maintenance-mode": {
                      "type": "string",
                      "format": {
                        "additionalProperties": false,
                        "default_key": "type",
                        "description": "Maintenance mode",
                        "properties": {
                          "message": {
                            "description": "Message describing the reason for the maintenance.",
                            "maxLength": 64,
                            "optional": 1,
                            "pattern": "/^[[:^cntrl:]]*$/",
                            "type": "string"
                          },
                          "type": {
                            "description": "Maintenance type.",
                            "enum": [
                              "read-only",
                              "offline",
                              "delete",
                              "unmount"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "description": "Maintenance mode, type is either 'offline' or 'read-only', message should be enclosed in \""
                    },
                    "name": {
                      "type": "string",
                      "description": "Datastore name."
                    },
                    "notification-mode": {
                      "type": "string",
                      "description": "Configure how notifications for this datastore should be sent.\n`legacy-sendmail` sends email notifications to the user configured\nin `notify-user` via the system's `sendmail` executable.\n`notification-system` emits matchable notification events to the\nnotification system."
                    },
                    "notify": {
                      "type": "string",
                      "format": {
                        "additionalProperties": false,
                        "description": "Datastore notify settings",
                        "properties": {
                          "gc": {
                            "description": "When do we send notifications",
                            "enum": [
                              "never",
                              "always",
                              "error"
                            ],
                            "optional": 1,
                            "type": "string"
                          },
                          "prune": {
                            "description": "When do we send notifications",
                            "enum": [
                              "never",
                              "always",
                              "error"
                            ],
                            "optional": 1,
                            "type": "string"
                          },
                          "sync": {
                            "description": "When do we send notifications",
                            "enum": [
                              "never",
                              "always",
                              "error"
                            ],
                            "optional": 1,
                            "type": "string"
                          },
                          "verify": {
                            "description": "When do we send notifications",
                            "enum": [
                              "never",
                              "always",
                              "error"
                            ],
                            "optional": 1,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "description": "Datastore notification setting, enum can be one of 'always', 'never', or 'error'."
                    },
                    "notify-user": {
                      "type": "string",
                      "description": "User ID"
                    },
                    "path": {
                      "type": "string",
                      "description": "Either the absolute path to the datastore directory, or a relative on-device path for removable datastores."
                    },
                    "prune-schedule": {
                      "type": "string",
                      "description": "Run prune job at specified schedule."
                    },
                    "tuning": {
                      "type": "string",
                      "format": {
                        "additionalProperties": false,
                        "description": "Datastore tuning options",
                        "properties": {
                          "chunk-order": {
                            "default": "inode",
                            "description": "The order to sort chunks by",
                            "enum": [
                              "none",
                              "inode"
                            ],
                            "optional": 1,
                            "type": "string"
                          },
                          "gc-atime-cutoff": {
                            "default": 1445,
                            "description": "Cutoff (in minutes) for chunk cleanup atime check in garbage collection phase 2 (default 24h 5m)",
                            "maximum": 2880,
                            "minimum": 1,
                            "optional": 1,
                            "type": "integer"
                          },
                          "gc-atime-safety-check": {
                            "default": true,
                            "description": "Check filesystem atime updates are honored during store creation and garbage collection",
                            "optional": 1,
                            "type": "boolean"
                          },
                          "gc-cache-capacity": {
                            "default": 1048576,
                            "description": "Garbage collection chunk digest cache capacity",
                            "maximum": 8388608,
                            "minimum": 0,
                            "optional": 1,
                            "type": "integer"
                          },
                          "sync-level": {
                            "default": "filesystem",
                            "description": "The level of syncing that is done when writing into a datastore.",
                            "enum": [
                              "none",
                              "file",
                              "filesystem"
                            ],
                            "optional": 1,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "description": "Datastore tuning options"
                    },
                    "verify-new": {
                      "type": "boolean",
                      "description": "If enabled, all new backups will be verified right after completion."
                    }
                  },
                  "description": "Datastore configuration properties."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update datastore config.",
        "description": "Update datastore config.",
        "operationId": "put_config_config_datastore_config_datastore_name",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "gc-schedule": {
                    "type": "string",
                    "description": "Run garbage collection job at specified schedule."
                  },
                  "keep-daily": {
                    "type": "integer",
                    "description": "Number of daily backups to keep.",
                    "minimum": 1
                  },
                  "keep-hourly": {
                    "type": "integer",
                    "description": "Number of hourly backups to keep.",
                    "minimum": 1
                  },
                  "keep-last": {
                    "type": "integer",
                    "description": "Number of backups to keep.",
                    "minimum": 1
                  },
                  "keep-monthly": {
                    "type": "integer",
                    "description": "Number of monthly backups to keep.",
                    "minimum": 1
                  },
                  "keep-weekly": {
                    "type": "integer",
                    "description": "Number of weekly backups to keep.",
                    "minimum": 1
                  },
                  "keep-yearly": {
                    "type": "integer",
                    "description": "Number of yearly backups to keep.",
                    "minimum": 1
                  },
                  "maintenance-mode": {
                    "type": "string",
                    "format": {
                      "additionalProperties": false,
                      "default_key": "type",
                      "description": "Maintenance mode",
                      "properties": {
                        "message": {
                          "description": "Message describing the reason for the maintenance.",
                          "maxLength": 64,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "type": {
                          "description": "Maintenance type.",
                          "enum": [
                            "read-only",
                            "offline",
                            "delete",
                            "unmount"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "description": "Maintenance mode, type is either 'offline' or 'read-only', message should be enclosed in \""
                  },
                  "notification-mode": {
                    "type": "string",
                    "description": "Configure how notifications for this datastore should be sent.\n`legacy-sendmail` sends email notifications to the user configured\nin `notify-user` via the system's `sendmail` executable.\n`notification-system` emits matchable notification events to the\nnotification system.",
                    "enum": [
                      "legacy-sendmail",
                      "notification-system"
                    ],
                    "default": "legacy-sendmail"
                  },
                  "notify": {
                    "type": "string",
                    "format": {
                      "additionalProperties": false,
                      "description": "Datastore notify settings",
                      "properties": {
                        "gc": {
                          "description": "When do we send notifications",
                          "enum": [
                            "never",
                            "always",
                            "error"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "prune": {
                          "description": "When do we send notifications",
                          "enum": [
                            "never",
                            "always",
                            "error"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "sync": {
                          "description": "When do we send notifications",
                          "enum": [
                            "never",
                            "always",
                            "error"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "verify": {
                          "description": "When do we send notifications",
                          "enum": [
                            "never",
                            "always",
                            "error"
                          ],
                          "optional": 1,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "description": "Datastore notification setting, enum can be one of 'always', 'never', or 'error'."
                  },
                  "notify-user": {
                    "type": "string",
                    "description": "User ID",
                    "minLength": 3,
                    "maxLength": 64,
                    "pattern": "^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "prune-schedule": {
                    "type": "string",
                    "description": "Run prune job at specified schedule."
                  },
                  "tuning": {
                    "type": "string",
                    "format": {
                      "additionalProperties": false,
                      "description": "Datastore tuning options",
                      "properties": {
                        "chunk-order": {
                          "default": "inode",
                          "description": "The order to sort chunks by",
                          "enum": [
                            "none",
                            "inode"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "gc-atime-cutoff": {
                          "default": 1445,
                          "description": "Cutoff (in minutes) for chunk cleanup atime check in garbage collection phase 2 (default 24h 5m)",
                          "maximum": 2880,
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "gc-atime-safety-check": {
                          "default": true,
                          "description": "Check filesystem atime updates are honored during store creation and garbage collection",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "gc-cache-capacity": {
                          "default": 1048576,
                          "description": "Garbage collection chunk digest cache capacity",
                          "maximum": 8388608,
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "sync-level": {
                          "default": "filesystem",
                          "description": "The level of syncing that is done when writing into a datastore.",
                          "enum": [
                            "none",
                            "file",
                            "filesystem"
                          ],
                          "optional": 1,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "description": "Datastore tuning options"
                  },
                  "verify-new": {
                    "type": "boolean",
                    "description": "If enabled, all new backups will be verified right after completion."
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/drive": {
      "get": {
        "summary": "List drives",
        "description": "List drives",
        "operationId": "get_config_config_drive",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "The list of configured drives (with config digest).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "changer": {
                        "type": "string",
                        "description": "Tape Changer Identifier."
                      },
                      "changer-drivenum": {
                        "type": "integer",
                        "description": "Associated changer drive number (requires option changer)"
                      },
                      "name": {
                        "type": "string",
                        "description": "Drive Identifier."
                      },
                      "path": {
                        "type": "string",
                        "description": "The path to a LTO SCSI-generic tape device (i.e. '/dev/sg0')"
                      }
                    },
                    "description": "Lto SCSI tape driver"
                  },
                  "description": "The list of configured drives (with config digest)."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Create a new drive",
        "description": "Create a new drive",
        "operationId": "post_config_config_drive",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "changer": {
                    "type": "string",
                    "description": "Tape Changer Identifier.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "changer-drivenum": {
                    "type": "integer",
                    "description": "Associated changer drive number (requires option changer)",
                    "minimum": 0,
                    "maximum": 255,
                    "default": 0
                  },
                  "name": {
                    "type": "string",
                    "description": "Drive Identifier.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "path": {
                    "type": "string",
                    "description": "The path to a LTO SCSI-generic tape device (i.e. '/dev/sg0')"
                  }
                },
                "required": [
                  "name",
                  "path"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/drive/config/drive/{name}": {
      "delete": {
        "summary": "Delete a drive configuration",
        "description": "Delete a drive configuration",
        "operationId": "delete_config_config_drive_config_drive_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Get drive configuration",
        "description": "Get drive configuration",
        "operationId": "get_config_config_drive_config_drive_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Lto SCSI tape driver",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "changer": {
                      "type": "string",
                      "description": "Tape Changer Identifier."
                    },
                    "changer-drivenum": {
                      "type": "integer",
                      "description": "Associated changer drive number (requires option changer)"
                    },
                    "name": {
                      "type": "string",
                      "description": "Drive Identifier."
                    },
                    "path": {
                      "type": "string",
                      "description": "The path to a LTO SCSI-generic tape device (i.e. '/dev/sg0')"
                    }
                  },
                  "description": "Lto SCSI tape driver"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update a drive configuration",
        "description": "Update a drive configuration",
        "operationId": "put_config_config_drive_config_drive_name",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "changer": {
                    "type": "string",
                    "description": "Tape Changer Identifier.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "changer-drivenum": {
                    "type": "integer",
                    "description": "Associated changer drive number (requires option changer)",
                    "minimum": 0,
                    "maximum": 255,
                    "default": 0
                  },
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "path": {
                    "type": "string",
                    "description": "The path to a LTO SCSI-generic tape device (i.e. '/dev/sg0')"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/media-pool": {
      "get": {
        "summary": "List media pools",
        "description": "List media pools",
        "operationId": "get_config_config_media-pool",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "The list of configured media pools (with config digest).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "allocation": {
                        "type": "string",
                        "description": "Media set allocation policy ('continue', 'always', or a calendar event)."
                      },
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "encrypt": {
                        "type": "string",
                        "description": "Tape encryption key fingerprint (sha256)."
                      },
                      "name": {
                        "type": "string",
                        "description": "Media pool name."
                      },
                      "retention": {
                        "type": "string",
                        "description": "Media retention policy ('overwrite', 'keep', or time span)."
                      },
                      "template": {
                        "type": "string",
                        "description": "Media set naming template (may contain strftime() time format specifications)."
                      }
                    },
                    "description": "Media pool configuration"
                  },
                  "description": "The list of configured media pools (with config digest)."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Create a new media pool",
        "description": "Create a new media pool",
        "operationId": "post_config_config_media-pool",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "allocation": {
                    "type": "string",
                    "description": "Media set allocation policy ('continue', 'always', or a calendar event)."
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "encrypt": {
                    "type": "string",
                    "description": "Tape encryption key fingerprint (sha256).",
                    "pattern": "^(?:[0-9a-fA-F][0-9a-fA-F])(?::[0-9a-fA-F][0-9a-fA-F]){31}$"
                  },
                  "name": {
                    "type": "string",
                    "description": "Media pool name.",
                    "minLength": 2,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "retention": {
                    "type": "string",
                    "description": "Media retention policy ('overwrite', 'keep', or time span)."
                  },
                  "template": {
                    "type": "string",
                    "description": "Media set naming template (may contain strftime() time format specifications).",
                    "minLength": 2,
                    "maxLength": 64,
                    "pattern": "^[[:^cntrl:]]*$"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/media-pool/config/media-pool/{name}": {
      "delete": {
        "summary": "Delete a media pool configuration",
        "description": "Delete a media pool configuration",
        "operationId": "delete_config_config_media-pool_config_media-pool_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Get media pool configuration",
        "description": "Get media pool configuration",
        "operationId": "get_config_config_media-pool_config_media-pool_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Media pool configuration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "allocation": {
                      "type": "string",
                      "description": "Media set allocation policy ('continue', 'always', or a calendar event)."
                    },
                    "comment": {
                      "type": "string",
                      "description": "Comment."
                    },
                    "encrypt": {
                      "type": "string",
                      "description": "Tape encryption key fingerprint (sha256)."
                    },
                    "name": {
                      "type": "string",
                      "description": "Media pool name."
                    },
                    "retention": {
                      "type": "string",
                      "description": "Media retention policy ('overwrite', 'keep', or time span)."
                    },
                    "template": {
                      "type": "string",
                      "description": "Media set naming template (may contain strftime() time format specifications)."
                    }
                  },
                  "description": "Media pool configuration"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update media pool settings",
        "description": "Update media pool settings",
        "operationId": "put_config_config_media-pool_config_media-pool_name",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "allocation": {
                    "type": "string",
                    "description": "Media set allocation policy ('continue', 'always', or a calendar event)."
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "encrypt": {
                    "type": "string",
                    "description": "Tape encryption key fingerprint (sha256).",
                    "pattern": "^(?:[0-9a-fA-F][0-9a-fA-F])(?::[0-9a-fA-F][0-9a-fA-F]){31}$"
                  },
                  "retention": {
                    "type": "string",
                    "description": "Media retention policy ('overwrite', 'keep', or time span)."
                  },
                  "template": {
                    "type": "string",
                    "description": "Media set naming template (may contain strftime() time format specifications).",
                    "minLength": 2,
                    "maxLength": 64,
                    "pattern": "^[[:^cntrl:]]*$"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/metrics": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_config_config_metrics",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/metrics/config/metrics/influxdb-http": {
      "get": {
        "summary": "List configured InfluxDB http metric servers.",
        "description": "List configured InfluxDB http metric servers.",
        "operationId": "get_config_config_metrics_config_metrics_influxdb-http",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "List of configured InfluxDB http metric servers.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "bucket": {
                        "type": "string",
                        "description": "InfluxDB Bucket."
                      },
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "enable": {
                        "type": "boolean",
                        "description": "Enables or disables the metrics server"
                      },
                      "max-body-size": {
                        "type": "integer",
                        "description": "The (optional) maximum body size"
                      },
                      "name": {
                        "type": "string",
                        "description": "Metrics Server ID."
                      },
                      "organization": {
                        "type": "string",
                        "description": "InfluxDB Organization."
                      },
                      "token": {
                        "type": "string",
                        "description": "The (optional) API token"
                      },
                      "url": {
                        "type": "string",
                        "description": "HTTP(s) url with optional port."
                      },
                      "verify-tls": {
                        "type": "boolean",
                        "description": "If true, the certificate will be validated."
                      }
                    },
                    "description": "InfluxDB Server (HTTP(s))"
                  },
                  "description": "List of configured InfluxDB http metric servers."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Create a new InfluxDB http server configuration",
        "description": "Create a new InfluxDB http server configuration",
        "operationId": "post_config_config_metrics_config_metrics_influxdb-http",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "bucket": {
                    "type": "string",
                    "description": "InfluxDB Bucket.",
                    "minLength": 1,
                    "maxLength": 32,
                    "default": "proxmox"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "enable": {
                    "type": "boolean",
                    "description": "Enables or disables the metrics server",
                    "default": true
                  },
                  "max-body-size": {
                    "type": "integer",
                    "description": "The (optional) maximum body size",
                    "default": 25000000
                  },
                  "name": {
                    "type": "string",
                    "description": "Metrics Server ID.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "organization": {
                    "type": "string",
                    "description": "InfluxDB Organization.",
                    "minLength": 1,
                    "maxLength": 32,
                    "default": "proxmox"
                  },
                  "token": {
                    "type": "string",
                    "description": "The (optional) API token"
                  },
                  "url": {
                    "type": "string",
                    "description": "HTTP(s) url with optional port.",
                    "pattern": "^https?://(?:(?:(?:(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|\\[(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))\\]))(?::(?:[0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]))?)|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))(?:/[^\u0000-\u001f]*)?$"
                  },
                  "verify-tls": {
                    "type": "boolean",
                    "description": "If true, the certificate will be validated.",
                    "default": true
                  }
                },
                "required": [
                  "name",
                  "url"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/metrics/config/metrics/influxdb-http/config/metrics/influxdb-http/{name}": {
      "delete": {
        "summary": "Remove a InfluxDB http server configuration",
        "description": "Remove a InfluxDB http server configuration",
        "operationId": "delete_config_config_metrics_config_metrics_influxdb-http_config_metrics_influxdb-http_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
              "pattern": "^[a-f0-9]{64}$"
            },
            "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Read the InfluxDB http server configuration",
        "description": "Read the InfluxDB http server configuration",
        "operationId": "get_config_config_metrics_config_metrics_influxdb-http_config_metrics_influxdb-http_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "InfluxDB Server (HTTP(s))",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "bucket": {
                      "type": "string",
                      "description": "InfluxDB Bucket."
                    },
                    "comment": {
                      "type": "string",
                      "description": "Comment."
                    },
                    "enable": {
                      "type": "boolean",
                      "description": "Enables or disables the metrics server"
                    },
                    "max-body-size": {
                      "type": "integer",
                      "description": "The (optional) maximum body size"
                    },
                    "name": {
                      "type": "string",
                      "description": "Metrics Server ID."
                    },
                    "organization": {
                      "type": "string",
                      "description": "InfluxDB Organization."
                    },
                    "token": {
                      "type": "string",
                      "description": "The (optional) API token"
                    },
                    "url": {
                      "type": "string",
                      "description": "HTTP(s) url with optional port."
                    },
                    "verify-tls": {
                      "type": "boolean",
                      "description": "If true, the certificate will be validated."
                    }
                  },
                  "description": "InfluxDB Server (HTTP(s))"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update an InfluxDB http server configuration",
        "description": "Update an InfluxDB http server configuration",
        "operationId": "put_config_config_metrics_config_metrics_influxdb-http_config_metrics_influxdb-http_name",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "bucket": {
                    "type": "string",
                    "description": "InfluxDB Bucket.",
                    "minLength": 1,
                    "maxLength": 32,
                    "default": "proxmox"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "enable": {
                    "type": "boolean",
                    "description": "Enables or disables the metrics server",
                    "default": true
                  },
                  "max-body-size": {
                    "type": "integer",
                    "description": "The (optional) maximum body size",
                    "default": 25000000
                  },
                  "organization": {
                    "type": "string",
                    "description": "InfluxDB Organization.",
                    "minLength": 1,
                    "maxLength": 32,
                    "default": "proxmox"
                  },
                  "token": {
                    "type": "string",
                    "description": "The (optional) API token"
                  },
                  "url": {
                    "type": "string",
                    "description": "HTTP(s) url with optional port.",
                    "pattern": "^https?://(?:(?:(?:(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|\\[(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))\\]))(?::(?:[0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]))?)|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))(?:/[^\u0000-\u001f]*)?$"
                  },
                  "verify-tls": {
                    "type": "boolean",
                    "description": "If true, the certificate will be validated.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/metrics/config/metrics/influxdb-udp": {
      "get": {
        "summary": "List configured InfluxDB udp metric servers.",
        "description": "List configured InfluxDB udp metric servers.",
        "operationId": "get_config_config_metrics_config_metrics_influxdb-udp",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "List of configured InfluxDB udp metric servers.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "enable": {
                        "type": "boolean",
                        "description": "Enables or disables the metrics server"
                      },
                      "host": {
                        "type": "string",
                        "description": "host:port combination (Host can be DNS name or IP address)."
                      },
                      "mtu": {
                        "type": "integer",
                        "description": "The MTU"
                      },
                      "name": {
                        "type": "string",
                        "description": "Metrics Server ID."
                      }
                    },
                    "description": "InfluxDB Server (UDP)"
                  },
                  "description": "List of configured InfluxDB udp metric servers."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Create a new InfluxDB udp server configuration",
        "description": "Create a new InfluxDB udp server configuration",
        "operationId": "post_config_config_metrics_config_metrics_influxdb-udp",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "enable": {
                    "type": "boolean",
                    "description": "Enables or disables the metrics server",
                    "default": true
                  },
                  "host": {
                    "type": "string",
                    "description": "host:port combination (Host can be DNS name or IP address).",
                    "pattern": "^(?:(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|\\[(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))\\])):(?:[0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$"
                  },
                  "mtu": {
                    "type": "integer",
                    "description": "The MTU",
                    "default": 1500
                  },
                  "name": {
                    "type": "string",
                    "description": "Metrics Server ID.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  }
                },
                "required": [
                  "host",
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/metrics/config/metrics/influxdb-udp/config/metrics/influxdb-udp/{name}": {
      "delete": {
        "summary": "Remove a InfluxDB udp server configuration",
        "description": "Remove a InfluxDB udp server configuration",
        "operationId": "delete_config_config_metrics_config_metrics_influxdb-udp_config_metrics_influxdb-udp_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
              "pattern": "^[a-f0-9]{64}$"
            },
            "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Read the InfluxDB udp server configuration",
        "description": "Read the InfluxDB udp server configuration",
        "operationId": "get_config_config_metrics_config_metrics_influxdb-udp_config_metrics_influxdb-udp_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "InfluxDB Server (UDP)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "comment": {
                      "type": "string",
                      "description": "Comment."
                    },
                    "enable": {
                      "type": "boolean",
                      "description": "Enables or disables the metrics server"
                    },
                    "host": {
                      "type": "string",
                      "description": "host:port combination (Host can be DNS name or IP address)."
                    },
                    "mtu": {
                      "type": "integer",
                      "description": "The MTU"
                    },
                    "name": {
                      "type": "string",
                      "description": "Metrics Server ID."
                    }
                  },
                  "description": "InfluxDB Server (UDP)"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update an InfluxDB udp server configuration",
        "description": "Update an InfluxDB udp server configuration",
        "operationId": "put_config_config_metrics_config_metrics_influxdb-udp_config_metrics_influxdb-udp_name",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "enable": {
                    "type": "boolean",
                    "description": "Enables or disables the metrics server",
                    "default": true
                  },
                  "host": {
                    "type": "string",
                    "description": "host:port combination (Host can be DNS name or IP address).",
                    "pattern": "^(?:(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|\\[(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))\\])):(?:[0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$"
                  },
                  "mtu": {
                    "type": "integer",
                    "description": "The MTU",
                    "default": 1500
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/notifications": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_config_config_notifications",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/notifications/config/notifications/endpoints": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_config_config_notifications_config_notifications_endpoints",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/notifications/config/notifications/endpoints/config/notifications/endpoints/gotify": {
      "get": {
        "summary": "List all gotify endpoints.",
        "description": "List all gotify endpoints.",
        "operationId": "get_config_config_notifications_config_notifications_endpoints_config_notifications_endpoints_gotify",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "List of gotify endpoints.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "disable": {
                        "type": "boolean",
                        "description": "Disable this target."
                      },
                      "filter": {
                        "type": "string",
                        "description": "Deprecated."
                      },
                      "name": {
                        "type": "string",
                        "description": "Name schema for targets and matchers"
                      },
                      "origin": {
                        "type": "string",
                        "description": "The origin of a notification configuration entry."
                      },
                      "server": {
                        "type": "string",
                        "description": "Gotify Server URL."
                      }
                    },
                    "description": "Config for  Gotify notification endpoints"
                  },
                  "description": "List of gotify endpoints."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Add a new gotify endpoint.",
        "description": "Add a new gotify endpoint.",
        "operationId": "post_config_config_notifications_config_notifications_endpoints_config_notifications_endpoints_gotify",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "disable": {
                    "type": "boolean",
                    "description": "Disable this target."
                  },
                  "filter": {
                    "type": "string",
                    "description": "Deprecated."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name schema for targets and matchers",
                    "minLength": 2,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "origin": {
                    "type": "string",
                    "description": "The origin of a notification configuration entry.",
                    "enum": [
                      "user-created",
                      "builtin",
                      "modified-builtin"
                    ]
                  },
                  "server": {
                    "type": "string",
                    "description": "Gotify Server URL."
                  },
                  "token": {
                    "type": "string",
                    "description": "Authentication token"
                  }
                },
                "required": [
                  "name",
                  "server",
                  "token"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/notifications/config/notifications/endpoints/config/notifications/endpoints/gotify/config/notifications/endpoints/gotify/{name}": {
      "delete": {
        "summary": "Delete gotify endpoint.",
        "description": "Delete gotify endpoint.",
        "operationId": "delete_config_config_notifications_config_notifications_endpoints_config_notifications_endpoints_gotify_config_notifications_endpoints_gotify_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Get a gotify endpoint.",
        "description": "Get a gotify endpoint.",
        "operationId": "get_config_config_notifications_config_notifications_endpoints_config_notifications_endpoints_gotify_config_notifications_endpoints_gotify_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Config for  Gotify notification endpoints",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "comment": {
                      "type": "string",
                      "description": "Comment."
                    },
                    "disable": {
                      "type": "boolean",
                      "description": "Disable this target."
                    },
                    "filter": {
                      "type": "string",
                      "description": "Deprecated."
                    },
                    "name": {
                      "type": "string",
                      "description": "Name schema for targets and matchers"
                    },
                    "origin": {
                      "type": "string",
                      "description": "The origin of a notification configuration entry."
                    },
                    "server": {
                      "type": "string",
                      "description": "Gotify Server URL."
                    }
                  },
                  "description": "Config for  Gotify notification endpoints"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update gotify endpoint.",
        "description": "Update gotify endpoint.",
        "operationId": "put_config_config_notifications_config_notifications_endpoints_config_notifications_endpoints_gotify_config_notifications_endpoints_gotify_name",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "disable": {
                    "type": "boolean",
                    "description": "Disable this target."
                  },
                  "server": {
                    "type": "string",
                    "description": "Gotify Server URL."
                  },
                  "token": {
                    "type": "string",
                    "description": "Authentication token"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/notifications/config/notifications/endpoints/config/notifications/endpoints/sendmail": {
      "get": {
        "summary": "List all sendmail endpoints.",
        "description": "List all sendmail endpoints.",
        "operationId": "get_config_config_notifications_config_notifications_endpoints_config_notifications_endpoints_sendmail",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "List of sendmail endpoints.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "author": {
                        "type": "string",
                        "description": "Author of the mail. Defaults to 'Proxmox Backup Server ($hostname)'"
                      },
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "disable": {
                        "type": "boolean",
                        "description": "Disable this target."
                      },
                      "filter": {
                        "type": "string",
                        "description": "Deprecated."
                      },
                      "from-address": {
                        "type": "string",
                        "description": "`From` address for sent E-Mails.\nIf the parameter is not set, the plugin will fall back to the\nemail-from setting from node.cfg (PBS).\nIf that is also not set, the plugin will default to root@$hostname,\nwhere $hostname is the hostname of the node."
                      },
                      "mailto": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "E-Mail Address."
                        },
                        "description": "Mail address to send a mail to."
                      },
                      "mailto-user": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "User ID including realm, e.g. root@pam."
                        },
                        "description": "Users to send a mail to. The email address of the user\nwill be looked up in users.cfg."
                      },
                      "name": {
                        "type": "string",
                        "description": "Name schema for targets and matchers"
                      },
                      "origin": {
                        "type": "string",
                        "description": "The origin of a notification configuration entry."
                      }
                    },
                    "description": "Config for Sendmail notification endpoints"
                  },
                  "description": "List of sendmail endpoints."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Add a new sendmail endpoint.",
        "description": "Add a new sendmail endpoint.",
        "operationId": "post_config_config_notifications_config_notifications_endpoints_config_notifications_endpoints_sendmail",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "author": {
                    "type": "string",
                    "description": "Author of the mail. Defaults to 'Proxmox Backup Server ($hostname)'"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "disable": {
                    "type": "boolean",
                    "description": "Disable this target."
                  },
                  "filter": {
                    "type": "string",
                    "description": "Deprecated."
                  },
                  "from-address": {
                    "type": "string",
                    "description": "`From` address for sent E-Mails.\nIf the parameter is not set, the plugin will fall back to the\nemail-from setting from node.cfg (PBS).\nIf that is also not set, the plugin will default to root@$hostname,\nwhere $hostname is the hostname of the node."
                  },
                  "mailto": {
                    "type": "array",
                    "description": "Mail address to send a mail to.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "mailto-user": {
                    "type": "array",
                    "description": "Users to send a mail to. The email address of the user\nwill be looked up in users.cfg.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "name": {
                    "type": "string",
                    "description": "Name schema for targets and matchers",
                    "minLength": 2,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "origin": {
                    "type": "string",
                    "description": "The origin of a notification configuration entry.",
                    "enum": [
                      "user-created",
                      "builtin",
                      "modified-builtin"
                    ]
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/notifications/config/notifications/endpoints/config/notifications/endpoints/sendmail/config/notifications/endpoints/sendmail/{name}": {
      "delete": {
        "summary": "Delete sendmail endpoint.",
        "description": "Delete sendmail endpoint.",
        "operationId": "delete_config_config_notifications_config_notifications_endpoints_config_notifications_endpoints_sendmail_config_notifications_endpoints_sendmail_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Get a sendmail endpoint.",
        "description": "Get a sendmail endpoint.",
        "operationId": "get_config_config_notifications_config_notifications_endpoints_config_notifications_endpoints_sendmail_config_notifications_endpoints_sendmail_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Config for Sendmail notification endpoints",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "author": {
                      "type": "string",
                      "description": "Author of the mail. Defaults to 'Proxmox Backup Server ($hostname)'"
                    },
                    "comment": {
                      "type": "string",
                      "description": "Comment."
                    },
                    "disable": {
                      "type": "boolean",
                      "description": "Disable this target."
                    },
                    "filter": {
                      "type": "string",
                      "description": "Deprecated."
                    },
                    "from-address": {
                      "type": "string",
                      "description": "`From` address for sent E-Mails.\nIf the parameter is not set, the plugin will fall back to the\nemail-from setting from node.cfg (PBS).\nIf that is also not set, the plugin will default to root@$hostname,\nwhere $hostname is the hostname of the node."
                    },
                    "mailto": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "E-Mail Address."
                      },
                      "description": "Mail address to send a mail to."
                    },
                    "mailto-user": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "User ID including realm, e.g. root@pam."
                      },
                      "description": "Users to send a mail to. The email address of the user\nwill be looked up in users.cfg."
                    },
                    "name": {
                      "type": "string",
                      "description": "Name schema for targets and matchers"
                    },
                    "origin": {
                      "type": "string",
                      "description": "The origin of a notification configuration entry."
                    }
                  },
                  "description": "Config for Sendmail notification endpoints"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update sendmail endpoint.",
        "description": "Update sendmail endpoint.",
        "operationId": "put_config_config_notifications_config_notifications_endpoints_config_notifications_endpoints_sendmail_config_notifications_endpoints_sendmail_name",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "author": {
                    "type": "string",
                    "description": "Author of the mail. Defaults to 'Proxmox Backup Server ($hostname)'"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "disable": {
                    "type": "boolean",
                    "description": "Disable this target."
                  },
                  "from-address": {
                    "type": "string",
                    "description": "`From` address for sent E-Mails.\nIf the parameter is not set, the plugin will fall back to the\nemail-from setting from node.cfg (PBS).\nIf that is also not set, the plugin will default to root@$hostname,\nwhere $hostname is the hostname of the node."
                  },
                  "mailto": {
                    "type": "array",
                    "description": "Mail address to send a mail to.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "mailto-user": {
                    "type": "array",
                    "description": "Users to send a mail to. The email address of the user\nwill be looked up in users.cfg.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/notifications/config/notifications/endpoints/config/notifications/endpoints/smtp": {
      "get": {
        "summary": "List all smtp endpoints.",
        "description": "List all smtp endpoints.",
        "operationId": "get_config_config_notifications_config_notifications_endpoints_config_notifications_endpoints_smtp",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "List of smtp endpoints.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "author": {
                        "type": "string",
                        "description": "Author of the mail. Defaults to 'Proxmox Backup Server ($hostname)'"
                      },
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "disable": {
                        "type": "boolean",
                        "description": "Disable this target."
                      },
                      "from-address": {
                        "type": "string",
                        "description": "`From` address for the mail.\nSMTP relays might require that this address is owned by the user\nin order to avoid spoofing. The `From` header in the email will be\nset to `$author <$from-address>`."
                      },
                      "mailto": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "E-Mail Address."
                        },
                        "description": "Mail address to send a mail to."
                      },
                      "mailto-user": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "User ID including realm, e.g. root@pam."
                        },
                        "description": "Users to send a mail to. The email address of the user\nwill be looked up in users.cfg."
                      },
                      "mode": {
                        "type": "string",
                        "description": "Connection security"
                      },
                      "name": {
                        "type": "string",
                        "description": "Name schema for targets and matchers"
                      },
                      "origin": {
                        "type": "string",
                        "description": "The origin of a notification configuration entry."
                      },
                      "port": {
                        "type": "integer",
                        "description": "The port to connect to.\nIf not set, the used port defaults to 25 (insecure), 465 (tls)\nor 587 (starttls), depending on the value of mode"
                      },
                      "server": {
                        "type": "string",
                        "description": "Host name or IP of the SMTP relay."
                      },
                      "username": {
                        "type": "string",
                        "description": "Username to use during authentication.\nIf no username is set, no authentication will be performed.\nThe PLAIN and LOGIN authentication methods are supported"
                      }
                    },
                    "description": "Config for Sendmail notification endpoints"
                  },
                  "description": "List of smtp endpoints."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Add a new smtp endpoint.",
        "description": "Add a new smtp endpoint.",
        "operationId": "post_config_config_notifications_config_notifications_endpoints_config_notifications_endpoints_smtp",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "author": {
                    "type": "string",
                    "description": "Author of the mail. Defaults to 'Proxmox Backup Server ($hostname)'"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "disable": {
                    "type": "boolean",
                    "description": "Disable this target."
                  },
                  "from-address": {
                    "type": "string",
                    "description": "`From` address for the mail.\nSMTP relays might require that this address is owned by the user\nin order to avoid spoofing. The `From` header in the email will be\nset to `$author <$from-address>`."
                  },
                  "mailto": {
                    "type": "array",
                    "description": "Mail address to send a mail to.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "mailto-user": {
                    "type": "array",
                    "description": "Users to send a mail to. The email address of the user\nwill be looked up in users.cfg.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "mode": {
                    "type": "string",
                    "description": "Connection security",
                    "enum": [
                      "insecure",
                      "starttls",
                      "tls"
                    ],
                    "default": "tls"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name schema for targets and matchers",
                    "minLength": 2,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "origin": {
                    "type": "string",
                    "description": "The origin of a notification configuration entry.",
                    "enum": [
                      "user-created",
                      "builtin",
                      "modified-builtin"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "description": "SMTP authentication password"
                  },
                  "port": {
                    "type": "integer",
                    "description": "The port to connect to.\nIf not set, the used port defaults to 25 (insecure), 465 (tls)\nor 587 (starttls), depending on the value of mode",
                    "minimum": 0,
                    "maximum": 65535
                  },
                  "server": {
                    "type": "string",
                    "description": "Host name or IP of the SMTP relay."
                  },
                  "username": {
                    "type": "string",
                    "description": "Username to use during authentication.\nIf no username is set, no authentication will be performed.\nThe PLAIN and LOGIN authentication methods are supported"
                  }
                },
                "required": [
                  "from-address",
                  "name",
                  "server"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/notifications/config/notifications/endpoints/config/notifications/endpoints/smtp/config/notifications/endpoints/smtp/{name}": {
      "delete": {
        "summary": "Delete smtp endpoint.",
        "description": "Delete smtp endpoint.",
        "operationId": "delete_config_config_notifications_config_notifications_endpoints_config_notifications_endpoints_smtp_config_notifications_endpoints_smtp_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Get a smtp endpoint.",
        "description": "Get a smtp endpoint.",
        "operationId": "get_config_config_notifications_config_notifications_endpoints_config_notifications_endpoints_smtp_config_notifications_endpoints_smtp_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Config for Sendmail notification endpoints",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "author": {
                      "type": "string",
                      "description": "Author of the mail. Defaults to 'Proxmox Backup Server ($hostname)'"
                    },
                    "comment": {
                      "type": "string",
                      "description": "Comment."
                    },
                    "disable": {
                      "type": "boolean",
                      "description": "Disable this target."
                    },
                    "from-address": {
                      "type": "string",
                      "description": "`From` address for the mail.\nSMTP relays might require that this address is owned by the user\nin order to avoid spoofing. The `From` header in the email will be\nset to `$author <$from-address>`."
                    },
                    "mailto": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "E-Mail Address."
                      },
                      "description": "Mail address to send a mail to."
                    },
                    "mailto-user": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "User ID including realm, e.g. root@pam."
                      },
                      "description": "Users to send a mail to. The email address of the user\nwill be looked up in users.cfg."
                    },
                    "mode": {
                      "type": "string",
                      "description": "Connection security"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name schema for targets and matchers"
                    },
                    "origin": {
                      "type": "string",
                      "description": "The origin of a notification configuration entry."
                    },
                    "port": {
                      "type": "integer",
                      "description": "The port to connect to.\nIf not set, the used port defaults to 25 (insecure), 465 (tls)\nor 587 (starttls), depending on the value of mode"
                    },
                    "server": {
                      "type": "string",
                      "description": "Host name or IP of the SMTP relay."
                    },
                    "username": {
                      "type": "string",
                      "description": "Username to use during authentication.\nIf no username is set, no authentication will be performed.\nThe PLAIN and LOGIN authentication methods are supported"
                    }
                  },
                  "description": "Config for Sendmail notification endpoints"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update smtp endpoint.",
        "description": "Update smtp endpoint.",
        "operationId": "put_config_config_notifications_config_notifications_endpoints_config_notifications_endpoints_smtp_config_notifications_endpoints_smtp_name",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "author": {
                    "type": "string",
                    "description": "Author of the mail. Defaults to 'Proxmox Backup Server ($hostname)'"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "disable": {
                    "type": "boolean",
                    "description": "Disable this target."
                  },
                  "from-address": {
                    "type": "string",
                    "description": "`From` address for the mail.\nSMTP relays might require that this address is owned by the user\nin order to avoid spoofing. The `From` header in the email will be\nset to `$author <$from-address>`."
                  },
                  "mailto": {
                    "type": "array",
                    "description": "Mail address to send a mail to.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "mailto-user": {
                    "type": "array",
                    "description": "Users to send a mail to. The email address of the user\nwill be looked up in users.cfg.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "mode": {
                    "type": "string",
                    "description": "Connection security",
                    "enum": [
                      "insecure",
                      "starttls",
                      "tls"
                    ],
                    "default": "tls"
                  },
                  "password": {
                    "type": "string",
                    "description": "SMTP authentication password"
                  },
                  "port": {
                    "type": "integer",
                    "description": "The port to connect to.\nIf not set, the used port defaults to 25 (insecure), 465 (tls)\nor 587 (starttls), depending on the value of mode",
                    "minimum": 0,
                    "maximum": 65535
                  },
                  "server": {
                    "type": "string",
                    "description": "Host name or IP of the SMTP relay."
                  },
                  "username": {
                    "type": "string",
                    "description": "Username to use during authentication.\nIf no username is set, no authentication will be performed.\nThe PLAIN and LOGIN authentication methods are supported"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/notifications/config/notifications/endpoints/config/notifications/endpoints/webhook": {
      "get": {
        "summary": "List all webhook endpoints.",
        "description": "List all webhook endpoints.",
        "operationId": "get_config_config_notifications_config_notifications_endpoints_config_notifications_endpoints_webhook",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "List of webhook endpoints.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "body": {
                        "type": "string",
                        "description": "The HTTP body to send. Supports templating."
                      },
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "disable": {
                        "type": "boolean",
                        "description": "Disable this target."
                      },
                      "header": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "format": {
                            "additionalProperties": false,
                            "description": "Datatype used to represent key-value pairs, the value\nbeing encoded in base64.",
                            "properties": {
                              "name": {
                                "description": "Name",
                                "type": "string"
                              },
                              "value": {
                                "description": "Base64 encoded value",
                                "optional": 1,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "description": "String schema for pairs of keys and base64 encoded values"
                        },
                        "description": "Array of HTTP headers. Each entry is a property string with a name and a value.\nThe value property contains the header in base64 encoding. Supports templating."
                      },
                      "method": {
                        "type": "string",
                        "description": "HTTP Method to use."
                      },
                      "name": {
                        "type": "string",
                        "description": "Name schema for targets and matchers"
                      },
                      "origin": {
                        "type": "string",
                        "description": "The origin of a notification configuration entry."
                      },
                      "secret": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "format": {
                            "additionalProperties": false,
                            "description": "Datatype used to represent key-value pairs, the value\nbeing encoded in base64.",
                            "properties": {
                              "name": {
                                "description": "Name",
                                "type": "string"
                              },
                              "value": {
                                "description": "Base64 encoded value",
                                "optional": 1,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "description": "String schema for pairs of keys and base64 encoded values"
                        },
                        "description": "Array of secrets. Each entry is a property string with a name and an optional value.\nThe value property contains the secret in base64 encoding.\nFor any API endpoints returning the endpoint config,\nonly the secret name but not the value will be returned.\nWhen updating the config, also send all secrets that you want\nto keep, setting only the name but not the value. Can be accessed from templates."
                      },
                      "url": {
                        "type": "string",
                        "description": "HTTP(s) url with optional port."
                      }
                    },
                    "description": "Config for  Webhook notification endpoints"
                  },
                  "description": "List of webhook endpoints."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Add a new webhook endpoint.",
        "description": "Add a new webhook endpoint.",
        "operationId": "post_config_config_notifications_config_notifications_endpoints_config_notifications_endpoints_webhook",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "The HTTP body to send. Supports templating."
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "disable": {
                    "type": "boolean",
                    "description": "Disable this target."
                  },
                  "header": {
                    "type": "array",
                    "description": "Array of HTTP headers. Each entry is a property string with a name and a value.\nThe value property contains the header in base64 encoding. Supports templating.",
                    "items": {
                      "type": "string",
                      "format": {
                        "additionalProperties": false,
                        "description": "Datatype used to represent key-value pairs, the value\nbeing encoded in base64.",
                        "properties": {
                          "name": {
                            "description": "Name",
                            "type": "string"
                          },
                          "value": {
                            "description": "Base64 encoded value",
                            "optional": 1,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "method": {
                    "type": "string",
                    "description": "HTTP Method to use.",
                    "enum": [
                      "post",
                      "put",
                      "get"
                    ],
                    "default": "post"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name schema for targets and matchers",
                    "minLength": 2,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "origin": {
                    "type": "string",
                    "description": "The origin of a notification configuration entry.",
                    "enum": [
                      "user-created",
                      "builtin",
                      "modified-builtin"
                    ]
                  },
                  "secret": {
                    "type": "array",
                    "description": "Array of secrets. Each entry is a property string with a name and an optional value.\nThe value property contains the secret in base64 encoding.\nFor any API endpoints returning the endpoint config,\nonly the secret name but not the value will be returned.\nWhen updating the config, also send all secrets that you want\nto keep, setting only the name but not the value. Can be accessed from templates.",
                    "items": {
                      "type": "string",
                      "format": {
                        "additionalProperties": false,
                        "description": "Datatype used to represent key-value pairs, the value\nbeing encoded in base64.",
                        "properties": {
                          "name": {
                            "description": "Name",
                            "type": "string"
                          },
                          "value": {
                            "description": "Base64 encoded value",
                            "optional": 1,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "url": {
                    "type": "string",
                    "description": "HTTP(s) url with optional port.",
                    "pattern": "^https?://(?:(?:(?:(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|\\[(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))\\]))(?::(?:[0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]))?)|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))(?:/[^\u0000-\u001f]*)?$"
                  }
                },
                "required": [
                  "method",
                  "name",
                  "url"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/notifications/config/notifications/endpoints/config/notifications/endpoints/webhook/config/notifications/endpoints/webhook/{name}": {
      "delete": {
        "summary": "Delete webhook endpoint.",
        "description": "Delete webhook endpoint.",
        "operationId": "delete_config_config_notifications_config_notifications_endpoints_config_notifications_endpoints_webhook_config_notifications_endpoints_webhook_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Get a webhook endpoint.",
        "description": "Get a webhook endpoint.",
        "operationId": "get_config_config_notifications_config_notifications_endpoints_config_notifications_endpoints_webhook_config_notifications_endpoints_webhook_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Config for  Webhook notification endpoints",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "body": {
                      "type": "string",
                      "description": "The HTTP body to send. Supports templating."
                    },
                    "comment": {
                      "type": "string",
                      "description": "Comment."
                    },
                    "disable": {
                      "type": "boolean",
                      "description": "Disable this target."
                    },
                    "header": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": {
                          "additionalProperties": false,
                          "description": "Datatype used to represent key-value pairs, the value\nbeing encoded in base64.",
                          "properties": {
                            "name": {
                              "description": "Name",
                              "type": "string"
                            },
                            "value": {
                              "description": "Base64 encoded value",
                              "optional": 1,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "description": "String schema for pairs of keys and base64 encoded values"
                      },
                      "description": "Array of HTTP headers. Each entry is a property string with a name and a value.\nThe value property contains the header in base64 encoding. Supports templating."
                    },
                    "method": {
                      "type": "string",
                      "description": "HTTP Method to use."
                    },
                    "name": {
                      "type": "string",
                      "description": "Name schema for targets and matchers"
                    },
                    "origin": {
                      "type": "string",
                      "description": "The origin of a notification configuration entry."
                    },
                    "secret": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": {
                          "additionalProperties": false,
                          "description": "Datatype used to represent key-value pairs, the value\nbeing encoded in base64.",
                          "properties": {
                            "name": {
                              "description": "Name",
                              "type": "string"
                            },
                            "value": {
                              "description": "Base64 encoded value",
                              "optional": 1,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "description": "String schema for pairs of keys and base64 encoded values"
                      },
                      "description": "Array of secrets. Each entry is a property string with a name and an optional value.\nThe value property contains the secret in base64 encoding.\nFor any API endpoints returning the endpoint config,\nonly the secret name but not the value will be returned.\nWhen updating the config, also send all secrets that you want\nto keep, setting only the name but not the value. Can be accessed from templates."
                    },
                    "url": {
                      "type": "string",
                      "description": "HTTP(s) url with optional port."
                    }
                  },
                  "description": "Config for  Webhook notification endpoints"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update webhook endpoint.",
        "description": "Update webhook endpoint.",
        "operationId": "put_config_config_notifications_config_notifications_endpoints_config_notifications_endpoints_webhook_config_notifications_endpoints_webhook_name",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "The HTTP body to send. Supports templating."
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "disable": {
                    "type": "boolean",
                    "description": "Disable this target."
                  },
                  "header": {
                    "type": "array",
                    "description": "Array of HTTP headers. Each entry is a property string with a name and a value.\nThe value property contains the header in base64 encoding. Supports templating.",
                    "items": {
                      "type": "string",
                      "format": {
                        "additionalProperties": false,
                        "description": "Datatype used to represent key-value pairs, the value\nbeing encoded in base64.",
                        "properties": {
                          "name": {
                            "description": "Name",
                            "type": "string"
                          },
                          "value": {
                            "description": "Base64 encoded value",
                            "optional": 1,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "method": {
                    "type": "string",
                    "description": "HTTP Method to use.",
                    "enum": [
                      "post",
                      "put",
                      "get"
                    ],
                    "default": "post"
                  },
                  "secret": {
                    "type": "array",
                    "description": "Array of secrets. Each entry is a property string with a name and an optional value.\nThe value property contains the secret in base64 encoding.\nFor any API endpoints returning the endpoint config,\nonly the secret name but not the value will be returned.\nWhen updating the config, also send all secrets that you want\nto keep, setting only the name but not the value. Can be accessed from templates.",
                    "items": {
                      "type": "string",
                      "format": {
                        "additionalProperties": false,
                        "description": "Datatype used to represent key-value pairs, the value\nbeing encoded in base64.",
                        "properties": {
                          "name": {
                            "description": "Name",
                            "type": "string"
                          },
                          "value": {
                            "description": "Base64 encoded value",
                            "optional": 1,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "url": {
                    "type": "string",
                    "description": "HTTP(s) url with optional port.",
                    "pattern": "^https?://(?:(?:(?:(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|\\[(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))\\]))(?::(?:[0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]))?)|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))(?:/[^\u0000-\u001f]*)?$"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/notifications/config/notifications/matcher-field-values": {
      "get": {
        "summary": "List all known, matchable metadata field values.",
        "description": "List all known, matchable metadata field values.",
        "operationId": "get_config_config_notifications_config_notifications_matcher-field-values",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "List of known metadata field values.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "comment": {
                        "type": "string",
                        "description": "Additional comment for this value."
                      },
                      "field": {
                        "type": "string",
                        "description": "Field this value belongs to."
                      },
                      "value": {
                        "type": "string",
                        "description": "Notification metadata value known by the system."
                      }
                    },
                    "description": "A matchable metadata field value."
                  },
                  "description": "List of known metadata field values."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/notifications/config/notifications/matcher-fields": {
      "get": {
        "summary": "Get all known metadata fields.",
        "description": "Get all known metadata fields.",
        "operationId": "get_config_config_notifications_config_notifications_matcher-fields",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "List of known metadata fields.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name of the field"
                      }
                    },
                    "description": "A matchable field."
                  },
                  "description": "List of known metadata fields."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/notifications/config/notifications/matchers": {
      "get": {
        "summary": "List all notification matchers.",
        "description": "List all notification matchers.",
        "operationId": "get_config_config_notifications_config_notifications_matchers",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "List of matchers.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "disable": {
                        "type": "boolean",
                        "description": "Disable this matcher."
                      },
                      "invert-match": {
                        "type": "boolean",
                        "description": "Invert match of the whole filter."
                      },
                      "match-calendar": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "Time stamps to match"
                        },
                        "description": "List of matched severity levels."
                      },
                      "match-field": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "Fields to match"
                        },
                        "description": "List of matched metadata fields."
                      },
                      "match-severity": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "Severity level to match."
                        },
                        "description": "List of matched severity levels."
                      },
                      "mode": {
                        "type": "string",
                        "description": "The mode in which the results of matches are combined."
                      },
                      "name": {
                        "type": "string",
                        "description": "Name schema for targets and matchers"
                      },
                      "origin": {
                        "type": "string",
                        "description": "The origin of a notification configuration entry."
                      },
                      "target": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "Name schema for targets and matchers"
                        },
                        "description": "Targets to notify."
                      }
                    },
                    "description": "Config for Sendmail notification endpoints"
                  },
                  "description": "List of matchers."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Add a new notification matcher.",
        "description": "Add a new notification matcher.",
        "operationId": "post_config_config_notifications_config_notifications_matchers",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "disable": {
                    "type": "boolean",
                    "description": "Disable this matcher."
                  },
                  "invert-match": {
                    "type": "boolean",
                    "description": "Invert match of the whole filter."
                  },
                  "match-calendar": {
                    "type": "array",
                    "description": "List of matched severity levels.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "match-field": {
                    "type": "array",
                    "description": "List of matched metadata fields.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "match-severity": {
                    "type": "array",
                    "description": "List of matched severity levels.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "mode": {
                    "type": "string",
                    "description": "The mode in which the results of matches are combined.",
                    "enum": [
                      "all",
                      "any"
                    ],
                    "default": "all"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name schema for targets and matchers",
                    "minLength": 2,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "origin": {
                    "type": "string",
                    "description": "The origin of a notification configuration entry.",
                    "enum": [
                      "user-created",
                      "builtin",
                      "modified-builtin"
                    ]
                  },
                  "target": {
                    "type": "array",
                    "description": "Targets to notify.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/notifications/config/notifications/matchers/config/notifications/matchers/{name}": {
      "delete": {
        "summary": "Delete notification matcher.",
        "description": "Delete notification matcher.",
        "operationId": "delete_config_config_notifications_config_notifications_matchers_config_notifications_matchers_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Get a notification matcher.",
        "description": "Get a notification matcher.",
        "operationId": "get_config_config_notifications_config_notifications_matchers_config_notifications_matchers_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Config for Sendmail notification endpoints",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "comment": {
                      "type": "string",
                      "description": "Comment."
                    },
                    "disable": {
                      "type": "boolean",
                      "description": "Disable this matcher."
                    },
                    "invert-match": {
                      "type": "boolean",
                      "description": "Invert match of the whole filter."
                    },
                    "match-calendar": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Time stamps to match"
                      },
                      "description": "List of matched severity levels."
                    },
                    "match-field": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Fields to match"
                      },
                      "description": "List of matched metadata fields."
                    },
                    "match-severity": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Severity level to match."
                      },
                      "description": "List of matched severity levels."
                    },
                    "mode": {
                      "type": "string",
                      "description": "The mode in which the results of matches are combined."
                    },
                    "name": {
                      "type": "string",
                      "description": "Name schema for targets and matchers"
                    },
                    "origin": {
                      "type": "string",
                      "description": "The origin of a notification configuration entry."
                    },
                    "target": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Name schema for targets and matchers"
                      },
                      "description": "Targets to notify."
                    }
                  },
                  "description": "Config for Sendmail notification endpoints"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update notification matcher.",
        "description": "Update notification matcher.",
        "operationId": "put_config_config_notifications_config_notifications_matchers_config_notifications_matchers_name",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "disable": {
                    "type": "boolean",
                    "description": "Disable this matcher."
                  },
                  "invert-match": {
                    "type": "boolean",
                    "description": "Invert match of the whole filter."
                  },
                  "match-calendar": {
                    "type": "array",
                    "description": "List of matched severity levels.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "match-field": {
                    "type": "array",
                    "description": "List of matched metadata fields.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "match-severity": {
                    "type": "array",
                    "description": "List of matched severity levels.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "mode": {
                    "type": "string",
                    "description": "The mode in which the results of matches are combined.",
                    "enum": [
                      "all",
                      "any"
                    ],
                    "default": "all"
                  },
                  "target": {
                    "type": "array",
                    "description": "Targets to notify.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/notifications/config/notifications/targets": {
      "get": {
        "summary": "List all notification targets.",
        "description": "List all notification targets.",
        "operationId": "get_config_config_notifications_config_notifications_targets",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "List of all entities which can be used as notification targets.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "comment": {
                        "type": "string",
                        "description": "Comment"
                      },
                      "disable": {
                        "type": "boolean",
                        "description": "Target is disabled"
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of the endpoint"
                      },
                      "origin": {
                        "type": "string",
                        "description": "The origin of a notification configuration entry."
                      },
                      "type": {
                        "type": "string",
                        "description": "Type of the endpoint."
                      }
                    },
                    "description": "Target information"
                  },
                  "description": "List of all entities which can be used as notification targets."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/notifications/config/notifications/targets/config/notifications/targets/{name}": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_config_config_notifications_config_notifications_targets_config_notifications_targets_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/notifications/config/notifications/targets/config/notifications/targets/{name}/config/notifications/targets/{name}/test": {
      "post": {
        "summary": "Test a given notification target.",
        "description": "Test a given notification target.",
        "operationId": "post_config_config_notifications_config_notifications_targets_config_notifications_targets_name_config_notifications_targets_name_test",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/prune": {
      "get": {
        "summary": "List all scheduled prune jobs.",
        "description": "List all scheduled prune jobs.",
        "operationId": "get_config_config_prune",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "List configured prune schedules.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "disable": {
                        "type": "boolean",
                        "description": "Disable this job."
                      },
                      "id": {
                        "type": "string",
                        "description": "Job ID."
                      },
                      "keep-daily": {
                        "type": "integer",
                        "description": "Number of daily backups to keep."
                      },
                      "keep-hourly": {
                        "type": "integer",
                        "description": "Number of hourly backups to keep."
                      },
                      "keep-last": {
                        "type": "integer",
                        "description": "Number of backups to keep."
                      },
                      "keep-monthly": {
                        "type": "integer",
                        "description": "Number of monthly backups to keep."
                      },
                      "keep-weekly": {
                        "type": "integer",
                        "description": "Number of weekly backups to keep."
                      },
                      "keep-yearly": {
                        "type": "integer",
                        "description": "Number of yearly backups to keep."
                      },
                      "max-depth": {
                        "type": "integer",
                        "description": "How many levels of namespaces should be operated on (0 == no recursion, empty == automatic full recursion, namespace depths reduce maximum allowed value)"
                      },
                      "ns": {
                        "type": "string",
                        "description": "Namespace."
                      },
                      "schedule": {
                        "type": "string",
                        "description": "Run prune job at specified schedule."
                      },
                      "store": {
                        "type": "string",
                        "description": "Datastore name."
                      }
                    },
                    "description": "Prune configuration."
                  },
                  "description": "List configured prune schedules."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Create a new prune job.",
        "description": "Create a new prune job.",
        "operationId": "post_config_config_prune",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "disable": {
                    "type": "boolean",
                    "description": "Disable this job.",
                    "default": false
                  },
                  "id": {
                    "type": "string",
                    "description": "Job ID.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "keep-daily": {
                    "type": "integer",
                    "description": "Number of daily backups to keep.",
                    "minimum": 1
                  },
                  "keep-hourly": {
                    "type": "integer",
                    "description": "Number of hourly backups to keep.",
                    "minimum": 1
                  },
                  "keep-last": {
                    "type": "integer",
                    "description": "Number of backups to keep.",
                    "minimum": 1
                  },
                  "keep-monthly": {
                    "type": "integer",
                    "description": "Number of monthly backups to keep.",
                    "minimum": 1
                  },
                  "keep-weekly": {
                    "type": "integer",
                    "description": "Number of weekly backups to keep.",
                    "minimum": 1
                  },
                  "keep-yearly": {
                    "type": "integer",
                    "description": "Number of yearly backups to keep.",
                    "minimum": 1
                  },
                  "max-depth": {
                    "type": "integer",
                    "description": "How many levels of namespaces should be operated on (0 == no recursion, empty == automatic full recursion, namespace depths reduce maximum allowed value)",
                    "minimum": 0,
                    "maximum": 7
                  },
                  "ns": {
                    "type": "string",
                    "description": "Namespace.",
                    "maxLength": 256,
                    "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
                  },
                  "schedule": {
                    "type": "string",
                    "description": "Run prune job at specified schedule."
                  },
                  "store": {
                    "type": "string",
                    "description": "Datastore name.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  }
                },
                "required": [
                  "id",
                  "schedule",
                  "store"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/prune/config/prune/{id}": {
      "delete": {
        "summary": "Remove a prune job configuration",
        "description": "Remove a prune job configuration",
        "operationId": "delete_config_config_prune_config_prune_id",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
              "pattern": "^[a-f0-9]{64}$"
            },
            "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Read a prune job configuration.",
        "description": "Read a prune job configuration.",
        "operationId": "get_config_config_prune_config_prune_id",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Prune configuration.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "comment": {
                      "type": "string",
                      "description": "Comment."
                    },
                    "disable": {
                      "type": "boolean",
                      "description": "Disable this job."
                    },
                    "id": {
                      "type": "string",
                      "description": "Job ID."
                    },
                    "keep-daily": {
                      "type": "integer",
                      "description": "Number of daily backups to keep."
                    },
                    "keep-hourly": {
                      "type": "integer",
                      "description": "Number of hourly backups to keep."
                    },
                    "keep-last": {
                      "type": "integer",
                      "description": "Number of backups to keep."
                    },
                    "keep-monthly": {
                      "type": "integer",
                      "description": "Number of monthly backups to keep."
                    },
                    "keep-weekly": {
                      "type": "integer",
                      "description": "Number of weekly backups to keep."
                    },
                    "keep-yearly": {
                      "type": "integer",
                      "description": "Number of yearly backups to keep."
                    },
                    "max-depth": {
                      "type": "integer",
                      "description": "How many levels of namespaces should be operated on (0 == no recursion, empty == automatic full recursion, namespace depths reduce maximum allowed value)"
                    },
                    "ns": {
                      "type": "string",
                      "description": "Namespace."
                    },
                    "schedule": {
                      "type": "string",
                      "description": "Run prune job at specified schedule."
                    },
                    "store": {
                      "type": "string",
                      "description": "Datastore name."
                    }
                  },
                  "description": "Prune configuration."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update prune job config.",
        "description": "Update prune job config.",
        "operationId": "put_config_config_prune_config_prune_id",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "disable": {
                    "type": "boolean",
                    "description": "Disable this job.",
                    "default": false
                  },
                  "keep-daily": {
                    "type": "integer",
                    "description": "Number of daily backups to keep.",
                    "minimum": 1
                  },
                  "keep-hourly": {
                    "type": "integer",
                    "description": "Number of hourly backups to keep.",
                    "minimum": 1
                  },
                  "keep-last": {
                    "type": "integer",
                    "description": "Number of backups to keep.",
                    "minimum": 1
                  },
                  "keep-monthly": {
                    "type": "integer",
                    "description": "Number of monthly backups to keep.",
                    "minimum": 1
                  },
                  "keep-weekly": {
                    "type": "integer",
                    "description": "Number of weekly backups to keep.",
                    "minimum": 1
                  },
                  "keep-yearly": {
                    "type": "integer",
                    "description": "Number of yearly backups to keep.",
                    "minimum": 1
                  },
                  "max-depth": {
                    "type": "integer",
                    "description": "How many levels of namespaces should be operated on (0 == no recursion, empty == automatic full recursion, namespace depths reduce maximum allowed value)",
                    "minimum": 0,
                    "maximum": 7
                  },
                  "ns": {
                    "type": "string",
                    "description": "Namespace.",
                    "maxLength": 256,
                    "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
                  },
                  "schedule": {
                    "type": "string",
                    "description": "Run prune job at specified schedule."
                  },
                  "store": {
                    "type": "string",
                    "description": "Datastore name.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/remote": {
      "get": {
        "summary": "List all remotes",
        "description": "List all remotes",
        "operationId": "get_config_config_remote",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "The list of configured remotes (with config digest).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "auth-id": {
                        "type": "string",
                        "description": "Authentication ID"
                      },
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "fingerprint": {
                        "type": "string",
                        "description": "X509 certificate fingerprint (sha256)."
                      },
                      "host": {
                        "type": "string",
                        "description": "DNS name or IP address."
                      },
                      "name": {
                        "type": "string",
                        "description": "Remote ID."
                      },
                      "port": {
                        "type": "integer",
                        "description": "The (optional) port"
                      }
                    },
                    "description": "Remote properties."
                  },
                  "description": "The list of configured remotes (with config digest)."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Create new remote.",
        "description": "Create new remote.",
        "operationId": "post_config_config_remote",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "auth-id": {
                    "type": "string",
                    "description": "Authentication ID",
                    "minLength": 3,
                    "maxLength": 64,
                    "pattern": "^(?:(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)|(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)!(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))$"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "fingerprint": {
                    "type": "string",
                    "description": "X509 certificate fingerprint (sha256).",
                    "pattern": "^(?:[0-9a-fA-F][0-9a-fA-F])(?::[0-9a-fA-F][0-9a-fA-F]){31}$"
                  },
                  "host": {
                    "type": "string",
                    "description": "DNS name or IP address.",
                    "pattern": "^(?:(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::)))))$"
                  },
                  "name": {
                    "type": "string",
                    "description": "Remote ID.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password or auth token for remote host.",
                    "minLength": 1,
                    "maxLength": 1024,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "port": {
                    "type": "integer",
                    "description": "The (optional) port"
                  }
                },
                "required": [
                  "auth-id",
                  "host",
                  "name",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/remote/config/remote/{name}": {
      "delete": {
        "summary": "Remove a remote from the configuration file.",
        "description": "Remove a remote from the configuration file.",
        "operationId": "delete_config_config_remote_config_remote_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
              "pattern": "^[a-f0-9]{64}$"
            },
            "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Read remote configuration data.",
        "description": "Read remote configuration data.",
        "operationId": "get_config_config_remote_config_remote_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Remote properties.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "auth-id": {
                      "type": "string",
                      "description": "Authentication ID"
                    },
                    "comment": {
                      "type": "string",
                      "description": "Comment."
                    },
                    "fingerprint": {
                      "type": "string",
                      "description": "X509 certificate fingerprint (sha256)."
                    },
                    "host": {
                      "type": "string",
                      "description": "DNS name or IP address."
                    },
                    "name": {
                      "type": "string",
                      "description": "Remote ID."
                    },
                    "port": {
                      "type": "integer",
                      "description": "The (optional) port"
                    }
                  },
                  "description": "Remote properties."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update remote configuration.",
        "description": "Update remote configuration.",
        "operationId": "put_config_config_remote_config_remote_name",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "auth-id": {
                    "type": "string",
                    "description": "Authentication ID",
                    "minLength": 3,
                    "maxLength": 64,
                    "pattern": "^(?:(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)|(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)!(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))$"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "fingerprint": {
                    "type": "string",
                    "description": "X509 certificate fingerprint (sha256).",
                    "pattern": "^(?:[0-9a-fA-F][0-9a-fA-F])(?::[0-9a-fA-F][0-9a-fA-F]){31}$"
                  },
                  "host": {
                    "type": "string",
                    "description": "DNS name or IP address.",
                    "pattern": "^(?:(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::)))))$"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password or auth token for remote host.",
                    "minLength": 1,
                    "maxLength": 1024,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "port": {
                    "type": "integer",
                    "description": "The (optional) port"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/remote/config/remote/{name}/config/remote/{name}/scan": {
      "get": {
        "summary": "List datastores of a remote.cfg entry",
        "description": "List datastores of a remote.cfg entry",
        "operationId": "get_config_config_remote_config_remote_name_config_remote_name_scan",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List the accessible datastores.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "maintenance": {
                        "type": "string",
                        "format": {
                          "additionalProperties": false,
                          "default_key": "type",
                          "description": "Maintenance mode",
                          "properties": {
                            "message": {
                              "description": "Message describing the reason for the maintenance.",
                              "maxLength": 64,
                              "optional": 1,
                              "pattern": "/^[[:^cntrl:]]*$/",
                              "type": "string"
                            },
                            "type": {
                              "description": "Maintenance type.",
                              "enum": [
                                "read-only",
                                "offline",
                                "delete",
                                "unmount"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "description": "If the datastore is in maintenance mode, information about it"
                      },
                      "mount-status": {
                        "type": "string",
                        "description": "Current mounting status of a datastore, useful for removable datastores."
                      },
                      "store": {
                        "type": "string",
                        "description": "Datastore name."
                      }
                    },
                    "description": "Basic information about a datastore."
                  },
                  "description": "List the accessible datastores."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/remote/config/remote/{name}/config/remote/{name}/scan/config/remote/{name}/scan/{store}": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_config_config_remote_config_remote_name_config_remote_name_scan_config_remote_name_scan_store",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/remote/config/remote/{name}/config/remote/{name}/scan/config/remote/{name}/scan/{store}/config/remote/{name}/scan/{store}/groups": {
      "get": {
        "summary": "List groups of a remote.cfg entry's datastore",
        "description": "List groups of a remote.cfg entry's datastore",
        "operationId": "get_config_config_remote_config_remote_name_config_remote_name_scan_config_remote_name_scan_store_config_remote_name_scan_store_groups",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "namespace",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Namespace.",
              "maxLength": 256,
              "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
            },
            "description": "Namespace."
          }
        ],
        "responses": {
          "200": {
            "description": "Lists the accessible backup groups in a remote datastore.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "backup-count": {
                        "type": "integer",
                        "description": "Number of contained snapshots"
                      },
                      "backup-id": {
                        "type": "string",
                        "description": "Backup ID."
                      },
                      "backup-type": {
                        "type": "string",
                        "description": "Backup types."
                      },
                      "comment": {
                        "type": "string",
                        "description": "The first line from group \"notes\""
                      },
                      "files": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "Backup archive name."
                        },
                        "description": "List of contained archive files."
                      },
                      "last-backup": {
                        "type": "integer",
                        "description": "Backup time (Unix epoch.)"
                      },
                      "owner": {
                        "type": "string",
                        "description": "Authentication ID"
                      }
                    },
                    "description": "Basic information about a backup group."
                  },
                  "description": "Lists the accessible backup groups in a remote datastore."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/remote/config/remote/{name}/config/remote/{name}/scan/config/remote/{name}/scan/{store}/config/remote/{name}/scan/{store}/namespaces": {
      "get": {
        "summary": "List namespaces of a datastore of a remote.cfg entry",
        "description": "List namespaces of a datastore of a remote.cfg entry",
        "operationId": "get_config_config_remote_config_remote_name_config_remote_name_scan_config_remote_name_scan_store_config_remote_name_scan_store_namespaces",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          },
          {
            "name": "store",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxDatastoreName"
            },
            "description": "The store parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List the accessible namespaces of a remote datastore.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "comment": {
                        "type": "string",
                        "description": "The first line from the namespace's \"notes\""
                      },
                      "ns": {
                        "type": "string",
                        "description": "Namespace."
                      }
                    },
                    "description": "Basic information about a backup namespace."
                  },
                  "description": "List the accessible namespaces of a remote datastore."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/sync": {
      "get": {
        "summary": "List all sync jobs",
        "description": "List all sync jobs",
        "operationId": "get_config_config_sync",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "sync-direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The direction of the listed sync jobs: push, pull or all.",
              "enum": [
                "all",
                "push",
                "pull"
              ],
              "default": "pull"
            },
            "description": "The direction of the listed sync jobs: push, pull or all."
          }
        ],
        "responses": {
          "200": {
            "description": "List configured jobs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "burst-in": {
                        "type": "string",
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...)."
                      },
                      "burst-out": {
                        "type": "string",
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...)."
                      },
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "encrypted-only": {
                        "type": "boolean",
                        "description": "Only synchronize encrypted backup snapshots, exclude others."
                      },
                      "group-filter": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "Group filter based on group identifier ('group:GROUP'), group type ('type:<vm|ct|host>'), or regex ('regex:RE'). Can be inverted by prepending 'exclude:'."
                        },
                        "description": "List of group filters."
                      },
                      "id": {
                        "type": "string",
                        "description": "Job ID."
                      },
                      "max-depth": {
                        "type": "integer",
                        "description": "How many levels of namespaces should be operated on (0 == no recursion, empty == automatic full recursion, namespace depths reduce maximum allowed value)"
                      },
                      "ns": {
                        "type": "string",
                        "description": "Namespace."
                      },
                      "owner": {
                        "type": "string",
                        "description": "Authentication ID"
                      },
                      "rate-in": {
                        "type": "string",
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...)."
                      },
                      "rate-out": {
                        "type": "string",
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...)."
                      },
                      "remote": {
                        "type": "string",
                        "description": "Remote ID."
                      },
                      "remote-ns": {
                        "type": "string",
                        "description": "Namespace."
                      },
                      "remote-store": {
                        "type": "string",
                        "description": "Datastore name."
                      },
                      "remove-vanished": {
                        "type": "boolean",
                        "description": "Delete vanished backups. This remove the local copy if the remote backup was deleted."
                      },
                      "resync-corrupt": {
                        "type": "boolean",
                        "description": "If the verification failed for a local snapshot, try to pull it again."
                      },
                      "schedule": {
                        "type": "string",
                        "description": "Run sync job at specified schedule."
                      },
                      "store": {
                        "type": "string",
                        "description": "Datastore name."
                      },
                      "sync-direction": {
                        "type": "string",
                        "description": "Direction of the sync job, push or pull"
                      },
                      "transfer-last": {
                        "type": "integer",
                        "description": "Limit transfer to last N snapshots (per group), skipping others"
                      },
                      "verified-only": {
                        "type": "boolean",
                        "description": "Only synchronize verified backup snapshots, exclude others."
                      }
                    },
                    "description": "Sync Job"
                  },
                  "description": "List configured jobs."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Create a new sync job.",
        "description": "Create a new sync job.",
        "operationId": "post_config_config_sync",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "burst-in": {
                    "type": "string",
                    "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "burst-out": {
                    "type": "string",
                    "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "encrypted-only": {
                    "type": "boolean",
                    "description": "Only synchronize encrypted backup snapshots, exclude others."
                  },
                  "group-filter": {
                    "type": "array",
                    "description": "List of group filters.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "id": {
                    "type": "string",
                    "description": "Job ID.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "max-depth": {
                    "type": "integer",
                    "description": "How many levels of namespaces should be operated on (0 == no recursion, empty == automatic full recursion, namespace depths reduce maximum allowed value)",
                    "minimum": 0,
                    "maximum": 7
                  },
                  "ns": {
                    "type": "string",
                    "description": "Namespace.",
                    "maxLength": 256,
                    "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
                  },
                  "owner": {
                    "type": "string",
                    "description": "Authentication ID",
                    "minLength": 3,
                    "maxLength": 64,
                    "pattern": "^(?:(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)|(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)!(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))$"
                  },
                  "rate-in": {
                    "type": "string",
                    "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "rate-out": {
                    "type": "string",
                    "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "remote": {
                    "type": "string",
                    "description": "Remote ID.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "remote-ns": {
                    "type": "string",
                    "description": "Namespace.",
                    "maxLength": 256,
                    "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
                  },
                  "remote-store": {
                    "type": "string",
                    "description": "Datastore name.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "remove-vanished": {
                    "type": "boolean",
                    "description": "Delete vanished backups. This remove the local copy if the remote backup was deleted.",
                    "default": false
                  },
                  "resync-corrupt": {
                    "type": "boolean",
                    "description": "If the verification failed for a local snapshot, try to pull it again."
                  },
                  "schedule": {
                    "type": "string",
                    "description": "Run sync job at specified schedule."
                  },
                  "store": {
                    "type": "string",
                    "description": "Datastore name.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "sync-direction": {
                    "type": "string",
                    "description": "Direction of the sync job, push or pull",
                    "enum": [
                      "pull",
                      "push"
                    ],
                    "default": "pull"
                  },
                  "transfer-last": {
                    "type": "integer",
                    "description": "Limit transfer to last N snapshots (per group), skipping others",
                    "minimum": 1
                  },
                  "verified-only": {
                    "type": "boolean",
                    "description": "Only synchronize verified backup snapshots, exclude others."
                  }
                },
                "required": [
                  "id",
                  "remote-store",
                  "store"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/sync/config/sync/{id}": {
      "delete": {
        "summary": "Remove a sync job configuration",
        "description": "Remove a sync job configuration",
        "operationId": "delete_config_config_sync_config_sync_id",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
              "pattern": "^[a-f0-9]{64}$"
            },
            "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Read a sync job configuration.",
        "description": "Read a sync job configuration.",
        "operationId": "get_config_config_sync_config_sync_id",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Sync Job",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "burst-in": {
                      "type": "string",
                      "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...)."
                    },
                    "burst-out": {
                      "type": "string",
                      "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...)."
                    },
                    "comment": {
                      "type": "string",
                      "description": "Comment."
                    },
                    "encrypted-only": {
                      "type": "boolean",
                      "description": "Only synchronize encrypted backup snapshots, exclude others."
                    },
                    "group-filter": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Group filter based on group identifier ('group:GROUP'), group type ('type:<vm|ct|host>'), or regex ('regex:RE'). Can be inverted by prepending 'exclude:'."
                      },
                      "description": "List of group filters."
                    },
                    "id": {
                      "type": "string",
                      "description": "Job ID."
                    },
                    "max-depth": {
                      "type": "integer",
                      "description": "How many levels of namespaces should be operated on (0 == no recursion, empty == automatic full recursion, namespace depths reduce maximum allowed value)"
                    },
                    "ns": {
                      "type": "string",
                      "description": "Namespace."
                    },
                    "owner": {
                      "type": "string",
                      "description": "Authentication ID"
                    },
                    "rate-in": {
                      "type": "string",
                      "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...)."
                    },
                    "rate-out": {
                      "type": "string",
                      "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...)."
                    },
                    "remote": {
                      "type": "string",
                      "description": "Remote ID."
                    },
                    "remote-ns": {
                      "type": "string",
                      "description": "Namespace."
                    },
                    "remote-store": {
                      "type": "string",
                      "description": "Datastore name."
                    },
                    "remove-vanished": {
                      "type": "boolean",
                      "description": "Delete vanished backups. This remove the local copy if the remote backup was deleted."
                    },
                    "resync-corrupt": {
                      "type": "boolean",
                      "description": "If the verification failed for a local snapshot, try to pull it again."
                    },
                    "schedule": {
                      "type": "string",
                      "description": "Run sync job at specified schedule."
                    },
                    "store": {
                      "type": "string",
                      "description": "Datastore name."
                    },
                    "sync-direction": {
                      "type": "string",
                      "description": "Direction of the sync job, push or pull"
                    },
                    "transfer-last": {
                      "type": "integer",
                      "description": "Limit transfer to last N snapshots (per group), skipping others"
                    },
                    "verified-only": {
                      "type": "boolean",
                      "description": "Only synchronize verified backup snapshots, exclude others."
                    }
                  },
                  "description": "Sync Job"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update sync job config.",
        "description": "Update sync job config.",
        "operationId": "put_config_config_sync_config_sync_id",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "burst-in": {
                    "type": "string",
                    "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "burst-out": {
                    "type": "string",
                    "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "encrypted-only": {
                    "type": "boolean",
                    "description": "Only synchronize encrypted backup snapshots, exclude others."
                  },
                  "group-filter": {
                    "type": "array",
                    "description": "List of group filters.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "max-depth": {
                    "type": "integer",
                    "description": "How many levels of namespaces should be operated on (0 == no recursion, empty == automatic full recursion, namespace depths reduce maximum allowed value)",
                    "minimum": 0,
                    "maximum": 7
                  },
                  "ns": {
                    "type": "string",
                    "description": "Namespace.",
                    "maxLength": 256,
                    "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
                  },
                  "owner": {
                    "type": "string",
                    "description": "Authentication ID",
                    "minLength": 3,
                    "maxLength": 64,
                    "pattern": "^(?:(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)|(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)!(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))$"
                  },
                  "rate-in": {
                    "type": "string",
                    "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "rate-out": {
                    "type": "string",
                    "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "remote": {
                    "type": "string",
                    "description": "Remote ID.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "remote-ns": {
                    "type": "string",
                    "description": "Namespace.",
                    "maxLength": 256,
                    "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
                  },
                  "remote-store": {
                    "type": "string",
                    "description": "Datastore name.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "remove-vanished": {
                    "type": "boolean",
                    "description": "Delete vanished backups. This remove the local copy if the remote backup was deleted.",
                    "default": false
                  },
                  "resync-corrupt": {
                    "type": "boolean",
                    "description": "If the verification failed for a local snapshot, try to pull it again."
                  },
                  "schedule": {
                    "type": "string",
                    "description": "Run sync job at specified schedule."
                  },
                  "store": {
                    "type": "string",
                    "description": "Datastore name.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "sync-direction": {
                    "type": "string",
                    "description": "Direction of the sync job, push or pull",
                    "enum": [
                      "pull",
                      "push"
                    ],
                    "default": "pull"
                  },
                  "transfer-last": {
                    "type": "integer",
                    "description": "Limit transfer to last N snapshots (per group), skipping others",
                    "minimum": 1
                  },
                  "verified-only": {
                    "type": "boolean",
                    "description": "Only synchronize verified backup snapshots, exclude others."
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/tape-backup-job": {
      "get": {
        "summary": "List all tape backup jobs",
        "description": "List all tape backup jobs",
        "operationId": "get_config_config_tape-backup-job",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "List configured jobs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "drive": {
                        "type": "string",
                        "description": "Drive Identifier."
                      },
                      "eject-media": {
                        "type": "boolean",
                        "description": "Eject media upon job completion."
                      },
                      "export-media-set": {
                        "type": "boolean",
                        "description": "Export media set upon job completion."
                      },
                      "group-filter": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "Group filter based on group identifier ('group:GROUP'), group type ('type:<vm|ct|host>'), or regex ('regex:RE'). Can be inverted by prepending 'exclude:'."
                        },
                        "description": "List of group filters."
                      },
                      "id": {
                        "type": "string",
                        "description": "Job ID."
                      },
                      "latest-only": {
                        "type": "boolean",
                        "description": "Backup latest snapshots only."
                      },
                      "max-depth": {
                        "type": "integer",
                        "description": "How many levels of namespaces should be operated on (0 == no recursion)"
                      },
                      "notification-mode": {
                        "type": "string",
                        "description": "Configure how notifications for this datastore should be sent.\n`legacy-sendmail` sends email notifications to the user configured\nin `notify-user` via the system's `sendmail` executable.\n`notification-system` emits matchable notification events to the\nnotification system."
                      },
                      "notify-user": {
                        "type": "string",
                        "description": "User ID"
                      },
                      "ns": {
                        "type": "string",
                        "description": "Namespace."
                      },
                      "pool": {
                        "type": "string",
                        "description": "Media pool name."
                      },
                      "schedule": {
                        "type": "string",
                        "description": "Run sync job at specified schedule."
                      },
                      "store": {
                        "type": "string",
                        "description": "Datastore name."
                      },
                      "worker-threads": {
                        "type": "integer",
                        "description": "Set the number of worker threads to use for the job"
                      }
                    },
                    "description": "Tape Backup Job"
                  },
                  "description": "List configured jobs."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Create a new tape backup job.",
        "description": "Create a new tape backup job.",
        "operationId": "post_config_config_tape-backup-job",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "drive": {
                    "type": "string",
                    "description": "Drive Identifier.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "eject-media": {
                    "type": "boolean",
                    "description": "Eject media upon job completion."
                  },
                  "export-media-set": {
                    "type": "boolean",
                    "description": "Export media set upon job completion."
                  },
                  "group-filter": {
                    "type": "array",
                    "description": "List of group filters.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "id": {
                    "type": "string",
                    "description": "Job ID.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "latest-only": {
                    "type": "boolean",
                    "description": "Backup latest snapshots only."
                  },
                  "max-depth": {
                    "type": "integer",
                    "description": "How many levels of namespaces should be operated on (0 == no recursion)",
                    "minimum": 0,
                    "maximum": 7,
                    "default": 7
                  },
                  "notification-mode": {
                    "type": "string",
                    "description": "Configure how notifications for this datastore should be sent.\n`legacy-sendmail` sends email notifications to the user configured\nin `notify-user` via the system's `sendmail` executable.\n`notification-system` emits matchable notification events to the\nnotification system.",
                    "enum": [
                      "legacy-sendmail",
                      "notification-system"
                    ],
                    "default": "legacy-sendmail"
                  },
                  "notify-user": {
                    "type": "string",
                    "description": "User ID",
                    "minLength": 3,
                    "maxLength": 64,
                    "pattern": "^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "ns": {
                    "type": "string",
                    "description": "Namespace.",
                    "maxLength": 256,
                    "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
                  },
                  "pool": {
                    "type": "string",
                    "description": "Media pool name.",
                    "minLength": 2,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "schedule": {
                    "type": "string",
                    "description": "Run sync job at specified schedule."
                  },
                  "store": {
                    "type": "string",
                    "description": "Datastore name.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "worker-threads": {
                    "type": "integer",
                    "description": "Set the number of worker threads to use for the job",
                    "minimum": 1,
                    "maximum": 32,
                    "default": 1
                  }
                },
                "required": [
                  "drive",
                  "id",
                  "pool",
                  "store"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/tape-backup-job/config/tape-backup-job/{id}": {
      "delete": {
        "summary": "Remove a tape backup job configuration",
        "description": "Remove a tape backup job configuration",
        "operationId": "delete_config_config_tape-backup-job_config_tape-backup-job_id",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
              "pattern": "^[a-f0-9]{64}$"
            },
            "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Read a tape backup job configuration.",
        "description": "Read a tape backup job configuration.",
        "operationId": "get_config_config_tape-backup-job_config_tape-backup-job_id",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Tape Backup Job",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "comment": {
                      "type": "string",
                      "description": "Comment."
                    },
                    "drive": {
                      "type": "string",
                      "description": "Drive Identifier."
                    },
                    "eject-media": {
                      "type": "boolean",
                      "description": "Eject media upon job completion."
                    },
                    "export-media-set": {
                      "type": "boolean",
                      "description": "Export media set upon job completion."
                    },
                    "group-filter": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Group filter based on group identifier ('group:GROUP'), group type ('type:<vm|ct|host>'), or regex ('regex:RE'). Can be inverted by prepending 'exclude:'."
                      },
                      "description": "List of group filters."
                    },
                    "id": {
                      "type": "string",
                      "description": "Job ID."
                    },
                    "latest-only": {
                      "type": "boolean",
                      "description": "Backup latest snapshots only."
                    },
                    "max-depth": {
                      "type": "integer",
                      "description": "How many levels of namespaces should be operated on (0 == no recursion)"
                    },
                    "notification-mode": {
                      "type": "string",
                      "description": "Configure how notifications for this datastore should be sent.\n`legacy-sendmail` sends email notifications to the user configured\nin `notify-user` via the system's `sendmail` executable.\n`notification-system` emits matchable notification events to the\nnotification system."
                    },
                    "notify-user": {
                      "type": "string",
                      "description": "User ID"
                    },
                    "ns": {
                      "type": "string",
                      "description": "Namespace."
                    },
                    "pool": {
                      "type": "string",
                      "description": "Media pool name."
                    },
                    "schedule": {
                      "type": "string",
                      "description": "Run sync job at specified schedule."
                    },
                    "store": {
                      "type": "string",
                      "description": "Datastore name."
                    },
                    "worker-threads": {
                      "type": "integer",
                      "description": "Set the number of worker threads to use for the job"
                    }
                  },
                  "description": "Tape Backup Job"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update the tape backup job",
        "description": "Update the tape backup job",
        "operationId": "put_config_config_tape-backup-job_config_tape-backup-job_id",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "drive": {
                    "type": "string",
                    "description": "Drive Identifier.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "eject-media": {
                    "type": "boolean",
                    "description": "Eject media upon job completion."
                  },
                  "export-media-set": {
                    "type": "boolean",
                    "description": "Export media set upon job completion."
                  },
                  "group-filter": {
                    "type": "array",
                    "description": "List of group filters.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "latest-only": {
                    "type": "boolean",
                    "description": "Backup latest snapshots only."
                  },
                  "max-depth": {
                    "type": "integer",
                    "description": "How many levels of namespaces should be operated on (0 == no recursion)",
                    "minimum": 0,
                    "maximum": 7,
                    "default": 7
                  },
                  "notification-mode": {
                    "type": "string",
                    "description": "Configure how notifications for this datastore should be sent.\n`legacy-sendmail` sends email notifications to the user configured\nin `notify-user` via the system's `sendmail` executable.\n`notification-system` emits matchable notification events to the\nnotification system.",
                    "enum": [
                      "legacy-sendmail",
                      "notification-system"
                    ],
                    "default": "legacy-sendmail"
                  },
                  "notify-user": {
                    "type": "string",
                    "description": "User ID",
                    "minLength": 3,
                    "maxLength": 64,
                    "pattern": "^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "ns": {
                    "type": "string",
                    "description": "Namespace.",
                    "maxLength": 256,
                    "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
                  },
                  "pool": {
                    "type": "string",
                    "description": "Media pool name.",
                    "minLength": 2,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "schedule": {
                    "type": "string",
                    "description": "Run sync job at specified schedule."
                  },
                  "store": {
                    "type": "string",
                    "description": "Datastore name.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "worker-threads": {
                    "type": "integer",
                    "description": "Set the number of worker threads to use for the job",
                    "minimum": 1,
                    "maximum": 32,
                    "default": 1
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/tape-encryption-keys": {
      "get": {
        "summary": "List existing keys",
        "description": "List existing keys",
        "operationId": "get_config_config_tape-encryption-keys",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "The list of tape encryption keys (with config digest).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "created": {
                        "type": "integer",
                        "description": "Key creation time"
                      },
                      "fingerprint": {
                        "type": "string",
                        "description": "X509 certificate fingerprint (sha256)."
                      },
                      "hint": {
                        "type": "string",
                        "description": "Password hint"
                      },
                      "kdf": {
                        "type": "string",
                        "description": "Key derivation function for password protected encryption keys."
                      },
                      "modified": {
                        "type": "integer",
                        "description": "Key modification time"
                      },
                      "path": {
                        "type": "string",
                        "description": "Path to key (if stored in a file)"
                      }
                    },
                    "description": "Encryption Key Information"
                  },
                  "description": "The list of tape encryption keys (with config digest)."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Create a new encryption key",
        "description": "Create a new encryption key",
        "operationId": "post_config_config_tape-encryption-keys",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "hint": {
                    "type": "string",
                    "description": "Password hint.",
                    "minLength": 1,
                    "maxLength": 64,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "kdf": {
                    "type": "string",
                    "description": "Key derivation function for password protected encryption keys.",
                    "enum": [
                      "none",
                      "scrypt",
                      "pbkdf2"
                    ],
                    "default": "scrypt"
                  },
                  "key": {
                    "type": "string",
                    "description": "Restore/Re-create a key from this JSON string.",
                    "minLength": 300,
                    "maxLength": 600
                  },
                  "password": {
                    "type": "string",
                    "description": "A secret password.",
                    "minLength": 5
                  }
                },
                "required": [
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tape encryption key fingerprint (sha256).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Tape encryption key fingerprint (sha256)."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/tape-encryption-keys/config/tape-encryption-keys/{fingerprint}": {
      "delete": {
        "summary": "Remove a encryption key from the database\n\nPlease note that you can no longer access tapes using this key.",
        "description": "Remove a encryption key from the database\n\nPlease note that you can no longer access tapes using this key.",
        "operationId": "delete_config_config_tape-encryption-keys_config_tape-encryption-keys_fingerprint",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "fingerprint",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The fingerprint parameter"
            },
            "description": "The fingerprint parameter"
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
              "pattern": "^[a-f0-9]{64}$"
            },
            "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Get key config (public key part)",
        "description": "Get key config (public key part)",
        "operationId": "get_config_config_tape-encryption-keys_config_tape-encryption-keys_fingerprint",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "fingerprint",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The fingerprint parameter"
            },
            "description": "The fingerprint parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Encryption Key Information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "created": {
                      "type": "integer",
                      "description": "Key creation time"
                    },
                    "fingerprint": {
                      "type": "string",
                      "description": "X509 certificate fingerprint (sha256)."
                    },
                    "hint": {
                      "type": "string",
                      "description": "Password hint"
                    },
                    "kdf": {
                      "type": "string",
                      "description": "Key derivation function for password protected encryption keys."
                    },
                    "modified": {
                      "type": "integer",
                      "description": "Key modification time"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path to key (if stored in a file)"
                    }
                  },
                  "description": "Encryption Key Information"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Change the encryption key's password (and password hint).",
        "description": "Change the encryption key's password (and password hint).",
        "operationId": "put_config_config_tape-encryption-keys_config_tape-encryption-keys_fingerprint",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "force": {
                    "type": "boolean",
                    "description": "Reset the passphrase for a tape key, using the root-only accessible copy.",
                    "default": false
                  },
                  "hint": {
                    "type": "string",
                    "description": "Password hint.",
                    "minLength": 1,
                    "maxLength": 64,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "kdf": {
                    "type": "string",
                    "description": "Key derivation function for password protected encryption keys.",
                    "enum": [
                      "none",
                      "scrypt",
                      "pbkdf2"
                    ],
                    "default": "scrypt"
                  },
                  "new-password": {
                    "type": "string",
                    "description": "The new password.",
                    "minLength": 5
                  },
                  "password": {
                    "type": "string",
                    "description": "The current password.",
                    "minLength": 5
                  }
                },
                "required": [
                  "hint",
                  "new-password"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "fingerprint",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The fingerprint parameter"
            },
            "description": "The fingerprint parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/traffic-control": {
      "get": {
        "summary": "List traffic control rules",
        "description": "List traffic control rules",
        "operationId": "get_config_config_traffic-control",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "The list of configured traffic control rules (with config digest).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "burst-in": {
                        "type": "string",
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...)."
                      },
                      "burst-out": {
                        "type": "string",
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...)."
                      },
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "name": {
                        "type": "string",
                        "description": "Rule ID."
                      },
                      "network": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "IP address (IPv4 or IPv6) with netmask (CIDR notation)."
                        },
                        "description": "Rule applies to Source IPs within this networks"
                      },
                      "rate-in": {
                        "type": "string",
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...)."
                      },
                      "rate-out": {
                        "type": "string",
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...)."
                      },
                      "timeframe": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "Timeframe to specify when the rule is active."
                        },
                        "description": "Enable the rule at specific times"
                      }
                    },
                    "description": "Traffic control rule"
                  },
                  "description": "The list of configured traffic control rules (with config digest)."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Create new traffic control rule.",
        "description": "Create new traffic control rule.",
        "operationId": "post_config_config_traffic-control",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "burst-in": {
                    "type": "string",
                    "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "burst-out": {
                    "type": "string",
                    "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "name": {
                    "type": "string",
                    "description": "Rule ID.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "network": {
                    "type": "array",
                    "description": "Rule applies to Source IPs within this networks",
                    "items": {
                      "type": "string"
                    }
                  },
                  "rate-in": {
                    "type": "string",
                    "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "rate-out": {
                    "type": "string",
                    "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "timeframe": {
                    "type": "array",
                    "description": "Enable the rule at specific times",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "name",
                  "network"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/traffic-control/config/traffic-control/{name}": {
      "delete": {
        "summary": "Remove a traffic control rule from the configuration file.",
        "description": "Remove a traffic control rule from the configuration file.",
        "operationId": "delete_config_config_traffic-control_config_traffic-control_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
              "pattern": "^[a-f0-9]{64}$"
            },
            "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Read traffic control configuration data.",
        "description": "Read traffic control configuration data.",
        "operationId": "get_config_config_traffic-control_config_traffic-control_name",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Traffic control rule",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "burst-in": {
                      "type": "string",
                      "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...)."
                    },
                    "burst-out": {
                      "type": "string",
                      "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...)."
                    },
                    "comment": {
                      "type": "string",
                      "description": "Comment."
                    },
                    "name": {
                      "type": "string",
                      "description": "Rule ID."
                    },
                    "network": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "IP address (IPv4 or IPv6) with netmask (CIDR notation)."
                      },
                      "description": "Rule applies to Source IPs within this networks"
                    },
                    "rate-in": {
                      "type": "string",
                      "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...)."
                    },
                    "rate-out": {
                      "type": "string",
                      "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...)."
                    },
                    "timeframe": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Timeframe to specify when the rule is active."
                      },
                      "description": "Enable the rule at specific times"
                    }
                  },
                  "description": "Traffic control rule"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update traffic control configuration.",
        "description": "Update traffic control configuration.",
        "operationId": "put_config_config_traffic-control_config_traffic-control_name",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "burst-in": {
                    "type": "string",
                    "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "burst-out": {
                    "type": "string",
                    "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "network": {
                    "type": "array",
                    "description": "Rule applies to Source IPs within this networks",
                    "items": {
                      "type": "string"
                    }
                  },
                  "rate-in": {
                    "type": "string",
                    "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "rate-out": {
                    "type": "string",
                    "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "timeframe": {
                    "type": "array",
                    "description": "Enable the rule at specific times",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/verify": {
      "get": {
        "summary": "List all verification jobs",
        "description": "List all verification jobs",
        "operationId": "get_config_config_verify",
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "List configured jobs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "id": {
                        "type": "string",
                        "description": "Job ID."
                      },
                      "ignore-verified": {
                        "type": "boolean",
                        "description": "Do not verify backups that are already verified if their verification is not outdated."
                      },
                      "max-depth": {
                        "type": "integer",
                        "description": "How many levels of namespaces should be operated on (0 == no recursion)"
                      },
                      "ns": {
                        "type": "string",
                        "description": "Namespace."
                      },
                      "outdated-after": {
                        "type": "integer",
                        "description": "Days after that a verification becomes outdated. (0 is deprecated)'"
                      },
                      "schedule": {
                        "type": "string",
                        "description": "Run verify job at specified schedule."
                      },
                      "store": {
                        "type": "string",
                        "description": "Datastore name."
                      }
                    },
                    "description": "Verification Job"
                  },
                  "description": "List configured jobs."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Create a new verification job.",
        "description": "Create a new verification job.",
        "operationId": "post_config_config_verify",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "id": {
                    "type": "string",
                    "description": "Job ID.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "ignore-verified": {
                    "type": "boolean",
                    "description": "Do not verify backups that are already verified if their verification is not outdated.",
                    "default": true
                  },
                  "max-depth": {
                    "type": "integer",
                    "description": "How many levels of namespaces should be operated on (0 == no recursion)",
                    "minimum": 0,
                    "maximum": 7,
                    "default": 7
                  },
                  "ns": {
                    "type": "string",
                    "description": "Namespace.",
                    "maxLength": 256,
                    "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
                  },
                  "outdated-after": {
                    "type": "integer",
                    "description": "Days after that a verification becomes outdated. (0 is deprecated)'",
                    "minimum": 0
                  },
                  "schedule": {
                    "type": "string",
                    "description": "Run verify job at specified schedule."
                  },
                  "store": {
                    "type": "string",
                    "description": "Datastore name.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  }
                },
                "required": [
                  "id",
                  "store"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//config/config/verify/config/verify/{id}": {
      "delete": {
        "summary": "Remove a verification job configuration",
        "description": "Remove a verification job configuration",
        "operationId": "delete_config_config_verify_config_verify_id",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
              "pattern": "^[a-f0-9]{64}$"
            },
            "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Read a verification job configuration.",
        "description": "Read a verification job configuration.",
        "operationId": "get_config_config_verify_config_verify_id",
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Verification Job",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "comment": {
                      "type": "string",
                      "description": "Comment."
                    },
                    "id": {
                      "type": "string",
                      "description": "Job ID."
                    },
                    "ignore-verified": {
                      "type": "boolean",
                      "description": "Do not verify backups that are already verified if their verification is not outdated."
                    },
                    "max-depth": {
                      "type": "integer",
                      "description": "How many levels of namespaces should be operated on (0 == no recursion)"
                    },
                    "ns": {
                      "type": "string",
                      "description": "Namespace."
                    },
                    "outdated-after": {
                      "type": "integer",
                      "description": "Days after that a verification becomes outdated. (0 is deprecated)'"
                    },
                    "schedule": {
                      "type": "string",
                      "description": "Run verify job at specified schedule."
                    },
                    "store": {
                      "type": "string",
                      "description": "Datastore name."
                    }
                  },
                  "description": "Verification Job"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update verification job config.",
        "description": "Update verification job config.",
        "operationId": "put_config_config_verify_config_verify_id",
        "tags": [
          "Configuration"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "Comment.",
                    "maxLength": 128,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "ignore-verified": {
                    "type": "boolean",
                    "description": "Do not verify backups that are already verified if their verification is not outdated.",
                    "default": true
                  },
                  "max-depth": {
                    "type": "integer",
                    "description": "How many levels of namespaces should be operated on (0 == no recursion)",
                    "minimum": 0,
                    "maximum": 7,
                    "default": 7
                  },
                  "ns": {
                    "type": "string",
                    "description": "Namespace.",
                    "maxLength": 256,
                    "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
                  },
                  "outdated-after": {
                    "type": "integer",
                    "description": "Days after that a verification becomes outdated. (0 is deprecated)'",
                    "minimum": 0
                  },
                  "schedule": {
                    "type": "string",
                    "description": "Run verify job at specified schedule."
                  },
                  "store": {
                    "type": "string",
                    "description": "Datastore name.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes": {
      "get": {
        "summary": "List Nodes (only for compatibility)",
        "description": "List Nodes (only for compatibility)",
        "operationId": "get_nodes",
        "tags": [
          "Nodes"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_nodes_nodes_node",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/apt": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_nodes_nodes_node_nodes_node_apt",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/apt/nodes/{node}/apt/changelog": {
      "get": {
        "summary": "Retrieve the changelog of the specified package.",
        "description": "Retrieve the changelog of the specified package.",
        "operationId": "get_nodes_nodes_node_nodes_node_apt_nodes_node_apt_changelog",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Package name to get changelog of."
            },
            "description": "Package name to get changelog of."
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Package version to get changelog of. Omit to use candidate version."
            },
            "description": "Package version to get changelog of. Omit to use candidate version."
          }
        ],
        "responses": {
          "200": {
            "description": "Unique Process/Task Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Unique Process/Task Identifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/apt/nodes/{node}/apt/repositories": {
      "get": {
        "summary": "Get APT repository information.",
        "description": "Get APT repository information.",
        "operationId": "get_nodes_nodes_node_nodes_node_apt_nodes_node_apt_repositories",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Result from parsing the APT repository files in /etc/apt/.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "digest": {
                      "type": "string",
                      "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications."
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "description": "The error message."
                          },
                          "path": {
                            "type": "string",
                            "description": "The path to the problematic file."
                          }
                        },
                        "description": "Error type for problems with APT repository files."
                      },
                      "description": "List of problematic files."
                    },
                    "files": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "content": {
                            "type": "string",
                            "description": "The file content, if already parsed."
                          },
                          "digest": {
                            "type": "string",
                            "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications."
                          },
                          "file-type": {
                            "type": "string",
                            "description": "The type of format used for an APT repository."
                          },
                          "path": {
                            "type": "string",
                            "description": "The path to the file. If None, `contents` must be set directly."
                          },
                          "repositories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "Comment": {
                                  "type": "string",
                                  "description": "Associated comment."
                                },
                                "Components": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "description": "Repository component."
                                  },
                                  "description": "List of repository components."
                                },
                                "Enabled": {
                                  "type": "boolean",
                                  "description": "Whether the repository is enabled or not."
                                },
                                "FileType": {
                                  "type": "string",
                                  "description": "The type of format used for an APT repository."
                                },
                                "Options": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "Key": {
                                        "type": "string",
                                        "description": "Option key."
                                      },
                                      "Values": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "description": "Value."
                                        },
                                        "description": "Option values."
                                      }
                                    },
                                    "description": "Additional options for an APT repository.\nUsed for both single- and multi-value options."
                                  },
                                  "description": "Additional options."
                                },
                                "Suites": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "description": "Package distribution."
                                  },
                                  "description": "List of distributions."
                                },
                                "Types": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "description": "The type of an APT package."
                                  },
                                  "description": "List of package types."
                                },
                                "URIs": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "description": "Repository URI."
                                  },
                                  "description": "List of repository URIs."
                                }
                              },
                              "description": "Describes an APT repository."
                            },
                            "description": "List of APT repositories."
                          }
                        },
                        "description": "Represents an abstract APT repository file."
                      },
                      "description": "List of parsed repository files."
                    },
                    "infos": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "integer",
                            "description": "Index of the associated repository within the file (starting from 0)."
                          },
                          "kind": {
                            "type": "string",
                            "description": "Info kind (e.g. \"warning\")"
                          },
                          "message": {
                            "type": "string",
                            "description": "Info message"
                          },
                          "path": {
                            "type": "string",
                            "description": "Path to the defining file."
                          },
                          "property": {
                            "type": "string",
                            "description": "The property from which the info originates (e.g. \"Suites\")"
                          }
                        },
                        "description": "Additional information for a repository."
                      },
                      "description": "List of additional information/warnings about the repositories"
                    },
                    "standard-repos": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "description": {
                            "type": "string",
                            "description": "Description of the repository."
                          },
                          "handle": {
                            "type": "string",
                            "description": "Handle referencing a standard repository."
                          },
                          "name": {
                            "type": "string",
                            "description": "Display name of the repository."
                          },
                          "status": {
                            "type": "boolean",
                            "description": "Configuration status of the associated repository, where `None` means\nnot configured, and `Some(bool)` indicates enabled or disabled."
                          }
                        },
                        "description": "Reference to a standard repository and configuration status."
                      },
                      "description": "List of standard repositories and their configuration status."
                    }
                  },
                  "description": "Result from parsing the APT repository files in /etc/apt/."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Change the properties of the specified repository.\n\nThe `digest` parameter asserts that the configuration has not been modified.",
        "description": "Change the properties of the specified repository.\n\nThe `digest` parameter asserts that the configuration has not been modified.",
        "operationId": "post_nodes_nodes_node_nodes_node_apt_nodes_node_apt_repositories",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Whether the repository should be enabled or not."
                  },
                  "index": {
                    "type": "integer",
                    "description": "Index within the file (starting from 0)."
                  },
                  "path": {
                    "type": "string",
                    "description": "Path to the containing file."
                  }
                },
                "required": [
                  "index",
                  "path"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Add the repository identified by the `handle`.\nIf the repository is already configured, it will be set to enabled.\n\nThe `digest` parameter asserts that the configuration has not been modified.",
        "description": "Add the repository identified by the `handle`.\nIf the repository is already configured, it will be set to enabled.\n\nThe `digest` parameter asserts that the configuration has not been modified.",
        "operationId": "put_nodes_nodes_node_nodes_node_apt_nodes_node_apt_repositories",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "handle": {
                    "type": "string",
                    "description": "Handles for Proxmox repositories.",
                    "enum": [
                      "enterprise",
                      "no-subscription",
                      "test",
                      "ceph-quincy-enterprise",
                      "ceph-quincy-no-subscription",
                      "ceph-quincy-test",
                      "ceph-reef-enterprise",
                      "ceph-reef-no-subscription",
                      "ceph-reef-test",
                      "ceph-squid-enterprise",
                      "ceph-squid-no-subscription",
                      "ceph-squid-test"
                    ]
                  }
                },
                "required": [
                  "handle"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/apt/nodes/{node}/apt/update": {
      "get": {
        "summary": "List available APT updates",
        "description": "List available APT updates",
        "operationId": "get_nodes_nodes_node_nodes_node_apt_nodes_node_apt_update",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of packages with available updates.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "Arch": {
                        "type": "string",
                        "description": "Package architecture"
                      },
                      "Description": {
                        "type": "string",
                        "description": "Human readable package description"
                      },
                      "ExtraInfo": {
                        "type": "string",
                        "description": "Custom extra field for additional package information"
                      },
                      "OldVersion": {
                        "type": "string",
                        "description": "Old version currently installed"
                      },
                      "Origin": {
                        "type": "string",
                        "description": "Package origin"
                      },
                      "Package": {
                        "type": "string",
                        "description": "Package name"
                      },
                      "Priority": {
                        "type": "string",
                        "description": "Package priority in human-readable form"
                      },
                      "Section": {
                        "type": "string",
                        "description": "Package section"
                      },
                      "Title": {
                        "type": "string",
                        "description": "Package title"
                      },
                      "Version": {
                        "type": "string",
                        "description": "New version to be updated to"
                      }
                    },
                    "description": "Describes a package for which an update is available."
                  },
                  "description": "A list of packages with available updates."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Update the APT database",
        "description": "Update the APT database",
        "operationId": "post_nodes_nodes_node_nodes_node_apt_nodes_node_apt_update",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "notify": {
                    "type": "boolean",
                    "description": "Send notification mail about new package updates available to the email\naddress configured for 'root@pam').",
                    "default": false
                  },
                  "quiet": {
                    "type": "boolean",
                    "description": "Only produces output suitable for logging, omitting progress indicators.",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Unique Process/Task Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Unique Process/Task Identifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/apt/nodes/{node}/apt/versions": {
      "get": {
        "summary": "Get package information for important Proxmox Backup Server packages.",
        "description": "Get package information for important Proxmox Backup Server packages.",
        "operationId": "get_nodes_nodes_node_nodes_node_apt_nodes_node_apt_versions",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List of more relevant packages.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "Arch": {
                        "type": "string",
                        "description": "Package architecture"
                      },
                      "Description": {
                        "type": "string",
                        "description": "Human readable package description"
                      },
                      "ExtraInfo": {
                        "type": "string",
                        "description": "Custom extra field for additional package information"
                      },
                      "OldVersion": {
                        "type": "string",
                        "description": "Old version currently installed"
                      },
                      "Origin": {
                        "type": "string",
                        "description": "Package origin"
                      },
                      "Package": {
                        "type": "string",
                        "description": "Package name"
                      },
                      "Priority": {
                        "type": "string",
                        "description": "Package priority in human-readable form"
                      },
                      "Section": {
                        "type": "string",
                        "description": "Package section"
                      },
                      "Title": {
                        "type": "string",
                        "description": "Package title"
                      },
                      "Version": {
                        "type": "string",
                        "description": "New version to be updated to"
                      }
                    },
                    "description": "Describes a package for which an update is available."
                  },
                  "description": "List of more relevant packages."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/certificates": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_nodes_nodes_node_nodes_node_certificates",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/certificates/nodes/{node}/certificates/acme": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_nodes_nodes_node_nodes_node_certificates_nodes_node_certificates_acme",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/certificates/nodes/{node}/certificates/acme/nodes/{node}/certificates/acme/certificate": {
      "post": {
        "summary": "Order a new ACME certificate.",
        "description": "Order a new ACME certificate.",
        "operationId": "post_nodes_nodes_node_nodes_node_certificates_nodes_node_certificates_acme_nodes_node_certificates_acme_certificate",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Force replacement of existing files.",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Renew the current ACME certificate if it expires within 30 days (or always if the `force`\nparameter is set).",
        "description": "Renew the current ACME certificate if it expires within 30 days (or always if the `force`\nparameter is set).",
        "operationId": "put_nodes_nodes_node_nodes_node_certificates_nodes_node_certificates_acme_nodes_node_certificates_acme_certificate",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Force replacement of existing files.",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/certificates/nodes/{node}/certificates/custom": {
      "delete": {
        "summary": "Delete the current certificate and regenerate a self signed one.",
        "description": "Delete the current certificate and regenerate a self signed one.",
        "operationId": "delete_nodes_nodes_node_nodes_node_certificates_nodes_node_certificates_custom",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "restart",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "UI compatibility parameter, ignored",
              "default": false
            },
            "description": "UI compatibility parameter, ignored"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Upload a custom certificate.",
        "description": "Upload a custom certificate.",
        "operationId": "post_nodes_nodes_node_nodes_node_certificates_nodes_node_certificates_custom",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "certificates": {
                    "type": "string",
                    "description": "PEM encoded certificate (chain)."
                  },
                  "force": {
                    "type": "boolean",
                    "description": "Force replacement of existing files.",
                    "default": false
                  },
                  "key": {
                    "type": "string",
                    "description": "PEM encoded private key."
                  },
                  "restart": {
                    "type": "boolean",
                    "description": "UI compatibility parameter, ignored",
                    "default": false
                  }
                },
                "required": [
                  "certificates"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List of certificate infos.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "filename": {
                        "type": "string",
                        "description": "Certificate file name."
                      },
                      "fingerprint": {
                        "type": "string",
                        "description": "The SSL Fingerprint."
                      },
                      "issuer": {
                        "type": "string",
                        "description": "Certificate issuer name."
                      },
                      "notafter": {
                        "type": "integer",
                        "description": "Certificate's notAfter timestamp (UNIX epoch)."
                      },
                      "notbefore": {
                        "type": "integer",
                        "description": "Certificate's notBefore timestamp (UNIX epoch)."
                      },
                      "pem": {
                        "type": "string",
                        "description": "Certificate in PEM format."
                      },
                      "public-key-bits": {
                        "type": "integer",
                        "description": "Certificate's public key size if available."
                      },
                      "public-key-type": {
                        "type": "string",
                        "description": "Certificate's public key algorithm."
                      },
                      "san": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "A SubjectAlternateName entry."
                        },
                        "description": "List of certificate's SubjectAlternativeName entries."
                      },
                      "subject": {
                        "type": "string",
                        "description": "Certificate subject name."
                      }
                    },
                    "description": "Certificate information."
                  },
                  "description": "List of certificate infos."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/certificates/nodes/{node}/certificates/info": {
      "get": {
        "summary": "Get certificate info.",
        "description": "Get certificate info.",
        "operationId": "get_nodes_nodes_node_nodes_node_certificates_nodes_node_certificates_info",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List of certificate infos.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "filename": {
                        "type": "string",
                        "description": "Certificate file name."
                      },
                      "fingerprint": {
                        "type": "string",
                        "description": "The SSL Fingerprint."
                      },
                      "issuer": {
                        "type": "string",
                        "description": "Certificate issuer name."
                      },
                      "notafter": {
                        "type": "integer",
                        "description": "Certificate's notAfter timestamp (UNIX epoch)."
                      },
                      "notbefore": {
                        "type": "integer",
                        "description": "Certificate's notBefore timestamp (UNIX epoch)."
                      },
                      "pem": {
                        "type": "string",
                        "description": "Certificate in PEM format."
                      },
                      "public-key-bits": {
                        "type": "integer",
                        "description": "Certificate's public key size if available."
                      },
                      "public-key-type": {
                        "type": "string",
                        "description": "Certificate's public key algorithm."
                      },
                      "san": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "A SubjectAlternateName entry."
                        },
                        "description": "List of certificate's SubjectAlternativeName entries."
                      },
                      "subject": {
                        "type": "string",
                        "description": "Certificate subject name."
                      }
                    },
                    "description": "Certificate information."
                  },
                  "description": "List of certificate infos."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/config": {
      "get": {
        "summary": "Get the node configuration",
        "description": "Get the node configuration",
        "operationId": "get_nodes_nodes_node_nodes_node_config",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Node specific configuration.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "acme": {
                      "type": "string",
                      "format": {
                        "additionalProperties": false,
                        "description": "The ACME configuration.\n\nCurrently only contains the name of the account use.",
                        "properties": {
                          "account": {
                            "description": "ACME account name.",
                            "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "description": "The acme account to use on this node."
                    },
                    "acmedomain0": {
                      "type": "string",
                      "format": {
                        "additionalProperties": false,
                        "default_key": "domain",
                        "description": "A domain entry for an ACME certificate.",
                        "properties": {
                          "alias": {
                            "description": "The domain to use for challenges instead of the default acme challenge domain.\n\nThis is useful if you use CNAME entries to redirect `_acme-challenge.*` domains to a\ndifferent DNS server.",
                            "optional": 1,
                            "pattern": "/^(?:(?:(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                            "type": "string"
                          },
                          "domain": {
                            "description": "The domain to certify for.",
                            "pattern": "/^(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                            "type": "string"
                          },
                          "plugin": {
                            "description": "The plugin to use to validate this domain.\n\nEmpty means standalone HTTP validation is used.",
                            "optional": 1,
                            "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "description": "ACME domain configuration string"
                    },
                    "acmedomain1": {
                      "type": "string",
                      "format": {
                        "additionalProperties": false,
                        "default_key": "domain",
                        "description": "A domain entry for an ACME certificate.",
                        "properties": {
                          "alias": {
                            "description": "The domain to use for challenges instead of the default acme challenge domain.\n\nThis is useful if you use CNAME entries to redirect `_acme-challenge.*` domains to a\ndifferent DNS server.",
                            "optional": 1,
                            "pattern": "/^(?:(?:(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                            "type": "string"
                          },
                          "domain": {
                            "description": "The domain to certify for.",
                            "pattern": "/^(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                            "type": "string"
                          },
                          "plugin": {
                            "description": "The plugin to use to validate this domain.\n\nEmpty means standalone HTTP validation is used.",
                            "optional": 1,
                            "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "description": "ACME domain configuration string"
                    },
                    "acmedomain2": {
                      "type": "string",
                      "format": {
                        "additionalProperties": false,
                        "default_key": "domain",
                        "description": "A domain entry for an ACME certificate.",
                        "properties": {
                          "alias": {
                            "description": "The domain to use for challenges instead of the default acme challenge domain.\n\nThis is useful if you use CNAME entries to redirect `_acme-challenge.*` domains to a\ndifferent DNS server.",
                            "optional": 1,
                            "pattern": "/^(?:(?:(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                            "type": "string"
                          },
                          "domain": {
                            "description": "The domain to certify for.",
                            "pattern": "/^(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                            "type": "string"
                          },
                          "plugin": {
                            "description": "The plugin to use to validate this domain.\n\nEmpty means standalone HTTP validation is used.",
                            "optional": 1,
                            "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "description": "ACME domain configuration string"
                    },
                    "acmedomain3": {
                      "type": "string",
                      "format": {
                        "additionalProperties": false,
                        "default_key": "domain",
                        "description": "A domain entry for an ACME certificate.",
                        "properties": {
                          "alias": {
                            "description": "The domain to use for challenges instead of the default acme challenge domain.\n\nThis is useful if you use CNAME entries to redirect `_acme-challenge.*` domains to a\ndifferent DNS server.",
                            "optional": 1,
                            "pattern": "/^(?:(?:(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                            "type": "string"
                          },
                          "domain": {
                            "description": "The domain to certify for.",
                            "pattern": "/^(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                            "type": "string"
                          },
                          "plugin": {
                            "description": "The plugin to use to validate this domain.\n\nEmpty means standalone HTTP validation is used.",
                            "optional": 1,
                            "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "description": "ACME domain configuration string"
                    },
                    "acmedomain4": {
                      "type": "string",
                      "format": {
                        "additionalProperties": false,
                        "default_key": "domain",
                        "description": "A domain entry for an ACME certificate.",
                        "properties": {
                          "alias": {
                            "description": "The domain to use for challenges instead of the default acme challenge domain.\n\nThis is useful if you use CNAME entries to redirect `_acme-challenge.*` domains to a\ndifferent DNS server.",
                            "optional": 1,
                            "pattern": "/^(?:(?:(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                            "type": "string"
                          },
                          "domain": {
                            "description": "The domain to certify for.",
                            "pattern": "/^(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                            "type": "string"
                          },
                          "plugin": {
                            "description": "The plugin to use to validate this domain.\n\nEmpty means standalone HTTP validation is used.",
                            "optional": 1,
                            "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "description": "ACME domain configuration string"
                    },
                    "ciphers-tls-1.2": {
                      "type": "string",
                      "description": "OpenSSL cipher list used by the proxy for TLS <= 1.2"
                    },
                    "ciphers-tls-1.3": {
                      "type": "string",
                      "description": "OpenSSL ciphersuites list used by the proxy for TLS 1.3"
                    },
                    "consent-text": {
                      "type": "string",
                      "description": "Consent banner text"
                    },
                    "default-lang": {
                      "type": "string",
                      "description": "All available languages in Proxmox. Taken from proxmox-i18n repository.\npt_BR, zh_CN, and zh_TW use the same case in the translation files."
                    },
                    "description": {
                      "type": "string",
                      "description": "Comment (multiple lines)."
                    },
                    "email-from": {
                      "type": "string",
                      "description": "E-Mail Address."
                    },
                    "http-proxy": {
                      "type": "string",
                      "description": "HTTP proxy configuration [http://]<host>[:port]"
                    },
                    "task-log-max-days": {
                      "type": "integer",
                      "description": "Maximum days to keep Task logs"
                    }
                  },
                  "description": "Node specific configuration."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update the node configuration",
        "description": "Update the node configuration",
        "operationId": "put_nodes_nodes_node_nodes_node_config",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "acme": {
                    "type": "string",
                    "format": {
                      "additionalProperties": false,
                      "description": "The ACME configuration.\n\nCurrently only contains the name of the account use.",
                      "properties": {
                        "account": {
                          "description": "ACME account name.",
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "description": "The acme account to use on this node."
                  },
                  "acmedomain0": {
                    "type": "string",
                    "format": {
                      "additionalProperties": false,
                      "default_key": "domain",
                      "description": "A domain entry for an ACME certificate.",
                      "properties": {
                        "alias": {
                          "description": "The domain to use for challenges instead of the default acme challenge domain.\n\nThis is useful if you use CNAME entries to redirect `_acme-challenge.*` domains to a\ndifferent DNS server.",
                          "optional": 1,
                          "pattern": "/^(?:(?:(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                          "type": "string"
                        },
                        "domain": {
                          "description": "The domain to certify for.",
                          "pattern": "/^(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                          "type": "string"
                        },
                        "plugin": {
                          "description": "The plugin to use to validate this domain.\n\nEmpty means standalone HTTP validation is used.",
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "description": "ACME domain configuration string"
                  },
                  "acmedomain1": {
                    "type": "string",
                    "format": {
                      "additionalProperties": false,
                      "default_key": "domain",
                      "description": "A domain entry for an ACME certificate.",
                      "properties": {
                        "alias": {
                          "description": "The domain to use for challenges instead of the default acme challenge domain.\n\nThis is useful if you use CNAME entries to redirect `_acme-challenge.*` domains to a\ndifferent DNS server.",
                          "optional": 1,
                          "pattern": "/^(?:(?:(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                          "type": "string"
                        },
                        "domain": {
                          "description": "The domain to certify for.",
                          "pattern": "/^(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                          "type": "string"
                        },
                        "plugin": {
                          "description": "The plugin to use to validate this domain.\n\nEmpty means standalone HTTP validation is used.",
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "description": "ACME domain configuration string"
                  },
                  "acmedomain2": {
                    "type": "string",
                    "format": {
                      "additionalProperties": false,
                      "default_key": "domain",
                      "description": "A domain entry for an ACME certificate.",
                      "properties": {
                        "alias": {
                          "description": "The domain to use for challenges instead of the default acme challenge domain.\n\nThis is useful if you use CNAME entries to redirect `_acme-challenge.*` domains to a\ndifferent DNS server.",
                          "optional": 1,
                          "pattern": "/^(?:(?:(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                          "type": "string"
                        },
                        "domain": {
                          "description": "The domain to certify for.",
                          "pattern": "/^(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                          "type": "string"
                        },
                        "plugin": {
                          "description": "The plugin to use to validate this domain.\n\nEmpty means standalone HTTP validation is used.",
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "description": "ACME domain configuration string"
                  },
                  "acmedomain3": {
                    "type": "string",
                    "format": {
                      "additionalProperties": false,
                      "default_key": "domain",
                      "description": "A domain entry for an ACME certificate.",
                      "properties": {
                        "alias": {
                          "description": "The domain to use for challenges instead of the default acme challenge domain.\n\nThis is useful if you use CNAME entries to redirect `_acme-challenge.*` domains to a\ndifferent DNS server.",
                          "optional": 1,
                          "pattern": "/^(?:(?:(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                          "type": "string"
                        },
                        "domain": {
                          "description": "The domain to certify for.",
                          "pattern": "/^(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                          "type": "string"
                        },
                        "plugin": {
                          "description": "The plugin to use to validate this domain.\n\nEmpty means standalone HTTP validation is used.",
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "description": "ACME domain configuration string"
                  },
                  "acmedomain4": {
                    "type": "string",
                    "format": {
                      "additionalProperties": false,
                      "default_key": "domain",
                      "description": "A domain entry for an ACME certificate.",
                      "properties": {
                        "alias": {
                          "description": "The domain to use for challenges instead of the default acme challenge domain.\n\nThis is useful if you use CNAME entries to redirect `_acme-challenge.*` domains to a\ndifferent DNS server.",
                          "optional": 1,
                          "pattern": "/^(?:(?:(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                          "type": "string"
                        },
                        "domain": {
                          "description": "The domain to certify for.",
                          "pattern": "/^(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                          "type": "string"
                        },
                        "plugin": {
                          "description": "The plugin to use to validate this domain.\n\nEmpty means standalone HTTP validation is used.",
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "description": "ACME domain configuration string"
                  },
                  "ciphers-tls-1.2": {
                    "type": "string",
                    "description": "OpenSSL cipher list used by the proxy for TLS <= 1.2",
                    "pattern": "^[0-9A-Za-z_:, +!\\-@=.]+$"
                  },
                  "ciphers-tls-1.3": {
                    "type": "string",
                    "description": "OpenSSL ciphersuites list used by the proxy for TLS 1.3",
                    "pattern": "^[0-9A-Za-z_:, +!\\-@=.]+$"
                  },
                  "consent-text": {
                    "type": "string",
                    "description": "Consent banner text",
                    "maxLength": 65536
                  },
                  "default-lang": {
                    "type": "string",
                    "description": "All available languages in Proxmox. Taken from proxmox-i18n repository.\npt_BR, zh_CN, and zh_TW use the same case in the translation files.",
                    "enum": [
                      "ar",
                      "ca",
                      "da",
                      "de",
                      "en",
                      "es",
                      "eu",
                      "fa",
                      "fr",
                      "gl",
                      "he",
                      "hu",
                      "it",
                      "ja",
                      "kr",
                      "nb",
                      "nl",
                      "nn",
                      "pl",
                      "pt_BR",
                      "ru",
                      "sl",
                      "sv",
                      "tr",
                      "zh_CN",
                      "zh_TW"
                    ]
                  },
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "description": {
                    "type": "string",
                    "description": "Comment (multiple lines).",
                    "pattern": "(?m)^([[:^cntrl:]]*)$"
                  },
                  "digest": {
                    "type": "string",
                    "description": "Digest to protect against concurrent updates"
                  },
                  "email-from": {
                    "type": "string",
                    "description": "E-Mail Address.",
                    "minLength": 2,
                    "maxLength": 64,
                    "pattern": "^[[:^cntrl:]]*$"
                  },
                  "http-proxy": {
                    "type": "string",
                    "description": "HTTP proxy configuration [http://]<host>[:port]",
                    "minLength": 1,
                    "maxLength": 128
                  },
                  "task-log-max-days": {
                    "type": "integer",
                    "description": "Maximum days to keep Task logs",
                    "minimum": 0
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/disks": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_nodes_nodes_node_nodes_node_disks",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/disks/nodes/{node}/disks/directory": {
      "get": {
        "summary": "List systemd datastore mount units.",
        "description": "List systemd datastore mount units.",
        "operationId": "get_nodes_nodes_node_nodes_node_disks_nodes_node_disks_directory",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List of removable-datastore devices and systemd datastore mount units.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "device": {
                        "type": "string",
                        "description": "The mounted device."
                      },
                      "filesystem": {
                        "type": "string",
                        "description": "A file system type supported by our tooling."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the mount"
                      },
                      "options": {
                        "type": "string",
                        "description": "Mount options"
                      },
                      "path": {
                        "type": "string",
                        "description": "The mount path."
                      },
                      "removable": {
                        "type": "boolean",
                        "description": "This is removable"
                      },
                      "unitfile": {
                        "type": "string",
                        "description": "The path of the mount unit."
                      }
                    },
                    "description": "Datastore mount info."
                  },
                  "description": "List of removable-datastore devices and systemd datastore mount units."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Create a Filesystem on an unused disk. Will be mounted under `/mnt/datastore/<name>`.",
        "description": "Create a Filesystem on an unused disk. Will be mounted under `/mnt/datastore/<name>`.",
        "operationId": "post_nodes_nodes_node_nodes_node_disks_nodes_node_disks_directory",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "add-datastore": {
                    "type": "boolean",
                    "description": "Configure a datastore using the directory.",
                    "default": false
                  },
                  "disk": {
                    "type": "string",
                    "description": "Block device name (/sys/block/<name>).",
                    "minLength": 3,
                    "maxLength": 64,
                    "pattern": "^(?:(?:h|s|x?v)d[a-z]+)|(?:nvme\\d+n\\d+)$"
                  },
                  "filesystem": {
                    "type": "string",
                    "description": "A file system type supported by our tooling.",
                    "enum": [
                      "ext4",
                      "xfs"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "description": "Datastore name.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "removable-datastore": {
                    "type": "boolean",
                    "description": "The added datastore is removable.",
                    "default": false
                  }
                },
                "required": [
                  "disk",
                  "name"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Unique Process/Task Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Unique Process/Task Identifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/disks/nodes/{node}/disks/directory/nodes/{node}/disks/directory/{name}": {
      "delete": {
        "summary": "Remove a Filesystem mounted under `/mnt/datastore/<name>`.",
        "description": "Remove a Filesystem mounted under `/mnt/datastore/<name>`.",
        "operationId": "delete_nodes_nodes_node_nodes_node_disks_nodes_node_disks_directory_nodes_node_disks_directory_name",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/disks/nodes/{node}/disks/initgpt": {
      "post": {
        "summary": "Initialize empty Disk with GPT",
        "description": "Initialize empty Disk with GPT",
        "operationId": "post_nodes_nodes_node_nodes_node_disks_nodes_node_disks_initgpt",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "disk": {
                    "type": "string",
                    "description": "Block device name (/sys/block/<name>).",
                    "minLength": 3,
                    "maxLength": 64,
                    "pattern": "^(?:(?:h|s|x?v)d[a-z]+)|(?:nvme\\d+n\\d+)$"
                  },
                  "uuid": {
                    "type": "string",
                    "description": "UUID for the GPT table.",
                    "maxLength": 36
                  }
                },
                "required": [
                  "disk"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Unique Process/Task Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Unique Process/Task Identifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/disks/nodes/{node}/disks/list": {
      "get": {
        "summary": "List local disks",
        "description": "List local disks",
        "operationId": "get_nodes_nodes_node_nodes_node_disks_nodes_node_disks_list",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "include-partitions",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include partitions.",
              "default": false
            },
            "description": "Include partitions."
          },
          {
            "name": "skipsmart",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Skip smart checks.",
              "default": false
            },
            "description": "Skip smart checks."
          },
          {
            "name": "usage-type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "What a block device (disk) is used for.",
              "enum": [
                "unused",
                "mounted",
                "lvm",
                "zfs",
                "devicemapper",
                "partitions",
                "filesystem"
              ]
            },
            "description": "What a block device (disk) is used for."
          }
        ],
        "responses": {
          "200": {
            "description": "Local disk list.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "devpath": {
                        "type": "string",
                        "description": "Linux device path (/dev/xxx)"
                      },
                      "disk-type": {
                        "type": "string",
                        "description": "This is just a rough estimate for a \"type\" of disk."
                      },
                      "gpt": {
                        "type": "boolean",
                        "description": "Set if disk contains a GPT partition table"
                      },
                      "model": {
                        "type": "string",
                        "description": "Model"
                      },
                      "name": {
                        "type": "string",
                        "description": "Disk name (`/sys/block/<name>`)"
                      },
                      "partitions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "devpath": {
                              "type": "string",
                              "description": "The partition devpath"
                            },
                            "filesystem": {
                              "type": "string",
                              "description": "The filesystem of the partition"
                            },
                            "gpt": {
                              "type": "boolean",
                              "description": "GPT partition"
                            },
                            "mounted": {
                              "type": "boolean",
                              "description": "Is the partition mounted"
                            },
                            "name": {
                              "type": "string",
                              "description": "The partition name"
                            },
                            "size": {
                              "type": "integer",
                              "description": "Size in bytes"
                            },
                            "used": {
                              "type": "string",
                              "description": "What a block device partition is used for."
                            },
                            "uuid": {
                              "type": "string",
                              "description": "UUID"
                            }
                          },
                          "description": "Basic information about a partition"
                        },
                        "description": "Partitions on the device"
                      },
                      "rpm": {
                        "type": "integer",
                        "description": "RPM"
                      },
                      "serial": {
                        "type": "string",
                        "description": "Serisal number"
                      },
                      "size": {
                        "type": "integer",
                        "description": "Disk size"
                      },
                      "status": {
                        "type": "string",
                        "description": "SMART status"
                      },
                      "used": {
                        "type": "string",
                        "description": "What a block device (disk) is used for."
                      },
                      "vendor": {
                        "type": "string",
                        "description": "Vendor"
                      },
                      "wearout": {
                        "type": "number",
                        "description": "Disk wearout"
                      },
                      "wwn": {
                        "type": "string",
                        "description": "WWN"
                      }
                    },
                    "description": "Information about how a Disk is used"
                  },
                  "description": "Local disk list."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/disks/nodes/{node}/disks/smart": {
      "get": {
        "summary": "Get SMART attributes and health of a disk.",
        "description": "Get SMART attributes and health of a disk.",
        "operationId": "get_nodes_nodes_node_nodes_node_disks_nodes_node_disks_smart",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "disk",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Block device name (/sys/block/<name>).",
              "minLength": 3,
              "maxLength": 64,
              "pattern": "^(?:(?:h|s|x?v)d[a-z]+)|(?:nvme\\d+n\\d+)$"
            },
            "description": "Block device name (/sys/block/<name>)."
          },
          {
            "name": "healthonly",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "If true returns only the health status."
            },
            "description": "If true returns only the health status."
          }
        ],
        "responses": {
          "200": {
            "description": "Data from smartctl",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "attributes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "flags": {
                            "type": "string",
                            "description": "ATA Flags"
                          },
                          "id": {
                            "type": "integer",
                            "description": "ATA Attribute ID"
                          },
                          "name": {
                            "type": "string",
                            "description": "Attribute name"
                          },
                          "normalized": {
                            "type": "number",
                            "description": "ATA normalized value (0..100)"
                          },
                          "raw": {
                            "type": "string",
                            "description": "Attribute raw value"
                          },
                          "threshold": {
                            "type": "number",
                            "description": "ATA threshold"
                          },
                          "value": {
                            "type": "string",
                            "description": "duplicate of raw - kept for API stability"
                          },
                          "worst": {
                            "type": "number",
                            "description": "ATA worst"
                          }
                        },
                        "description": "SMART Attribute"
                      },
                      "description": "SMART attributes."
                    },
                    "status": {
                      "type": "string",
                      "description": "SMART status"
                    },
                    "wearout": {
                      "type": "number",
                      "description": "Wearout level."
                    }
                  },
                  "description": "Data from smartctl"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/disks/nodes/{node}/disks/wipedisk": {
      "put": {
        "summary": "wipe disk",
        "description": "wipe disk",
        "operationId": "put_nodes_nodes_node_nodes_node_disks_nodes_node_disks_wipedisk",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "disk": {
                    "type": "string",
                    "description": "(Partition) block device name (/sys/class/block/<name>).",
                    "minLength": 3,
                    "maxLength": 64,
                    "pattern": "^(?:(?:h|s|x?v)d[a-z]+\\d*)|(?:nvme\\d+n\\d+(p\\d+)?)$"
                  }
                },
                "required": [
                  "disk"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Unique Process/Task Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Unique Process/Task Identifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/disks/nodes/{node}/disks/zfs": {
      "get": {
        "summary": "List zfs pools.",
        "description": "List zfs pools.",
        "operationId": "get_nodes_nodes_node_nodes_node_disks_nodes_node_disks_zfs",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List of zpools.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "alloc": {
                        "type": "integer",
                        "description": "Used size"
                      },
                      "dedup": {
                        "type": "number",
                        "description": "ZFS deduplication ratio"
                      },
                      "frag": {
                        "type": "integer",
                        "description": "ZFS fragnentation level"
                      },
                      "free": {
                        "type": "integer",
                        "description": "Free space"
                      },
                      "health": {
                        "type": "string",
                        "description": "Health"
                      },
                      "name": {
                        "type": "string",
                        "description": "zpool name"
                      },
                      "size": {
                        "type": "integer",
                        "description": "Total size"
                      }
                    },
                    "description": "zpool list item"
                  },
                  "description": "List of zpools."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Create a new ZFS pool. Will be mounted under `/mnt/datastore/<name>`.",
        "description": "Create a new ZFS pool. Will be mounted under `/mnt/datastore/<name>`.",
        "operationId": "post_nodes_nodes_node_nodes_node_disks_nodes_node_disks_zfs",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "add-datastore": {
                    "type": "boolean",
                    "description": "Configure a datastore using the zpool."
                  },
                  "ashift": {
                    "type": "integer",
                    "description": "Pool sector size exponent.",
                    "minimum": 9,
                    "maximum": 16,
                    "default": 12
                  },
                  "compression": {
                    "type": "string",
                    "description": "The ZFS compression algorithm to use.",
                    "enum": [
                      "gzip",
                      "lz4",
                      "lzjb",
                      "zle",
                      "zstd",
                      "on",
                      "off"
                    ],
                    "default": "On"
                  },
                  "devices": {
                    "type": "string",
                    "format": {
                      "description": "Disk name list.",
                      "items": {
                        "description": "Block device name (/sys/block/<name>).",
                        "maxLength": 64,
                        "minLength": 3,
                        "pattern": "/^(?:(?:h|s|x?v)d[a-z]+)|(?:nvme\\d+n\\d+)$/",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "description": "A list of disk names, comma separated."
                  },
                  "name": {
                    "type": "string",
                    "description": "Datastore name.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "raidlevel": {
                    "type": "string",
                    "description": "The ZFS RAID level to use.",
                    "enum": [
                      "single",
                      "mirror",
                      "raid10",
                      "raidz",
                      "raidz2",
                      "raidz3"
                    ]
                  }
                },
                "required": [
                  "devices",
                  "name",
                  "raidlevel"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Unique Process/Task Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Unique Process/Task Identifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/disks/nodes/{node}/disks/zfs/nodes/{node}/disks/zfs/{name}": {
      "get": {
        "summary": "Get zpool status details.",
        "description": "Get zpool status details.",
        "operationId": "get_nodes_nodes_node_nodes_node_disks_nodes_node_disks_zfs_nodes_node_disks_zfs_name",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "zpool vdev tree with status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "zpool vdev tree with status"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/dns": {
      "get": {
        "summary": "Read DNS settings.",
        "description": "Read DNS settings.",
        "operationId": "get_nodes_nodes_node_nodes_node_dns",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns DNS server IPs and sreach domain.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "digest": {
                      "type": "string",
                      "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications."
                    },
                    "dns1": {
                      "type": "string",
                      "description": "First name server IP address."
                    },
                    "dns2": {
                      "type": "string",
                      "description": "Second name server IP address."
                    },
                    "dns3": {
                      "type": "string",
                      "description": "Third name server IP address."
                    },
                    "search": {
                      "type": "string",
                      "description": "Search domain for host-name lookup."
                    }
                  },
                  "description": "Returns DNS server IPs and sreach domain."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update DNS settings.",
        "description": "Update DNS settings.",
        "operationId": "put_nodes_nodes_node_nodes_node_dns",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "dns1": {
                    "type": "string",
                    "description": "First name server IP address.",
                    "pattern": "^(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))$"
                  },
                  "dns2": {
                    "type": "string",
                    "description": "Second name server IP address.",
                    "pattern": "^(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))$"
                  },
                  "dns3": {
                    "type": "string",
                    "description": "Third name server IP address.",
                    "pattern": "^(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))$"
                  },
                  "search": {
                    "type": "string",
                    "description": "Search domain for host-name lookup."
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/journal": {
      "get": {
        "summary": "Read syslog entries.",
        "description": "Read syslog entries.",
        "operationId": "get_nodes_nodes_node_nodes_node_journal",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "endcursor",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "End before the given Cursor. Conflicts with 'until'"
            },
            "description": "End before the given Cursor. Conflicts with 'until'"
          },
          {
            "name": "lastentries",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Limit to the last X lines. Conflicts with a range.",
              "minimum": 0
            },
            "description": "Limit to the last X lines. Conflicts with a range."
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Display all log since this UNIX epoch. Conflicts with 'startcursor'.",
              "minimum": 0
            },
            "description": "Display all log since this UNIX epoch. Conflicts with 'startcursor'."
          },
          {
            "name": "startcursor",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Start after the given Cursor. Conflicts with 'since'."
            },
            "description": "Start after the given Cursor. Conflicts with 'since'."
          },
          {
            "name": "until",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Display all log until this UNIX epoch. Conflicts with 'endcursor'.",
              "minimum": 0
            },
            "description": "Display all log until this UNIX epoch. Conflicts with 'endcursor'."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of journal entries.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Line text."
                  },
                  "description": "Returns a list of journal entries."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/network": {
      "delete": {
        "summary": "Revert network configuration (rm /etc/network/interfaces.new).",
        "description": "Revert network configuration (rm /etc/network/interfaces.new).",
        "operationId": "delete_nodes_nodes_node_nodes_node_network",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "List all datastores",
        "description": "List all datastores",
        "operationId": "get_nodes_nodes_node_nodes_node_network",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List network devices (with config digest).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "active": {
                        "type": "boolean",
                        "description": "Interface is active (UP)"
                      },
                      "autostart": {
                        "type": "boolean",
                        "description": "Autostart interface"
                      },
                      "bond-primary": {
                        "type": "string",
                        "description": "Network interface name."
                      },
                      "bond_mode": {
                        "type": "string",
                        "description": "Linux Bond Mode"
                      },
                      "bond_xmit_hash_policy": {
                        "type": "string",
                        "description": "Bond Transmit Hash Policy for LACP (802.3ad)"
                      },
                      "bridge_ports": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "Network interface name."
                        },
                        "description": "Network interface list."
                      },
                      "bridge_vlan_aware": {
                        "type": "boolean",
                        "description": "Enable bridge vlan support."
                      },
                      "cidr": {
                        "type": "string",
                        "description": "IPv4 address with netmask (CIDR notation)."
                      },
                      "cidr6": {
                        "type": "string",
                        "description": "IPv6 address with netmask (CIDR notation)."
                      },
                      "comments": {
                        "type": "string",
                        "description": "Comments (inet, may span multiple lines)"
                      },
                      "comments6": {
                        "type": "string",
                        "description": "Comments (inet6, may span multiple lines)"
                      },
                      "gateway": {
                        "type": "string",
                        "description": "IPv4 address."
                      },
                      "gateway6": {
                        "type": "string",
                        "description": "IPv6 address."
                      },
                      "method": {
                        "type": "string",
                        "description": "Interface configuration method"
                      },
                      "method6": {
                        "type": "string",
                        "description": "Interface configuration method"
                      },
                      "mtu": {
                        "type": "integer",
                        "description": "Maximum Transmission Unit"
                      },
                      "name": {
                        "type": "string",
                        "description": "Network interface name."
                      },
                      "options": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "Optional attribute line."
                        },
                        "description": "Option list (inet)"
                      },
                      "options6": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "Optional attribute line."
                        },
                        "description": "Option list (inet6)"
                      },
                      "slaves": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "Network interface name."
                        },
                        "description": "Network interface list."
                      },
                      "type": {
                        "type": "string",
                        "description": "Network interface type"
                      },
                      "vlan-id": {
                        "type": "integer",
                        "description": "VLAN ID."
                      },
                      "vlan-raw-device": {
                        "type": "string",
                        "description": "Network interface name."
                      }
                    },
                    "description": "Network Interface configuration"
                  },
                  "description": "List network devices (with config digest)."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Create network interface configuration.",
        "description": "Create network interface configuration.",
        "operationId": "post_nodes_nodes_node_nodes_node_network",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "autostart": {
                    "type": "boolean",
                    "description": "Autostart interface."
                  },
                  "bond-primary": {
                    "type": "string",
                    "description": "Network interface name.",
                    "minLength": 1,
                    "maxLength": 15,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "bond_mode": {
                    "type": "string",
                    "description": "Linux Bond Mode",
                    "enum": [
                      "balance-rr",
                      "active-backup",
                      "balance-xor",
                      "broadcast",
                      "802.3ad",
                      "balance-tlb",
                      "balance-alb"
                    ]
                  },
                  "bond_xmit_hash_policy": {
                    "type": "string",
                    "description": "Bond Transmit Hash Policy for LACP (802.3ad)",
                    "enum": [
                      "layer2",
                      "layer2+3",
                      "layer3+4"
                    ]
                  },
                  "bridge_ports": {
                    "type": "string",
                    "format": {
                      "description": "Network interface list.",
                      "items": {
                        "description": "Network interface name.",
                        "maxLength": 15,
                        "minLength": 1,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "description": "A list of network devices, comma separated."
                  },
                  "bridge_vlan_aware": {
                    "type": "boolean",
                    "description": "Enable bridge vlan support."
                  },
                  "cidr": {
                    "type": "string",
                    "description": "IPv4 address with netmask (CIDR notation).",
                    "maxLength": 18,
                    "pattern": "^(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))/\\d{1,2})$$"
                  },
                  "cidr6": {
                    "type": "string",
                    "description": "IPv6 address with netmask (CIDR notation).",
                    "maxLength": 43,
                    "pattern": "^(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::)))/\\d{1,3})$$"
                  },
                  "comments": {
                    "type": "string",
                    "description": "Comments (inet, may span multiple lines)"
                  },
                  "comments6": {
                    "type": "string",
                    "description": "Comments (inet5, may span multiple lines)"
                  },
                  "gateway": {
                    "type": "string",
                    "description": "IPv4 address.",
                    "maxLength": 15,
                    "pattern": "^(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))$"
                  },
                  "gateway6": {
                    "type": "string",
                    "description": "IPv6 address.",
                    "maxLength": 39,
                    "pattern": "^(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::)))$"
                  },
                  "iface": {
                    "type": "string",
                    "description": "Network interface name.",
                    "minLength": 1,
                    "maxLength": 15,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "method": {
                    "type": "string",
                    "description": "Interface configuration method",
                    "enum": [
                      "manual",
                      "static",
                      "dhcp",
                      "loopback"
                    ]
                  },
                  "method6": {
                    "type": "string",
                    "description": "Interface configuration method",
                    "enum": [
                      "manual",
                      "static",
                      "dhcp",
                      "loopback"
                    ]
                  },
                  "mtu": {
                    "type": "integer",
                    "description": "Maximum Transmission Unit.",
                    "minimum": 46,
                    "maximum": 65535,
                    "default": 1500
                  },
                  "slaves": {
                    "type": "string",
                    "format": {
                      "description": "Network interface list.",
                      "items": {
                        "description": "Network interface name.",
                        "maxLength": 15,
                        "minLength": 1,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "description": "A list of network devices, comma separated."
                  },
                  "type": {
                    "type": "string",
                    "description": "Network interface type",
                    "enum": [
                      "loopback",
                      "eth",
                      "bridge",
                      "bond",
                      "vlan",
                      "alias",
                      "unknown"
                    ]
                  },
                  "vlan-id": {
                    "type": "integer",
                    "description": "VLAN ID."
                  },
                  "vlan-raw-device": {
                    "type": "string",
                    "description": "Network interface name.",
                    "minLength": 1,
                    "maxLength": 15,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  }
                },
                "required": [
                  "iface"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Reload network configuration (requires ifupdown2).",
        "description": "Reload network configuration (requires ifupdown2).",
        "operationId": "put_nodes_nodes_node_nodes_node_network",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/network/nodes/{node}/network/{iface}": {
      "delete": {
        "summary": "Remove network interface configuration.",
        "description": "Remove network interface configuration.",
        "operationId": "delete_nodes_nodes_node_nodes_node_network_nodes_node_network_iface",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "iface",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The iface parameter"
            },
            "description": "The iface parameter"
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
              "pattern": "^[a-f0-9]{64}$"
            },
            "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Read a network interface configuration.",
        "description": "Read a network interface configuration.",
        "operationId": "get_nodes_nodes_node_nodes_node_network_nodes_node_network_iface",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "iface",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The iface parameter"
            },
            "description": "The iface parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Network Interface configuration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "active": {
                      "type": "boolean",
                      "description": "Interface is active (UP)"
                    },
                    "autostart": {
                      "type": "boolean",
                      "description": "Autostart interface"
                    },
                    "bond-primary": {
                      "type": "string",
                      "description": "Network interface name."
                    },
                    "bond_mode": {
                      "type": "string",
                      "description": "Linux Bond Mode"
                    },
                    "bond_xmit_hash_policy": {
                      "type": "string",
                      "description": "Bond Transmit Hash Policy for LACP (802.3ad)"
                    },
                    "bridge_ports": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Network interface name."
                      },
                      "description": "Network interface list."
                    },
                    "bridge_vlan_aware": {
                      "type": "boolean",
                      "description": "Enable bridge vlan support."
                    },
                    "cidr": {
                      "type": "string",
                      "description": "IPv4 address with netmask (CIDR notation)."
                    },
                    "cidr6": {
                      "type": "string",
                      "description": "IPv6 address with netmask (CIDR notation)."
                    },
                    "comments": {
                      "type": "string",
                      "description": "Comments (inet, may span multiple lines)"
                    },
                    "comments6": {
                      "type": "string",
                      "description": "Comments (inet6, may span multiple lines)"
                    },
                    "gateway": {
                      "type": "string",
                      "description": "IPv4 address."
                    },
                    "gateway6": {
                      "type": "string",
                      "description": "IPv6 address."
                    },
                    "method": {
                      "type": "string",
                      "description": "Interface configuration method"
                    },
                    "method6": {
                      "type": "string",
                      "description": "Interface configuration method"
                    },
                    "mtu": {
                      "type": "integer",
                      "description": "Maximum Transmission Unit"
                    },
                    "name": {
                      "type": "string",
                      "description": "Network interface name."
                    },
                    "options": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Optional attribute line."
                      },
                      "description": "Option list (inet)"
                    },
                    "options6": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Optional attribute line."
                      },
                      "description": "Option list (inet6)"
                    },
                    "slaves": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Network interface name."
                      },
                      "description": "Network interface list."
                    },
                    "type": {
                      "type": "string",
                      "description": "Network interface type"
                    },
                    "vlan-id": {
                      "type": "integer",
                      "description": "VLAN ID."
                    },
                    "vlan-raw-device": {
                      "type": "string",
                      "description": "Network interface name."
                    }
                  },
                  "description": "Network Interface configuration"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update network interface config.",
        "description": "Update network interface config.",
        "operationId": "put_nodes_nodes_node_nodes_node_network_nodes_node_network_iface",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "autostart": {
                    "type": "boolean",
                    "description": "Autostart interface."
                  },
                  "bond-primary": {
                    "type": "string",
                    "description": "Network interface name.",
                    "minLength": 1,
                    "maxLength": 15,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "bond_mode": {
                    "type": "string",
                    "description": "Linux Bond Mode",
                    "enum": [
                      "balance-rr",
                      "active-backup",
                      "balance-xor",
                      "broadcast",
                      "802.3ad",
                      "balance-tlb",
                      "balance-alb"
                    ]
                  },
                  "bond_xmit_hash_policy": {
                    "type": "string",
                    "description": "Bond Transmit Hash Policy for LACP (802.3ad)",
                    "enum": [
                      "layer2",
                      "layer2+3",
                      "layer3+4"
                    ]
                  },
                  "bridge_ports": {
                    "type": "string",
                    "format": {
                      "description": "Network interface list.",
                      "items": {
                        "description": "Network interface name.",
                        "maxLength": 15,
                        "minLength": 1,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "description": "A list of network devices, comma separated."
                  },
                  "bridge_vlan_aware": {
                    "type": "boolean",
                    "description": "Enable bridge vlan support."
                  },
                  "cidr": {
                    "type": "string",
                    "description": "IPv4 address with netmask (CIDR notation).",
                    "maxLength": 18,
                    "pattern": "^(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))/\\d{1,2})$$"
                  },
                  "cidr6": {
                    "type": "string",
                    "description": "IPv6 address with netmask (CIDR notation).",
                    "maxLength": 43,
                    "pattern": "^(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::)))/\\d{1,3})$$"
                  },
                  "comments": {
                    "type": "string",
                    "description": "Comments (inet, may span multiple lines)"
                  },
                  "comments6": {
                    "type": "string",
                    "description": "Comments (inet5, may span multiple lines)"
                  },
                  "delete": {
                    "type": "array",
                    "description": "List of properties to delete.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "gateway": {
                    "type": "string",
                    "description": "IPv4 address.",
                    "maxLength": 15,
                    "pattern": "^(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))$"
                  },
                  "gateway6": {
                    "type": "string",
                    "description": "IPv6 address.",
                    "maxLength": 39,
                    "pattern": "^(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::)))$"
                  },
                  "method": {
                    "type": "string",
                    "description": "Interface configuration method",
                    "enum": [
                      "manual",
                      "static",
                      "dhcp",
                      "loopback"
                    ]
                  },
                  "method6": {
                    "type": "string",
                    "description": "Interface configuration method",
                    "enum": [
                      "manual",
                      "static",
                      "dhcp",
                      "loopback"
                    ]
                  },
                  "mtu": {
                    "type": "integer",
                    "description": "Maximum Transmission Unit.",
                    "minimum": 46,
                    "maximum": 65535,
                    "default": 1500
                  },
                  "slaves": {
                    "type": "string",
                    "format": {
                      "description": "Network interface list.",
                      "items": {
                        "description": "Network interface name.",
                        "maxLength": 15,
                        "minLength": 1,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "description": "A list of network devices, comma separated."
                  },
                  "type": {
                    "type": "string",
                    "description": "Network interface type",
                    "enum": [
                      "loopback",
                      "eth",
                      "bridge",
                      "bond",
                      "vlan",
                      "alias",
                      "unknown"
                    ]
                  },
                  "vlan-id": {
                    "type": "integer",
                    "description": "VLAN ID."
                  },
                  "vlan-raw-device": {
                    "type": "string",
                    "description": "Network interface name.",
                    "minLength": 1,
                    "maxLength": 15,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "iface",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The iface parameter"
            },
            "description": "The iface parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/report": {
      "get": {
        "summary": "Generate a report",
        "description": "Generate a report",
        "operationId": "get_nodes_nodes_node_nodes_node_report",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns report of the node",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Returns report of the node"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/rrd": {
      "get": {
        "summary": "Read node stats",
        "description": "Read node stats",
        "operationId": "get_nodes_nodes_node_nodes_node_rrd",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "cf",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "RRD consolidation mode",
              "enum": [
                "MAX",
                "AVERAGE"
              ]
            },
            "description": "RRD consolidation mode"
          },
          {
            "name": "timeframe",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "RRD time frame",
              "enum": [
                "hour",
                "day",
                "week",
                "month",
                "year",
                "decade"
              ]
            },
            "description": "RRD time frame"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/services": {
      "get": {
        "summary": "Service list.",
        "description": "Service list.",
        "operationId": "get_nodes_nodes_node_nodes_node_services",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of systemd services.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "desc": {
                        "type": "string",
                        "description": "systemd service description."
                      },
                      "name": {
                        "type": "string",
                        "description": "systemd service name."
                      },
                      "service": {
                        "type": "string",
                        "description": "Service ID."
                      },
                      "state": {
                        "type": "string",
                        "description": "systemd service 'SubState'."
                      },
                      "unit-state": {
                        "type": "string",
                        "description": "systemd service unit state."
                      }
                    },
                    "description": "Service details."
                  },
                  "description": "Returns a list of systemd services."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/services/nodes/{node}/services/{service}": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_nodes_nodes_node_nodes_node_services_nodes_node_services_service",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service parameter"
            },
            "description": "The service parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/services/nodes/{node}/services/{service}/nodes/{node}/services/{service}/reload": {
      "post": {
        "summary": "Reload service.",
        "description": "Reload service.",
        "operationId": "post_nodes_nodes_node_nodes_node_services_nodes_node_services_service_nodes_node_services_service_reload",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service parameter"
            },
            "description": "The service parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service parameter"
            },
            "description": "The service parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/services/nodes/{node}/services/{service}/nodes/{node}/services/{service}/restart": {
      "post": {
        "summary": "Restart service.",
        "description": "Restart service.",
        "operationId": "post_nodes_nodes_node_nodes_node_services_nodes_node_services_service_nodes_node_services_service_restart",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service parameter"
            },
            "description": "The service parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service parameter"
            },
            "description": "The service parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/services/nodes/{node}/services/{service}/nodes/{node}/services/{service}/start": {
      "post": {
        "summary": "Start service.",
        "description": "Start service.",
        "operationId": "post_nodes_nodes_node_nodes_node_services_nodes_node_services_service_nodes_node_services_service_start",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service parameter"
            },
            "description": "The service parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service parameter"
            },
            "description": "The service parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/services/nodes/{node}/services/{service}/nodes/{node}/services/{service}/state": {
      "get": {
        "summary": "Read service properties.",
        "description": "Read service properties.",
        "operationId": "get_nodes_nodes_node_nodes_node_services_nodes_node_services_service_nodes_node_services_service_state",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service parameter"
            },
            "description": "The service parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service parameter"
            },
            "description": "The service parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/services/nodes/{node}/services/{service}/nodes/{node}/services/{service}/stop": {
      "post": {
        "summary": "Stop service.",
        "description": "Stop service.",
        "operationId": "post_nodes_nodes_node_nodes_node_services_nodes_node_services_service_nodes_node_services_service_stop",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service parameter"
            },
            "description": "The service parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service parameter"
            },
            "description": "The service parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/status": {
      "get": {
        "summary": "Read node memory, CPU and (root) disk usage",
        "description": "Read node memory, CPU and (root) disk usage",
        "operationId": "get_nodes_nodes_node_nodes_node_status",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The Node status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "boot-info": {
                      "type": "object",
                      "properties": {
                        "mode": {
                          "type": "string",
                          "description": "The possible BootModes"
                        },
                        "secureboot": {
                          "type": "boolean",
                          "description": "SecureBoot status"
                        }
                      },
                      "description": "Holds the Bootmodes"
                    },
                    "cpu": {
                      "type": "number",
                      "description": "Total CPU usage since last query."
                    },
                    "cpuinfo": {
                      "type": "object",
                      "properties": {
                        "cpus": {
                          "type": "integer",
                          "description": "The number of CPU cores (incl. threads)"
                        },
                        "model": {
                          "type": "string",
                          "description": "The CPU model"
                        },
                        "sockets": {
                          "type": "integer",
                          "description": "The number of CPU sockets"
                        }
                      },
                      "description": "Information about the CPU"
                    },
                    "current-kernel": {
                      "type": "object",
                      "properties": {
                        "machine": {
                          "type": "string",
                          "description": "The machine architecture"
                        },
                        "release": {
                          "type": "string",
                          "description": "The kernel release number"
                        },
                        "sysname": {
                          "type": "string",
                          "description": "The systemname/nodename"
                        },
                        "version": {
                          "type": "string",
                          "description": "The kernel version"
                        }
                      },
                      "description": "The current kernel version (output of `uname`)"
                    },
                    "info": {
                      "type": "object",
                      "properties": {
                        "fingerprint": {
                          "type": "string",
                          "description": "The SSL Fingerprint"
                        }
                      },
                      "description": "Contains general node information such as the fingerprint`"
                    },
                    "kversion": {
                      "type": "string",
                      "description": "The current kernel version (LEGACY string type)."
                    },
                    "loadavg": {
                      "type": "array",
                      "items": {
                        "type": "number",
                        "description": "the load"
                      },
                      "description": "Load for 1, 5 and 15 minutes."
                    },
                    "memory": {
                      "type": "object",
                      "properties": {
                        "free": {
                          "type": "integer",
                          "description": "Free memory"
                        },
                        "total": {
                          "type": "integer",
                          "description": "Total memory"
                        },
                        "used": {
                          "type": "integer",
                          "description": "Used memory"
                        }
                      },
                      "description": "Node memory usage counters"
                    },
                    "root": {
                      "type": "object",
                      "properties": {
                        "avail": {
                          "type": "integer",
                          "description": "Available space (bytes)."
                        },
                        "total": {
                          "type": "integer",
                          "description": "Total space (bytes)."
                        },
                        "used": {
                          "type": "integer",
                          "description": "Used space (bytes)."
                        }
                      },
                      "description": "Storage space usage information."
                    },
                    "swap": {
                      "type": "object",
                      "properties": {
                        "free": {
                          "type": "integer",
                          "description": "Free swap"
                        },
                        "total": {
                          "type": "integer",
                          "description": "Total swap"
                        },
                        "used": {
                          "type": "integer",
                          "description": "Used swap"
                        }
                      },
                      "description": "Node swap usage counters"
                    },
                    "uptime": {
                      "type": "integer",
                      "description": "The current uptime of the server."
                    },
                    "wait": {
                      "type": "number",
                      "description": "Total IO wait since last query."
                    }
                  },
                  "description": "The Node status"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Reboot or shutdown the node.",
        "description": "Reboot or shutdown the node.",
        "operationId": "post_nodes_nodes_node_nodes_node_status",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "command": {
                    "type": "string",
                    "description": "Node Power command type.",
                    "enum": [
                      "reboot",
                      "shutdown"
                    ]
                  }
                },
                "required": [
                  "command"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/subscription": {
      "delete": {
        "summary": "Delete subscription info.",
        "description": "Delete subscription info.",
        "operationId": "delete_nodes_nodes_node_nodes_node_subscription",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Read subscription info.",
        "description": "Read subscription info.",
        "operationId": "get_nodes_nodes_node_nodes_node_subscription",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Proxmox subscription information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "checktime": {
                      "type": "integer",
                      "description": "timestamp of the last check done"
                    },
                    "key": {
                      "type": "string",
                      "description": "the subscription key, if set and permitted to access"
                    },
                    "message": {
                      "type": "string",
                      "description": "a more human readable status message"
                    },
                    "nextduedate": {
                      "type": "string",
                      "description": "next due date of the set subscription"
                    },
                    "productname": {
                      "type": "string",
                      "description": "human readable productname of the set subscription"
                    },
                    "regdate": {
                      "type": "string",
                      "description": "register date of the set subscription"
                    },
                    "serverid": {
                      "type": "string",
                      "description": "the server ID, if permitted to access"
                    },
                    "signature": {
                      "type": "string",
                      "description": "Signature for offline keys"
                    },
                    "status": {
                      "type": "string",
                      "description": "Subscription status"
                    },
                    "url": {
                      "type": "string",
                      "description": "URL to the web shop"
                    }
                  },
                  "description": "Proxmox subscription information"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Check and update subscription status.",
        "description": "Check and update subscription status.",
        "operationId": "post_nodes_nodes_node_nodes_node_subscription",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Always connect to server, even if information in cache is up to date.",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Set a subscription key and check it.",
        "description": "Set a subscription key and check it.",
        "operationId": "put_nodes_nodes_node_nodes_node_subscription",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Proxmox Backup Server subscription key.",
                    "minLength": 15,
                    "maxLength": 16,
                    "pattern": "^pbs(?:[cbsp])-[0-9a-f]{10}$"
                  }
                },
                "required": [
                  "key"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/syslog": {
      "get": {
        "summary": "Read syslog entries.",
        "description": "Read syslog entries.",
        "operationId": "get_nodes_nodes_node_nodes_node_syslog",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Max. number of lines.",
              "minimum": 0
            },
            "description": "Max. number of lines."
          },
          {
            "name": "service",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Service ID.",
              "maxLength": 128
            },
            "description": "Service ID."
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Display all log since this date-time string.",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}( \\d{2}:\\d{2}(:\\d{2})?)?$"
            },
            "description": "Display all log since this date-time string."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Start line number.",
              "minimum": 0
            },
            "description": "Start line number."
          },
          {
            "name": "until",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Display all log until this date-time string.",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}( \\d{2}:\\d{2}(:\\d{2})?)?$"
            },
            "description": "Display all log until this date-time string."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of syslog entries.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "n": {
                        "type": "integer",
                        "description": "Line number."
                      },
                      "t": {
                        "type": "string",
                        "description": "Line text."
                      }
                    },
                    "description": "Syslog line with line number."
                  },
                  "description": "Returns a list of syslog entries."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/tasks": {
      "get": {
        "summary": "List tasks.",
        "description": "List tasks.",
        "operationId": "get_nodes_nodes_node_nodes_node_tasks",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "errors",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Only list erroneous tasks.",
              "default": false
            },
            "description": "Only list erroneous tasks."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Only list this amount of tasks. (0 means no limit)",
              "default": 50
            },
            "description": "Only list this amount of tasks. (0 means no limit)"
          },
          {
            "name": "running",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Only list running tasks.",
              "default": false
            },
            "description": "Only list running tasks."
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Only list tasks since this UNIX epoch."
            },
            "description": "Only list tasks since this UNIX epoch."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "List tasks beginning from this offset.",
              "default": 0
            },
            "description": "List tasks beginning from this offset."
          },
          {
            "name": "statusfilter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "description": "Only list tasks which have any one of the listed status.",
              "items": {
                "type": "string"
              }
            },
            "description": "Only list tasks which have any one of the listed status."
          },
          {
            "name": "store",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Datastore name.",
              "minLength": 3,
              "maxLength": 32,
              "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
            },
            "description": "Datastore name."
          },
          {
            "name": "typefilter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Only list tasks whose type contains this."
            },
            "description": "Only list tasks whose type contains this."
          },
          {
            "name": "until",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Only list tasks until this UNIX epoch."
            },
            "description": "Only list tasks until this UNIX epoch."
          },
          {
            "name": "userfilter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Only list tasks from this user."
            },
            "description": "Only list tasks from this user."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of tasks.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "endtime": {
                        "type": "integer",
                        "description": "The task end time (Epoch)"
                      },
                      "node": {
                        "type": "string",
                        "description": "The node name where the task is running on."
                      },
                      "pid": {
                        "type": "integer",
                        "description": "The Unix PID"
                      },
                      "pstart": {
                        "type": "integer",
                        "description": "The task start time (Epoch)"
                      },
                      "starttime": {
                        "type": "integer",
                        "description": "The task start time (Epoch)"
                      },
                      "status": {
                        "type": "string",
                        "description": "Task end status"
                      },
                      "upid": {
                        "type": "string",
                        "description": "Unique Process/Task Identifier"
                      },
                      "user": {
                        "type": "string",
                        "description": "The authenticated entity who started the task"
                      },
                      "worker_id": {
                        "type": "string",
                        "description": "Worker ID (arbitrary ASCII string)"
                      },
                      "worker_type": {
                        "type": "string",
                        "description": "Worker type (arbitrary ASCII string)"
                      }
                    },
                    "description": "Task properties."
                  },
                  "description": "A list of tasks."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/tasks/nodes/{node}/tasks/{upid}": {
      "delete": {
        "summary": "Try to stop a task.",
        "description": "Try to stop a task.",
        "operationId": "delete_nodes_nodes_node_nodes_node_tasks_nodes_node_tasks_upid",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "upid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The upid parameter"
            },
            "description": "The upid parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_nodes_nodes_node_nodes_node_tasks_nodes_node_tasks_upid",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "upid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The upid parameter"
            },
            "description": "The upid parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/tasks/nodes/{node}/tasks/{upid}/nodes/{node}/tasks/{upid}/log": {
      "get": {
        "summary": "Read the task log",
        "description": "Read the task log",
        "operationId": "get_nodes_nodes_node_nodes_node_tasks_nodes_node_tasks_upid_nodes_node_tasks_upid_log",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "upid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The upid parameter"
            },
            "description": "The upid parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "upid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The upid parameter"
            },
            "description": "The upid parameter"
          },
          {
            "name": "download",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Whether the tasklog file should be downloaded. This parameter can't be used in conjunction with other parameters",
              "default": false
            },
            "description": "Whether the tasklog file should be downloaded. This parameter can't be used in conjunction with other parameters"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "The amount of lines to read from the tasklog. Setting this parameter to 0 will return all lines until the end of the file.",
              "minimum": 0,
              "default": 50
            },
            "description": "The amount of lines to read from the tasklog. Setting this parameter to 0 will return all lines until the end of the file."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Start at this line when reading the tasklog",
              "minimum": 0,
              "default": 0
            },
            "description": "Start at this line when reading the tasklog"
          },
          {
            "name": "test-status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Test task status, and set result attribute \"active\" accordingly."
            },
            "description": "Test task status, and set result attribute \"active\" accordingly."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/tasks/nodes/{node}/tasks/{upid}/nodes/{node}/tasks/{upid}/status": {
      "get": {
        "summary": "Get task status.",
        "description": "Get task status.",
        "operationId": "get_nodes_nodes_node_nodes_node_tasks_nodes_node_tasks_upid_nodes_node_tasks_upid_status",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "upid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The upid parameter"
            },
            "description": "The upid parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "upid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The upid parameter"
            },
            "description": "The upid parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Task status information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "exitstatus": {
                      "type": "string",
                      "description": "'OK', 'Error: <msg>', or 'unknown'."
                    },
                    "id": {
                      "type": "string",
                      "description": "Worker ID (arbitrary ASCII string)"
                    },
                    "node": {
                      "type": "string",
                      "description": "Node name (or 'localhost')"
                    },
                    "pid": {
                      "type": "integer",
                      "description": "The Unix PID."
                    },
                    "pstart": {
                      "type": "integer",
                      "description": "The Unix process start time from `/proc/pid/stat`"
                    },
                    "starttime": {
                      "type": "integer",
                      "description": "The task start time (Epoch)"
                    },
                    "status": {
                      "type": "string",
                      "description": "'running' or 'stopped'"
                    },
                    "tokenid": {
                      "type": "string",
                      "description": "The token ID part of an API token authentication id.\n\nThis alone does NOT uniquely identify the API token - use a full `Authid` for such use cases."
                    },
                    "type": {
                      "type": "string",
                      "description": "Worker type (arbitrary ASCII string)"
                    },
                    "upid": {
                      "type": "string",
                      "description": "Unique Process/Task Identifier"
                    },
                    "user": {
                      "type": "string",
                      "description": "User ID"
                    }
                  },
                  "description": "Task status information."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/termproxy": {
      "post": {
        "summary": "Call termproxy and return shell ticket",
        "description": "Call termproxy and return shell ticket",
        "operationId": "post_nodes_nodes_node_nodes_node_termproxy",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cmd": {
                    "type": "string",
                    "description": "The command to run.",
                    "enum": [
                      "login",
                      "upgrade"
                    ]
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Object with the user, ticket, port and upid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "port": {
                      "type": "string",
                      "description": ""
                    },
                    "ticket": {
                      "type": "string",
                      "description": ""
                    },
                    "upid": {
                      "type": "string",
                      "description": ""
                    },
                    "user": {
                      "type": "string",
                      "description": ""
                    }
                  },
                  "description": "Object with the user, ticket, port and upid"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/time": {
      "get": {
        "summary": "Read server time and time zone settings.",
        "description": "Read server time and time zone settings.",
        "operationId": "get_nodes_nodes_node_nodes_node_time",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns server time and timezone.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "localtime": {
                      "type": "integer",
                      "description": "Seconds since 1970-01-01 00:00:00 UTC. (local time)"
                    },
                    "time": {
                      "type": "integer",
                      "description": "Seconds since 1970-01-01 00:00:00 UTC."
                    },
                    "timezone": {
                      "type": "string",
                      "description": "Time zone. The file '/usr/share/zoneinfo/zone.tab' contains the list of valid names."
                    }
                  },
                  "description": "Returns server time and timezone."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Set time zone",
        "description": "Set time zone",
        "operationId": "put_nodes_nodes_node_nodes_node_time",
        "tags": [
          "Nodes"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "timezone": {
                    "type": "string",
                    "description": "Time zone. The file '/usr/share/zoneinfo/zone.tab' contains the list of valid names.",
                    "minLength": 2,
                    "maxLength": 64,
                    "pattern": "^[[:^cntrl:]]*$"
                  }
                },
                "required": [
                  "timezone"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//nodes/nodes/{node}/nodes/{node}/vncwebsocket": {
      "get": {
        "summary": "Upgraded to websocket",
        "description": "Upgraded to websocket",
        "operationId": "get_nodes_nodes_node_nodes_node_vncwebsocket",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "node",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProxmoxNodeId"
            },
            "description": "The node parameter"
          },
          {
            "name": "port",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Terminal port"
            },
            "description": "Terminal port"
          },
          {
            "name": "vncticket",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Terminal ticket"
            },
            "description": "Terminal ticket"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//ping": {
      "get": {
        "summary": "Dummy method which replies with `{ \"pong\": True }`",
        "description": "Dummy method which replies with `{ \"pong\": True }`",
        "operationId": "get_ping",
        "tags": [
          "Ping"
        ],
        "responses": {
          "200": {
            "description": "Dummy ping",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pong": {
                      "type": "boolean",
                      "description": "Always true"
                    }
                  },
                  "description": "Dummy ping"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//pull": {
      "post": {
        "summary": "Sync store from other repository",
        "description": "Sync store from other repository",
        "operationId": "post_pull",
        "tags": [
          "Pull"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "burst-in": {
                    "type": "string",
                    "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "burst-out": {
                    "type": "string",
                    "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "encrypted-only": {
                    "type": "boolean",
                    "description": "Only synchronize encrypted backup snapshots, exclude others."
                  },
                  "group-filter": {
                    "type": "array",
                    "description": "List of group filters.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "max-depth": {
                    "type": "integer",
                    "description": "How many levels of namespaces should be operated on (0 == no recursion, empty == automatic full recursion, namespace depths reduce maximum allowed value)",
                    "minimum": 0,
                    "maximum": 7
                  },
                  "ns": {
                    "type": "string",
                    "description": "Namespace.",
                    "maxLength": 256,
                    "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
                  },
                  "rate-in": {
                    "type": "string",
                    "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "rate-out": {
                    "type": "string",
                    "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "remote": {
                    "type": "string",
                    "description": "Remote ID.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "remote-ns": {
                    "type": "string",
                    "description": "Namespace.",
                    "maxLength": 256,
                    "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
                  },
                  "remote-store": {
                    "type": "string",
                    "description": "Datastore name.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "remove-vanished": {
                    "type": "boolean",
                    "description": "Delete vanished backups. This remove the local copy if the remote backup was deleted.",
                    "default": false
                  },
                  "resync-corrupt": {
                    "type": "boolean",
                    "description": "If the verification failed for a local snapshot, try to pull it again."
                  },
                  "store": {
                    "type": "string",
                    "description": "Datastore name.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "transfer-last": {
                    "type": "integer",
                    "description": "Limit transfer to last N snapshots (per group), skipping others",
                    "minimum": 1
                  },
                  "verified-only": {
                    "type": "boolean",
                    "description": "Only synchronize verified backup snapshots, exclude others."
                  }
                },
                "required": [
                  "remote-store",
                  "store"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//push": {
      "post": {
        "summary": "Push store to other repository",
        "description": "Push store to other repository",
        "operationId": "post_push",
        "tags": [
          "Push"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "burst-in": {
                    "type": "string",
                    "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "burst-out": {
                    "type": "string",
                    "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "encrypted-only": {
                    "type": "boolean",
                    "description": "Only synchronize encrypted backup snapshots, exclude others."
                  },
                  "group-filter": {
                    "type": "array",
                    "description": "List of group filters.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "max-depth": {
                    "type": "integer",
                    "description": "How many levels of namespaces should be operated on (0 == no recursion, empty == automatic full recursion, namespace depths reduce maximum allowed value)",
                    "minimum": 0,
                    "maximum": 7
                  },
                  "ns": {
                    "type": "string",
                    "description": "Namespace.",
                    "maxLength": 256,
                    "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
                  },
                  "rate-in": {
                    "type": "string",
                    "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "rate-out": {
                    "type": "string",
                    "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "remote": {
                    "type": "string",
                    "description": "Remote ID.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "remote-ns": {
                    "type": "string",
                    "description": "Namespace.",
                    "maxLength": 256,
                    "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
                  },
                  "remote-store": {
                    "type": "string",
                    "description": "Datastore name.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "remove-vanished": {
                    "type": "boolean",
                    "description": "Delete vanished backups. This remove the local copy if the remote backup was deleted.",
                    "default": false
                  },
                  "store": {
                    "type": "string",
                    "description": "Datastore name.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "transfer-last": {
                    "type": "integer",
                    "description": "Limit transfer to last N snapshots (per group), skipping others",
                    "minimum": 1
                  },
                  "verified-only": {
                    "type": "boolean",
                    "description": "Only synchronize verified backup snapshots, exclude others."
                  }
                },
                "required": [
                  "remote",
                  "remote-store",
                  "store"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//reader": {
      "get": {
        "summary": "Upgraded to backup protocol ('proxmox-backup-reader-protocol-v1').",
        "description": "Upgraded to backup protocol ('proxmox-backup-reader-protocol-v1').",
        "operationId": "get_reader",
        "tags": [
          "Reader"
        ],
        "parameters": [
          {
            "name": "backup-id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup ID.",
              "pattern": "^[A-Za-z0-9_][A-Za-z0-9._\\-]*$"
            },
            "description": "Backup ID."
          },
          {
            "name": "backup-time",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Backup time (Unix epoch.)",
              "minimum": 1
            },
            "description": "Backup time (Unix epoch.)"
          },
          {
            "name": "backup-type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup type.",
              "enum": [
                "vm",
                "ct",
                "host"
              ]
            },
            "description": "Backup type."
          },
          {
            "name": "debug",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Enable verbose debug logging."
            },
            "description": "Enable verbose debug logging."
          },
          {
            "name": "ns",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Namespace.",
              "maxLength": 256,
              "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
            },
            "description": "Namespace."
          },
          {
            "name": "store",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Datastore name.",
              "minLength": 3,
              "maxLength": 32,
              "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
            },
            "description": "Datastore name."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//status": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_status",
        "tags": [
          "Status & Monitoring"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//status/status/datastore-usage": {
      "get": {
        "summary": "List Datastore usages and estimates",
        "description": "List Datastore usages and estimates",
        "operationId": "get_status_status_datastore-usage",
        "tags": [
          "Status & Monitoring"
        ],
        "responses": {
          "200": {
            "description": "Lists the Status of the Datastores.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "avail": {
                        "type": "integer",
                        "description": "The available bytes of the underlying storage. (-1 on error)"
                      },
                      "error": {
                        "type": "string",
                        "description": "An error description, for example, when the datastore could not be looked up"
                      },
                      "estimated-full-date": {
                        "type": "integer",
                        "description": "Estimation of the UNIX epoch when the storage will be full.\nIt's calculated via a simple Linear Regression (Least Squares) over the RRD data of the\nlast Month. Missing if not enough data points are available yet. An estimate in the past\nmeans that usage is declining or not changing."
                      },
                      "gc-status": {
                        "type": "object",
                        "properties": {
                          "disk-bytes": {
                            "type": "integer",
                            "description": "Bytes used on disk."
                          },
                          "disk-chunks": {
                            "type": "integer",
                            "description": "Chunks used on disk."
                          },
                          "index-data-bytes": {
                            "type": "integer",
                            "description": "Sum of bytes referred by index files."
                          },
                          "index-file-count": {
                            "type": "integer",
                            "description": "Number of processed index files."
                          },
                          "pending-bytes": {
                            "type": "integer",
                            "description": "Sum of pending bytes (pending removal - kept for safety)."
                          },
                          "pending-chunks": {
                            "type": "integer",
                            "description": "Number of pending chunks (pending removal - kept for safety)."
                          },
                          "removed-bad": {
                            "type": "integer",
                            "description": "Number of chunks marked as .bad by verify that have been removed by GC."
                          },
                          "removed-bytes": {
                            "type": "integer",
                            "description": "Sum of removed bytes."
                          },
                          "removed-chunks": {
                            "type": "integer",
                            "description": "Number of removed chunks."
                          },
                          "still-bad": {
                            "type": "integer",
                            "description": "Number of chunks still marked as .bad after garbage collection."
                          },
                          "upid": {
                            "type": "string",
                            "description": "Unique Process/Task Identifier"
                          }
                        },
                        "description": "Garbage collection status."
                      },
                      "history": {
                        "type": "array",
                        "items": {
                          "type": "number",
                          "description": "The usage of a time in the past. Either null or between 0.0 and 1.0."
                        },
                        "description": "A list of usages of the past (last Month)."
                      },
                      "history-delta": {
                        "type": "integer",
                        "description": "History resolution (seconds)"
                      },
                      "history-start": {
                        "type": "integer",
                        "description": "History start time (epoch)"
                      },
                      "mount-status": {
                        "type": "string",
                        "description": "Current mounting status of a datastore, useful for removable datastores."
                      },
                      "store": {
                        "type": "string",
                        "description": "Datastore name."
                      },
                      "total": {
                        "type": "integer",
                        "description": "The Size of the underlying storage in bytes."
                      },
                      "used": {
                        "type": "integer",
                        "description": "The used bytes of the underlying storage."
                      }
                    },
                    "description": "Status of a Datastore"
                  },
                  "description": "Lists the Status of the Datastores."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//status/status/metrics": {
      "get": {
        "summary": "Return backup server metrics.",
        "description": "Return backup server metrics.",
        "operationId": "get_status_status_metrics",
        "tags": [
          "Status & Monitoring"
        ],
        "parameters": [
          {
            "name": "history",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include historic values (last 30 minutes)",
              "default": false
            },
            "description": "Include historic values (last 30 minutes)"
          },
          {
            "name": "start-time",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Only return values with a timestamp > start-time. Only has an effect if 'history' is also set",
              "default": 0
            },
            "description": "Only return values with a timestamp > start-time. Only has an effect if 'history' is also set"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_tape",
        "tags": [
          "Tape"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/backup": {
      "get": {
        "summary": "List all tape backup jobs",
        "description": "List all tape backup jobs",
        "operationId": "get_tape_tape_backup",
        "tags": [
          "Tape"
        ],
        "responses": {
          "200": {
            "description": "List configured thape backup jobs and their status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "comment": {
                        "type": "string",
                        "description": "Comment."
                      },
                      "drive": {
                        "type": "string",
                        "description": "Drive Identifier."
                      },
                      "eject-media": {
                        "type": "boolean",
                        "description": "Eject media upon job completion."
                      },
                      "export-media-set": {
                        "type": "boolean",
                        "description": "Export media set upon job completion."
                      },
                      "group-filter": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "Group filter based on group identifier ('group:GROUP'), group type ('type:<vm|ct|host>'), or regex ('regex:RE'). Can be inverted by prepending 'exclude:'."
                        },
                        "description": "List of group filters."
                      },
                      "id": {
                        "type": "string",
                        "description": "Job ID."
                      },
                      "last-run-endtime": {
                        "type": "integer",
                        "description": "Endtime of the last run."
                      },
                      "last-run-state": {
                        "type": "string",
                        "description": "Result of the last run."
                      },
                      "last-run-upid": {
                        "type": "string",
                        "description": "Task UPID of the last run."
                      },
                      "latest-only": {
                        "type": "boolean",
                        "description": "Backup latest snapshots only."
                      },
                      "max-depth": {
                        "type": "integer",
                        "description": "How many levels of namespaces should be operated on (0 == no recursion)"
                      },
                      "next-media-label": {
                        "type": "string",
                        "description": "Next tape used (best guess)"
                      },
                      "next-run": {
                        "type": "integer",
                        "description": "Estimated time of the next run (UNIX epoch)."
                      },
                      "notification-mode": {
                        "type": "string",
                        "description": "Configure how notifications for this datastore should be sent.\n`legacy-sendmail` sends email notifications to the user configured\nin `notify-user` via the system's `sendmail` executable.\n`notification-system` emits matchable notification events to the\nnotification system."
                      },
                      "notify-user": {
                        "type": "string",
                        "description": "User ID"
                      },
                      "ns": {
                        "type": "string",
                        "description": "Namespace."
                      },
                      "pool": {
                        "type": "string",
                        "description": "Media pool name."
                      },
                      "schedule": {
                        "type": "string",
                        "description": "Run sync job at specified schedule."
                      },
                      "store": {
                        "type": "string",
                        "description": "Datastore name."
                      },
                      "worker-threads": {
                        "type": "integer",
                        "description": "Set the number of worker threads to use for the job"
                      }
                    },
                    "description": "Status of Tape Backup Job"
                  },
                  "description": "List configured thape backup jobs and their status"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Backup datastore to tape media pool",
        "description": "Backup datastore to tape media pool",
        "operationId": "post_tape_tape_backup",
        "tags": [
          "Tape"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "drive": {
                    "type": "string",
                    "description": "Drive Identifier.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "eject-media": {
                    "type": "boolean",
                    "description": "Eject media upon job completion."
                  },
                  "export-media-set": {
                    "type": "boolean",
                    "description": "Export media set upon job completion."
                  },
                  "force-media-set": {
                    "type": "boolean",
                    "description": "Ignore the allocation policy and start a new media-set.",
                    "default": false
                  },
                  "group-filter": {
                    "type": "array",
                    "description": "List of group filters.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "latest-only": {
                    "type": "boolean",
                    "description": "Backup latest snapshots only."
                  },
                  "max-depth": {
                    "type": "integer",
                    "description": "How many levels of namespaces should be operated on (0 == no recursion)",
                    "minimum": 0,
                    "maximum": 7,
                    "default": 7
                  },
                  "notification-mode": {
                    "type": "string",
                    "description": "Configure how notifications for this datastore should be sent.\n`legacy-sendmail` sends email notifications to the user configured\nin `notify-user` via the system's `sendmail` executable.\n`notification-system` emits matchable notification events to the\nnotification system.",
                    "enum": [
                      "legacy-sendmail",
                      "notification-system"
                    ],
                    "default": "legacy-sendmail"
                  },
                  "notify-user": {
                    "type": "string",
                    "description": "User ID",
                    "minLength": 3,
                    "maxLength": 64,
                    "pattern": "^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "ns": {
                    "type": "string",
                    "description": "Namespace.",
                    "maxLength": 256,
                    "pattern": "^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$"
                  },
                  "pool": {
                    "type": "string",
                    "description": "Media pool name.",
                    "minLength": 2,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "store": {
                    "type": "string",
                    "description": "Datastore name.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "worker-threads": {
                    "type": "integer",
                    "description": "Set the number of worker threads to use for the job",
                    "minimum": 1,
                    "maximum": 32,
                    "default": 1
                  }
                },
                "required": [
                  "drive",
                  "pool",
                  "store"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Unique Process/Task Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Unique Process/Task Identifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/backup/tape/backup/{id}": {
      "post": {
        "summary": "Runs a tape backup job manually.",
        "description": "Runs a tape backup job manually.",
        "operationId": "post_tape_tape_backup_tape_backup_id",
        "tags": [
          "Tape"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id parameter"
            },
            "description": "The id parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/changer": {
      "get": {
        "summary": "List changers",
        "description": "List changers",
        "operationId": "get_tape_tape_changer",
        "tags": [
          "Tape"
        ],
        "responses": {
          "200": {
            "description": "The list of configured changers with model information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "eject-before-unload": {
                        "type": "boolean",
                        "description": "if set to true, tapes are ejected manually before unloading"
                      },
                      "export-slots": {
                        "type": "string",
                        "format": {
                          "description": "Slot list.",
                          "items": {
                            "description": "Slot number",
                            "minimum": 1,
                            "type": "integer"
                          },
                          "type": "array"
                        },
                        "description": "A list of slot numbers, comma separated. Those slots are reserved for\nImport/Export, i.e. any media in those slots are considered to be\n'offline'.\n"
                      },
                      "model": {
                        "type": "string",
                        "description": "Model (autodetected)"
                      },
                      "name": {
                        "type": "string",
                        "description": "Tape Changer Identifier."
                      },
                      "path": {
                        "type": "string",
                        "description": "Path to Linux generic SCSI device (e.g. '/dev/sg4')"
                      },
                      "serial": {
                        "type": "string",
                        "description": "Serial number (autodetected)"
                      },
                      "vendor": {
                        "type": "string",
                        "description": "Vendor (autodetected)"
                      }
                    },
                    "description": "Changer config with optional device identification attributes"
                  },
                  "description": "The list of configured changers with model information."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/changer/tape/changer/{name}": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_tape_tape_changer_tape_changer_name",
        "tags": [
          "Tape"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/changer/tape/changer/{name}/tape/changer/{name}/status": {
      "get": {
        "summary": "Get tape changer status",
        "description": "Get tape changer status",
        "operationId": "get_tape_tape_changer_tape_changer_name_tape_changer_name_status",
        "tags": [
          "Tape"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          },
          {
            "name": "cache",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Use cached value.",
              "default": true
            },
            "description": "Use cached value."
          }
        ],
        "responses": {
          "200": {
            "description": "A status entry for each drive and slot.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "entry-id": {
                        "type": "integer",
                        "description": "The ID of the slot or drive"
                      },
                      "entry-kind": {
                        "type": "string",
                        "description": "Mtx Entry Kind"
                      },
                      "label-text": {
                        "type": "string",
                        "description": "Media Label/Barcode."
                      },
                      "loaded-slot": {
                        "type": "integer",
                        "description": "The slot the drive was loaded from"
                      },
                      "state": {
                        "type": "string",
                        "description": "The current state of the drive"
                      }
                    },
                    "description": "Mtx Status Entry"
                  },
                  "description": "A status entry for each drive and slot."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/changer/tape/changer/{name}/tape/changer/{name}/transfer": {
      "post": {
        "summary": "Transfers media from one slot to another",
        "description": "Transfers media from one slot to another",
        "operationId": "post_tape_tape_changer_tape_changer_name_tape_changer_name_transfer",
        "tags": [
          "Tape"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "integer",
                    "description": "Source slot number",
                    "minimum": 1
                  },
                  "to": {
                    "type": "integer",
                    "description": "Destination slot number",
                    "minimum": 1
                  }
                },
                "required": [
                  "from",
                  "to"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name parameter"
            },
            "description": "The name parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/drive": {
      "get": {
        "summary": "List drives",
        "description": "List drives",
        "operationId": "get_tape_tape_drive",
        "tags": [
          "Tape"
        ],
        "parameters": [
          {
            "name": "changer",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Tape Changer Identifier.",
              "minLength": 3,
              "maxLength": 32,
              "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
            },
            "description": "Tape Changer Identifier."
          },
          {
            "name": "query-activity",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "If true, queries and returns the drive activity for each drive.",
              "default": false
            },
            "description": "If true, queries and returns the drive activity for each drive."
          }
        ],
        "responses": {
          "200": {
            "description": "The list of configured drives with model information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "activity": {
                        "type": "string",
                        "description": "The DT Device Activity from DT Device Status LP page"
                      },
                      "changer": {
                        "type": "string",
                        "description": "Tape Changer Identifier."
                      },
                      "changer-drivenum": {
                        "type": "integer",
                        "description": "Associated changer drive number (requires option changer)"
                      },
                      "model": {
                        "type": "string",
                        "description": "Model (autodetected)"
                      },
                      "name": {
                        "type": "string",
                        "description": "Drive Identifier."
                      },
                      "path": {
                        "type": "string",
                        "description": "The path to a LTO SCSI-generic tape device (i.e. '/dev/sg0')"
                      },
                      "serial": {
                        "type": "string",
                        "description": "Serial number (autodetected)"
                      },
                      "state": {
                        "type": "string",
                        "description": "the state of the drive if locked"
                      },
                      "vendor": {
                        "type": "string",
                        "description": "Vendor (autodetected)"
                      }
                    },
                    "description": "Drive list entry"
                  },
                  "description": "The list of configured drives with model information."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/drive/tape/drive/{drive}": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_tape_tape_drive_tape_drive_drive",
        "tags": [
          "Tape"
        ],
        "parameters": [
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/drive/tape/drive/{drive}/tape/drive/{drive}/barcode-label-media": {
      "post": {
        "summary": "Label media with barcodes from changer device",
        "description": "Label media with barcodes from changer device",
        "operationId": "post_tape_tape_drive_tape_drive_drive_tape_drive_drive_barcode-label-media",
        "tags": [
          "Tape"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pool": {
                    "type": "string",
                    "description": "Media pool name.",
                    "minLength": 2,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          },
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Unique Process/Task Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Unique Process/Task Identifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/drive/tape/drive/{drive}/tape/drive/{drive}/cartridge-memory": {
      "get": {
        "summary": "Read Cartridge Memory (Medium auxiliary memory attributes)",
        "description": "Read Cartridge Memory (Medium auxiliary memory attributes)",
        "operationId": "get_tape_tape_drive_tape_drive_drive_tape_drive_drive_cartridge-memory",
        "tags": [
          "Tape"
        ],
        "parameters": [
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          },
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A List of medium auxiliary memory attributes.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "Attribute id"
                      },
                      "name": {
                        "type": "string",
                        "description": "Attribute name"
                      },
                      "value": {
                        "type": "string",
                        "description": "Attribute value"
                      }
                    },
                    "description": "Medium auxiliary memory attributes (MAM)"
                  },
                  "description": "A List of medium auxiliary memory attributes."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/drive/tape/drive/{drive}/tape/drive/{drive}/catalog": {
      "post": {
        "summary": "Scan media and record content",
        "description": "Scan media and record content",
        "operationId": "post_tape_tape_drive_tape_drive_drive_tape_drive_drive_catalog",
        "tags": [
          "Tape"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Force overriding existing index."
                  },
                  "scan": {
                    "type": "boolean",
                    "description": "Re-read the whole tape to reconstruct the catalog instead of restoring saved versions."
                  },
                  "verbose": {
                    "type": "boolean",
                    "description": "Verbose mode - log all found chunks."
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          },
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Unique Process/Task Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Unique Process/Task Identifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/drive/tape/drive/{drive}/tape/drive/{drive}/clean": {
      "put": {
        "summary": "Clean drive",
        "description": "Clean drive",
        "operationId": "put_tape_tape_drive_tape_drive_drive_tape_drive_drive_clean",
        "tags": [
          "Tape"
        ],
        "parameters": [
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          },
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Unique Process/Task Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Unique Process/Task Identifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/drive/tape/drive/{drive}/tape/drive/{drive}/eject-media": {
      "post": {
        "summary": "Eject/Unload drive media",
        "description": "Eject/Unload drive media",
        "operationId": "post_tape_tape_drive_tape_drive_drive_tape_drive_drive_eject-media",
        "tags": [
          "Tape"
        ],
        "parameters": [
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          },
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Unique Process/Task Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Unique Process/Task Identifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/drive/tape/drive/{drive}/tape/drive/{drive}/export-media": {
      "put": {
        "summary": "Export media with specified label",
        "description": "Export media with specified label",
        "operationId": "put_tape_tape_drive_tape_drive_drive_tape_drive_drive_export-media",
        "tags": [
          "Tape"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "label-text": {
                    "type": "string",
                    "description": "Media Label/Barcode.",
                    "minLength": 2,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  }
                },
                "required": [
                  "label-text"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          },
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The import-export slot number the media was transferred to.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "description": "The import-export slot number the media was transferred to."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/drive/tape/drive/{drive}/tape/drive/{drive}/format-media": {
      "post": {
        "summary": "Format media. Check for label-text if given (cancels if wrong media).",
        "description": "Format media. Check for label-text if given (cancels if wrong media).",
        "operationId": "post_tape_tape_drive_tape_drive_drive_tape_drive_drive_format-media",
        "tags": [
          "Tape"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "fast": {
                    "type": "boolean",
                    "description": "Use fast erase.",
                    "default": true
                  },
                  "label-text": {
                    "type": "string",
                    "description": "Media Label/Barcode.",
                    "minLength": 2,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          },
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Unique Process/Task Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Unique Process/Task Identifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/drive/tape/drive/{drive}/tape/drive/{drive}/inventory": {
      "get": {
        "summary": "List known media labels (Changer Inventory)\n\nNote: Only useful for drives with associated changer device.\n\nThis method queries the changer to get a list of media labels.\n\nNote: This updates the media online status.",
        "description": "List known media labels (Changer Inventory)\n\nNote: Only useful for drives with associated changer device.\n\nThis method queries the changer to get a list of media labels.\n\nNote: This updates the media online status.",
        "operationId": "get_tape_tape_drive_tape_drive_drive_tape_drive_drive_inventory",
        "tags": [
          "Tape"
        ],
        "parameters": [
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          },
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of media labels with associated media Uuid (if any).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "label-text": {
                        "type": "string",
                        "description": "Changer label text (or Barcode)"
                      },
                      "uuid": {
                        "type": "string",
                        "description": "Media Uuid."
                      }
                    },
                    "description": "Label with optional Uuid"
                  },
                  "description": "The list of media labels with associated media Uuid (if any)."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Update inventory\n\nNote: Only useful for drives with associated changer device.\n\nThis method queries the changer to get a list of media labels. It\nthen loads any unknown media into the drive, reads the label, and\nstore the result to the media database.\n\nIf `catalog` is true, also tries to restore the catalog from tape.\n\nNote: This updates the media online status.",
        "description": "Update inventory\n\nNote: Only useful for drives with associated changer device.\n\nThis method queries the changer to get a list of media labels. It\nthen loads any unknown media into the drive, reads the label, and\nstore the result to the media database.\n\nIf `catalog` is true, also tries to restore the catalog from tape.\n\nNote: This updates the media online status.",
        "operationId": "put_tape_tape_drive_tape_drive_drive_tape_drive_drive_inventory",
        "tags": [
          "Tape"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "catalog": {
                    "type": "boolean",
                    "description": "Restore the catalog from tape.",
                    "default": false
                  },
                  "read-all-labels": {
                    "type": "boolean",
                    "description": "Load all tapes and try read labels (even if already inventoried)",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          },
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Unique Process/Task Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Unique Process/Task Identifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/drive/tape/drive/{drive}/tape/drive/{drive}/label-media": {
      "post": {
        "summary": "Label media\n\nWrite a new media label to the media in 'drive'. The media is\nassigned to the specified 'pool', or else to the free media pool.\n\nNote: The media need to be empty (you may want to format it first).",
        "description": "Label media\n\nWrite a new media label to the media in 'drive'. The media is\nassigned to the specified 'pool', or else to the free media pool.\n\nNote: The media need to be empty (you may want to format it first).",
        "operationId": "post_tape_tape_drive_tape_drive_drive_tape_drive_drive_label-media",
        "tags": [
          "Tape"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "label-text": {
                    "type": "string",
                    "description": "Media Label/Barcode.",
                    "minLength": 2,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "pool": {
                    "type": "string",
                    "description": "Media pool name.",
                    "minLength": 2,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  }
                },
                "required": [
                  "label-text"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          },
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Unique Process/Task Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Unique Process/Task Identifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/drive/tape/drive/{drive}/tape/drive/{drive}/load-media": {
      "post": {
        "summary": "Load media with specified label\n\nIssue a media load request to the associated changer device.",
        "description": "Load media with specified label\n\nIssue a media load request to the associated changer device.",
        "operationId": "post_tape_tape_drive_tape_drive_drive_tape_drive_drive_load-media",
        "tags": [
          "Tape"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "label-text": {
                    "type": "string",
                    "description": "Media Label/Barcode.",
                    "minLength": 2,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  }
                },
                "required": [
                  "label-text"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          },
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Unique Process/Task Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Unique Process/Task Identifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/drive/tape/drive/{drive}/tape/drive/{drive}/load-slot": {
      "post": {
        "summary": "Load media from the specified slot\n\nIssue a media load request to the associated changer device.",
        "description": "Load media from the specified slot\n\nIssue a media load request to the associated changer device.",
        "operationId": "post_tape_tape_drive_tape_drive_drive_tape_drive_drive_load-slot",
        "tags": [
          "Tape"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "source-slot": {
                    "type": "integer",
                    "description": "Source slot number.",
                    "minimum": 1
                  }
                },
                "required": [
                  "source-slot"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          },
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/drive/tape/drive/{drive}/tape/drive/{drive}/read-label": {
      "get": {
        "summary": "Read media label (optionally inventorize media)",
        "description": "Read media label (optionally inventorize media)",
        "operationId": "get_tape_tape_drive_tape_drive_drive_tape_drive_drive_read-label",
        "tags": [
          "Tape"
        ],
        "parameters": [
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          },
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          },
          {
            "name": "inventorize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Inventorize media"
            },
            "description": "Inventorize media"
          }
        ],
        "responses": {
          "200": {
            "description": "Media label info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ctime": {
                      "type": "integer",
                      "description": "Creation time stamp"
                    },
                    "encryption-key-fingerprint": {
                      "type": "string",
                      "description": "Encryption key fingerprint"
                    },
                    "label-text": {
                      "type": "string",
                      "description": "Media label text (or Barcode)"
                    },
                    "media-set-ctime": {
                      "type": "integer",
                      "description": "MediaSet Creation time stamp"
                    },
                    "media-set-uuid": {
                      "type": "string",
                      "description": "MediaSet Uuid (We use the all-zero Uuid to reseve an empty media for a specific pool)."
                    },
                    "pool": {
                      "type": "string",
                      "description": "MediaSet Pool"
                    },
                    "seq-nr": {
                      "type": "integer",
                      "description": "MediaSet media sequence number"
                    },
                    "uuid": {
                      "type": "string",
                      "description": "Media Uuid."
                    }
                  },
                  "description": "Media label info"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/drive/tape/drive/{drive}/tape/drive/{drive}/restore-key": {
      "post": {
        "summary": "Try to restore a tape encryption key",
        "description": "Try to restore a tape encryption key",
        "operationId": "post_tape_tape_drive_tape_drive_drive_tape_drive_drive_restore-key",
        "tags": [
          "Tape"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "description": "The password the key was encrypted with."
                  }
                },
                "required": [
                  "password"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          },
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/drive/tape/drive/{drive}/tape/drive/{drive}/rewind": {
      "post": {
        "summary": "Rewind tape",
        "description": "Rewind tape",
        "operationId": "post_tape_tape_drive_tape_drive_drive_tape_drive_drive_rewind",
        "tags": [
          "Tape"
        ],
        "parameters": [
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          },
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Unique Process/Task Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Unique Process/Task Identifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/drive/tape/drive/{drive}/tape/drive/{drive}/status": {
      "get": {
        "summary": "Get drive/media status",
        "description": "Get drive/media status",
        "operationId": "get_tape_tape_drive_tape_drive_drive_tape_drive_drive_status",
        "tags": [
          "Tape"
        ],
        "parameters": [
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          },
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Drive/Media status for Lto SCSI drives.\n\nMedia related data is optional - only set if there is a medium\nloaded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "alert-flags": {
                      "type": "string",
                      "description": "Tape Alert Flags"
                    },
                    "block-number": {
                      "type": "integer",
                      "description": "Current block number"
                    },
                    "blocksize": {
                      "type": "integer",
                      "description": "Block size (0 is variable size)"
                    },
                    "buffer-mode": {
                      "type": "integer",
                      "description": "Drive buffer mode"
                    },
                    "bytes-read": {
                      "type": "integer",
                      "description": "Total Bytes Read in Medium Life"
                    },
                    "bytes-written": {
                      "type": "integer",
                      "description": "Total Bytes Written in Medium Life"
                    },
                    "compression": {
                      "type": "boolean",
                      "description": "Compression enabled"
                    },
                    "density": {
                      "type": "string",
                      "description": "The density of a tape medium, derived from the LTO version."
                    },
                    "drive-activity": {
                      "type": "string",
                      "description": "The DT Device Activity from DT Device Status LP page"
                    },
                    "file-number": {
                      "type": "integer",
                      "description": "Current file number"
                    },
                    "manufactured": {
                      "type": "integer",
                      "description": "Medium Manufacture Date (epoch)"
                    },
                    "medium-passes": {
                      "type": "integer",
                      "description": "Count of the total number of times the medium has passed over\nthe head."
                    },
                    "medium-wearout": {
                      "type": "number",
                      "description": "Estimated tape wearout factor (assuming max. 16000 end-to-end passes)"
                    },
                    "product": {
                      "type": "string",
                      "description": "Product"
                    },
                    "revision": {
                      "type": "string",
                      "description": "Revision"
                    },
                    "vendor": {
                      "type": "string",
                      "description": "Vendor"
                    },
                    "volume-mounts": {
                      "type": "integer",
                      "description": "Number of mounts for the current volume (i.e., Thread Count)"
                    },
                    "write-protect": {
                      "type": "boolean",
                      "description": "Media is write protected"
                    }
                  },
                  "description": "Drive/Media status for Lto SCSI drives.\n\nMedia related data is optional - only set if there is a medium\nloaded."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/drive/tape/drive/{drive}/tape/drive/{drive}/unload": {
      "post": {
        "summary": "Unload media via changer",
        "description": "Unload media via changer",
        "operationId": "post_tape_tape_drive_tape_drive_drive_tape_drive_drive_unload",
        "tags": [
          "Tape"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "target-slot": {
                    "type": "integer",
                    "description": "Target slot number. If omitted, defaults to the slot that the drive was loaded from.",
                    "minimum": 1
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          },
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Unique Process/Task Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Unique Process/Task Identifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/drive/tape/drive/{drive}/tape/drive/{drive}/volume-statistics": {
      "get": {
        "summary": "Read Volume Statistics (SCSI log page 17h)",
        "description": "Read Volume Statistics (SCSI log page 17h)",
        "operationId": "get_tape_tape_drive_tape_drive_drive_tape_drive_drive_volume-statistics",
        "tags": [
          "Tape"
        ],
        "parameters": [
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          },
          {
            "name": "drive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The drive parameter"
            },
            "description": "The drive parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Volume statistics from SCSI log page 17h",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "beginning-of-medium-passes": {
                      "type": "integer",
                      "description": "Beginning of medium passes"
                    },
                    "last-load-read-compression-ratio": {
                      "type": "integer",
                      "description": "Last load read compression ratio"
                    },
                    "last-load-write-compression-ratio": {
                      "type": "integer",
                      "description": "Last load write compression ratio"
                    },
                    "last-mount-bytes-read": {
                      "type": "integer",
                      "description": "Last mount bytes read"
                    },
                    "last-mount-bytes-written": {
                      "type": "integer",
                      "description": "Last mount bytes written"
                    },
                    "last-mount-unrecovered-read-errors": {
                      "type": "integer",
                      "description": "Last mount unrecovered read errors"
                    },
                    "last-mount-unrecovered-write-errors": {
                      "type": "integer",
                      "description": "Last mount unrecovered write errors"
                    },
                    "lifetime-bytes-read": {
                      "type": "integer",
                      "description": "Lifetime bytes read"
                    },
                    "lifetime-bytes-written": {
                      "type": "integer",
                      "description": "Lifetime bytes written"
                    },
                    "medium-mount-time": {
                      "type": "integer",
                      "description": "Medium mount time"
                    },
                    "medium-ready-time": {
                      "type": "integer",
                      "description": "Medium ready time"
                    },
                    "middle-of-tape-passes": {
                      "type": "integer",
                      "description": "Middle of medium passes"
                    },
                    "serial": {
                      "type": "string",
                      "description": "Volume serial number"
                    },
                    "total-native-capacity": {
                      "type": "integer",
                      "description": "Total native capacity"
                    },
                    "total-used-native-capacity": {
                      "type": "integer",
                      "description": "Total used native capacity"
                    },
                    "volume-datasets-read": {
                      "type": "integer",
                      "description": "Total datasets read"
                    },
                    "volume-datasets-written": {
                      "type": "integer",
                      "description": "Total data sets written"
                    },
                    "volume-mounts": {
                      "type": "integer",
                      "description": "Volume mounts (thread count)"
                    },
                    "volume-recovered-read-errors": {
                      "type": "integer",
                      "description": "Total read retries"
                    },
                    "volume-recovered-write-data-errors": {
                      "type": "integer",
                      "description": "Write retries"
                    },
                    "volume-unrecovered-read-errors": {
                      "type": "integer",
                      "description": "Total unrecovered read errors"
                    },
                    "volume-unrecovered-write-data-errors": {
                      "type": "integer",
                      "description": "Total unrecovered write errors"
                    },
                    "volume-unrecovered-write-servo-errors": {
                      "type": "integer",
                      "description": "Total fatal suspended writes"
                    },
                    "volume-write-servo-errors": {
                      "type": "integer",
                      "description": "Total suspended writes"
                    },
                    "worm": {
                      "type": "boolean",
                      "description": "Volume is WORM"
                    },
                    "write-protect": {
                      "type": "boolean",
                      "description": "Write protect"
                    }
                  },
                  "description": "Volume statistics from SCSI log page 17h"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/media": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_tape_tape_media",
        "tags": [
          "Tape"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/media/tape/media/content": {
      "get": {
        "summary": "List media content",
        "description": "List media content",
        "operationId": "get_tape_tape_media_tape_media_content",
        "tags": [
          "Tape"
        ],
        "parameters": [
          {
            "name": "backup-id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Backup ID.",
              "pattern": "^[A-Za-z0-9_][A-Za-z0-9._\\-]*$"
            },
            "description": "Backup ID."
          },
          {
            "name": "backup-type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Backup types.",
              "enum": [
                "vm",
                "ct",
                "host"
              ]
            },
            "description": "Backup types."
          },
          {
            "name": "label-text",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Media Label/Barcode.",
              "minLength": 2,
              "maxLength": 32,
              "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
            },
            "description": "Media Label/Barcode."
          },
          {
            "name": "media",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Media Uuid.",
              "pattern": "^[0-9a-f]{8}(?:-[0-9a-f]{4}){3}-[0-9a-f]{12}$"
            },
            "description": "Media Uuid."
          },
          {
            "name": "media-set",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "MediaSet Uuid (We use the all-zero Uuid to reseve an empty media for a specific pool).",
              "pattern": "^[0-9a-f]{8}(?:-[0-9a-f]{4}){3}-[0-9a-f]{12}$"
            },
            "description": "MediaSet Uuid (We use the all-zero Uuid to reseve an empty media for a specific pool)."
          },
          {
            "name": "pool",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Media pool name.",
              "minLength": 2,
              "maxLength": 32,
              "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
            },
            "description": "Media pool name."
          }
        ],
        "responses": {
          "200": {
            "description": "Media content list.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "backup-time": {
                        "type": "integer",
                        "description": "Snapshot creation time (epoch)"
                      },
                      "label-text": {
                        "type": "string",
                        "description": "Media label text (or Barcode)"
                      },
                      "media-set-ctime": {
                        "type": "integer",
                        "description": "MediaSet Creation time stamp"
                      },
                      "media-set-name": {
                        "type": "string",
                        "description": "Media set name"
                      },
                      "media-set-uuid": {
                        "type": "string",
                        "description": "MediaSet Uuid (We use the all-zero Uuid to reseve an empty media for a specific pool)."
                      },
                      "pool": {
                        "type": "string",
                        "description": "Media Pool"
                      },
                      "seq-nr": {
                        "type": "integer",
                        "description": "Media set seq_nr"
                      },
                      "snapshot": {
                        "type": "string",
                        "description": "Backup snapshot"
                      },
                      "store": {
                        "type": "string",
                        "description": "Datastore Name"
                      },
                      "uuid": {
                        "type": "string",
                        "description": "Media Uuid."
                      }
                    },
                    "description": "Media content list entry"
                  },
                  "description": "Media content list."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/media/tape/media/destroy": {
      "get": {
        "summary": "Destroy media (completely remove from database)",
        "description": "Destroy media (completely remove from database)",
        "operationId": "get_tape_tape_media_tape_media_destroy",
        "tags": [
          "Tape"
        ],
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Force removal (even if media is used in a media set)."
            },
            "description": "Force removal (even if media is used in a media set)."
          },
          {
            "name": "label-text",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Media Label/Barcode.",
              "minLength": 2,
              "maxLength": 32,
              "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
            },
            "description": "Media Label/Barcode."
          },
          {
            "name": "uuid",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Media Uuid.",
              "pattern": "^[0-9a-f]{8}(?:-[0-9a-f]{4}){3}-[0-9a-f]{12}$"
            },
            "description": "Media Uuid."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/media/tape/media/list": {
      "get": {
        "summary": "List pool media",
        "description": "List pool media",
        "operationId": "get_tape_tape_media_tape_media_list",
        "tags": [
          "Tape"
        ],
        "parameters": [
          {
            "name": "pool",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Media pool name.",
              "minLength": 2,
              "maxLength": 32,
              "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
            },
            "description": "Media pool name."
          },
          {
            "name": "update-status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Try to update tape library status (check what tapes are online).",
              "default": true
            },
            "description": "Try to update tape library status (check what tapes are online)."
          },
          {
            "name": "update-status-changer",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Tape Changer Identifier.",
              "minLength": 3,
              "maxLength": 32,
              "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
            },
            "description": "Tape Changer Identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "List of registered backup media.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "bytes-used": {
                        "type": "integer",
                        "description": "Bytes currently used"
                      },
                      "catalog": {
                        "type": "boolean",
                        "description": "Catalog status OK"
                      },
                      "ctime": {
                        "type": "integer",
                        "description": "Creation time stamp"
                      },
                      "expired": {
                        "type": "boolean",
                        "description": "Expired flag"
                      },
                      "label-text": {
                        "type": "string",
                        "description": "Media label text (or Barcode)"
                      },
                      "location": {
                        "type": "string",
                        "description": "Media location (e.g. 'offline', 'online-<changer_name>', 'vault-<vault_name>')"
                      },
                      "media-set-ctime": {
                        "type": "integer",
                        "description": "MediaSet creation time stamp"
                      },
                      "media-set-name": {
                        "type": "string",
                        "description": "Media set name"
                      },
                      "media-set-uuid": {
                        "type": "string",
                        "description": "MediaSet Uuid (We use the all-zero Uuid to reseve an empty media for a specific pool)."
                      },
                      "pool": {
                        "type": "string",
                        "description": "Media Pool"
                      },
                      "seq-nr": {
                        "type": "integer",
                        "description": "Media set seq_nr"
                      },
                      "status": {
                        "type": "string",
                        "description": "Media status\nMedia Status"
                      },
                      "uuid": {
                        "type": "string",
                        "description": "Media Uuid."
                      }
                    },
                    "description": "Media list entry"
                  },
                  "description": "List of registered backup media."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/media/tape/media/list/tape/media/list/{uuid}": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_tape_tape_media_tape_media_list_tape_media_list_uuid",
        "tags": [
          "Tape"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The uuid parameter"
            },
            "description": "The uuid parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/media/tape/media/list/tape/media/list/{uuid}/tape/media/list/{uuid}/status": {
      "get": {
        "summary": "Get current media status",
        "description": "Get current media status",
        "operationId": "get_tape_tape_media_tape_media_list_tape_media_list_uuid_tape_media_list_uuid_status",
        "tags": [
          "Tape"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The uuid parameter"
            },
            "description": "The uuid parameter"
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The uuid parameter"
            },
            "description": "The uuid parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "post": {
        "summary": "Update media status (None, 'full', 'damaged' or 'retired')\n\nIt is not allowed to set status to 'writable' or 'unknown' (those\nare internally managed states).",
        "description": "Update media status (None, 'full', 'damaged' or 'retired')\n\nIt is not allowed to set status to 'writable' or 'unknown' (those\nare internally managed states).",
        "operationId": "post_tape_tape_media_tape_media_list_tape_media_list_uuid_tape_media_list_uuid_status",
        "tags": [
          "Tape"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "Media status\nMedia Status",
                    "enum": [
                      "writable",
                      "full",
                      "unknown",
                      "damaged",
                      "retired"
                    ]
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The uuid parameter"
            },
            "description": "The uuid parameter"
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The uuid parameter"
            },
            "description": "The uuid parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/media/tape/media/media-sets": {
      "get": {
        "summary": "List Media sets",
        "description": "List Media sets",
        "operationId": "get_tape_tape_media_tape_media_media-sets",
        "tags": [
          "Tape"
        ],
        "responses": {
          "200": {
            "description": "List of media sets.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "media-set-ctime": {
                        "type": "integer",
                        "description": "MediaSet creation time stamp"
                      },
                      "media-set-name": {
                        "type": "string",
                        "description": "Media set name"
                      },
                      "media-set-uuid": {
                        "type": "string",
                        "description": "MediaSet Uuid (We use the all-zero Uuid to reseve an empty media for a specific pool)."
                      },
                      "pool": {
                        "type": "string",
                        "description": "Media Pool"
                      }
                    },
                    "description": "Media Set list entry"
                  },
                  "description": "List of media sets."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/media/tape/media/move": {
      "post": {
        "summary": "Change Tape location to vault (if given), or offline.",
        "description": "Change Tape location to vault (if given), or offline.",
        "operationId": "post_tape_tape_media_tape_media_move",
        "tags": [
          "Tape"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "label-text": {
                    "type": "string",
                    "description": "Media Label/Barcode.",
                    "minLength": 2,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "uuid": {
                    "type": "string",
                    "description": "Media Uuid.",
                    "pattern": "^[0-9a-f]{8}(?:-[0-9a-f]{4}){3}-[0-9a-f]{12}$"
                  },
                  "vault-name": {
                    "type": "string",
                    "description": "Vault name.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/restore": {
      "post": {
        "summary": "Restore data from media-set. Namespaces will be automatically created if necessary.",
        "description": "Restore data from media-set. Namespaces will be automatically created if necessary.",
        "operationId": "post_tape_tape_restore",
        "tags": [
          "Tape"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "drive": {
                    "type": "string",
                    "description": "Drive Identifier.",
                    "minLength": 3,
                    "maxLength": 32,
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "media-set": {
                    "type": "string",
                    "description": "Media set UUID."
                  },
                  "namespaces": {
                    "type": "array",
                    "description": "List of namespace to restore.",
                    "items": {
                      "type": "string",
                      "format": {
                        "additionalProperties": false,
                        "description": "A namespace mapping",
                        "properties": {
                          "max-depth": {
                            "default": 7,
                            "description": "How many levels of namespaces should be operated on (0 == no recursion)",
                            "maximum": 7,
                            "minimum": 0,
                            "optional": 1,
                            "type": "integer"
                          },
                          "source": {
                            "description": "Namespace.",
                            "maxLength": 256,
                            "optional": 1,
                            "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                            "type": "string"
                          },
                          "store": {
                            "description": "Datastore name.",
                            "maxLength": 32,
                            "minLength": 3,
                            "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                            "type": "string"
                          },
                          "target": {
                            "description": "Namespace.",
                            "maxLength": 256,
                            "optional": 1,
                            "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "notification-mode": {
                    "type": "string",
                    "description": "Configure how notifications for this datastore should be sent.\n`legacy-sendmail` sends email notifications to the user configured\nin `notify-user` via the system's `sendmail` executable.\n`notification-system` emits matchable notification events to the\nnotification system.",
                    "enum": [
                      "legacy-sendmail",
                      "notification-system"
                    ],
                    "default": "legacy-sendmail"
                  },
                  "notify-user": {
                    "type": "string",
                    "description": "User ID",
                    "minLength": 3,
                    "maxLength": 64,
                    "pattern": "^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "owner": {
                    "type": "string",
                    "description": "Authentication ID",
                    "minLength": 3,
                    "maxLength": 64,
                    "pattern": "^(?:(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)|(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)!(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))$"
                  },
                  "snapshots": {
                    "type": "array",
                    "description": "List of snapshots.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "store": {
                    "type": "string",
                    "format": {
                      "description": "Datastore mapping list.",
                      "items": {
                        "description": "Datastore mapping.",
                        "maxLength": 65,
                        "minLength": 3,
                        "pattern": "/^(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)=)?(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string",
                        "typetext": "(<source>=)?<target>"
                      },
                      "type": "array"
                    },
                    "description": "A list of Datastore mappings (or single datastore), comma separated. For example 'a=b,e' maps the source datastore 'a' to target 'b and all other sources to the default 'e'. If no default is given, only the specified sources are mapped."
                  }
                },
                "required": [
                  "drive",
                  "media-set",
                  "store"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Unique Process/Task Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Unique Process/Task Identifier"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/scan-changers": {
      "get": {
        "summary": "Scan for SCSI tape changers",
        "description": "Scan for SCSI tape changers",
        "operationId": "get_tape_tape_scan-changers",
        "tags": [
          "Tape"
        ],
        "responses": {
          "200": {
            "description": "The list of autodetected tape changers.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "kind": {
                        "type": "string",
                        "description": "Kind of device"
                      },
                      "major": {
                        "type": "integer",
                        "description": "Device major number"
                      },
                      "minor": {
                        "type": "integer",
                        "description": "Device minor number"
                      },
                      "model": {
                        "type": "string",
                        "description": "Model (autodetected)"
                      },
                      "path": {
                        "type": "string",
                        "description": "Path to the linux device node"
                      },
                      "serial": {
                        "type": "string",
                        "description": "Serial number (autodetected)"
                      },
                      "vendor": {
                        "type": "string",
                        "description": "Vendor (autodetected)"
                      }
                    },
                    "description": "Tape device information"
                  },
                  "description": "The list of autodetected tape changers."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//tape/tape/scan-drives": {
      "get": {
        "summary": "Scan tape drives",
        "description": "Scan tape drives",
        "operationId": "get_tape_tape_scan-drives",
        "tags": [
          "Tape"
        ],
        "responses": {
          "200": {
            "description": "The list of autodetected tape drives.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "kind": {
                        "type": "string",
                        "description": "Kind of device"
                      },
                      "major": {
                        "type": "integer",
                        "description": "Device major number"
                      },
                      "minor": {
                        "type": "integer",
                        "description": "Device minor number"
                      },
                      "model": {
                        "type": "string",
                        "description": "Model (autodetected)"
                      },
                      "path": {
                        "type": "string",
                        "description": "Path to the linux device node"
                      },
                      "serial": {
                        "type": "string",
                        "description": "Serial number (autodetected)"
                      },
                      "vendor": {
                        "type": "string",
                        "description": "Vendor (autodetected)"
                      }
                    },
                    "description": "Tape device information"
                  },
                  "description": "The list of autodetected tape drives."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "//version": {
      "get": {
        "summary": "Proxmox Backup Server API version.",
        "description": "Proxmox Backup Server API version.",
        "operationId": "get_version",
        "tags": [
          "Version"
        ],
        "responses": {
          "200": {
            "description": "Api version information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "release": {
                      "type": "string",
                      "description": "Version release"
                    },
                    "repoid": {
                      "type": "string",
                      "description": "Version repository id"
                    },
                    "version": {
                      "type": "string",
                      "description": "Version 'major.minor'"
                    }
                  },
                  "description": "Api version information"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "/backup/_upgrade_": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_backup__upgrade",
        "tags": [
          "Backup Operations"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "/backup/_upgrade_/backup/_upgrade_/blob": {
      "post": {
        "summary": "Upload binary blob file.",
        "description": "Upload binary blob file.",
        "operationId": "post_backup__upgrade__backup__upgrade__blob",
        "tags": [
          "Backup Operations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "encoded-size": {
                    "type": "integer",
                    "description": "Encoded blob size.",
                    "minimum": 12,
                    "maximum": 16777260
                  },
                  "file-name": {
                    "type": "string",
                    "description": "Backup archive name.",
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  }
                },
                "required": [
                  "encoded-size",
                  "file-name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "/backup/_upgrade_/backup/_upgrade_/dynamic_chunk": {
      "post": {
        "summary": "Upload a new chunk.",
        "description": "Upload a new chunk.",
        "operationId": "post_backup__upgrade__backup__upgrade__dynamic_chunk",
        "tags": [
          "Backup Operations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "digest": {
                    "type": "string",
                    "description": "Chunk digest (SHA256).",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "encoded-size": {
                    "type": "integer",
                    "description": "Encoded chunk size.",
                    "minimum": 13,
                    "maximum": 16777260
                  },
                  "size": {
                    "$ref": "#/components/schemas/ProxmoxVmId",
                    "description": "Chunk size.",
                    "minimum": 1,
                    "maximum": 16777216
                  },
                  "wid": {
                    "type": "integer",
                    "description": "Dynamic writer ID.",
                    "minimum": 1,
                    "maximum": 256
                  }
                },
                "required": [
                  "digest",
                  "encoded-size",
                  "size",
                  "wid"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "/backup/_upgrade_/backup/_upgrade_/dynamic_close": {
      "post": {
        "summary": "Close dynamic index writer.",
        "description": "Close dynamic index writer.",
        "operationId": "post_backup__upgrade__backup__upgrade__dynamic_close",
        "tags": [
          "Backup Operations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "chunk-count": {
                    "type": "integer",
                    "description": "Chunk count. This is used to verify that the server got all chunks.",
                    "minimum": 1
                  },
                  "csum": {
                    "type": "string",
                    "description": "Digest list checksum."
                  },
                  "size": {
                    "type": "integer",
                    "description": "File size. This is used to verify that the server got all data.",
                    "minimum": 1
                  },
                  "wid": {
                    "type": "integer",
                    "description": "Dynamic writer ID.",
                    "minimum": 1,
                    "maximum": 256
                  }
                },
                "required": [
                  "chunk-count",
                  "csum",
                  "size",
                  "wid"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "/backup/_upgrade_/backup/_upgrade_/dynamic_index": {
      "post": {
        "summary": "Create dynamic chunk index file.",
        "description": "Create dynamic chunk index file.",
        "operationId": "post_backup__upgrade__backup__upgrade__dynamic_index",
        "tags": [
          "Backup Operations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "archive-name": {
                    "type": "string",
                    "description": "Backup archive name.",
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  }
                },
                "required": [
                  "archive-name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Append chunk to dynamic index writer.",
        "description": "Append chunk to dynamic index writer.",
        "operationId": "put_backup__upgrade__backup__upgrade__dynamic_index",
        "tags": [
          "Backup Operations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "digest-list": {
                    "type": "array",
                    "description": "Chunk digest list.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "offset-list": {
                    "type": "array",
                    "description": "Chunk offset list.",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "wid": {
                    "type": "integer",
                    "description": "Dynamic writer ID.",
                    "minimum": 1,
                    "maximum": 256
                  }
                },
                "required": [
                  "digest-list",
                  "offset-list",
                  "wid"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "/backup/_upgrade_/backup/_upgrade_/finish": {
      "post": {
        "summary": "Mark backup as finished.",
        "description": "Mark backup as finished.",
        "operationId": "post_backup__upgrade__backup__upgrade__finish",
        "tags": [
          "Backup Operations"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "/backup/_upgrade_/backup/_upgrade_/fixed_chunk": {
      "post": {
        "summary": "Upload a new chunk.",
        "description": "Upload a new chunk.",
        "operationId": "post_backup__upgrade__backup__upgrade__fixed_chunk",
        "tags": [
          "Backup Operations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "digest": {
                    "type": "string",
                    "description": "Chunk digest (SHA256).",
                    "pattern": "^[a-f0-9]{64}$"
                  },
                  "encoded-size": {
                    "type": "integer",
                    "description": "Encoded chunk size.",
                    "minimum": 13,
                    "maximum": 16777260
                  },
                  "size": {
                    "$ref": "#/components/schemas/ProxmoxVmId",
                    "description": "Chunk size.",
                    "minimum": 1,
                    "maximum": 16777216
                  },
                  "wid": {
                    "type": "integer",
                    "description": "Fixed writer ID.",
                    "minimum": 1,
                    "maximum": 256
                  }
                },
                "required": [
                  "digest",
                  "encoded-size",
                  "size",
                  "wid"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "/backup/_upgrade_/backup/_upgrade_/fixed_close": {
      "post": {
        "summary": "Close fixed index writer.",
        "description": "Close fixed index writer.",
        "operationId": "post_backup__upgrade__backup__upgrade__fixed_close",
        "tags": [
          "Backup Operations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "chunk-count": {
                    "type": "integer",
                    "description": "Chunk count. This is used to verify that the server got all chunks. Ignored for incremental backups.",
                    "minimum": 0
                  },
                  "csum": {
                    "type": "string",
                    "description": "Digest list checksum."
                  },
                  "size": {
                    "type": "integer",
                    "description": "File size. This is used to verify that the server got all data. Ignored for incremental backups.",
                    "minimum": 0
                  },
                  "wid": {
                    "type": "integer",
                    "description": "Fixed writer ID.",
                    "minimum": 1,
                    "maximum": 256
                  }
                },
                "required": [
                  "chunk-count",
                  "csum",
                  "size",
                  "wid"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "/backup/_upgrade_/backup/_upgrade_/fixed_index": {
      "post": {
        "summary": "Create fixed chunk index file.",
        "description": "Create fixed chunk index file.",
        "operationId": "post_backup__upgrade__backup__upgrade__fixed_index",
        "tags": [
          "Backup Operations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "archive-name": {
                    "type": "string",
                    "description": "Backup archive name.",
                    "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
                  },
                  "reuse-csum": {
                    "type": "string",
                    "description": "If set, compare last backup's csum and reuse index for incremental backup if it matches."
                  },
                  "size": {
                    "type": "integer",
                    "description": "File size.",
                    "minimum": 1
                  }
                },
                "required": [
                  "archive-name",
                  "size"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      },
      "put": {
        "summary": "Append chunk to fixed index writer.",
        "description": "Append chunk to fixed index writer.",
        "operationId": "put_backup__upgrade__backup__upgrade__fixed_index",
        "tags": [
          "Backup Operations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "digest-list": {
                    "type": "array",
                    "description": "Chunk digest list.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "offset-list": {
                    "type": "array",
                    "description": "Chunk offset list.",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "wid": {
                    "type": "integer",
                    "description": "Fixed writer ID.",
                    "minimum": 1,
                    "maximum": 256
                  }
                },
                "required": [
                  "digest-list",
                  "offset-list",
                  "wid"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "/backup/_upgrade_/backup/_upgrade_/previous": {
      "get": {
        "summary": "Download archive from previous backup.",
        "description": "Download archive from previous backup.",
        "operationId": "get_backup__upgrade__backup__upgrade__previous",
        "tags": [
          "Backup Operations"
        ],
        "parameters": [
          {
            "name": "archive-name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup archive name.",
              "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
            },
            "description": "Backup archive name."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "/backup/_upgrade_/backup/_upgrade_/previous_backup_time": {
      "get": {
        "summary": "Get previous backup time.",
        "description": "Get previous backup time.",
        "operationId": "get_backup__upgrade__backup__upgrade__previous_backup_time",
        "tags": [
          "Backup Operations"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "/backup/_upgrade_/backup/_upgrade_/speedtest": {
      "post": {
        "summary": "Test upload speed.",
        "description": "Test upload speed.",
        "operationId": "post_backup__upgrade__backup__upgrade__speedtest",
        "tags": [
          "Backup Operations"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "/reader/_upgrade_": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "operationId": "get_reader__upgrade",
        "tags": [
          "Reader"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "/reader/_upgrade_/reader/_upgrade_/chunk": {
      "get": {
        "summary": "Download specified chunk.",
        "description": "Download specified chunk.",
        "operationId": "get_reader__upgrade__reader__upgrade__chunk",
        "tags": [
          "Reader"
        ],
        "parameters": [
          {
            "name": "digest",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Chunk digest (SHA256).",
              "pattern": "^[a-f0-9]{64}$"
            },
            "description": "Chunk digest (SHA256)."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "/reader/_upgrade_/reader/_upgrade_/download": {
      "get": {
        "summary": "Download specified file.",
        "description": "Download specified file.",
        "operationId": "get_reader__upgrade__reader__upgrade__download",
        "tags": [
          "Reader"
        ],
        "parameters": [
          {
            "name": "file-name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backup archive name.",
              "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$"
            },
            "description": "Backup archive name."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    },
    "/reader/_upgrade_/reader/_upgrade_/speedtest": {
      "get": {
        "summary": "Test 1M block download speed.",
        "description": "Test 1M block download speed.",
        "operationId": "get_reader__upgrade__reader__upgrade__speedtest",
        "tags": [
          "Reader"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters or malformed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for the requested operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request is well-formed but contains semantic errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxmoxError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ProxmoxApiToken": [],
            "ProxmoxCSRFToken": []
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ProxmoxApiToken": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "API token authentication. Format: PBSAPIToken=USER@REALM!TOKENID=UUID"
      },
      "ProxmoxCSRFToken": {
        "type": "apiKey",
        "in": "header",
        "name": "CSRFPreventionToken",
        "description": "CSRF prevention token required for state-changing operations"
      }
    },
    "schemas": {
      "ProxmoxError": {
        "type": "object",
        "description": "Standard Proxmox API error response",
        "properties": {
          "data": {
            "type": "object",
            "nullable": true,
            "description": "Additional error context data"
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Detailed error messages keyed by field or error type"
          },
          "message": {
            "type": "string",
            "description": "Human-readable error message"
          }
        }
      },
      "ProxmoxTask": {
        "type": "object",
        "description": "Proxmox async task response",
        "properties": {
          "data": {
            "type": "string",
            "description": "Task ID for tracking async operations",
            "pattern": "^UPID:[^:]+:[0-9A-F]+:[^:]*:[^:]+:[^:]*:[^:]*:$"
          }
        },
        "required": [
          "data"
        ]
      },
      "ProxmoxSuccess": {
        "type": "object",
        "description": "Standard success response",
        "properties": {
          "data": {
            "description": "Response data (varies by endpoint)"
          },
          "success": {
            "type": "boolean",
            "description": "Operation success indicator"
          }
        }
      },
      "ProxmoxNodeId": {
        "type": "string",
        "description": "Proxmox node identifier following DNS hostname standards",
        "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
        "minLength": 1,
        "maxLength": 63,
        "example": "pve-node-01"
      },
      "ProxmoxVmId": {
        "type": "integer",
        "description": "Virtual machine or container ID",
        "minimum": 1,
        "maximum": 999999999,
        "example": 100
      },
      "ProxmoxStorageId": {
        "type": "string",
        "description": "Storage identifier",
        "pattern": "^[A-Za-z][A-Za-z0-9\\-\\_]+$",
        "minLength": 1,
        "maxLength": 64,
        "example": "local-lvm"
      },
      "ProxmoxEmail": {
        "type": "string",
        "description": "Email address format",
        "pattern": "^[^@]+@[^@]+$",
        "format": "email",
        "example": "admin@example.com"
      },
      "ProxmoxUserId": {
        "type": "string",
        "description": "User ID in format user@realm",
        "pattern": "^[^@]+@[^@]+$",
        "example": "admin@pve"
      },
      "ProxmoxResourceName": {
        "type": "string",
        "description": "General resource name following Proxmox naming conventions",
        "pattern": "^[A-Za-z0-9_][A-Za-z0-9._\\-]*$",
        "minLength": 1,
        "maxLength": 64,
        "example": "my-resource"
      },
      "ProxmoxSha256": {
        "type": "string",
        "description": "SHA256 hash for backup integrity verification",
        "pattern": "^[a-f0-9]{64}$",
        "minLength": 64,
        "maxLength": 64,
        "example": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
      },
      "ProxmoxBackupId": {
        "type": "string",
        "description": "Backup ID following PBS naming conventions",
        "pattern": "^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$",
        "example": "vm-100-disk-0"
      },
      "ProxmoxDatastoreName": {
        "type": "string",
        "description": "Datastore name in PBS",
        "pattern": "^[A-Za-z0-9_][A-Za-z0-9._\\-]*$",
        "minLength": 1,
        "maxLength": 32,
        "example": "backup-storage"
      }
    }
  },
  "security": [
    {
      "ProxmoxApiToken": [],
      "ProxmoxCSRFToken": []
    }
  ]
}