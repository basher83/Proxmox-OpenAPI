[project]
name = "proxmox-openapi"
version = "1.0.0"
description = "OpenAPI specifications for Proxmox APIs (PVE and PBS)"
readme = "README.md"
requires-python = ">=3.9"
license = { text = "AGPL-3.0" }
authors = [
    { name = "Proxmox OpenAPI Contributors" },
]
keywords = ["proxmox", "openapi", "api", "pve", "pbs", "virtualization", "backup"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU Affero General Public License v3",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Code Generators",
    "Topic :: System :: Systems Administration",
]

dependencies = [
    "openapi-spec-validator>=0.7.2",
    "PyYAML>=6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
]
validation = [
    "openapi-spec-validator>=0.5.0",
    "jsonschema>=4.0.0",
]
enhanced = [
    "orjson>=3.10.18",
    "requests>=2.32.4",
    "rich>=13.0.0",
]
all = [
    "pytest>=7.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "openapi-spec-validator>=0.5.0",
    "jsonschema>=4.0.0",
    "orjson>=3.10.18",
    "requests>=2.32.4",
    "rich>=13.0.0",
]

[project.urls]
Homepage = "https://github.com/basher83/Proxmox-OpenAPI"
Repository = "https://github.com/basher83/Proxmox-OpenAPI"
Issues = "https://github.com/basher83/Proxmox-OpenAPI/issues"
Documentation = "https://github.com/basher83/Proxmox-OpenAPI#readme"

[project.scripts]
proxmox-openapi = "scripts.unified_parser:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["scripts"]

[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "openapi-spec-validator>=0.5.0",
    "jsonschema>=4.0.0",
    "types-pyyaml>=6.0.12.20241230",
]

[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "Q",  # flake8-quotes
    "COM", # flake8-commas
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "COM812", # missing trailing comma (handled by formatter)
    "COM819", # prohibited trailing comma (handled by formatter)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
] 
