var apiSchema = [
  {
    "children": [
      {
        "children": [
          {
            "info": {
              "GET": {
                "description": "Read Access Control List (ACLs).",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "Read Access Control List (ACLs).",
                  "properties": {
                    "exact": {
                      "default": false,
                      "description": "If set, returns only ACL for the exact path.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "path": {
                      "description": "Access control path.",
                      "maxLength": 128,
                      "minLength": 1,
                      "optional": 1,
                      "pattern": "/^(?:/|(?:/(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))+)$/",
                      "type": "string"
                    }
                  }
                },
                "permissions": {
                  "description": "Returns all ACLs if user has Sys.Audit on '/access/acl', or just the ACLs containing the user's API tokens.",
                  "user": "all"
                },
                "returns": {
                  "description": "ACL entry list.",
                  "items": {
                    "additionalProperties": false,
                    "description": "ACL list entry.",
                    "properties": {
                      "path": {
                        "description": "Access control path.",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "/^(?:/|(?:/(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))+)$/",
                        "type": "string"
                      },
                      "propagate": {
                        "default": true,
                        "description": "Allow to propagate (inherit) permissions.",
                        "type": "boolean"
                      },
                      "roleid": {
                        "description": "Enum representing roles via their [PRIVILEGES] combination.\n\nSince privileges are implemented as bitflags, each unique combination of privileges maps to a\nsingle, unique `u64` value that is used in this enum definition.",
                        "enum": [
                          "Admin",
                          "Audit",
                          "NoAccess",
                          "DatastoreAdmin",
                          "DatastoreReader",
                          "DatastoreBackup",
                          "DatastorePowerUser",
                          "DatastoreAudit",
                          "RemoteAudit",
                          "RemoteAdmin",
                          "RemoteSyncOperator",
                          "RemoteSyncPushOperator",
                          "RemoteDatastorePowerUser",
                          "RemoteDatastoreAdmin",
                          "TapeAudit",
                          "TapeAdmin",
                          "TapeOperator",
                          "TapeReader"
                        ],
                        "type": "string",
                        "typetext": "<role>"
                      },
                      "ugid": {
                        "description": "User or Group ID.",
                        "type": "string"
                      },
                      "ugid_type": {
                        "description": "Type of 'ugid' property.",
                        "enum": [
                          "user",
                          "group"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "PUT": {
                "description": "Update Access Control List (ACLs).",
                "method": "PUT",
                "parameters": {
                  "additionalProperties": false,
                  "description": "Update Access Control List (ACLs).",
                  "properties": {
                    "auth-id": {
                      "description": "Authentication ID",
                      "maxLength": 64,
                      "minLength": 3,
                      "optional": 1,
                      "pattern": "/^(?:(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)|(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)!(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))$/",
                      "type": "string"
                    },
                    "delete": {
                      "description": "Remove permissions (instead of adding it).",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "digest": {
                      "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                      "optional": 1,
                      "pattern": "/^[a-f0-9]{64}$/",
                      "type": "string"
                    },
                    "group": {
                      "description": "Group ID",
                      "maxLength": 64,
                      "minLength": 3,
                      "optional": 1,
                      "pattern": "/^(?:[^\\s:/[:cntrl:]]+)$/",
                      "type": "string"
                    },
                    "path": {
                      "description": "Access control path.",
                      "maxLength": 128,
                      "minLength": 1,
                      "pattern": "/^(?:/|(?:/(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))+)$/",
                      "type": "string"
                    },
                    "propagate": {
                      "default": true,
                      "description": "Allow to propagate (inherit) permissions.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "role": {
                      "description": "Enum representing roles via their [PRIVILEGES] combination.\n\nSince privileges are implemented as bitflags, each unique combination of privileges maps to a\nsingle, unique `u64` value that is used in this enum definition.",
                      "enum": [
                        "Admin",
                        "Audit",
                        "NoAccess",
                        "DatastoreAdmin",
                        "DatastoreReader",
                        "DatastoreBackup",
                        "DatastorePowerUser",
                        "DatastoreAudit",
                        "RemoteAudit",
                        "RemoteAdmin",
                        "RemoteSyncOperator",
                        "RemoteSyncPushOperator",
                        "RemoteDatastorePowerUser",
                        "RemoteDatastoreAdmin",
                        "TapeAudit",
                        "TapeAdmin",
                        "TapeOperator",
                        "TapeReader"
                      ],
                      "type": "string",
                      "typetext": "<role>"
                    }
                  }
                },
                "permissions": {
                  "description": "Requires Permissions.Modify on '/access/acl', limited to updating ACLs of the user's API tokens otherwise.",
                  "user": "all"
                },
                "returns": {
                  "type": "null"
                }
              }
            },
            "leaf": 1,
            "path": "/access/acl",
            "text": "acl"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "info": {
                      "POST": {
                        "description": "Synchronize users of a given realm",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Synchronize users of a given realm",
                          "properties": {
                            "dry-run": {
                              "default": false,
                              "description": "If set, do not create/delete anything",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "enable-new": {
                              "description": "Enable newly synced users immediately",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "realm": {
                              "description": "Authentication domain ID",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "remove-vanished": {
                              "description": "A semicolon-separated list of things to remove when they or the user vanishes during user synchronization. The following values are possible: ``entry`` removes the user when not returned from the sync; ``properties`` removes any  properties on existing user that do not appear in the source. ``acl`` removes ACLs when the user is not returned from the sync.",
                              "format": {
                                "description": "Array of remove-vanished options",
                                "items": {
                                  "description": "remove-vanished options",
                                  "enum": [
                                    "acl",
                                    "entry",
                                    "properties"
                                  ],
                                  "type": "string"
                                },
                                "maxLength": 1,
                                "minLength": 1,
                                "type": "array"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[acl|entry|properties, ...]"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "access",
                              "users"
                            ],
                            "privs": [
                              "Permissions.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "description": "Unique Process/Task Identifier",
                          "minLength": 36,
                          "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                          "type": "string"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/access/domains/{realm}/sync",
                    "text": "sync"
                  }
                ],
                "info": {},
                "leaf": 0,
                "path": "/access/domains/{realm}",
                "text": "{realm}"
              }
            ],
            "info": {
              "GET": {
                "description": "Authentication domain/realm index.",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "Authentication domain/realm index.",
                  "properties": {}
                },
                "permissions": {
                  "description": "Anyone can access this, because we need that list for the login box (before the user is authenticated).",
                  "user": "world"
                },
                "returns": {
                  "description": "List of realms with basic info.",
                  "items": {
                    "additionalProperties": false,
                    "description": "Basic Information about a realm",
                    "properties": {
                      "comment": {
                        "description": "Comment.",
                        "maxLength": 128,
                        "optional": 1,
                        "pattern": "/^[[:^cntrl:]]*$/",
                        "type": "string"
                      },
                      "default": {
                        "default": false,
                        "description": "True if it is the default realm",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "realm": {
                        "description": "Realm name.",
                        "maxLength": 32,
                        "minLength": 2,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "type": {
                        "description": "type of the realm",
                        "enum": [
                          "pam",
                          "pbs",
                          "openid",
                          "ldap",
                          "ad"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "leaf": 0,
            "path": "/access/domains",
            "text": "domains"
          },
          {
            "children": [
              {
                "info": {
                  "POST": {
                    "description": "Create OpenID Redirect Session",
                    "method": "POST",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Create OpenID Redirect Session",
                      "properties": {
                        "realm": {
                          "description": "Realm name.",
                          "maxLength": 32,
                          "minLength": 2,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "redirect-url": {
                          "description": "Redirection Url. The client should set this to used server url.",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "description": "Anyone can access this (before the user is authenticated).",
                      "user": "world"
                    },
                    "returns": {
                      "description": "Redirection URL.",
                      "type": "string"
                    }
                  }
                },
                "leaf": 1,
                "path": "/access/openid/auth-url",
                "text": "auth-url"
              },
              {
                "info": {
                  "POST": {
                    "description": "Verify OpenID authorization code and create a ticket",
                    "method": "POST",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Verify OpenID authorization code and create a ticket",
                      "properties": {
                        "code": {
                          "description": "OpenId authorization code.",
                          "type": "string"
                        },
                        "redirect-url": {
                          "description": "Redirection Url. The client should set this to used server url.",
                          "type": "string"
                        },
                        "state": {
                          "description": "OpenId state.",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "user": "world"
                    },
                    "returns": {
                      "additionalProperties": false,
                      "description": "An authentication ticket with additional infos.",
                      "properties": {
                        "CSRFPreventionToken": {
                          "description": "Cross Site Request Forgery Prevention Token.",
                          "type": "string"
                        },
                        "ticket": {
                          "description": "Auth ticket.",
                          "type": "string"
                        },
                        "username": {
                          "description": "User name.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  }
                },
                "leaf": 1,
                "path": "/access/openid/login",
                "text": "login"
              }
            ],
            "info": {
              "GET": {
                "description": "Directory index.",
                "method": "GET",
                "parameters": {
                  "additionalProperties": true,
                  "description": "Directory index.",
                  "properties": {}
                },
                "permissions": {
                  "user": "all"
                },
                "returns": {
                  "type": "null"
                }
              }
            },
            "leaf": 0,
            "path": "/access/openid",
            "text": "openid"
          },
          {
            "info": {
              "PUT": {
                "description": "Change user password\n\nEach user is allowed to change his own password. Superuser\ncan change all passwords.",
                "method": "PUT",
                "parameters": {
                  "additionalProperties": false,
                  "description": "Change user password\n\nEach user is allowed to change his own password. Superuser\ncan change all passwords.",
                  "properties": {
                    "confirmation-password": {
                      "description": "The current password for confirmation, unless logged in as root@pam",
                      "maxLength": 1024,
                      "minLength": 1,
                      "optional": 1,
                      "pattern": "/^[[:^cntrl:]]*$/",
                      "type": "string"
                    },
                    "password": {
                      "description": "User Password.",
                      "maxLength": 64,
                      "minLength": 8,
                      "pattern": "/^[[:^cntrl:]]*$/",
                      "type": "string"
                    },
                    "userid": {
                      "description": "User ID",
                      "maxLength": 64,
                      "minLength": 3,
                      "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    }
                  }
                },
                "permissions": {
                  "description": "Everybody is allowed to change their own password. In addition, users with 'Permissions:Modify' privilege may change any password on @pbs realm.",
                  "user": "all"
                },
                "returns": {
                  "type": "null"
                }
              }
            },
            "leaf": 1,
            "path": "/access/password",
            "text": "password"
          },
          {
            "info": {
              "GET": {
                "description": "List permissions of given or currently authenticated user / API token.\n\nOptionally limited to specific path.",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "List permissions of given or currently authenticated user / API token.\n\nOptionally limited to specific path.",
                  "properties": {
                    "auth-id": {
                      "description": "Authentication ID",
                      "maxLength": 64,
                      "minLength": 3,
                      "optional": 1,
                      "pattern": "/^(?:(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)|(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)!(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))$/",
                      "type": "string"
                    },
                    "path": {
                      "description": "Access control path.",
                      "maxLength": 128,
                      "minLength": 1,
                      "optional": 1,
                      "pattern": "/^(?:/|(?:/(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))+)$/",
                      "type": "string"
                    }
                  }
                },
                "permissions": {
                  "description": "Requires Sys.Audit on '/access', limited to own privileges otherwise.",
                  "user": "all"
                },
                "returns": {
                  "additionalProperties": true,
                  "description": "Map of ACL path to Map of privilege to propagate bit",
                  "properties": {},
                  "type": "object"
                }
              }
            },
            "leaf": 1,
            "path": "/access/permissions",
            "text": "permissions"
          },
          {
            "info": {
              "GET": {
                "description": "Role list",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "Role list",
                  "properties": {}
                },
                "permissions": {
                  "user": "all"
                },
                "returns": {
                  "description": "List of roles.",
                  "items": {
                    "additionalProperties": false,
                    "description": "Role with description and privileges.",
                    "properties": {
                      "comment": {
                        "description": "Comment.",
                        "maxLength": 128,
                        "optional": 1,
                        "pattern": "/^[[:^cntrl:]]*$/",
                        "type": "string"
                      },
                      "privs": {
                        "description": "List of Privileges",
                        "items": {
                          "description": "A Privilege",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "roleid": {
                        "description": "Enum representing roles via their [PRIVILEGES] combination.\n\nSince privileges are implemented as bitflags, each unique combination of privileges maps to a\nsingle, unique `u64` value that is used in this enum definition.",
                        "enum": [
                          "Admin",
                          "Audit",
                          "NoAccess",
                          "DatastoreAdmin",
                          "DatastoreReader",
                          "DatastoreBackup",
                          "DatastorePowerUser",
                          "DatastoreAudit",
                          "RemoteAudit",
                          "RemoteAdmin",
                          "RemoteSyncOperator",
                          "RemoteSyncPushOperator",
                          "RemoteDatastorePowerUser",
                          "RemoteDatastoreAdmin",
                          "TapeAudit",
                          "TapeAdmin",
                          "TapeOperator",
                          "TapeReader"
                        ],
                        "type": "string",
                        "typetext": "<role>"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "leaf": 1,
            "path": "/access/roles",
            "text": "roles"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "info": {
                      "DELETE": {
                        "description": "Delete a single TFA entry.",
                        "method": "DELETE",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Delete a single TFA entry.",
                          "properties": {
                            "id": {
                              "description": "the tfa entry id",
                              "type": "string"
                            },
                            "password": {
                              "description": "Password.",
                              "maxLength": 1024,
                              "minLength": 1,
                              "optional": 1,
                              "pattern": "/^[[:^cntrl:]]*$/",
                              "type": "string"
                            },
                            "userid": {
                              "description": "User ID",
                              "maxLength": 64,
                              "minLength": 3,
                              "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "or": [
                            {
                              "check": {
                                "partial": false,
                                "path": [
                                  "access",
                                  "users"
                                ],
                                "privs": [
                                  "Permissions.Modify"
                                ]
                              }
                            },
                            {
                              "userParam": "userid"
                            }
                          ]
                        },
                        "returns": {
                          "type": "null"
                        }
                      },
                      "GET": {
                        "description": "Get a single TFA entry.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Get a single TFA entry.",
                          "properties": {
                            "id": {
                              "description": "the tfa entry id",
                              "type": "string"
                            },
                            "userid": {
                              "description": "User ID",
                              "maxLength": 64,
                              "minLength": 3,
                              "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "or": [
                            {
                              "check": {
                                "partial": false,
                                "path": [
                                  "access",
                                  "users"
                                ],
                                "privs": [
                                  "Permissions.Modify"
                                ]
                              }
                            },
                            {
                              "userParam": "userid"
                            }
                          ]
                        },
                        "returns": {
                          "type": "null"
                        }
                      },
                      "PUT": {
                        "description": "Update user's TFA entry description.",
                        "method": "PUT",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Update user's TFA entry description.",
                          "properties": {
                            "description": {
                              "description": "A description to distinguish multiple entries from one another",
                              "maxLength": 255,
                              "optional": 1,
                              "type": "string"
                            },
                            "enable": {
                              "description": "Whether this entry should currently be enabled or disabled",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "id": {
                              "description": "the tfa entry id",
                              "type": "string"
                            },
                            "password": {
                              "description": "Password.",
                              "maxLength": 1024,
                              "minLength": 1,
                              "optional": 1,
                              "pattern": "/^[[:^cntrl:]]*$/",
                              "type": "string"
                            },
                            "userid": {
                              "description": "User ID",
                              "maxLength": 64,
                              "minLength": 3,
                              "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "or": [
                            {
                              "check": {
                                "partial": false,
                                "path": [
                                  "access",
                                  "users"
                                ],
                                "privs": [
                                  "Permissions.Modify"
                                ]
                              }
                            },
                            {
                              "userParam": "userid"
                            }
                          ]
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/access/tfa/{userid}/{id}",
                    "text": "{id}"
                  }
                ],
                "info": {
                  "GET": {
                    "description": "Add a TOTP secret to the user.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Add a TOTP secret to the user.",
                      "properties": {
                        "userid": {
                          "description": "User ID",
                          "maxLength": 64,
                          "minLength": 3,
                          "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "or": [
                        {
                          "check": {
                            "partial": false,
                            "path": [
                              "access",
                              "users"
                            ],
                            "privs": [
                              "Permissions.Modify"
                            ]
                          }
                        },
                        {
                          "userParam": "userid"
                        }
                      ]
                    },
                    "returns": {
                      "description": "The list of TFA entries.",
                      "items": {
                        "additionalProperties": false,
                        "description": "A TFA entry for a user.",
                        "properties": {
                          "created": {
                            "description": "Creation time of this entry as unix epoch.",
                            "type": "integer"
                          },
                          "description": {
                            "description": "User chosen description for this entry.",
                            "type": "string"
                          },
                          "enable": {
                            "description": "Whether this TFA entry is currently enabled.",
                            "type": "boolean"
                          },
                          "id": {
                            "description": "The id used to reference this entry.",
                            "type": "string"
                          },
                          "type": {
                            "description": "A TFA entry type.",
                            "enum": [
                              "totp",
                              "u2f",
                              "webauthn",
                              "recovery",
                              "yubico"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "POST": {
                    "description": "Add a TFA entry to the user.",
                    "method": "POST",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Add a TFA entry to the user.",
                      "properties": {
                        "challenge": {
                          "description": "When responding to a u2f challenge: the original challenge string",
                          "optional": 1,
                          "type": "string"
                        },
                        "description": {
                          "description": "A description to distinguish multiple entries from one another",
                          "maxLength": 255,
                          "optional": 1,
                          "type": "string"
                        },
                        "password": {
                          "description": "Password.",
                          "maxLength": 1024,
                          "minLength": 1,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "totp": {
                          "description": "A totp URI.",
                          "optional": 1,
                          "type": "string"
                        },
                        "type": {
                          "description": "A TFA entry type.",
                          "enum": [
                            "totp",
                            "u2f",
                            "webauthn",
                            "recovery",
                            "yubico"
                          ],
                          "type": "string"
                        },
                        "userid": {
                          "description": "User ID",
                          "maxLength": 64,
                          "minLength": 3,
                          "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "value": {
                          "description": "The current value for the provided totp URI, or a Webauthn/U2F challenge response",
                          "optional": 1,
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "or": [
                        {
                          "check": {
                            "partial": false,
                            "path": [
                              "access",
                              "users"
                            ],
                            "privs": [
                              "Permissions.Modify"
                            ]
                          }
                        },
                        {
                          "userParam": "userid"
                        }
                      ]
                    },
                    "returns": {
                      "additionalProperties": false,
                      "description": "The result returned when adding TFA entries to a user.",
                      "properties": {
                        "challenge": {
                          "description": "When adding u2f entries, this contains a challenge the user must respond to in order to\nfinish the registration.",
                          "optional": 1,
                          "type": "string"
                        },
                        "id": {
                          "description": "The id if a newly added TFA entry.",
                          "optional": 1,
                          "type": "string"
                        },
                        "recovery": {
                          "description": "A list of recovery codes as integers.",
                          "items": {
                            "description": "A one-time usable recovery code entry.",
                            "type": "integer"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  }
                },
                "leaf": 0,
                "path": "/access/tfa/{userid}",
                "text": "{userid}"
              }
            ],
            "info": {
              "GET": {
                "description": "List user TFA configuration.",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "List user TFA configuration.",
                  "properties": {}
                },
                "permissions": {
                  "description": "Returns all or just the logged-in user, depending on privileges.",
                  "user": "all"
                },
                "returns": {
                  "description": "The list tuples of user and TFA entries.",
                  "items": {
                    "additionalProperties": false,
                    "description": "Over the API we only provide the descriptions for TFA data.",
                    "properties": {
                      "entries": {
                        "description": "TFA entries.",
                        "items": {
                          "additionalProperties": false,
                          "description": "A TFA entry for a user.",
                          "properties": {
                            "created": {
                              "description": "Creation time of this entry as unix epoch.",
                              "type": "integer"
                            },
                            "description": {
                              "description": "User chosen description for this entry.",
                              "type": "string"
                            },
                            "enable": {
                              "description": "Whether this TFA entry is currently enabled.",
                              "type": "boolean"
                            },
                            "id": {
                              "description": "The id used to reference this entry.",
                              "type": "string"
                            },
                            "type": {
                              "description": "A TFA entry type.",
                              "enum": [
                                "totp",
                                "u2f",
                                "webauthn",
                                "recovery",
                                "yubico"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "tfa-locked-until": {
                        "description": "If a user's second factor is blocked, this contains the block's expiration time.",
                        "optional": 1,
                        "type": "integer"
                      },
                      "totp-locked": {
                        "description": "The user is locked out of TOTP authentication.",
                        "type": "boolean"
                      },
                      "userid": {
                        "description": "The user this entry belongs to.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "leaf": 0,
            "path": "/access/tfa",
            "text": "tfa"
          },
          {
            "info": {
              "DELETE": {
                "description": "",
                "method": "DELETE",
                "parameters": {
                  "additionalProperties": false,
                  "description": "",
                  "properties": {}
                },
                "permissions": {
                  "user": "world"
                },
                "returns": {
                  "type": "null"
                }
              },
              "POST": {
                "description": "Either create a new HttpOnly ticket or a regular ticket.",
                "method": "POST",
                "parameters": {
                  "additionalProperties": false,
                  "description": "Either create a new HttpOnly ticket or a regular ticket.",
                  "properties": {
                    "http-only": {
                      "default": false,
                      "description": "Whether the HttpOnly authentication flow should be used.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "password": {
                      "description": "The secret password. This can also be a valid ticket. Only optional if the ticket is\nprovided in a cookie header and only if the endpoint supports this.",
                      "optional": 1,
                      "type": "string"
                    },
                    "path": {
                      "description": "Verify ticket, and check if user have access 'privs' on 'path'.",
                      "optional": 1,
                      "type": "string"
                    },
                    "port": {
                      "description": "Port for verifying terminal tickets.",
                      "maximum": 65535,
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer"
                    },
                    "privs": {
                      "description": "Verify ticket, and check if user have access 'privs' on 'path'.",
                      "optional": 1,
                      "type": "string"
                    },
                    "tfa-challenge": {
                      "description": "The signed TFA challenge string the user wants to respond to.",
                      "optional": 1,
                      "type": "string"
                    },
                    "username": {
                      "description": "User ID",
                      "maxLength": 64,
                      "minLength": 3,
                      "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    }
                  }
                },
                "permissions": {
                  "user": "world"
                },
                "returns": {
                  "additionalProperties": false,
                  "description": "The API response for a ticket call.",
                  "properties": {
                    "CSRFPreventionToken": {
                      "description": "The CSRF prevention token.",
                      "optional": 1,
                      "type": "string"
                    },
                    "ticket": {
                      "description": "The ticket as is supposed to be used in the authentication header. Not provided here if the\nendpoint uses HttpOnly cookies to supply the actual ticket.",
                      "optional": 1,
                      "type": "string"
                    },
                    "ticket-info": {
                      "description": "Like a full ticket, except the signature is missing. Useful in HttpOnly-contexts\n(browsers).",
                      "optional": 1,
                      "type": "string"
                    },
                    "username": {
                      "description": "User ID",
                      "maxLength": 64,
                      "minLength": 3,
                      "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "leaf": 1,
            "path": "/access/ticket",
            "text": "ticket"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "children": [
                      {
                        "info": {
                          "DELETE": {
                            "description": "Delete a user's API token",
                            "method": "DELETE",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Delete a user's API token",
                              "properties": {
                                "digest": {
                                  "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                                  "optional": 1,
                                  "pattern": "/^[a-f0-9]{64}$/",
                                  "type": "string"
                                },
                                "token-name": {
                                  "description": "The token ID part of an API token authentication id.\n\nThis alone does NOT uniquely identify the API token - use a full `Authid` for such use cases.",
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                },
                                "userid": {
                                  "description": "User ID",
                                  "maxLength": 64,
                                  "minLength": 3,
                                  "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "or": [
                                {
                                  "check": {
                                    "partial": false,
                                    "path": [
                                      "access",
                                      "users"
                                    ],
                                    "privs": [
                                      "Permissions.Modify"
                                    ]
                                  }
                                },
                                {
                                  "userParam": "userid"
                                }
                              ]
                            },
                            "returns": {
                              "type": "null"
                            }
                          },
                          "GET": {
                            "description": "Read user's API token metadata",
                            "method": "GET",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Read user's API token metadata",
                              "properties": {
                                "token-name": {
                                  "description": "The token ID part of an API token authentication id.\n\nThis alone does NOT uniquely identify the API token - use a full `Authid` for such use cases.",
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                },
                                "userid": {
                                  "description": "User ID",
                                  "maxLength": 64,
                                  "minLength": 3,
                                  "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "or": [
                                {
                                  "check": {
                                    "partial": false,
                                    "path": [
                                      "access",
                                      "users"
                                    ],
                                    "privs": [
                                      "Sys.Audit"
                                    ]
                                  }
                                },
                                {
                                  "userParam": "userid"
                                }
                              ]
                            },
                            "returns": {
                              "additionalProperties": false,
                              "description": "ApiToken properties.",
                              "properties": {
                                "comment": {
                                  "description": "Comment.",
                                  "maxLength": 128,
                                  "optional": 1,
                                  "pattern": "/^[[:^cntrl:]]*$/",
                                  "type": "string"
                                },
                                "enable": {
                                  "default": true,
                                  "description": "Enable the account (default). You can set this to '0' to disable the account.",
                                  "optional": 1,
                                  "type": "boolean"
                                },
                                "expire": {
                                  "default": 0,
                                  "description": "Account expiration date (seconds since epoch). '0' means no expiration date.",
                                  "minimum": 0,
                                  "optional": 1,
                                  "type": "integer"
                                },
                                "tokenid": {
                                  "description": "API Token ID",
                                  "maxLength": 64,
                                  "minLength": 3,
                                  "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)!(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "POST": {
                            "description": "Generate a new API token with given metadata",
                            "method": "POST",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Generate a new API token with given metadata",
                              "properties": {
                                "comment": {
                                  "description": "Comment.",
                                  "maxLength": 128,
                                  "optional": 1,
                                  "pattern": "/^[[:^cntrl:]]*$/",
                                  "type": "string"
                                },
                                "digest": {
                                  "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                                  "optional": 1,
                                  "pattern": "/^[a-f0-9]{64}$/",
                                  "type": "string"
                                },
                                "enable": {
                                  "default": true,
                                  "description": "Enable the account (default). You can set this to '0' to disable the account.",
                                  "optional": 1,
                                  "type": "boolean"
                                },
                                "expire": {
                                  "default": 0,
                                  "description": "Account expiration date (seconds since epoch). '0' means no expiration date.",
                                  "minimum": 0,
                                  "optional": 1,
                                  "type": "integer"
                                },
                                "token-name": {
                                  "description": "The token ID part of an API token authentication id.\n\nThis alone does NOT uniquely identify the API token - use a full `Authid` for such use cases.",
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                },
                                "userid": {
                                  "description": "User ID",
                                  "maxLength": 64,
                                  "minLength": 3,
                                  "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "or": [
                                {
                                  "check": {
                                    "partial": false,
                                    "path": [
                                      "access",
                                      "users"
                                    ],
                                    "privs": [
                                      "Permissions.Modify"
                                    ]
                                  }
                                },
                                {
                                  "userParam": "userid"
                                }
                              ]
                            },
                            "returns": {
                              "additionalProperties": false,
                              "description": "API token identifier + generated secret.",
                              "properties": {
                                "tokenid": {
                                  "description": "The API token identifier",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "The API token secret",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "PUT": {
                            "description": "Update user's API token metadata",
                            "method": "PUT",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Update user's API token metadata",
                              "properties": {
                                "comment": {
                                  "description": "Comment.",
                                  "maxLength": 128,
                                  "optional": 1,
                                  "pattern": "/^[[:^cntrl:]]*$/",
                                  "type": "string"
                                },
                                "delete": {
                                  "description": "List of properties to delete.",
                                  "items": {
                                    "description": "The set of properties that can be deleted from a token.",
                                    "enum": [
                                      "comment"
                                    ],
                                    "type": "string"
                                  },
                                  "optional": 1,
                                  "type": "array"
                                },
                                "digest": {
                                  "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                                  "optional": 1,
                                  "pattern": "/^[a-f0-9]{64}$/",
                                  "type": "string"
                                },
                                "enable": {
                                  "default": true,
                                  "description": "Enable the account (default). You can set this to '0' to disable the account.",
                                  "optional": 1,
                                  "type": "boolean"
                                },
                                "expire": {
                                  "default": 0,
                                  "description": "Account expiration date (seconds since epoch). '0' means no expiration date.",
                                  "minimum": 0,
                                  "optional": 1,
                                  "type": "integer"
                                },
                                "regenerate": {
                                  "default": false,
                                  "description": "Regenerate token secret while keeping permissions.",
                                  "optional": 1,
                                  "type": "boolean"
                                },
                                "token-name": {
                                  "description": "The token ID part of an API token authentication id.\n\nThis alone does NOT uniquely identify the API token - use a full `Authid` for such use cases.",
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                },
                                "userid": {
                                  "description": "User ID",
                                  "maxLength": 64,
                                  "minLength": 3,
                                  "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "or": [
                                {
                                  "check": {
                                    "partial": false,
                                    "path": [
                                      "access",
                                      "users"
                                    ],
                                    "privs": [
                                      "Permissions.Modify"
                                    ]
                                  }
                                },
                                {
                                  "userParam": "userid"
                                }
                              ]
                            },
                            "returns": {
                              "additionalProperties": false,
                              "description": "Regenerated secret, if regenerate is set.",
                              "properties": {
                                "secret": {
                                  "description": "The new API token secret",
                                  "optional": 1,
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          }
                        },
                        "leaf": 1,
                        "path": "/access/users/{userid}/token/{token-name}",
                        "text": "{token-name}"
                      }
                    ],
                    "info": {
                      "GET": {
                        "description": "List user's API tokens",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "List user's API tokens",
                          "properties": {
                            "userid": {
                              "description": "User ID",
                              "maxLength": 64,
                              "minLength": 3,
                              "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "or": [
                            {
                              "check": {
                                "partial": false,
                                "path": [
                                  "access",
                                  "users"
                                ],
                                "privs": [
                                  "Sys.Audit"
                                ]
                              }
                            },
                            {
                              "userParam": "userid"
                            }
                          ]
                        },
                        "returns": {
                          "description": "List user's API tokens (with config digest).",
                          "items": {
                            "additionalProperties": false,
                            "description": "A Token Entry that contains the token-name",
                            "properties": {
                              "comment": {
                                "description": "Comment.",
                                "maxLength": 128,
                                "optional": 1,
                                "pattern": "/^[[:^cntrl:]]*$/",
                                "type": "string"
                              },
                              "enable": {
                                "default": true,
                                "description": "Enable the account (default). You can set this to '0' to disable the account.",
                                "optional": 1,
                                "type": "boolean"
                              },
                              "expire": {
                                "default": 0,
                                "description": "Account expiration date (seconds since epoch). '0' means no expiration date.",
                                "minimum": 0,
                                "optional": 1,
                                "type": "integer"
                              },
                              "token-name": {
                                "description": "The token ID part of an API token authentication id.\n\nThis alone does NOT uniquely identify the API token - use a full `Authid` for such use cases.",
                                "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                "type": "string"
                              },
                              "tokenid": {
                                "description": "API Token ID",
                                "maxLength": 64,
                                "minLength": 3,
                                "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)!(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      }
                    },
                    "leaf": 0,
                    "path": "/access/users/{userid}/token",
                    "text": "token"
                  },
                  {
                    "info": {
                      "PUT": {
                        "description": "Unlock a user's TFA authentication.",
                        "method": "PUT",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Unlock a user's TFA authentication.",
                          "properties": {
                            "userid": {
                              "description": "User ID",
                              "maxLength": 64,
                              "minLength": 3,
                              "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "access",
                              "users"
                            ],
                            "privs": [
                              "Permissions.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "description": "Whether the user was previously locked out of any 2nd factor.",
                          "type": "boolean"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/access/users/{userid}/unlock-tfa",
                    "text": "unlock-tfa"
                  }
                ],
                "info": {
                  "DELETE": {
                    "description": "Remove a user from the configuration file.",
                    "method": "DELETE",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Remove a user from the configuration file.",
                      "properties": {
                        "digest": {
                          "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                          "optional": 1,
                          "pattern": "/^[a-f0-9]{64}$/",
                          "type": "string"
                        },
                        "userid": {
                          "description": "User ID",
                          "maxLength": 64,
                          "minLength": 3,
                          "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "or": [
                        {
                          "check": {
                            "partial": false,
                            "path": [
                              "access",
                              "users"
                            ],
                            "privs": [
                              "Permissions.Modify"
                            ]
                          }
                        },
                        {
                          "userParam": "userid"
                        }
                      ]
                    },
                    "returns": {
                      "type": "null"
                    }
                  },
                  "GET": {
                    "description": "Read user configuration data.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Read user configuration data.",
                      "properties": {
                        "userid": {
                          "description": "User ID",
                          "maxLength": 64,
                          "minLength": 3,
                          "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "or": [
                        {
                          "check": {
                            "partial": false,
                            "path": [
                              "access",
                              "users"
                            ],
                            "privs": [
                              "Sys.Audit"
                            ]
                          }
                        },
                        {
                          "userParam": "userid"
                        }
                      ]
                    },
                    "returns": {
                      "additionalProperties": false,
                      "description": "User properties.",
                      "properties": {
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "email": {
                          "description": "E-Mail Address.",
                          "maxLength": 64,
                          "minLength": 2,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "enable": {
                          "default": true,
                          "description": "Enable the account (default). You can set this to '0' to disable the account.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "expire": {
                          "default": 0,
                          "description": "Account expiration date (seconds since epoch). '0' means no expiration date.",
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "firstname": {
                          "description": "First name.",
                          "maxLength": 64,
                          "minLength": 2,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "lastname": {
                          "description": "Last name.",
                          "maxLength": 64,
                          "minLength": 2,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "userid": {
                          "description": "User ID",
                          "maxLength": 64,
                          "minLength": 3,
                          "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "PUT": {
                    "description": "Update user configuration. To change a user's password use the 'PUT /access/password' endpoint.",
                    "method": "PUT",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Update user configuration. To change a user's password use the 'PUT /access/password' endpoint.",
                      "properties": {
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "delete": {
                          "description": "List of properties to delete.",
                          "items": {
                            "description": "The set of properties that can be deleted from a user configuration.",
                            "enum": [
                              "comment",
                              "firstname",
                              "lastname",
                              "email"
                            ],
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "digest": {
                          "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                          "optional": 1,
                          "pattern": "/^[a-f0-9]{64}$/",
                          "type": "string"
                        },
                        "email": {
                          "description": "E-Mail Address.",
                          "maxLength": 64,
                          "minLength": 2,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "enable": {
                          "default": true,
                          "description": "Enable the account (default). You can set this to '0' to disable the account.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "expire": {
                          "default": 0,
                          "description": "Account expiration date (seconds since epoch). '0' means no expiration date.",
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "firstname": {
                          "description": "First name.",
                          "maxLength": 64,
                          "minLength": 2,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "lastname": {
                          "description": "Last name.",
                          "maxLength": 64,
                          "minLength": 2,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "password": {
                          "description": "This parameter is ignored, please use 'PUT /access/password' to change a user's password",
                          "maxLength": 1024,
                          "minLength": 1,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "userid": {
                          "description": "User ID",
                          "maxLength": 64,
                          "minLength": 3,
                          "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "or": [
                        {
                          "check": {
                            "partial": false,
                            "path": [
                              "access",
                              "users"
                            ],
                            "privs": [
                              "Permissions.Modify"
                            ]
                          }
                        },
                        {
                          "userParam": "userid"
                        }
                      ]
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 0,
                "path": "/access/users/{userid}",
                "text": "{userid}"
              }
            ],
            "info": {
              "GET": {
                "description": "List users",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "List users",
                  "properties": {
                    "include_tokens": {
                      "default": false,
                      "description": "Include user's API tokens in returned list.",
                      "optional": 1,
                      "type": "boolean"
                    }
                  }
                },
                "permissions": {
                  "description": "Returns all or just the logged-in user (/API token owner), depending on privileges.",
                  "user": "all"
                },
                "returns": {
                  "description": "List users (with config digest).",
                  "items": {
                    "additionalProperties": false,
                    "description": "User properties with added list of ApiTokens",
                    "properties": {
                      "comment": {
                        "description": "Comment.",
                        "maxLength": 128,
                        "optional": 1,
                        "pattern": "/^[[:^cntrl:]]*$/",
                        "type": "string"
                      },
                      "email": {
                        "description": "E-Mail Address.",
                        "maxLength": 64,
                        "minLength": 2,
                        "optional": 1,
                        "pattern": "/^[[:^cntrl:]]*$/",
                        "type": "string"
                      },
                      "enable": {
                        "default": true,
                        "description": "Enable the account (default). You can set this to '0' to disable the account.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "expire": {
                        "default": 0,
                        "description": "Account expiration date (seconds since epoch). '0' means no expiration date.",
                        "minimum": 0,
                        "optional": 1,
                        "type": "integer"
                      },
                      "firstname": {
                        "description": "First name.",
                        "maxLength": 64,
                        "minLength": 2,
                        "optional": 1,
                        "pattern": "/^[[:^cntrl:]]*$/",
                        "type": "string"
                      },
                      "lastname": {
                        "description": "Last name.",
                        "maxLength": 64,
                        "minLength": 2,
                        "optional": 1,
                        "pattern": "/^[[:^cntrl:]]*$/",
                        "type": "string"
                      },
                      "tfa-locked-until": {
                        "description": "Contains a timestamp until when a user is locked out of 2nd factors",
                        "optional": 1,
                        "type": "integer"
                      },
                      "tokens": {
                        "description": "List of user's API tokens.",
                        "items": {
                          "additionalProperties": false,
                          "description": "ApiToken properties.",
                          "properties": {
                            "comment": {
                              "description": "Comment.",
                              "maxLength": 128,
                              "optional": 1,
                              "pattern": "/^[[:^cntrl:]]*$/",
                              "type": "string"
                            },
                            "enable": {
                              "default": true,
                              "description": "Enable the account (default). You can set this to '0' to disable the account.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "expire": {
                              "default": 0,
                              "description": "Account expiration date (seconds since epoch). '0' means no expiration date.",
                              "minimum": 0,
                              "optional": 1,
                              "type": "integer"
                            },
                            "tokenid": {
                              "description": "API Token ID",
                              "maxLength": 64,
                              "minLength": 3,
                              "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)!(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "optional": 1,
                        "type": "array"
                      },
                      "totp-locked": {
                        "default": false,
                        "description": "True if the user is currently locked out of TOTP factors",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "userid": {
                        "description": "User ID",
                        "maxLength": 64,
                        "minLength": 3,
                        "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "POST": {
                "description": "Create new user.",
                "method": "POST",
                "parameters": {
                  "additionalProperties": false,
                  "description": "Create new user.",
                  "properties": {
                    "comment": {
                      "description": "Comment.",
                      "maxLength": 128,
                      "optional": 1,
                      "pattern": "/^[[:^cntrl:]]*$/",
                      "type": "string"
                    },
                    "email": {
                      "description": "E-Mail Address.",
                      "maxLength": 64,
                      "minLength": 2,
                      "optional": 1,
                      "pattern": "/^[[:^cntrl:]]*$/",
                      "type": "string"
                    },
                    "enable": {
                      "default": true,
                      "description": "Enable the account (default). You can set this to '0' to disable the account.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "expire": {
                      "default": 0,
                      "description": "Account expiration date (seconds since epoch). '0' means no expiration date.",
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer"
                    },
                    "firstname": {
                      "description": "First name.",
                      "maxLength": 64,
                      "minLength": 2,
                      "optional": 1,
                      "pattern": "/^[[:^cntrl:]]*$/",
                      "type": "string"
                    },
                    "lastname": {
                      "description": "Last name.",
                      "maxLength": 64,
                      "minLength": 2,
                      "optional": 1,
                      "pattern": "/^[[:^cntrl:]]*$/",
                      "type": "string"
                    },
                    "password": {
                      "description": "User Password.",
                      "maxLength": 64,
                      "minLength": 8,
                      "optional": 1,
                      "pattern": "/^[[:^cntrl:]]*$/",
                      "type": "string"
                    },
                    "userid": {
                      "description": "User ID",
                      "maxLength": 64,
                      "minLength": 3,
                      "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    }
                  }
                },
                "permissions": {
                  "check": {
                    "partial": false,
                    "path": [
                      "access",
                      "users"
                    ],
                    "privs": [
                      "Permissions.Modify"
                    ]
                  }
                },
                "returns": {
                  "type": "null"
                }
              }
            },
            "leaf": 0,
            "path": "/access/users",
            "text": "users"
          }
        ],
        "info": {
          "GET": {
            "description": "Directory index.",
            "method": "GET",
            "parameters": {
              "additionalProperties": true,
              "description": "Directory index.",
              "properties": {}
            },
            "permissions": {
              "user": "all"
            },
            "returns": {
              "type": "null"
            }
          }
        },
        "leaf": 0,
        "path": "/access",
        "text": "access"
      },
      {
        "children": [
          {
            "children": [
              {
                "children": [
                  {
                    "info": {
                      "GET": {
                        "description": "Read datastore stats",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Read datastore stats",
                          "properties": {
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": true,
                            "path": [
                              "datastore",
                              "{store}"
                            ],
                            "privs": [
                              "Datastore.Audit"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/admin/datastore/{store}/active-operations",
                    "text": "active-operations"
                  },
                  {
                    "info": {
                      "GET": {
                        "description": "Get the entries of the given path of the catalog",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Get the entries of the given path of the catalog",
                          "properties": {
                            "archive-name": {
                              "description": "Backup archive name.",
                              "optional": 1,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "backup-id": {
                              "description": "Backup ID.",
                              "pattern": "/^[A-Za-z0-9_][A-Za-z0-9._\\-]*$/",
                              "type": "string"
                            },
                            "backup-time": {
                              "description": "Backup time (Unix epoch.)",
                              "minimum": 1,
                              "type": "integer"
                            },
                            "backup-type": {
                              "description": "Backup types.",
                              "enum": [
                                "vm",
                                "ct",
                                "host"
                              ],
                              "type": "string"
                            },
                            "filepath": {
                              "description": "Base64 encoded path.",
                              "type": "string"
                            },
                            "ns": {
                              "description": "Namespace.",
                              "maxLength": 256,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                              "type": "string"
                            },
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "description": "Requires on /datastore/{store}[/{namespace}] either DATASTORE_READ for any or DATASTORE_BACKUP and being the owner of the group",
                          "user": "all"
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/admin/datastore/{store}/catalog",
                    "text": "catalog"
                  },
                  {
                    "info": {
                      "POST": {
                        "description": "Change owner of a backup group",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Change owner of a backup group",
                          "properties": {
                            "backup-id": {
                              "description": "Backup ID.",
                              "pattern": "/^[A-Za-z0-9_][A-Za-z0-9._\\-]*$/",
                              "type": "string"
                            },
                            "backup-type": {
                              "description": "Backup types.",
                              "enum": [
                                "vm",
                                "ct",
                                "host"
                              ],
                              "type": "string"
                            },
                            "new-owner": {
                              "description": "Authentication ID",
                              "maxLength": 64,
                              "minLength": 3,
                              "pattern": "/^(?:(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)|(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)!(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))$/",
                              "type": "string"
                            },
                            "ns": {
                              "description": "Namespace.",
                              "maxLength": 256,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                              "type": "string"
                            },
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "description": "Datastore.Modify on whole datastore, or changing ownership between user and a user's token for owned backups with Datastore.Backup",
                          "user": "all"
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/admin/datastore/{store}/change-owner",
                    "text": "change-owner"
                  },
                  {
                    "info": {
                      "GET": {
                        "description": "Download single raw file from backup snapshot.",
                        "method": "DOWNLOAD",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Download single raw file from backup snapshot.",
                          "properties": {
                            "backup-id": {
                              "description": "Backup ID.",
                              "pattern": "/^[A-Za-z0-9_][A-Za-z0-9._\\-]*$/",
                              "type": "string"
                            },
                            "backup-time": {
                              "description": "Backup time (Unix epoch.)",
                              "minimum": 1,
                              "type": "integer"
                            },
                            "backup-type": {
                              "description": "Backup type.",
                              "enum": [
                                "vm",
                                "ct",
                                "host"
                              ],
                              "type": "string"
                            },
                            "file-name": {
                              "description": "Backup archive name.",
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "ns": {
                              "description": "Namespace.",
                              "maxLength": 256,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                              "type": "string"
                            },
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "description": "Requires on /datastore/{store}[/{namespace}] either DATASTORE_READ for any or DATASTORE_BACKUP and being the owner of the group",
                          "user": "all"
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/admin/datastore/{store}/download",
                    "text": "download"
                  },
                  {
                    "info": {
                      "GET": {
                        "description": "Download single decoded file from backup snapshot. Only works if it's not encrypted.",
                        "method": "DOWNLOAD",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Download single decoded file from backup snapshot. Only works if it's not encrypted.",
                          "properties": {
                            "backup-id": {
                              "description": "Backup ID.",
                              "pattern": "/^[A-Za-z0-9_][A-Za-z0-9._\\-]*$/",
                              "type": "string"
                            },
                            "backup-time": {
                              "description": "Backup time (Unix epoch.)",
                              "minimum": 1,
                              "type": "integer"
                            },
                            "backup-type": {
                              "description": "Backup type.",
                              "enum": [
                                "vm",
                                "ct",
                                "host"
                              ],
                              "type": "string"
                            },
                            "file-name": {
                              "description": "Backup archive name.",
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "ns": {
                              "description": "Namespace.",
                              "maxLength": 256,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                              "type": "string"
                            },
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "description": "Requires on /datastore/{store}[/{namespace}] either DATASTORE_READ for any or DATASTORE_BACKUP and being the owner of the group",
                          "user": "all"
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/admin/datastore/{store}/download-decoded",
                    "text": "download-decoded"
                  },
                  {
                    "info": {
                      "GET": {
                        "description": "List snapshot files.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "List snapshot files.",
                          "properties": {
                            "backup-id": {
                              "description": "Backup ID.",
                              "pattern": "/^[A-Za-z0-9_][A-Za-z0-9._\\-]*$/",
                              "type": "string"
                            },
                            "backup-time": {
                              "description": "Backup time (Unix epoch.)",
                              "minimum": 1,
                              "type": "integer"
                            },
                            "backup-type": {
                              "description": "Backup types.",
                              "enum": [
                                "vm",
                                "ct",
                                "host"
                              ],
                              "type": "string"
                            },
                            "ns": {
                              "description": "Namespace.",
                              "maxLength": 256,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                              "type": "string"
                            },
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "description": "Requires on /datastore/{store}[/{namespace}] either DATASTORE_AUDIT or DATASTORE_READ for any or DATASTORE_BACKUP and being the owner of the group",
                          "user": "all"
                        },
                        "returns": {
                          "description": "Returns the list of archive files inside a backup snapshots.",
                          "items": {
                            "additionalProperties": false,
                            "description": "Basic information about archive files inside a backup snapshot.",
                            "properties": {
                              "crypt-mode": {
                                "default": "encrypt",
                                "description": "Defines whether data is encrypted (using an AEAD cipher), only signed, or neither.",
                                "enum": [
                                  "none",
                                  "encrypt",
                                  "sign-only"
                                ],
                                "optional": 1,
                                "type": "string"
                              },
                              "filename": {
                                "description": "Backup archive name.",
                                "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                "type": "string"
                              },
                              "size": {
                                "description": "Archive size (from backup manifest).",
                                "minimum": 0,
                                "optional": 1,
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/admin/datastore/{store}/files",
                    "text": "files"
                  },
                  {
                    "info": {
                      "GET": {
                        "description": "Garbage collection status.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Garbage collection status.",
                          "properties": {
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "datastore",
                              "{store}"
                            ],
                            "privs": [
                              "Datastore.Audit"
                            ]
                          }
                        },
                        "returns": {
                          "additionalProperties": false,
                          "description": "Garbage Collection general info",
                          "properties": {
                            "cache-stats": {
                              "additionalProperties": false,
                              "description": "Garbage collection cache statistics",
                              "optional": 1,
                              "properties": {
                                "hits": {
                                  "description": "Number of atime update cache hits",
                                  "minimum": 0,
                                  "type": "integer"
                                },
                                "misses": {
                                  "description": "Number of atime update cache misses",
                                  "minimum": 0,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "disk-bytes": {
                              "description": "Bytes used on disk.",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "disk-chunks": {
                              "description": "Chunks used on disk.",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "duration": {
                              "description": "Duration of last gc run",
                              "optional": 1,
                              "type": "integer"
                            },
                            "index-data-bytes": {
                              "description": "Sum of bytes referred by index files.",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "index-file-count": {
                              "description": "Number of processed index files.",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "last-run-endtime": {
                              "description": "Endtime of the last gc run",
                              "optional": 1,
                              "type": "integer"
                            },
                            "last-run-state": {
                              "description": "State of the last gc run",
                              "optional": 1,
                              "type": "string"
                            },
                            "next-run": {
                              "description": "Time of the next gc run",
                              "optional": 1,
                              "type": "integer"
                            },
                            "pending-bytes": {
                              "description": "Sum of pending bytes (pending removal - kept for safety).",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "pending-chunks": {
                              "description": "Number of pending chunks (pending removal - kept for safety).",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "removed-bad": {
                              "description": "Number of chunks marked as .bad by verify that have been removed by GC.",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "removed-bytes": {
                              "description": "Sum of removed bytes.",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "removed-chunks": {
                              "description": "Number of removed chunks.",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "schedule": {
                              "description": "Schedule of the gc job",
                              "optional": 1,
                              "type": "string"
                            },
                            "still-bad": {
                              "description": "Number of chunks still marked as .bad after garbage collection.",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "store": {
                              "description": "Datastore",
                              "type": "string"
                            },
                            "upid": {
                              "description": "Unique Process/Task Identifier",
                              "minLength": 36,
                              "optional": 1,
                              "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "POST": {
                        "description": "Start garbage collection.",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Start garbage collection.",
                          "properties": {
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "datastore",
                              "{store}"
                            ],
                            "privs": [
                              "Datastore.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "description": "Unique Process/Task Identifier",
                          "minLength": 36,
                          "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                          "type": "string"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/admin/datastore/{store}/gc",
                    "text": "gc"
                  },
                  {
                    "info": {
                      "GET": {
                        "description": "Get \"notes\" for a backup group",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Get \"notes\" for a backup group",
                          "properties": {
                            "backup-id": {
                              "description": "Backup ID.",
                              "pattern": "/^[A-Za-z0-9_][A-Za-z0-9._\\-]*$/",
                              "type": "string"
                            },
                            "backup-type": {
                              "description": "Backup types.",
                              "enum": [
                                "vm",
                                "ct",
                                "host"
                              ],
                              "type": "string"
                            },
                            "ns": {
                              "description": "Namespace.",
                              "maxLength": 256,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                              "type": "string"
                            },
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "description": "Requires on /datastore/{store}[/{namespace}] either DATASTORE_AUDIT for any or DATASTORE_BACKUP and being the owner of the group",
                          "user": "all"
                        },
                        "returns": {
                          "type": "null"
                        }
                      },
                      "PUT": {
                        "description": "Set \"notes\" for a backup group",
                        "method": "PUT",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Set \"notes\" for a backup group",
                          "properties": {
                            "backup-id": {
                              "description": "Backup ID.",
                              "pattern": "/^[A-Za-z0-9_][A-Za-z0-9._\\-]*$/",
                              "type": "string"
                            },
                            "backup-type": {
                              "description": "Backup types.",
                              "enum": [
                                "vm",
                                "ct",
                                "host"
                              ],
                              "type": "string"
                            },
                            "notes": {
                              "description": "A multiline text.",
                              "type": "string"
                            },
                            "ns": {
                              "description": "Namespace.",
                              "maxLength": 256,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                              "type": "string"
                            },
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "description": "Requires on /datastore/{store}[/{namespace}] either DATASTORE_MODIFY for any or DATASTORE_BACKUP and being the owner of the group",
                          "user": "all"
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/admin/datastore/{store}/group-notes",
                    "text": "group-notes"
                  },
                  {
                    "info": {
                      "DELETE": {
                        "description": "Delete backup group including all snapshots.",
                        "method": "DELETE",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Delete backup group including all snapshots.",
                          "properties": {
                            "backup-id": {
                              "description": "Backup ID.",
                              "pattern": "/^[A-Za-z0-9_][A-Za-z0-9._\\-]*$/",
                              "type": "string"
                            },
                            "backup-type": {
                              "description": "Backup types.",
                              "enum": [
                                "vm",
                                "ct",
                                "host"
                              ],
                              "type": "string"
                            },
                            "error-on-protected": {
                              "default": true,
                              "description": "Return error when group cannot be deleted because of protected snapshots",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "ns": {
                              "description": "Namespace.",
                              "maxLength": 256,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                              "type": "string"
                            },
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "description": "Requires on /datastore/{store}[/{namespace}] either DATASTORE_MODIFY for any or DATASTORE_PRUNE and being the owner of the group",
                          "user": "all"
                        },
                        "returns": {
                          "additionalProperties": false,
                          "description": "Statistics for removed backup groups",
                          "properties": {
                            "protected-snapshots": {
                              "description": "Number of entities",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "removed-groups": {
                              "description": "Number of entities",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "removed-snapshots": {
                              "description": "Number of entities",
                              "minimum": 0,
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "GET": {
                        "description": "List backup groups.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "List backup groups.",
                          "properties": {
                            "ns": {
                              "description": "Namespace.",
                              "maxLength": 256,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                              "type": "string"
                            },
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "description": "Requires DATASTORE_AUDIT for all or DATASTORE_BACKUP for owned groups on /datastore/{store}[/{namespace}]",
                          "user": "all"
                        },
                        "returns": {
                          "description": "Returns the list of backup groups.",
                          "items": {
                            "additionalProperties": false,
                            "description": "Basic information about a backup group.",
                            "properties": {
                              "backup-count": {
                                "description": "Number of contained snapshots",
                                "type": "integer"
                              },
                              "backup-id": {
                                "description": "Backup ID.",
                                "pattern": "/^[A-Za-z0-9_][A-Za-z0-9._\\-]*$/",
                                "type": "string"
                              },
                              "backup-type": {
                                "description": "Backup types.",
                                "enum": [
                                  "vm",
                                  "ct",
                                  "host"
                                ],
                                "type": "string"
                              },
                              "comment": {
                                "description": "The first line from group \"notes\"",
                                "optional": 1,
                                "type": "string"
                              },
                              "files": {
                                "description": "List of contained archive files.",
                                "items": {
                                  "description": "Backup archive name.",
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "last-backup": {
                                "description": "Backup time (Unix epoch.)",
                                "minimum": 1,
                                "type": "integer"
                              },
                              "owner": {
                                "description": "Authentication ID",
                                "maxLength": 64,
                                "minLength": 3,
                                "optional": 1,
                                "pattern": "/^(?:(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)|(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)!(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))$/",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/admin/datastore/{store}/groups",
                    "text": "groups"
                  },
                  {
                    "info": {
                      "POST": {
                        "description": "Mount removable datastore.",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Mount removable datastore.",
                          "properties": {
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "and": [
                            {
                              "check": {
                                "partial": false,
                                "path": [
                                  "datastore",
                                  "{store}"
                                ],
                                "privs": [
                                  "Datastore.Modify"
                                ]
                              }
                            },
                            {
                              "check": {
                                "partial": false,
                                "path": [
                                  "system",
                                  "disks"
                                ],
                                "privs": [
                                  "Sys.Modify"
                                ]
                              }
                            }
                          ]
                        },
                        "returns": {
                          "description": "Unique Process/Task Identifier",
                          "minLength": 36,
                          "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                          "type": "string"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/admin/datastore/{store}/mount",
                    "text": "mount"
                  },
                  {
                    "info": {
                      "DELETE": {
                        "description": "Delete a backup namespace including all snapshots.",
                        "method": "DELETE",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Delete a backup namespace including all snapshots.",
                          "properties": {
                            "delete-groups": {
                              "default": false,
                              "description": "If set, all groups will be destroyed in the whole hierarchy below andincluding `ns`. If not set, only empty namespaces will be pruned.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "error-on-protected": {
                              "default": true,
                              "description": "Return error when namespace cannot be deleted because of protected snapshots",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "ns": {
                              "description": "Namespace.",
                              "maxLength": 256,
                              "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                              "type": "string"
                            },
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "user": "all"
                        },
                        "returns": {
                          "type": "null"
                        }
                      },
                      "GET": {
                        "description": "List the namespaces of a datastore.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "List the namespaces of a datastore.",
                          "properties": {
                            "max-depth": {
                              "default": 7,
                              "description": "How many levels of namespaces should be operated on (0 == no recursion)",
                              "maximum": 7,
                              "minimum": 0,
                              "optional": 1,
                              "type": "integer"
                            },
                            "parent": {
                              "description": "Namespace.",
                              "maxLength": 256,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                              "type": "string"
                            },
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "description": "Requires DATASTORE_AUDIT, DATASTORE_MODIFY or DATASTORE_BACKUP /datastore/{store}[/{parent}]",
                          "user": "all"
                        },
                        "returns": {
                          "description": "Returns the list of backup namespaces.",
                          "items": {
                            "additionalProperties": false,
                            "description": "Basic information about a backup namespace.",
                            "properties": {
                              "comment": {
                                "description": "The first line from the namespace's \"notes\"",
                                "optional": 1,
                                "type": "string"
                              },
                              "ns": {
                                "description": "Namespace.",
                                "maxLength": 256,
                                "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "POST": {
                        "description": "Create a new datastore namespace.",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Create a new datastore namespace.",
                          "properties": {
                            "name": {
                              "description": "The name of the new namespace to add at the parent.",
                              "maxLength": 32,
                              "minLength": 1,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "parent": {
                              "description": "Namespace.",
                              "maxLength": 256,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                              "type": "string"
                            },
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "description": "Requires on /datastore/{store}[/{parent}] DATASTORE_MODIFY",
                          "user": "all"
                        },
                        "returns": {
                          "description": "Namespace.",
                          "maxLength": 256,
                          "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                          "type": "string"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/admin/datastore/{store}/namespace",
                    "text": "namespace"
                  },
                  {
                    "info": {
                      "GET": {
                        "description": "Get \"notes\" for a specific backup",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Get \"notes\" for a specific backup",
                          "properties": {
                            "backup-id": {
                              "description": "Backup ID.",
                              "pattern": "/^[A-Za-z0-9_][A-Za-z0-9._\\-]*$/",
                              "type": "string"
                            },
                            "backup-time": {
                              "description": "Backup time (Unix epoch.)",
                              "minimum": 1,
                              "type": "integer"
                            },
                            "backup-type": {
                              "description": "Backup types.",
                              "enum": [
                                "vm",
                                "ct",
                                "host"
                              ],
                              "type": "string"
                            },
                            "ns": {
                              "description": "Namespace.",
                              "maxLength": 256,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                              "type": "string"
                            },
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "description": "Requires on /datastore/{store}[/{namespace}] either DATASTORE_AUDIT for any or DATASTORE_BACKUP and being the owner of the group",
                          "user": "all"
                        },
                        "returns": {
                          "type": "null"
                        }
                      },
                      "PUT": {
                        "description": "Set \"notes\" for a specific backup",
                        "method": "PUT",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Set \"notes\" for a specific backup",
                          "properties": {
                            "backup-id": {
                              "description": "Backup ID.",
                              "pattern": "/^[A-Za-z0-9_][A-Za-z0-9._\\-]*$/",
                              "type": "string"
                            },
                            "backup-time": {
                              "description": "Backup time (Unix epoch.)",
                              "minimum": 1,
                              "type": "integer"
                            },
                            "backup-type": {
                              "description": "Backup types.",
                              "enum": [
                                "vm",
                                "ct",
                                "host"
                              ],
                              "type": "string"
                            },
                            "notes": {
                              "description": "A multiline text.",
                              "type": "string"
                            },
                            "ns": {
                              "description": "Namespace.",
                              "maxLength": 256,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                              "type": "string"
                            },
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "description": "Requires on /datastore/{store}[/{namespace}] either DATASTORE_MODIFY for any or DATASTORE_BACKUP and being the owner of the group",
                          "user": "all"
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/admin/datastore/{store}/notes",
                    "text": "notes"
                  },
                  {
                    "info": {
                      "GET": {
                        "description": "Query protection for a specific backup",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Query protection for a specific backup",
                          "properties": {
                            "backup-id": {
                              "description": "Backup ID.",
                              "pattern": "/^[A-Za-z0-9_][A-Za-z0-9._\\-]*$/",
                              "type": "string"
                            },
                            "backup-time": {
                              "description": "Backup time (Unix epoch.)",
                              "minimum": 1,
                              "type": "integer"
                            },
                            "backup-type": {
                              "description": "Backup types.",
                              "enum": [
                                "vm",
                                "ct",
                                "host"
                              ],
                              "type": "string"
                            },
                            "ns": {
                              "description": "Namespace.",
                              "maxLength": 256,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                              "type": "string"
                            },
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "description": "Requires on /datastore/{store}[/{namespace}] either DATASTORE_AUDIT for any or DATASTORE_BACKUP and being the owner of the group",
                          "user": "all"
                        },
                        "returns": {
                          "type": "null"
                        }
                      },
                      "PUT": {
                        "description": "En- or disable protection for a specific backup",
                        "method": "PUT",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "En- or disable protection for a specific backup",
                          "properties": {
                            "backup-id": {
                              "description": "Backup ID.",
                              "pattern": "/^[A-Za-z0-9_][A-Za-z0-9._\\-]*$/",
                              "type": "string"
                            },
                            "backup-time": {
                              "description": "Backup time (Unix epoch.)",
                              "minimum": 1,
                              "type": "integer"
                            },
                            "backup-type": {
                              "description": "Backup types.",
                              "enum": [
                                "vm",
                                "ct",
                                "host"
                              ],
                              "type": "string"
                            },
                            "ns": {
                              "description": "Namespace.",
                              "maxLength": 256,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                              "type": "string"
                            },
                            "protected": {
                              "description": "Enable/disable protection.",
                              "type": "boolean"
                            },
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "description": "Requires on /datastore/{store}[/{namespace}] either DATASTORE_MODIFY for any or DATASTORE_BACKUP and being the owner of the group",
                          "user": "all"
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/admin/datastore/{store}/protected",
                    "text": "protected"
                  },
                  {
                    "info": {
                      "POST": {
                        "description": "Prune a group on the datastore",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Prune a group on the datastore",
                          "properties": {
                            "backup-id": {
                              "description": "Backup ID.",
                              "pattern": "/^[A-Za-z0-9_][A-Za-z0-9._\\-]*$/",
                              "type": "string"
                            },
                            "backup-type": {
                              "description": "Backup types.",
                              "enum": [
                                "vm",
                                "ct",
                                "host"
                              ],
                              "type": "string"
                            },
                            "dry-run": {
                              "default": false,
                              "description": "Just show what prune would do, but do not delete anything.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "keep-daily": {
                              "description": "Number of daily backups to keep.",
                              "minimum": 1,
                              "optional": 1,
                              "type": "integer"
                            },
                            "keep-hourly": {
                              "description": "Number of hourly backups to keep.",
                              "minimum": 1,
                              "optional": 1,
                              "type": "integer"
                            },
                            "keep-last": {
                              "description": "Number of backups to keep.",
                              "minimum": 1,
                              "optional": 1,
                              "type": "integer"
                            },
                            "keep-monthly": {
                              "description": "Number of monthly backups to keep.",
                              "minimum": 1,
                              "optional": 1,
                              "type": "integer"
                            },
                            "keep-weekly": {
                              "description": "Number of weekly backups to keep.",
                              "minimum": 1,
                              "optional": 1,
                              "type": "integer"
                            },
                            "keep-yearly": {
                              "description": "Number of yearly backups to keep.",
                              "minimum": 1,
                              "optional": 1,
                              "type": "integer"
                            },
                            "ns": {
                              "description": "Namespace.",
                              "maxLength": 256,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                              "type": "string"
                            },
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "use-task": {
                              "default": false,
                              "description": "Spins up an asynchronous task that does the work.",
                              "optional": 1,
                              "type": "boolean"
                            }
                          }
                        },
                        "permissions": {
                          "description": "Requires on /datastore/{store}[/{namespace}] either DATASTORE_MODIFY for any or DATASTORE_PRUNE and being the owner of the group",
                          "user": "all"
                        },
                        "returns": {
                          "description": "Returns the list of snapshots and a flag indicating if there are kept or removed.",
                          "items": {
                            "additionalProperties": false,
                            "description": "Prune result.",
                            "properties": {
                              "backup-id": {
                                "description": "Backup ID.",
                                "pattern": "/^[A-Za-z0-9_][A-Za-z0-9._\\-]*$/",
                                "type": "string"
                              },
                              "backup-time": {
                                "description": "Backup time (Unix epoch.)",
                                "minimum": 1,
                                "type": "integer"
                              },
                              "backup-type": {
                                "description": "Backup types.",
                                "enum": [
                                  "vm",
                                  "ct",
                                  "host"
                                ],
                                "type": "string"
                              },
                              "keep": {
                                "description": "Keep snapshot",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/admin/datastore/{store}/prune",
                    "text": "prune"
                  },
                  {
                    "info": {
                      "POST": {
                        "description": "Prune the datastore",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Prune the datastore",
                          "properties": {
                            "dry-run": {
                              "default": false,
                              "description": "Just show what prune would do, but do not delete anything.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "keep-daily": {
                              "description": "Number of daily backups to keep.",
                              "minimum": 1,
                              "optional": 1,
                              "type": "integer"
                            },
                            "keep-hourly": {
                              "description": "Number of hourly backups to keep.",
                              "minimum": 1,
                              "optional": 1,
                              "type": "integer"
                            },
                            "keep-last": {
                              "description": "Number of backups to keep.",
                              "minimum": 1,
                              "optional": 1,
                              "type": "integer"
                            },
                            "keep-monthly": {
                              "description": "Number of monthly backups to keep.",
                              "minimum": 1,
                              "optional": 1,
                              "type": "integer"
                            },
                            "keep-weekly": {
                              "description": "Number of weekly backups to keep.",
                              "minimum": 1,
                              "optional": 1,
                              "type": "integer"
                            },
                            "keep-yearly": {
                              "description": "Number of yearly backups to keep.",
                              "minimum": 1,
                              "optional": 1,
                              "type": "integer"
                            },
                            "max-depth": {
                              "description": "How many levels of namespaces should be operated on (0 == no recursion, empty == automatic full recursion, namespace depths reduce maximum allowed value)",
                              "maximum": 7,
                              "minimum": 0,
                              "optional": 1,
                              "type": "integer"
                            },
                            "ns": {
                              "description": "Namespace.",
                              "maxLength": 256,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                              "type": "string"
                            },
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "description": "Requires Datastore.Modify or Datastore.Prune on the datastore/namespace.",
                          "user": "all"
                        },
                        "returns": {
                          "description": "Unique Process/Task Identifier",
                          "minLength": 36,
                          "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                          "type": "string"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/admin/datastore/{store}/prune-datastore",
                    "text": "prune-datastore"
                  },
                  {
                    "info": {
                      "GET": {
                        "description": "Download single file from pxar file of a backup snapshot. Only works if it's not encrypted.",
                        "method": "DOWNLOAD",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Download single file from pxar file of a backup snapshot. Only works if it's not encrypted.",
                          "properties": {
                            "archive-name": {
                              "description": "Backup archive name.",
                              "optional": 1,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "backup-id": {
                              "description": "Backup ID.",
                              "pattern": "/^[A-Za-z0-9_][A-Za-z0-9._\\-]*$/",
                              "type": "string"
                            },
                            "backup-time": {
                              "description": "Backup time (Unix epoch.)",
                              "minimum": 1,
                              "type": "integer"
                            },
                            "backup-type": {
                              "description": "Backup type.",
                              "enum": [
                                "vm",
                                "ct",
                                "host"
                              ],
                              "type": "string"
                            },
                            "filepath": {
                              "description": "Base64 encoded path",
                              "type": "string"
                            },
                            "ns": {
                              "description": "Namespace.",
                              "maxLength": 256,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                              "type": "string"
                            },
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "tar": {
                              "description": "Download as .tar.zst",
                              "optional": 1,
                              "type": "boolean"
                            }
                          }
                        },
                        "permissions": {
                          "description": "Requires on /datastore/{store}[/{namespace}] either DATASTORE_READ for any or DATASTORE_BACKUP and being the owner of the group",
                          "user": "all"
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/admin/datastore/{store}/pxar-file-download",
                    "text": "pxar-file-download"
                  },
                  {
                    "info": {
                      "GET": {
                        "description": "Read datastore stats",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Read datastore stats",
                          "properties": {
                            "cf": {
                              "description": "RRD consolidation mode",
                              "enum": [
                                "MAX",
                                "AVERAGE"
                              ],
                              "type": "string"
                            },
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "timeframe": {
                              "description": "RRD time frame",
                              "enum": [
                                "hour",
                                "day",
                                "week",
                                "month",
                                "year",
                                "decade"
                              ],
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": true,
                            "path": [
                              "datastore",
                              "{store}"
                            ],
                            "privs": [
                              "Datastore.Audit",
                              "Datastore.Backup"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/admin/datastore/{store}/rrd",
                    "text": "rrd"
                  },
                  {
                    "info": {
                      "PUT": {
                        "description": "Refresh datastore contents from S3 to local cache store.",
                        "method": "PUT",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Refresh datastore contents from S3 to local cache store.",
                          "properties": {
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "datastore",
                              "{store}"
                            ],
                            "privs": [
                              "Datastore.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "description": "Unique Process/Task Identifier",
                          "minLength": 36,
                          "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                          "type": "string"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/admin/datastore/{store}/s3-refresh",
                    "text": "s3-refresh"
                  },
                  {
                    "info": {
                      "DELETE": {
                        "description": "Delete backup snapshot.",
                        "method": "DELETE",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Delete backup snapshot.",
                          "properties": {
                            "backup-id": {
                              "description": "Backup ID.",
                              "pattern": "/^[A-Za-z0-9_][A-Za-z0-9._\\-]*$/",
                              "type": "string"
                            },
                            "backup-time": {
                              "description": "Backup time (Unix epoch.)",
                              "minimum": 1,
                              "type": "integer"
                            },
                            "backup-type": {
                              "description": "Backup types.",
                              "enum": [
                                "vm",
                                "ct",
                                "host"
                              ],
                              "type": "string"
                            },
                            "ns": {
                              "description": "Namespace.",
                              "maxLength": 256,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                              "type": "string"
                            },
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "description": "Requires on /datastore/{store}[/{namespace}] either DATASTORE_MODIFY for any or DATASTORE_PRUNE and being the owner of the group",
                          "user": "all"
                        },
                        "returns": {
                          "type": "null"
                        }
                      },
                      "GET": {
                        "description": "List backup snapshots.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "List backup snapshots.",
                          "properties": {
                            "backup-id": {
                              "description": "Backup ID.",
                              "optional": 1,
                              "pattern": "/^[A-Za-z0-9_][A-Za-z0-9._\\-]*$/",
                              "type": "string"
                            },
                            "backup-type": {
                              "description": "Backup types.",
                              "enum": [
                                "vm",
                                "ct",
                                "host"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "ns": {
                              "description": "Namespace.",
                              "maxLength": 256,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                              "type": "string"
                            },
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "description": "Requires on /datastore/{store}[/{namespace}] either DATASTORE_AUDIT for any or DATASTORE_BACKUP and being the owner of the group",
                          "user": "all"
                        },
                        "returns": {
                          "description": "Returns the list of snapshots.",
                          "items": {
                            "additionalProperties": false,
                            "description": "Basic information about backup snapshot.",
                            "properties": {
                              "backup-id": {
                                "description": "Backup ID.",
                                "pattern": "/^[A-Za-z0-9_][A-Za-z0-9._\\-]*$/",
                                "type": "string"
                              },
                              "backup-time": {
                                "description": "Backup time (Unix epoch.)",
                                "minimum": 1,
                                "type": "integer"
                              },
                              "backup-type": {
                                "description": "Backup types.",
                                "enum": [
                                  "vm",
                                  "ct",
                                  "host"
                                ],
                                "type": "string"
                              },
                              "comment": {
                                "description": "Comment.",
                                "maxLength": 128,
                                "optional": 1,
                                "pattern": "/^[[:^cntrl:]]*$/",
                                "type": "string"
                              },
                              "files": {
                                "description": "List of contained archive files.",
                                "items": {
                                  "description": "Backup archive name.",
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "fingerprint": {
                                "description": "Fingerprint of encryption key",
                                "optional": 1,
                                "type": "string"
                              },
                              "owner": {
                                "description": "Authentication ID",
                                "maxLength": 64,
                                "minLength": 3,
                                "optional": 1,
                                "pattern": "/^(?:(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)|(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)!(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))$/",
                                "type": "string"
                              },
                              "protected": {
                                "description": "Protection from prunes",
                                "type": "boolean"
                              },
                              "size": {
                                "description": "Overall snapshot size (sum of all archive sizes).",
                                "minimum": 0,
                                "optional": 1,
                                "type": "integer"
                              },
                              "verification": {
                                "additionalProperties": false,
                                "description": "Task properties.",
                                "optional": 1,
                                "properties": {
                                  "state": {
                                    "description": "Result of a verify operation.",
                                    "enum": [
                                      "ok",
                                      "failed"
                                    ],
                                    "type": "string"
                                  },
                                  "upid": {
                                    "description": "Unique Process/Task Identifier",
                                    "minLength": 36,
                                    "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/admin/datastore/{store}/snapshots",
                    "text": "snapshots"
                  },
                  {
                    "info": {
                      "GET": {
                        "description": "Get datastore status.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Get datastore status.",
                          "properties": {
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "verbose": {
                              "default": false,
                              "description": "Include additional information like snapshot counts and GC status.",
                              "optional": 1,
                              "type": "boolean"
                            }
                          }
                        },
                        "permissions": {
                          "description": "Requires on /datastore/{store} either DATASTORE_AUDIT or DATASTORE_BACKUP for the full statistics. Counts of accessible groups are always returned, if any",
                          "user": "all"
                        },
                        "returns": {
                          "additionalProperties": false,
                          "description": "Overall Datastore status and useful information.",
                          "properties": {
                            "avail": {
                              "description": "Available space (bytes).",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "counts": {
                              "additionalProperties": false,
                              "description": "Counts of groups/snapshots per BackupType.",
                              "optional": 1,
                              "properties": {
                                "ct": {
                                  "additionalProperties": false,
                                  "description": "Backup Type group/snapshot counts.",
                                  "optional": 1,
                                  "properties": {
                                    "groups": {
                                      "description": "The number of groups of the type.",
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "snapshots": {
                                      "description": "The number of snapshots of the type.",
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "host": {
                                  "additionalProperties": false,
                                  "description": "Backup Type group/snapshot counts.",
                                  "optional": 1,
                                  "properties": {
                                    "groups": {
                                      "description": "The number of groups of the type.",
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "snapshots": {
                                      "description": "The number of snapshots of the type.",
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "other": {
                                  "additionalProperties": false,
                                  "description": "Backup Type group/snapshot counts.",
                                  "optional": 1,
                                  "properties": {
                                    "groups": {
                                      "description": "The number of groups of the type.",
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "snapshots": {
                                      "description": "The number of snapshots of the type.",
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "vm": {
                                  "additionalProperties": false,
                                  "description": "Backup Type group/snapshot counts.",
                                  "optional": 1,
                                  "properties": {
                                    "groups": {
                                      "description": "The number of groups of the type.",
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "snapshots": {
                                      "description": "The number of snapshots of the type.",
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "gc-status": {
                              "additionalProperties": false,
                              "description": "Garbage collection status.",
                              "optional": 1,
                              "properties": {
                                "cache-stats": {
                                  "additionalProperties": false,
                                  "description": "Garbage collection cache statistics",
                                  "optional": 1,
                                  "properties": {
                                    "hits": {
                                      "description": "Number of atime update cache hits",
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "misses": {
                                      "description": "Number of atime update cache misses",
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "disk-bytes": {
                                  "description": "Bytes used on disk.",
                                  "minimum": 0,
                                  "type": "integer"
                                },
                                "disk-chunks": {
                                  "description": "Chunks used on disk.",
                                  "minimum": 0,
                                  "type": "integer"
                                },
                                "index-data-bytes": {
                                  "description": "Sum of bytes referred by index files.",
                                  "minimum": 0,
                                  "type": "integer"
                                },
                                "index-file-count": {
                                  "description": "Number of processed index files.",
                                  "minimum": 0,
                                  "type": "integer"
                                },
                                "pending-bytes": {
                                  "description": "Sum of pending bytes (pending removal - kept for safety).",
                                  "minimum": 0,
                                  "type": "integer"
                                },
                                "pending-chunks": {
                                  "description": "Number of pending chunks (pending removal - kept for safety).",
                                  "minimum": 0,
                                  "type": "integer"
                                },
                                "removed-bad": {
                                  "description": "Number of chunks marked as .bad by verify that have been removed by GC.",
                                  "minimum": 0,
                                  "type": "integer"
                                },
                                "removed-bytes": {
                                  "description": "Sum of removed bytes.",
                                  "minimum": 0,
                                  "type": "integer"
                                },
                                "removed-chunks": {
                                  "description": "Number of removed chunks.",
                                  "minimum": 0,
                                  "type": "integer"
                                },
                                "still-bad": {
                                  "description": "Number of chunks still marked as .bad after garbage collection.",
                                  "minimum": 0,
                                  "type": "integer"
                                },
                                "upid": {
                                  "description": "Unique Process/Task Identifier",
                                  "minLength": 36,
                                  "optional": 1,
                                  "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "total": {
                              "description": "Total space (bytes).",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "used": {
                              "description": "Used space (bytes).",
                              "minimum": 0,
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/admin/datastore/{store}/status",
                    "text": "status"
                  },
                  {
                    "info": {
                      "POST": {
                        "description": "Unmount a removable device that is associated with the datastore",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Unmount a removable device that is associated with the datastore",
                          "properties": {
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "and": [
                            {
                              "check": {
                                "partial": true,
                                "path": [
                                  "datastore",
                                  "{store}"
                                ],
                                "privs": [
                                  "Datastore.Modify"
                                ]
                              }
                            },
                            {
                              "check": {
                                "partial": false,
                                "path": [
                                  "system",
                                  "disks"
                                ],
                                "privs": [
                                  "Sys.Modify"
                                ]
                              }
                            }
                          ]
                        },
                        "returns": {
                          "description": "Unique Process/Task Identifier",
                          "minLength": 36,
                          "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                          "type": "string"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/admin/datastore/{store}/unmount",
                    "text": "unmount"
                  },
                  {
                    "info": {
                      "POST": {
                        "description": "Upload the client backup log file into a backup snapshot ('client.log.blob').",
                        "method": "UPLOAD",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Upload the client backup log file into a backup snapshot ('client.log.blob').",
                          "properties": {
                            "backup-id": {
                              "description": "Backup ID.",
                              "pattern": "/^[A-Za-z0-9_][A-Za-z0-9._\\-]*$/",
                              "type": "string"
                            },
                            "backup-time": {
                              "description": "Backup time (Unix epoch.)",
                              "minimum": 1,
                              "type": "integer"
                            },
                            "backup-type": {
                              "description": "Backup type.",
                              "enum": [
                                "vm",
                                "ct",
                                "host"
                              ],
                              "type": "string"
                            },
                            "ns": {
                              "description": "Namespace.",
                              "maxLength": 256,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                              "type": "string"
                            },
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "description": "Only the backup creator/owner is allowed to do this.",
                          "user": "all"
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/admin/datastore/{store}/upload-backup-log",
                    "text": "upload-backup-log"
                  },
                  {
                    "info": {
                      "POST": {
                        "description": "Verify backups.\n\nThis function can verify a single backup snapshot, all backup from a backup group,\nor all backups in the datastore.",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Verify backups.\n\nThis function can verify a single backup snapshot, all backup from a backup group,\nor all backups in the datastore.",
                          "properties": {
                            "backup-id": {
                              "description": "Backup ID.",
                              "optional": 1,
                              "pattern": "/^[A-Za-z0-9_][A-Za-z0-9._\\-]*$/",
                              "type": "string"
                            },
                            "backup-time": {
                              "description": "Backup time (Unix epoch.)",
                              "minimum": 1,
                              "optional": 1,
                              "type": "integer"
                            },
                            "backup-type": {
                              "description": "Backup types.",
                              "enum": [
                                "vm",
                                "ct",
                                "host"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "ignore-verified": {
                              "default": true,
                              "description": "Do not verify backups that are already verified if their verification is not outdated.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "max-depth": {
                              "default": 7,
                              "description": "How many levels of namespaces should be operated on (0 == no recursion)",
                              "maximum": 7,
                              "minimum": 0,
                              "optional": 1,
                              "type": "integer"
                            },
                            "ns": {
                              "description": "Namespace.",
                              "maxLength": 256,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                              "type": "string"
                            },
                            "outdated-after": {
                              "description": "Days after that a verification becomes outdated. (0 is deprecated)'",
                              "minimum": 0,
                              "optional": 1,
                              "type": "integer"
                            },
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "description": "Requires on /datastore/{store}[/{namespace}] either DATASTORE_VERIFY for any or DATASTORE_BACKUP and being the owner of the group",
                          "user": "all"
                        },
                        "returns": {
                          "description": "Unique Process/Task Identifier",
                          "minLength": 36,
                          "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                          "type": "string"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/admin/datastore/{store}/verify",
                    "text": "verify"
                  }
                ],
                "info": {
                  "GET": {
                    "description": "Directory index.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": true,
                      "description": "Directory index.",
                      "properties": {}
                    },
                    "permissions": {
                      "user": "all"
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 0,
                "path": "/admin/datastore/{store}",
                "text": "{store}"
              }
            ],
            "info": {
              "GET": {
                "description": "Datastore list",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "Datastore list",
                  "properties": {}
                },
                "permissions": {
                  "user": "all"
                },
                "returns": {
                  "description": "List the accessible datastores.",
                  "items": {
                    "additionalProperties": false,
                    "description": "Basic information about a datastore.",
                    "properties": {
                      "comment": {
                        "description": "Comment.",
                        "maxLength": 128,
                        "optional": 1,
                        "pattern": "/^[[:^cntrl:]]*$/",
                        "type": "string"
                      },
                      "maintenance": {
                        "description": "If the datastore is in maintenance mode, information about it",
                        "format": {
                          "additionalProperties": false,
                          "default_key": "type",
                          "description": "Maintenance mode",
                          "properties": {
                            "message": {
                              "description": "Message describing the reason for the maintenance.",
                              "maxLength": 64,
                              "optional": 1,
                              "pattern": "/^[[:^cntrl:]]*$/",
                              "type": "string"
                            },
                            "type": {
                              "description": "Maintenance type.",
                              "enum": [
                                "read-only",
                                "offline",
                                "delete",
                                "unmount",
                                "s3-refresh"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "optional": 1,
                        "type": "string",
                        "typetext": "[type=<enum> [,message=<string>]]"
                      },
                      "mount-status": {
                        "default": "nonremovable",
                        "description": "Current mounting status of a datastore, useful for removable datastores.",
                        "enum": [
                          "mounted",
                          "notmounted",
                          "nonremovable"
                        ],
                        "type": "string"
                      },
                      "store": {
                        "description": "Datastore name.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "leaf": 0,
            "path": "/admin/datastore",
            "text": "datastore"
          },
          {
            "children": [
              {
                "info": {
                  "GET": {
                    "description": "List all GC jobs (max one per datastore)",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "List all GC jobs (max one per datastore)",
                      "properties": {
                        "store": {
                          "description": "Datastore name.",
                          "maxLength": 32,
                          "minLength": 3,
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "description": "Requires Datastore.Audit or Datastore.Modify on datastore.",
                      "user": "all"
                    },
                    "returns": {
                      "description": "List configured gc jobs and their status",
                      "items": {
                        "additionalProperties": false,
                        "description": "Garbage Collection general info",
                        "properties": {
                          "cache-stats": {
                            "additionalProperties": false,
                            "description": "Garbage collection cache statistics",
                            "optional": 1,
                            "properties": {
                              "hits": {
                                "description": "Number of atime update cache hits",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "misses": {
                                "description": "Number of atime update cache misses",
                                "minimum": 0,
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "disk-bytes": {
                            "description": "Bytes used on disk.",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "disk-chunks": {
                            "description": "Chunks used on disk.",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "duration": {
                            "description": "Duration of last gc run",
                            "optional": 1,
                            "type": "integer"
                          },
                          "index-data-bytes": {
                            "description": "Sum of bytes referred by index files.",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "index-file-count": {
                            "description": "Number of processed index files.",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "last-run-endtime": {
                            "description": "Endtime of the last gc run",
                            "optional": 1,
                            "type": "integer"
                          },
                          "last-run-state": {
                            "description": "State of the last gc run",
                            "optional": 1,
                            "type": "string"
                          },
                          "next-run": {
                            "description": "Time of the next gc run",
                            "optional": 1,
                            "type": "integer"
                          },
                          "pending-bytes": {
                            "description": "Sum of pending bytes (pending removal - kept for safety).",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "pending-chunks": {
                            "description": "Number of pending chunks (pending removal - kept for safety).",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "removed-bad": {
                            "description": "Number of chunks marked as .bad by verify that have been removed by GC.",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "removed-bytes": {
                            "description": "Sum of removed bytes.",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "removed-chunks": {
                            "description": "Number of removed chunks.",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "schedule": {
                            "description": "Schedule of the gc job",
                            "optional": 1,
                            "type": "string"
                          },
                          "still-bad": {
                            "description": "Number of chunks still marked as .bad after garbage collection.",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "store": {
                            "description": "Datastore",
                            "type": "string"
                          },
                          "upid": {
                            "description": "Unique Process/Task Identifier",
                            "minLength": 36,
                            "optional": 1,
                            "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  }
                },
                "leaf": 1,
                "path": "/admin/gc/{store}",
                "text": "{store}"
              }
            ],
            "info": {
              "GET": {
                "description": "List all GC jobs (max one per datastore)",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "List all GC jobs (max one per datastore)",
                  "properties": {
                    "store": {
                      "description": "Datastore name.",
                      "maxLength": 32,
                      "minLength": 3,
                      "optional": 1,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    }
                  }
                },
                "permissions": {
                  "description": "Requires Datastore.Audit or Datastore.Modify on datastore.",
                  "user": "all"
                },
                "returns": {
                  "description": "List configured gc jobs and their status",
                  "items": {
                    "additionalProperties": false,
                    "description": "Garbage Collection general info",
                    "properties": {
                      "cache-stats": {
                        "additionalProperties": false,
                        "description": "Garbage collection cache statistics",
                        "optional": 1,
                        "properties": {
                          "hits": {
                            "description": "Number of atime update cache hits",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "misses": {
                            "description": "Number of atime update cache misses",
                            "minimum": 0,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "disk-bytes": {
                        "description": "Bytes used on disk.",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "disk-chunks": {
                        "description": "Chunks used on disk.",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "duration": {
                        "description": "Duration of last gc run",
                        "optional": 1,
                        "type": "integer"
                      },
                      "index-data-bytes": {
                        "description": "Sum of bytes referred by index files.",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "index-file-count": {
                        "description": "Number of processed index files.",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "last-run-endtime": {
                        "description": "Endtime of the last gc run",
                        "optional": 1,
                        "type": "integer"
                      },
                      "last-run-state": {
                        "description": "State of the last gc run",
                        "optional": 1,
                        "type": "string"
                      },
                      "next-run": {
                        "description": "Time of the next gc run",
                        "optional": 1,
                        "type": "integer"
                      },
                      "pending-bytes": {
                        "description": "Sum of pending bytes (pending removal - kept for safety).",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "pending-chunks": {
                        "description": "Number of pending chunks (pending removal - kept for safety).",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "removed-bad": {
                        "description": "Number of chunks marked as .bad by verify that have been removed by GC.",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "removed-bytes": {
                        "description": "Sum of removed bytes.",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "removed-chunks": {
                        "description": "Number of removed chunks.",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "schedule": {
                        "description": "Schedule of the gc job",
                        "optional": 1,
                        "type": "string"
                      },
                      "still-bad": {
                        "description": "Number of chunks still marked as .bad after garbage collection.",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "store": {
                        "description": "Datastore",
                        "type": "string"
                      },
                      "upid": {
                        "description": "Unique Process/Task Identifier",
                        "minLength": 36,
                        "optional": 1,
                        "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "leaf": 0,
            "path": "/admin/gc",
            "text": "gc"
          },
          {
            "info": {
              "GET": {
                "description": "List configured metric servers.",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "List configured metric servers.",
                  "properties": {}
                },
                "permissions": {
                  "check": {
                    "partial": false,
                    "path": [],
                    "privs": [
                      "Sys.Audit"
                    ]
                  }
                },
                "returns": {
                  "description": "List of configured metric servers.",
                  "items": {
                    "additionalProperties": false,
                    "description": "Basic information about a metric server that's available for all types",
                    "properties": {
                      "comment": {
                        "description": "Comment.",
                        "maxLength": 128,
                        "optional": 1,
                        "pattern": "/^[[:^cntrl:]]*$/",
                        "type": "string"
                      },
                      "enable": {
                        "description": "Enables or disables the metrics server",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "name": {
                        "description": "Metrics Server ID.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "server": {
                        "description": "The target server",
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of the metric server",
                        "enum": [
                          "influxdb-http",
                          "influxdb-udp"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "leaf": 1,
            "path": "/admin/metrics",
            "text": "metrics"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "info": {
                      "POST": {
                        "description": "Runs a prune job manually.",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Runs a prune job manually.",
                          "properties": {
                            "id": {
                              "description": "Job ID.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "description": "Requires Datastore.Modify on job's datastore.",
                          "user": "all"
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/admin/prune/{id}/run",
                    "text": "run"
                  }
                ],
                "info": {
                  "GET": {
                    "description": "Directory index.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": true,
                      "description": "Directory index.",
                      "properties": {}
                    },
                    "permissions": {
                      "user": "all"
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 0,
                "path": "/admin/prune/{id}",
                "text": "{id}"
              }
            ],
            "info": {
              "GET": {
                "description": "List all prune jobs",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "List all prune jobs",
                  "properties": {
                    "store": {
                      "description": "Datastore name.",
                      "maxLength": 32,
                      "minLength": 3,
                      "optional": 1,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    }
                  }
                },
                "permissions": {
                  "description": "Requires Datastore.Audit or Datastore.Modify on datastore.",
                  "user": "all"
                },
                "returns": {
                  "description": "List configured jobs and their status (filtered by access)",
                  "items": {
                    "additionalProperties": false,
                    "description": "Status of prune job",
                    "properties": {
                      "comment": {
                        "description": "Comment.",
                        "maxLength": 128,
                        "optional": 1,
                        "pattern": "/^[[:^cntrl:]]*$/",
                        "type": "string"
                      },
                      "disable": {
                        "default": false,
                        "description": "Disable this job.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "id": {
                        "description": "Job ID.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "keep-daily": {
                        "description": "Number of daily backups to keep.",
                        "minimum": 1,
                        "optional": 1,
                        "type": "integer"
                      },
                      "keep-hourly": {
                        "description": "Number of hourly backups to keep.",
                        "minimum": 1,
                        "optional": 1,
                        "type": "integer"
                      },
                      "keep-last": {
                        "description": "Number of backups to keep.",
                        "minimum": 1,
                        "optional": 1,
                        "type": "integer"
                      },
                      "keep-monthly": {
                        "description": "Number of monthly backups to keep.",
                        "minimum": 1,
                        "optional": 1,
                        "type": "integer"
                      },
                      "keep-weekly": {
                        "description": "Number of weekly backups to keep.",
                        "minimum": 1,
                        "optional": 1,
                        "type": "integer"
                      },
                      "keep-yearly": {
                        "description": "Number of yearly backups to keep.",
                        "minimum": 1,
                        "optional": 1,
                        "type": "integer"
                      },
                      "last-run-endtime": {
                        "description": "Endtime of the last run.",
                        "optional": 1,
                        "type": "integer"
                      },
                      "last-run-state": {
                        "description": "Result of the last run.",
                        "optional": 1,
                        "type": "string"
                      },
                      "last-run-upid": {
                        "description": "Task UPID of the last run.",
                        "optional": 1,
                        "type": "string"
                      },
                      "max-depth": {
                        "description": "How many levels of namespaces should be operated on (0 == no recursion, empty == automatic full recursion, namespace depths reduce maximum allowed value)",
                        "maximum": 7,
                        "minimum": 0,
                        "optional": 1,
                        "type": "integer"
                      },
                      "next-run": {
                        "description": "Estimated time of the next run (UNIX epoch).",
                        "optional": 1,
                        "type": "integer"
                      },
                      "ns": {
                        "description": "Namespace.",
                        "maxLength": 256,
                        "optional": 1,
                        "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                        "type": "string"
                      },
                      "schedule": {
                        "description": "Run prune job at specified schedule.",
                        "type": "string",
                        "typetext": "<calendar-event>"
                      },
                      "store": {
                        "description": "Datastore name.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "leaf": 0,
            "path": "/admin/prune",
            "text": "prune"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "info": {
                      "PUT": {
                        "description": "Perform basic sanity check for given s3 client configuration",
                        "method": "PUT",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Perform basic sanity check for given s3 client configuration",
                          "properties": {
                            "bucket": {
                              "description": "Bucket name for S3 object store.",
                              "maxLength": 63,
                              "minLength": 3,
                              "type": "string"
                            },
                            "s3-client-id": {
                              "description": "ID to uniquely identify s3 client config.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "store-prefix": {
                              "description": "Store prefix within bucket for S3 object keys (commonly datastore name)",
                              "optional": 1,
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/admin/s3/{s3-client-id}/check",
                    "text": "check"
                  }
                ],
                "info": {
                  "GET": {
                    "description": "Directory index.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": true,
                      "description": "Directory index.",
                      "properties": {}
                    },
                    "permissions": {
                      "user": "all"
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 0,
                "path": "/admin/s3/{s3-client-id}",
                "text": "{s3-client-id}"
              }
            ],
            "info": {},
            "leaf": 0,
            "path": "/admin/s3",
            "text": "s3"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "info": {
                      "POST": {
                        "description": "Runs the sync jobs manually.",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Runs the sync jobs manually.",
                          "properties": {
                            "id": {
                              "description": "Job ID.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "description": "User needs Datastore.Backup on target datastore, and Remote.Read on source remote. Additionally, remove_vanished requires Datastore.Prune, and any owner other than the user themselves requires Datastore.Modify",
                          "user": "all"
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/admin/sync/{id}/run",
                    "text": "run"
                  }
                ],
                "info": {
                  "GET": {
                    "description": "Directory index.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": true,
                      "description": "Directory index.",
                      "properties": {}
                    },
                    "permissions": {
                      "user": "all"
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 0,
                "path": "/admin/sync/{id}",
                "text": "{id}"
              }
            ],
            "info": {
              "GET": {
                "description": "List all configured sync jobs",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "List all configured sync jobs",
                  "properties": {
                    "store": {
                      "description": "Datastore name.",
                      "maxLength": 32,
                      "minLength": 3,
                      "optional": 1,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "sync-direction": {
                      "default": "pull",
                      "description": "The direction of the listed sync jobs: push, pull or all.",
                      "enum": [
                        "all",
                        "push",
                        "pull"
                      ],
                      "optional": 1,
                      "type": "string"
                    }
                  }
                },
                "permissions": {
                  "description": "Limited to sync jobs where user has Datastore.Audit on target datastore, and Remote.Audit on source remote.",
                  "user": "all"
                },
                "returns": {
                  "description": "List configured jobs and their status.",
                  "items": {
                    "additionalProperties": false,
                    "description": "Status of Sync Job",
                    "properties": {
                      "burst-in": {
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                        "maxLength": 64,
                        "minLength": 1,
                        "optional": 1,
                        "type": "string"
                      },
                      "burst-out": {
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                        "maxLength": 64,
                        "minLength": 1,
                        "optional": 1,
                        "type": "string"
                      },
                      "comment": {
                        "description": "Comment.",
                        "maxLength": 128,
                        "optional": 1,
                        "pattern": "/^[[:^cntrl:]]*$/",
                        "type": "string"
                      },
                      "encrypted-only": {
                        "description": "Only synchronize encrypted backup snapshots, exclude others.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "group-filter": {
                        "description": "List of group filters.",
                        "items": {
                          "description": "Group filter based on group identifier ('group:GROUP'), group type ('type:<vm|ct|host>'), or regex ('regex:RE'). Can be inverted by prepending 'exclude:'.",
                          "type": "string",
                          "typetext": "[<exclude:|include:>]<type:<vm|ct|host>|group:GROUP|regex:RE>"
                        },
                        "optional": 1,
                        "type": "array"
                      },
                      "id": {
                        "description": "Job ID.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "last-run-endtime": {
                        "description": "Endtime of the last run.",
                        "optional": 1,
                        "type": "integer"
                      },
                      "last-run-state": {
                        "description": "Result of the last run.",
                        "optional": 1,
                        "type": "string"
                      },
                      "last-run-upid": {
                        "description": "Task UPID of the last run.",
                        "optional": 1,
                        "type": "string"
                      },
                      "max-depth": {
                        "description": "How many levels of namespaces should be operated on (0 == no recursion, empty == automatic full recursion, namespace depths reduce maximum allowed value)",
                        "maximum": 7,
                        "minimum": 0,
                        "optional": 1,
                        "type": "integer"
                      },
                      "next-run": {
                        "description": "Estimated time of the next run (UNIX epoch).",
                        "optional": 1,
                        "type": "integer"
                      },
                      "ns": {
                        "description": "Namespace.",
                        "maxLength": 256,
                        "optional": 1,
                        "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                        "type": "string"
                      },
                      "owner": {
                        "description": "Authentication ID",
                        "maxLength": 64,
                        "minLength": 3,
                        "optional": 1,
                        "pattern": "/^(?:(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)|(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)!(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))$/",
                        "type": "string"
                      },
                      "rate-in": {
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                        "maxLength": 64,
                        "minLength": 1,
                        "optional": 1,
                        "type": "string"
                      },
                      "rate-out": {
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                        "maxLength": 64,
                        "minLength": 1,
                        "optional": 1,
                        "type": "string"
                      },
                      "remote": {
                        "description": "Remote ID.",
                        "maxLength": 32,
                        "minLength": 3,
                        "optional": 1,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "remote-ns": {
                        "description": "Namespace.",
                        "maxLength": 256,
                        "optional": 1,
                        "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                        "type": "string"
                      },
                      "remote-store": {
                        "description": "Datastore name.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "remove-vanished": {
                        "default": false,
                        "description": "Delete vanished backups. This remove the local copy if the remote backup was deleted.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "resync-corrupt": {
                        "description": "If the verification failed for a local snapshot, try to pull it again.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "run-on-mount": {
                        "description": "Run this job when a relevant datastore is mounted.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "schedule": {
                        "description": "Run sync job at specified schedule.",
                        "optional": 1,
                        "type": "string",
                        "typetext": "<calendar-event>"
                      },
                      "store": {
                        "description": "Datastore name.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "sync-direction": {
                        "default": "pull",
                        "description": "Direction of the sync job, push or pull",
                        "enum": [
                          "pull",
                          "push"
                        ],
                        "optional": 1,
                        "type": "string"
                      },
                      "transfer-last": {
                        "description": "Limit transfer to last N snapshots (per group), skipping others",
                        "minimum": 1,
                        "optional": 1,
                        "type": "integer"
                      },
                      "verified-only": {
                        "description": "Only synchronize verified backup snapshots, exclude others.",
                        "optional": 1,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "leaf": 0,
            "path": "/admin/sync",
            "text": "sync"
          },
          {
            "info": {
              "GET": {
                "description": "Show current traffic for all traffic control rules.",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "Show current traffic for all traffic control rules.",
                  "properties": {}
                },
                "permissions": {
                  "check": {
                    "partial": false,
                    "path": [],
                    "privs": [
                      "Sys.Audit"
                    ]
                  }
                },
                "returns": {
                  "description": "Show current traffic control rates.",
                  "items": {
                    "additionalProperties": false,
                    "description": "Traffic control rule config with current rates",
                    "properties": {
                      "burst-in": {
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                        "maxLength": 64,
                        "minLength": 1,
                        "optional": 1,
                        "type": "string"
                      },
                      "burst-out": {
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                        "maxLength": 64,
                        "minLength": 1,
                        "optional": 1,
                        "type": "string"
                      },
                      "comment": {
                        "description": "Comment.",
                        "maxLength": 128,
                        "optional": 1,
                        "pattern": "/^[[:^cntrl:]]*$/",
                        "type": "string"
                      },
                      "cur-rate-in": {
                        "description": "Current ingress rate in bytes/second",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "cur-rate-out": {
                        "description": "Current egress rate in bytes/second",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "name": {
                        "description": "Rule ID.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "network": {
                        "description": "Rule applies to Source IPs within this networks",
                        "items": {
                          "description": "IP address (IPv4 or IPv6) with netmask (CIDR notation).",
                          "maxLength": 43,
                          "pattern": "/^(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))/\\d{1,2})$|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::)))/\\d{1,3})$)$/",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "rate-in": {
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                        "maxLength": 64,
                        "minLength": 1,
                        "optional": 1,
                        "type": "string"
                      },
                      "rate-out": {
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                        "maxLength": 64,
                        "minLength": 1,
                        "optional": 1,
                        "type": "string"
                      },
                      "timeframe": {
                        "description": "Enable the rule at specific times",
                        "items": {
                          "description": "Timeframe to specify when the rule is active.",
                          "type": "string"
                        },
                        "optional": 1,
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "leaf": 1,
            "path": "/admin/traffic-control",
            "text": "traffic-control"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "info": {
                      "POST": {
                        "description": "Runs a verification job manually.",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Runs a verification job manually.",
                          "properties": {
                            "id": {
                              "description": "Job ID.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "description": "Requires Datastore.Verify on job's datastore.",
                          "user": "all"
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/admin/verify/{id}/run",
                    "text": "run"
                  }
                ],
                "info": {
                  "GET": {
                    "description": "Directory index.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": true,
                      "description": "Directory index.",
                      "properties": {}
                    },
                    "permissions": {
                      "user": "all"
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 0,
                "path": "/admin/verify/{id}",
                "text": "{id}"
              }
            ],
            "info": {
              "GET": {
                "description": "List all verification jobs",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "List all verification jobs",
                  "properties": {
                    "store": {
                      "description": "Datastore name.",
                      "maxLength": 32,
                      "minLength": 3,
                      "optional": 1,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    }
                  }
                },
                "permissions": {
                  "description": "Requires Datastore.Audit or Datastore.Verify on datastore.",
                  "user": "all"
                },
                "returns": {
                  "description": "List configured jobs and their status (filtered by access)",
                  "items": {
                    "additionalProperties": false,
                    "description": "Status of Verification Job",
                    "properties": {
                      "comment": {
                        "description": "Comment.",
                        "maxLength": 128,
                        "optional": 1,
                        "pattern": "/^[[:^cntrl:]]*$/",
                        "type": "string"
                      },
                      "id": {
                        "description": "Job ID.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "ignore-verified": {
                        "default": true,
                        "description": "Do not verify backups that are already verified if their verification is not outdated.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "last-run-endtime": {
                        "description": "Endtime of the last run.",
                        "optional": 1,
                        "type": "integer"
                      },
                      "last-run-state": {
                        "description": "Result of the last run.",
                        "optional": 1,
                        "type": "string"
                      },
                      "last-run-upid": {
                        "description": "Task UPID of the last run.",
                        "optional": 1,
                        "type": "string"
                      },
                      "max-depth": {
                        "default": 7,
                        "description": "How many levels of namespaces should be operated on (0 == no recursion)",
                        "maximum": 7,
                        "minimum": 0,
                        "optional": 1,
                        "type": "integer"
                      },
                      "next-run": {
                        "description": "Estimated time of the next run (UNIX epoch).",
                        "optional": 1,
                        "type": "integer"
                      },
                      "ns": {
                        "description": "Namespace.",
                        "maxLength": 256,
                        "optional": 1,
                        "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                        "type": "string"
                      },
                      "outdated-after": {
                        "description": "Days after that a verification becomes outdated. (0 is deprecated)'",
                        "minimum": 0,
                        "optional": 1,
                        "type": "integer"
                      },
                      "schedule": {
                        "description": "Run verify job at specified schedule.",
                        "optional": 1,
                        "type": "string",
                        "typetext": "<calendar-event>"
                      },
                      "store": {
                        "description": "Datastore name.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "leaf": 0,
            "path": "/admin/verify",
            "text": "verify"
          }
        ],
        "info": {
          "GET": {
            "description": "Directory index.",
            "method": "GET",
            "parameters": {
              "additionalProperties": true,
              "description": "Directory index.",
              "properties": {}
            },
            "permissions": {
              "user": "all"
            },
            "returns": {
              "type": "null"
            }
          }
        },
        "leaf": 0,
        "path": "/admin",
        "text": "admin"
      },
      {
        "info": {
          "GET": {
            "description": "Upgraded to backup protocol ('proxmox-backup-protocol-v1').",
            "method": "DOWNLOAD",
            "parameters": {
              "additionalProperties": false,
              "description": "Upgraded to backup protocol ('proxmox-backup-protocol-v1').",
              "properties": {
                "backup-id": {
                  "description": "Backup ID.",
                  "pattern": "/^[A-Za-z0-9_][A-Za-z0-9._\\-]*$/",
                  "type": "string"
                },
                "backup-time": {
                  "description": "Backup time (Unix epoch.)",
                  "minimum": 1,
                  "type": "integer"
                },
                "backup-type": {
                  "description": "Backup type.",
                  "enum": [
                    "vm",
                    "ct",
                    "host"
                  ],
                  "type": "string"
                },
                "benchmark": {
                  "description": "Job is a benchmark (do not keep data).",
                  "optional": 1,
                  "type": "boolean"
                },
                "debug": {
                  "description": "Enable verbose debug logging.",
                  "optional": 1,
                  "type": "boolean"
                },
                "no-cache": {
                  "description": "Disable local datastore cache for network storages",
                  "optional": 1,
                  "type": "boolean"
                },
                "ns": {
                  "description": "Namespace.",
                  "maxLength": 256,
                  "optional": 1,
                  "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                  "type": "string"
                },
                "store": {
                  "description": "Datastore name.",
                  "maxLength": 32,
                  "minLength": 3,
                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                  "type": "string"
                }
              }
            },
            "permissions": {
              "description": "Requires on /datastore/{store}[/{namespace}] DATASTORE_BACKUP and being the owner of the group",
              "user": "all"
            },
            "returns": {
              "type": "null"
            }
          }
        },
        "leaf": 1,
        "path": "/backup",
        "text": "backup"
      },
      {
        "children": [
          {
            "children": [
              {
                "children": [
                  {
                    "info": {
                      "DELETE": {
                        "description": "Remove an LDAP realm configuration",
                        "method": "DELETE",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Remove an LDAP realm configuration",
                          "properties": {
                            "digest": {
                              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                              "optional": 1,
                              "pattern": "/^[a-f0-9]{64}$/",
                              "type": "string"
                            },
                            "realm": {
                              "description": "Realm name.",
                              "maxLength": 32,
                              "minLength": 2,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "access",
                              "domains"
                            ],
                            "privs": [
                              "Realm.Allocate"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      },
                      "GET": {
                        "description": "Read the AD realm configuration",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Read the AD realm configuration",
                          "properties": {
                            "realm": {
                              "description": "Realm name.",
                              "maxLength": 32,
                              "minLength": 2,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "access",
                              "domains"
                            ],
                            "privs": [
                              "Sys.Audit"
                            ]
                          }
                        },
                        "returns": {
                          "additionalProperties": false,
                          "description": "AD realm configuration properties.",
                          "properties": {
                            "base-dn": {
                              "description": "LDAP Domain",
                              "optional": 1,
                              "type": "string"
                            },
                            "bind-dn": {
                              "description": "LDAP Domain",
                              "optional": 1,
                              "type": "string"
                            },
                            "capath": {
                              "description": "CA certificate to use for the server. The path can point to\neither a file, or a directory. If it points to a file,\nthe PEM-formatted X.509 certificate stored at the path\nwill be added as a trusted certificate.\nIf the path points to a directory,\nthe directory replaces the system's default certificate\nstore at `/etc/ssl/certs` - Every file in the directory\nwill be loaded as a trusted certificate.",
                              "optional": 1,
                              "type": "string"
                            },
                            "comment": {
                              "description": "Comment.",
                              "maxLength": 128,
                              "optional": 1,
                              "pattern": "/^[[:^cntrl:]]*$/",
                              "type": "string"
                            },
                            "default": {
                              "default": false,
                              "description": "True if you want this to be the default realm selected on login.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "filter": {
                              "description": "Custom LDAP search filter for user sync",
                              "optional": 1,
                              "type": "string"
                            },
                            "mode": {
                              "default": "ldap",
                              "description": "LDAP connection type",
                              "enum": [
                                "ldap",
                                "ldap+starttls",
                                "ldaps"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "port": {
                              "description": "AD server Port",
                              "maximum": 65535,
                              "minimum": 0,
                              "optional": 1,
                              "type": "integer"
                            },
                            "realm": {
                              "description": "Realm name.",
                              "maxLength": 32,
                              "minLength": 2,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "server1": {
                              "description": "AD server address",
                              "type": "string"
                            },
                            "server2": {
                              "description": "Fallback AD server address",
                              "optional": 1,
                              "type": "string"
                            },
                            "sync-attributes": {
                              "description": "Comma-separated list of key=value pairs for specifying which LDAP attributes map to which PBS user field. For example, to map the LDAP attribute ``mail`` to PBS's ``email``, write ``email=mail``.",
                              "format": {
                                "additionalProperties": false,
                                "description": "Determine which LDAP attributes should be synced to which user attributes",
                                "properties": {
                                  "email": {
                                    "description": "Name of the LDAP attribute containing the user's email address",
                                    "optional": 1,
                                    "type": "string"
                                  },
                                  "firstname": {
                                    "description": "Name of the LDAP attribute containing the user's first name",
                                    "optional": 1,
                                    "type": "string"
                                  },
                                  "lastname": {
                                    "description": "Name of the LDAP attribute containing the user's last name",
                                    "optional": 1,
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[[email=<string>] [,firstname=<string>] [,lastname=<string>]]"
                            },
                            "sync-defaults-options": {
                              "description": "sync defaults options",
                              "format": {
                                "additionalProperties": false,
                                "description": "Default options for LDAP synchronization runs",
                                "properties": {
                                  "enable-new": {
                                    "description": "Enable new users after sync",
                                    "optional": 1,
                                    "type": "boolean"
                                  },
                                  "remove-vanished": {
                                    "description": "A semicolon-separated list of things to remove when they or the user vanishes during user synchronization. The following values are possible: ``entry`` removes the user when not returned from the sync; ``properties`` removes any  properties on existing user that do not appear in the source. ``acl`` removes ACLs when the user is not returned from the sync.",
                                    "format": {
                                      "description": "Array of remove-vanished options",
                                      "items": {
                                        "description": "remove-vanished options",
                                        "enum": [
                                          "acl",
                                          "entry",
                                          "properties"
                                        ],
                                        "type": "string"
                                      },
                                      "maxLength": 1,
                                      "minLength": 1,
                                      "type": "array"
                                    },
                                    "optional": 1,
                                    "type": "string",
                                    "typetext": "[acl|entry|properties, ...]"
                                  }
                                },
                                "type": "object"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[[enable-new=<1|0>] [,remove-vanished=<string>]]"
                            },
                            "user-classes": {
                              "default": "inetorgperson,posixaccount,person,user",
                              "description": "Comma-separated list of allowed objectClass values for user synchronization. For instance, if ``user-classes`` is set to ``person,user``, then user synchronization will consider all LDAP entities where ``objectClass: person`` `or` ``objectClass: user``.",
                              "format": {
                                "description": "Array of user classes",
                                "items": {
                                  "description": "user class",
                                  "type": "string"
                                },
                                "maxLength": 1,
                                "minLength": 1,
                                "type": "array"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[<string>, ...]"
                            },
                            "verify": {
                              "default": false,
                              "description": "Verify server certificate",
                              "optional": 1,
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "PUT": {
                        "description": "Update an AD realm configuration",
                        "method": "PUT",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Update an AD realm configuration",
                          "properties": {
                            "base-dn": {
                              "description": "LDAP Domain",
                              "optional": 1,
                              "type": "string"
                            },
                            "bind-dn": {
                              "description": "LDAP Domain",
                              "optional": 1,
                              "type": "string"
                            },
                            "capath": {
                              "description": "CA certificate to use for the server. The path can point to\neither a file, or a directory. If it points to a file,\nthe PEM-formatted X.509 certificate stored at the path\nwill be added as a trusted certificate.\nIf the path points to a directory,\nthe directory replaces the system's default certificate\nstore at `/etc/ssl/certs` - Every file in the directory\nwill be loaded as a trusted certificate.",
                              "optional": 1,
                              "type": "string"
                            },
                            "comment": {
                              "description": "Comment.",
                              "maxLength": 128,
                              "optional": 1,
                              "pattern": "/^[[:^cntrl:]]*$/",
                              "type": "string"
                            },
                            "default": {
                              "default": false,
                              "description": "True if you want this to be the default realm selected on login.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "delete": {
                              "description": "List of properties to delete.",
                              "items": {
                                "description": "Deletable property name",
                                "enum": [
                                  "server2",
                                  "port",
                                  "comment",
                                  "default",
                                  "verify",
                                  "mode",
                                  "bind-dn",
                                  "password",
                                  "filter",
                                  "sync-defaults-options",
                                  "sync-attributes",
                                  "user-classes"
                                ],
                                "type": "string"
                              },
                              "optional": 1,
                              "type": "array"
                            },
                            "digest": {
                              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                              "optional": 1,
                              "pattern": "/^[a-f0-9]{64}$/",
                              "type": "string"
                            },
                            "filter": {
                              "description": "Custom LDAP search filter for user sync",
                              "optional": 1,
                              "type": "string"
                            },
                            "mode": {
                              "default": "ldap",
                              "description": "LDAP connection type",
                              "enum": [
                                "ldap",
                                "ldap+starttls",
                                "ldaps"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "password": {
                              "description": "AD bind password",
                              "optional": 1,
                              "type": "string"
                            },
                            "port": {
                              "description": "AD server Port",
                              "maximum": 65535,
                              "minimum": 0,
                              "optional": 1,
                              "type": "integer"
                            },
                            "realm": {
                              "description": "Realm name.",
                              "maxLength": 32,
                              "minLength": 2,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "server1": {
                              "description": "AD server address",
                              "optional": 1,
                              "type": "string"
                            },
                            "server2": {
                              "description": "Fallback AD server address",
                              "optional": 1,
                              "type": "string"
                            },
                            "sync-attributes": {
                              "description": "Comma-separated list of key=value pairs for specifying which LDAP attributes map to which PBS user field. For example, to map the LDAP attribute ``mail`` to PBS's ``email``, write ``email=mail``.",
                              "format": {
                                "additionalProperties": false,
                                "description": "Determine which LDAP attributes should be synced to which user attributes",
                                "properties": {
                                  "email": {
                                    "description": "Name of the LDAP attribute containing the user's email address",
                                    "optional": 1,
                                    "type": "string"
                                  },
                                  "firstname": {
                                    "description": "Name of the LDAP attribute containing the user's first name",
                                    "optional": 1,
                                    "type": "string"
                                  },
                                  "lastname": {
                                    "description": "Name of the LDAP attribute containing the user's last name",
                                    "optional": 1,
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[[email=<string>] [,firstname=<string>] [,lastname=<string>]]"
                            },
                            "sync-defaults-options": {
                              "description": "sync defaults options",
                              "format": {
                                "additionalProperties": false,
                                "description": "Default options for LDAP synchronization runs",
                                "properties": {
                                  "enable-new": {
                                    "description": "Enable new users after sync",
                                    "optional": 1,
                                    "type": "boolean"
                                  },
                                  "remove-vanished": {
                                    "description": "A semicolon-separated list of things to remove when they or the user vanishes during user synchronization. The following values are possible: ``entry`` removes the user when not returned from the sync; ``properties`` removes any  properties on existing user that do not appear in the source. ``acl`` removes ACLs when the user is not returned from the sync.",
                                    "format": {
                                      "description": "Array of remove-vanished options",
                                      "items": {
                                        "description": "remove-vanished options",
                                        "enum": [
                                          "acl",
                                          "entry",
                                          "properties"
                                        ],
                                        "type": "string"
                                      },
                                      "maxLength": 1,
                                      "minLength": 1,
                                      "type": "array"
                                    },
                                    "optional": 1,
                                    "type": "string",
                                    "typetext": "[acl|entry|properties, ...]"
                                  }
                                },
                                "type": "object"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[[enable-new=<1|0>] [,remove-vanished=<string>]]"
                            },
                            "user-classes": {
                              "default": "inetorgperson,posixaccount,person,user",
                              "description": "Comma-separated list of allowed objectClass values for user synchronization. For instance, if ``user-classes`` is set to ``person,user``, then user synchronization will consider all LDAP entities where ``objectClass: person`` `or` ``objectClass: user``.",
                              "format": {
                                "description": "Array of user classes",
                                "items": {
                                  "description": "user class",
                                  "type": "string"
                                },
                                "maxLength": 1,
                                "minLength": 1,
                                "type": "array"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[<string>, ...]"
                            },
                            "verify": {
                              "default": false,
                              "description": "Verify server certificate",
                              "optional": 1,
                              "type": "boolean"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "access",
                              "domains"
                            ],
                            "privs": [
                              "Realm.Allocate"
                            ]
                          }
                        },
                        "returns": {
                          "additionalProperties": false,
                          "description": "AD realm configuration properties.",
                          "properties": {
                            "base-dn": {
                              "description": "LDAP Domain",
                              "optional": 1,
                              "type": "string"
                            },
                            "bind-dn": {
                              "description": "LDAP Domain",
                              "optional": 1,
                              "type": "string"
                            },
                            "capath": {
                              "description": "CA certificate to use for the server. The path can point to\neither a file, or a directory. If it points to a file,\nthe PEM-formatted X.509 certificate stored at the path\nwill be added as a trusted certificate.\nIf the path points to a directory,\nthe directory replaces the system's default certificate\nstore at `/etc/ssl/certs` - Every file in the directory\nwill be loaded as a trusted certificate.",
                              "optional": 1,
                              "type": "string"
                            },
                            "comment": {
                              "description": "Comment.",
                              "maxLength": 128,
                              "optional": 1,
                              "pattern": "/^[[:^cntrl:]]*$/",
                              "type": "string"
                            },
                            "default": {
                              "default": false,
                              "description": "True if you want this to be the default realm selected on login.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "filter": {
                              "description": "Custom LDAP search filter for user sync",
                              "optional": 1,
                              "type": "string"
                            },
                            "mode": {
                              "default": "ldap",
                              "description": "LDAP connection type",
                              "enum": [
                                "ldap",
                                "ldap+starttls",
                                "ldaps"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "port": {
                              "description": "AD server Port",
                              "maximum": 65535,
                              "minimum": 0,
                              "optional": 1,
                              "type": "integer"
                            },
                            "realm": {
                              "description": "Realm name.",
                              "maxLength": 32,
                              "minLength": 2,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "server1": {
                              "description": "AD server address",
                              "type": "string"
                            },
                            "server2": {
                              "description": "Fallback AD server address",
                              "optional": 1,
                              "type": "string"
                            },
                            "sync-attributes": {
                              "description": "Comma-separated list of key=value pairs for specifying which LDAP attributes map to which PBS user field. For example, to map the LDAP attribute ``mail`` to PBS's ``email``, write ``email=mail``.",
                              "format": {
                                "additionalProperties": false,
                                "description": "Determine which LDAP attributes should be synced to which user attributes",
                                "properties": {
                                  "email": {
                                    "description": "Name of the LDAP attribute containing the user's email address",
                                    "optional": 1,
                                    "type": "string"
                                  },
                                  "firstname": {
                                    "description": "Name of the LDAP attribute containing the user's first name",
                                    "optional": 1,
                                    "type": "string"
                                  },
                                  "lastname": {
                                    "description": "Name of the LDAP attribute containing the user's last name",
                                    "optional": 1,
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[[email=<string>] [,firstname=<string>] [,lastname=<string>]]"
                            },
                            "sync-defaults-options": {
                              "description": "sync defaults options",
                              "format": {
                                "additionalProperties": false,
                                "description": "Default options for LDAP synchronization runs",
                                "properties": {
                                  "enable-new": {
                                    "description": "Enable new users after sync",
                                    "optional": 1,
                                    "type": "boolean"
                                  },
                                  "remove-vanished": {
                                    "description": "A semicolon-separated list of things to remove when they or the user vanishes during user synchronization. The following values are possible: ``entry`` removes the user when not returned from the sync; ``properties`` removes any  properties on existing user that do not appear in the source. ``acl`` removes ACLs when the user is not returned from the sync.",
                                    "format": {
                                      "description": "Array of remove-vanished options",
                                      "items": {
                                        "description": "remove-vanished options",
                                        "enum": [
                                          "acl",
                                          "entry",
                                          "properties"
                                        ],
                                        "type": "string"
                                      },
                                      "maxLength": 1,
                                      "minLength": 1,
                                      "type": "array"
                                    },
                                    "optional": 1,
                                    "type": "string",
                                    "typetext": "[acl|entry|properties, ...]"
                                  }
                                },
                                "type": "object"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[[enable-new=<1|0>] [,remove-vanished=<string>]]"
                            },
                            "user-classes": {
                              "default": "inetorgperson,posixaccount,person,user",
                              "description": "Comma-separated list of allowed objectClass values for user synchronization. For instance, if ``user-classes`` is set to ``person,user``, then user synchronization will consider all LDAP entities where ``objectClass: person`` `or` ``objectClass: user``.",
                              "format": {
                                "description": "Array of user classes",
                                "items": {
                                  "description": "user class",
                                  "type": "string"
                                },
                                "maxLength": 1,
                                "minLength": 1,
                                "type": "array"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[<string>, ...]"
                            },
                            "verify": {
                              "default": false,
                              "description": "Verify server certificate",
                              "optional": 1,
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/config/access/ad/{realm}",
                    "text": "{realm}"
                  }
                ],
                "info": {
                  "GET": {
                    "description": "List configured AD realms",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "List configured AD realms",
                      "properties": {}
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "access",
                          "domains"
                        ],
                        "privs": [
                          "Realm.Allocate"
                        ]
                      }
                    },
                    "returns": {
                      "description": "List of configured AD realms.",
                      "items": {
                        "additionalProperties": false,
                        "description": "AD realm configuration properties.",
                        "properties": {
                          "base-dn": {
                            "description": "LDAP Domain",
                            "optional": 1,
                            "type": "string"
                          },
                          "bind-dn": {
                            "description": "LDAP Domain",
                            "optional": 1,
                            "type": "string"
                          },
                          "capath": {
                            "description": "CA certificate to use for the server. The path can point to\neither a file, or a directory. If it points to a file,\nthe PEM-formatted X.509 certificate stored at the path\nwill be added as a trusted certificate.\nIf the path points to a directory,\nthe directory replaces the system's default certificate\nstore at `/etc/ssl/certs` - Every file in the directory\nwill be loaded as a trusted certificate.",
                            "optional": 1,
                            "type": "string"
                          },
                          "comment": {
                            "description": "Comment.",
                            "maxLength": 128,
                            "optional": 1,
                            "pattern": "/^[[:^cntrl:]]*$/",
                            "type": "string"
                          },
                          "default": {
                            "default": false,
                            "description": "True if you want this to be the default realm selected on login.",
                            "optional": 1,
                            "type": "boolean"
                          },
                          "filter": {
                            "description": "Custom LDAP search filter for user sync",
                            "optional": 1,
                            "type": "string"
                          },
                          "mode": {
                            "default": "ldap",
                            "description": "LDAP connection type",
                            "enum": [
                              "ldap",
                              "ldap+starttls",
                              "ldaps"
                            ],
                            "optional": 1,
                            "type": "string"
                          },
                          "port": {
                            "description": "AD server Port",
                            "maximum": 65535,
                            "minimum": 0,
                            "optional": 1,
                            "type": "integer"
                          },
                          "realm": {
                            "description": "Realm name.",
                            "maxLength": 32,
                            "minLength": 2,
                            "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                            "type": "string"
                          },
                          "server1": {
                            "description": "AD server address",
                            "type": "string"
                          },
                          "server2": {
                            "description": "Fallback AD server address",
                            "optional": 1,
                            "type": "string"
                          },
                          "sync-attributes": {
                            "description": "Comma-separated list of key=value pairs for specifying which LDAP attributes map to which PBS user field. For example, to map the LDAP attribute ``mail`` to PBS's ``email``, write ``email=mail``.",
                            "format": {
                              "additionalProperties": false,
                              "description": "Determine which LDAP attributes should be synced to which user attributes",
                              "properties": {
                                "email": {
                                  "description": "Name of the LDAP attribute containing the user's email address",
                                  "optional": 1,
                                  "type": "string"
                                },
                                "firstname": {
                                  "description": "Name of the LDAP attribute containing the user's first name",
                                  "optional": 1,
                                  "type": "string"
                                },
                                "lastname": {
                                  "description": "Name of the LDAP attribute containing the user's last name",
                                  "optional": 1,
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "optional": 1,
                            "type": "string",
                            "typetext": "[[email=<string>] [,firstname=<string>] [,lastname=<string>]]"
                          },
                          "sync-defaults-options": {
                            "description": "sync defaults options",
                            "format": {
                              "additionalProperties": false,
                              "description": "Default options for LDAP synchronization runs",
                              "properties": {
                                "enable-new": {
                                  "description": "Enable new users after sync",
                                  "optional": 1,
                                  "type": "boolean"
                                },
                                "remove-vanished": {
                                  "description": "A semicolon-separated list of things to remove when they or the user vanishes during user synchronization. The following values are possible: ``entry`` removes the user when not returned from the sync; ``properties`` removes any  properties on existing user that do not appear in the source. ``acl`` removes ACLs when the user is not returned from the sync.",
                                  "format": {
                                    "description": "Array of remove-vanished options",
                                    "items": {
                                      "description": "remove-vanished options",
                                      "enum": [
                                        "acl",
                                        "entry",
                                        "properties"
                                      ],
                                      "type": "string"
                                    },
                                    "maxLength": 1,
                                    "minLength": 1,
                                    "type": "array"
                                  },
                                  "optional": 1,
                                  "type": "string",
                                  "typetext": "[acl|entry|properties, ...]"
                                }
                              },
                              "type": "object"
                            },
                            "optional": 1,
                            "type": "string",
                            "typetext": "[[enable-new=<1|0>] [,remove-vanished=<string>]]"
                          },
                          "user-classes": {
                            "default": "inetorgperson,posixaccount,person,user",
                            "description": "Comma-separated list of allowed objectClass values for user synchronization. For instance, if ``user-classes`` is set to ``person,user``, then user synchronization will consider all LDAP entities where ``objectClass: person`` `or` ``objectClass: user``.",
                            "format": {
                              "description": "Array of user classes",
                              "items": {
                                "description": "user class",
                                "type": "string"
                              },
                              "maxLength": 1,
                              "minLength": 1,
                              "type": "array"
                            },
                            "optional": 1,
                            "type": "string",
                            "typetext": "[<string>, ...]"
                          },
                          "verify": {
                            "default": false,
                            "description": "Verify server certificate",
                            "optional": 1,
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "POST": {
                    "description": "Create a new AD realm",
                    "method": "POST",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Create a new AD realm",
                      "properties": {
                        "base-dn": {
                          "description": "LDAP Domain",
                          "optional": 1,
                          "type": "string"
                        },
                        "bind-dn": {
                          "description": "LDAP Domain",
                          "optional": 1,
                          "type": "string"
                        },
                        "capath": {
                          "description": "CA certificate to use for the server. The path can point to\neither a file, or a directory. If it points to a file,\nthe PEM-formatted X.509 certificate stored at the path\nwill be added as a trusted certificate.\nIf the path points to a directory,\nthe directory replaces the system's default certificate\nstore at `/etc/ssl/certs` - Every file in the directory\nwill be loaded as a trusted certificate.",
                          "optional": 1,
                          "type": "string"
                        },
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "default": {
                          "default": false,
                          "description": "True if you want this to be the default realm selected on login.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "filter": {
                          "description": "Custom LDAP search filter for user sync",
                          "optional": 1,
                          "type": "string"
                        },
                        "mode": {
                          "default": "ldap",
                          "description": "LDAP connection type",
                          "enum": [
                            "ldap",
                            "ldap+starttls",
                            "ldaps"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "password": {
                          "description": "AD bind password",
                          "optional": 1,
                          "type": "string"
                        },
                        "port": {
                          "description": "AD server Port",
                          "maximum": 65535,
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "realm": {
                          "description": "Realm name.",
                          "maxLength": 32,
                          "minLength": 2,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "server1": {
                          "description": "AD server address",
                          "type": "string"
                        },
                        "server2": {
                          "description": "Fallback AD server address",
                          "optional": 1,
                          "type": "string"
                        },
                        "sync-attributes": {
                          "description": "Comma-separated list of key=value pairs for specifying which LDAP attributes map to which PBS user field. For example, to map the LDAP attribute ``mail`` to PBS's ``email``, write ``email=mail``.",
                          "format": {
                            "additionalProperties": false,
                            "description": "Determine which LDAP attributes should be synced to which user attributes",
                            "properties": {
                              "email": {
                                "description": "Name of the LDAP attribute containing the user's email address",
                                "optional": 1,
                                "type": "string"
                              },
                              "firstname": {
                                "description": "Name of the LDAP attribute containing the user's first name",
                                "optional": 1,
                                "type": "string"
                              },
                              "lastname": {
                                "description": "Name of the LDAP attribute containing the user's last name",
                                "optional": 1,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[[email=<string>] [,firstname=<string>] [,lastname=<string>]]"
                        },
                        "sync-defaults-options": {
                          "description": "sync defaults options",
                          "format": {
                            "additionalProperties": false,
                            "description": "Default options for LDAP synchronization runs",
                            "properties": {
                              "enable-new": {
                                "description": "Enable new users after sync",
                                "optional": 1,
                                "type": "boolean"
                              },
                              "remove-vanished": {
                                "description": "A semicolon-separated list of things to remove when they or the user vanishes during user synchronization. The following values are possible: ``entry`` removes the user when not returned from the sync; ``properties`` removes any  properties on existing user that do not appear in the source. ``acl`` removes ACLs when the user is not returned from the sync.",
                                "format": {
                                  "description": "Array of remove-vanished options",
                                  "items": {
                                    "description": "remove-vanished options",
                                    "enum": [
                                      "acl",
                                      "entry",
                                      "properties"
                                    ],
                                    "type": "string"
                                  },
                                  "maxLength": 1,
                                  "minLength": 1,
                                  "type": "array"
                                },
                                "optional": 1,
                                "type": "string",
                                "typetext": "[acl|entry|properties, ...]"
                              }
                            },
                            "type": "object"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[[enable-new=<1|0>] [,remove-vanished=<string>]]"
                        },
                        "user-classes": {
                          "default": "inetorgperson,posixaccount,person,user",
                          "description": "Comma-separated list of allowed objectClass values for user synchronization. For instance, if ``user-classes`` is set to ``person,user``, then user synchronization will consider all LDAP entities where ``objectClass: person`` `or` ``objectClass: user``.",
                          "format": {
                            "description": "Array of user classes",
                            "items": {
                              "description": "user class",
                              "type": "string"
                            },
                            "maxLength": 1,
                            "minLength": 1,
                            "type": "array"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[<string>, ...]"
                        },
                        "verify": {
                          "default": false,
                          "description": "Verify server certificate",
                          "optional": 1,
                          "type": "boolean"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "access",
                          "domains"
                        ],
                        "privs": [
                          "Realm.Allocate"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 0,
                "path": "/config/access/ad",
                "text": "ad"
              },
              {
                "children": [
                  {
                    "info": {
                      "DELETE": {
                        "description": "Remove an LDAP realm configuration",
                        "method": "DELETE",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Remove an LDAP realm configuration",
                          "properties": {
                            "digest": {
                              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                              "optional": 1,
                              "pattern": "/^[a-f0-9]{64}$/",
                              "type": "string"
                            },
                            "realm": {
                              "description": "Realm name.",
                              "maxLength": 32,
                              "minLength": 2,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "access",
                              "domains"
                            ],
                            "privs": [
                              "Realm.Allocate"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      },
                      "GET": {
                        "description": "Read the LDAP realm configuration",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Read the LDAP realm configuration",
                          "properties": {
                            "realm": {
                              "description": "Realm name.",
                              "maxLength": 32,
                              "minLength": 2,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "access",
                              "domains"
                            ],
                            "privs": [
                              "Sys.Audit"
                            ]
                          }
                        },
                        "returns": {
                          "additionalProperties": false,
                          "description": "LDAP configuration properties.",
                          "properties": {
                            "base-dn": {
                              "description": "LDAP Domain",
                              "type": "string"
                            },
                            "bind-dn": {
                              "description": "LDAP Domain",
                              "optional": 1,
                              "type": "string"
                            },
                            "capath": {
                              "description": "CA certificate to use for the server. The path can point to\neither a file, or a directory. If it points to a file,\nthe PEM-formatted X.509 certificate stored at the path\nwill be added as a trusted certificate.\nIf the path points to a directory,\nthe directory replaces the system's default certificate\nstore at `/etc/ssl/certs` - Every file in the directory\nwill be loaded as a trusted certificate.",
                              "optional": 1,
                              "type": "string"
                            },
                            "comment": {
                              "description": "Comment.",
                              "maxLength": 128,
                              "optional": 1,
                              "pattern": "/^[[:^cntrl:]]*$/",
                              "type": "string"
                            },
                            "default": {
                              "default": false,
                              "description": "True if you want this to be the default realm selected on login.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "filter": {
                              "description": "Custom LDAP search filter for user sync",
                              "optional": 1,
                              "type": "string"
                            },
                            "mode": {
                              "default": "ldap",
                              "description": "LDAP connection type",
                              "enum": [
                                "ldap",
                                "ldap+starttls",
                                "ldaps"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "port": {
                              "description": "Port",
                              "maximum": 65535,
                              "minimum": 0,
                              "optional": 1,
                              "type": "integer"
                            },
                            "realm": {
                              "description": "Realm name.",
                              "maxLength": 32,
                              "minLength": 2,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "server1": {
                              "description": "LDAP server address",
                              "type": "string"
                            },
                            "server2": {
                              "description": "Fallback LDAP server address",
                              "optional": 1,
                              "type": "string"
                            },
                            "sync-attributes": {
                              "description": "Comma-separated list of key=value pairs for specifying which LDAP attributes map to which PBS user field. For example, to map the LDAP attribute ``mail`` to PBS's ``email``, write ``email=mail``.",
                              "format": {
                                "additionalProperties": false,
                                "description": "Determine which LDAP attributes should be synced to which user attributes",
                                "properties": {
                                  "email": {
                                    "description": "Name of the LDAP attribute containing the user's email address",
                                    "optional": 1,
                                    "type": "string"
                                  },
                                  "firstname": {
                                    "description": "Name of the LDAP attribute containing the user's first name",
                                    "optional": 1,
                                    "type": "string"
                                  },
                                  "lastname": {
                                    "description": "Name of the LDAP attribute containing the user's last name",
                                    "optional": 1,
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[[email=<string>] [,firstname=<string>] [,lastname=<string>]]"
                            },
                            "sync-defaults-options": {
                              "description": "sync defaults options",
                              "format": {
                                "additionalProperties": false,
                                "description": "Default options for LDAP synchronization runs",
                                "properties": {
                                  "enable-new": {
                                    "description": "Enable new users after sync",
                                    "optional": 1,
                                    "type": "boolean"
                                  },
                                  "remove-vanished": {
                                    "description": "A semicolon-separated list of things to remove when they or the user vanishes during user synchronization. The following values are possible: ``entry`` removes the user when not returned from the sync; ``properties`` removes any  properties on existing user that do not appear in the source. ``acl`` removes ACLs when the user is not returned from the sync.",
                                    "format": {
                                      "description": "Array of remove-vanished options",
                                      "items": {
                                        "description": "remove-vanished options",
                                        "enum": [
                                          "acl",
                                          "entry",
                                          "properties"
                                        ],
                                        "type": "string"
                                      },
                                      "maxLength": 1,
                                      "minLength": 1,
                                      "type": "array"
                                    },
                                    "optional": 1,
                                    "type": "string",
                                    "typetext": "[acl|entry|properties, ...]"
                                  }
                                },
                                "type": "object"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[[enable-new=<1|0>] [,remove-vanished=<string>]]"
                            },
                            "user-attr": {
                              "description": "Username attribute. Used to map a ``userid`` to LDAP to an LDAP ``dn``.",
                              "type": "string"
                            },
                            "user-classes": {
                              "default": "inetorgperson,posixaccount,person,user",
                              "description": "Comma-separated list of allowed objectClass values for user synchronization. For instance, if ``user-classes`` is set to ``person,user``, then user synchronization will consider all LDAP entities where ``objectClass: person`` `or` ``objectClass: user``.",
                              "format": {
                                "description": "Array of user classes",
                                "items": {
                                  "description": "user class",
                                  "type": "string"
                                },
                                "maxLength": 1,
                                "minLength": 1,
                                "type": "array"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[<string>, ...]"
                            },
                            "verify": {
                              "default": false,
                              "description": "Verify server certificate",
                              "optional": 1,
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "PUT": {
                        "description": "Update an LDAP realm configuration",
                        "method": "PUT",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Update an LDAP realm configuration",
                          "properties": {
                            "base-dn": {
                              "description": "LDAP Domain",
                              "optional": 1,
                              "type": "string"
                            },
                            "bind-dn": {
                              "description": "LDAP Domain",
                              "optional": 1,
                              "type": "string"
                            },
                            "capath": {
                              "description": "CA certificate to use for the server. The path can point to\neither a file, or a directory. If it points to a file,\nthe PEM-formatted X.509 certificate stored at the path\nwill be added as a trusted certificate.\nIf the path points to a directory,\nthe directory replaces the system's default certificate\nstore at `/etc/ssl/certs` - Every file in the directory\nwill be loaded as a trusted certificate.",
                              "optional": 1,
                              "type": "string"
                            },
                            "comment": {
                              "description": "Comment.",
                              "maxLength": 128,
                              "optional": 1,
                              "pattern": "/^[[:^cntrl:]]*$/",
                              "type": "string"
                            },
                            "default": {
                              "default": false,
                              "description": "True if you want this to be the default realm selected on login.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "delete": {
                              "description": "List of properties to delete.",
                              "items": {
                                "description": "Deletable property name",
                                "enum": [
                                  "server2",
                                  "port",
                                  "comment",
                                  "default",
                                  "verify",
                                  "mode",
                                  "bind-dn",
                                  "password",
                                  "filter",
                                  "sync-defaults-options",
                                  "sync-attributes",
                                  "user-classes"
                                ],
                                "type": "string"
                              },
                              "optional": 1,
                              "type": "array"
                            },
                            "digest": {
                              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                              "optional": 1,
                              "pattern": "/^[a-f0-9]{64}$/",
                              "type": "string"
                            },
                            "filter": {
                              "description": "Custom LDAP search filter for user sync",
                              "optional": 1,
                              "type": "string"
                            },
                            "mode": {
                              "default": "ldap",
                              "description": "LDAP connection type",
                              "enum": [
                                "ldap",
                                "ldap+starttls",
                                "ldaps"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "password": {
                              "description": "LDAP bind password",
                              "optional": 1,
                              "type": "string"
                            },
                            "port": {
                              "description": "Port",
                              "maximum": 65535,
                              "minimum": 0,
                              "optional": 1,
                              "type": "integer"
                            },
                            "realm": {
                              "description": "Realm name.",
                              "maxLength": 32,
                              "minLength": 2,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "server1": {
                              "description": "LDAP server address",
                              "optional": 1,
                              "type": "string"
                            },
                            "server2": {
                              "description": "Fallback LDAP server address",
                              "optional": 1,
                              "type": "string"
                            },
                            "sync-attributes": {
                              "description": "Comma-separated list of key=value pairs for specifying which LDAP attributes map to which PBS user field. For example, to map the LDAP attribute ``mail`` to PBS's ``email``, write ``email=mail``.",
                              "format": {
                                "additionalProperties": false,
                                "description": "Determine which LDAP attributes should be synced to which user attributes",
                                "properties": {
                                  "email": {
                                    "description": "Name of the LDAP attribute containing the user's email address",
                                    "optional": 1,
                                    "type": "string"
                                  },
                                  "firstname": {
                                    "description": "Name of the LDAP attribute containing the user's first name",
                                    "optional": 1,
                                    "type": "string"
                                  },
                                  "lastname": {
                                    "description": "Name of the LDAP attribute containing the user's last name",
                                    "optional": 1,
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[[email=<string>] [,firstname=<string>] [,lastname=<string>]]"
                            },
                            "sync-defaults-options": {
                              "description": "sync defaults options",
                              "format": {
                                "additionalProperties": false,
                                "description": "Default options for LDAP synchronization runs",
                                "properties": {
                                  "enable-new": {
                                    "description": "Enable new users after sync",
                                    "optional": 1,
                                    "type": "boolean"
                                  },
                                  "remove-vanished": {
                                    "description": "A semicolon-separated list of things to remove when they or the user vanishes during user synchronization. The following values are possible: ``entry`` removes the user when not returned from the sync; ``properties`` removes any  properties on existing user that do not appear in the source. ``acl`` removes ACLs when the user is not returned from the sync.",
                                    "format": {
                                      "description": "Array of remove-vanished options",
                                      "items": {
                                        "description": "remove-vanished options",
                                        "enum": [
                                          "acl",
                                          "entry",
                                          "properties"
                                        ],
                                        "type": "string"
                                      },
                                      "maxLength": 1,
                                      "minLength": 1,
                                      "type": "array"
                                    },
                                    "optional": 1,
                                    "type": "string",
                                    "typetext": "[acl|entry|properties, ...]"
                                  }
                                },
                                "type": "object"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[[enable-new=<1|0>] [,remove-vanished=<string>]]"
                            },
                            "user-attr": {
                              "description": "Username attribute. Used to map a ``userid`` to LDAP to an LDAP ``dn``.",
                              "optional": 1,
                              "type": "string"
                            },
                            "user-classes": {
                              "default": "inetorgperson,posixaccount,person,user",
                              "description": "Comma-separated list of allowed objectClass values for user synchronization. For instance, if ``user-classes`` is set to ``person,user``, then user synchronization will consider all LDAP entities where ``objectClass: person`` `or` ``objectClass: user``.",
                              "format": {
                                "description": "Array of user classes",
                                "items": {
                                  "description": "user class",
                                  "type": "string"
                                },
                                "maxLength": 1,
                                "minLength": 1,
                                "type": "array"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[<string>, ...]"
                            },
                            "verify": {
                              "default": false,
                              "description": "Verify server certificate",
                              "optional": 1,
                              "type": "boolean"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "access",
                              "domains"
                            ],
                            "privs": [
                              "Realm.Allocate"
                            ]
                          }
                        },
                        "returns": {
                          "additionalProperties": false,
                          "description": "LDAP configuration properties.",
                          "properties": {
                            "base-dn": {
                              "description": "LDAP Domain",
                              "type": "string"
                            },
                            "bind-dn": {
                              "description": "LDAP Domain",
                              "optional": 1,
                              "type": "string"
                            },
                            "capath": {
                              "description": "CA certificate to use for the server. The path can point to\neither a file, or a directory. If it points to a file,\nthe PEM-formatted X.509 certificate stored at the path\nwill be added as a trusted certificate.\nIf the path points to a directory,\nthe directory replaces the system's default certificate\nstore at `/etc/ssl/certs` - Every file in the directory\nwill be loaded as a trusted certificate.",
                              "optional": 1,
                              "type": "string"
                            },
                            "comment": {
                              "description": "Comment.",
                              "maxLength": 128,
                              "optional": 1,
                              "pattern": "/^[[:^cntrl:]]*$/",
                              "type": "string"
                            },
                            "default": {
                              "default": false,
                              "description": "True if you want this to be the default realm selected on login.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "filter": {
                              "description": "Custom LDAP search filter for user sync",
                              "optional": 1,
                              "type": "string"
                            },
                            "mode": {
                              "default": "ldap",
                              "description": "LDAP connection type",
                              "enum": [
                                "ldap",
                                "ldap+starttls",
                                "ldaps"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "port": {
                              "description": "Port",
                              "maximum": 65535,
                              "minimum": 0,
                              "optional": 1,
                              "type": "integer"
                            },
                            "realm": {
                              "description": "Realm name.",
                              "maxLength": 32,
                              "minLength": 2,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "server1": {
                              "description": "LDAP server address",
                              "type": "string"
                            },
                            "server2": {
                              "description": "Fallback LDAP server address",
                              "optional": 1,
                              "type": "string"
                            },
                            "sync-attributes": {
                              "description": "Comma-separated list of key=value pairs for specifying which LDAP attributes map to which PBS user field. For example, to map the LDAP attribute ``mail`` to PBS's ``email``, write ``email=mail``.",
                              "format": {
                                "additionalProperties": false,
                                "description": "Determine which LDAP attributes should be synced to which user attributes",
                                "properties": {
                                  "email": {
                                    "description": "Name of the LDAP attribute containing the user's email address",
                                    "optional": 1,
                                    "type": "string"
                                  },
                                  "firstname": {
                                    "description": "Name of the LDAP attribute containing the user's first name",
                                    "optional": 1,
                                    "type": "string"
                                  },
                                  "lastname": {
                                    "description": "Name of the LDAP attribute containing the user's last name",
                                    "optional": 1,
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[[email=<string>] [,firstname=<string>] [,lastname=<string>]]"
                            },
                            "sync-defaults-options": {
                              "description": "sync defaults options",
                              "format": {
                                "additionalProperties": false,
                                "description": "Default options for LDAP synchronization runs",
                                "properties": {
                                  "enable-new": {
                                    "description": "Enable new users after sync",
                                    "optional": 1,
                                    "type": "boolean"
                                  },
                                  "remove-vanished": {
                                    "description": "A semicolon-separated list of things to remove when they or the user vanishes during user synchronization. The following values are possible: ``entry`` removes the user when not returned from the sync; ``properties`` removes any  properties on existing user that do not appear in the source. ``acl`` removes ACLs when the user is not returned from the sync.",
                                    "format": {
                                      "description": "Array of remove-vanished options",
                                      "items": {
                                        "description": "remove-vanished options",
                                        "enum": [
                                          "acl",
                                          "entry",
                                          "properties"
                                        ],
                                        "type": "string"
                                      },
                                      "maxLength": 1,
                                      "minLength": 1,
                                      "type": "array"
                                    },
                                    "optional": 1,
                                    "type": "string",
                                    "typetext": "[acl|entry|properties, ...]"
                                  }
                                },
                                "type": "object"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[[enable-new=<1|0>] [,remove-vanished=<string>]]"
                            },
                            "user-attr": {
                              "description": "Username attribute. Used to map a ``userid`` to LDAP to an LDAP ``dn``.",
                              "type": "string"
                            },
                            "user-classes": {
                              "default": "inetorgperson,posixaccount,person,user",
                              "description": "Comma-separated list of allowed objectClass values for user synchronization. For instance, if ``user-classes`` is set to ``person,user``, then user synchronization will consider all LDAP entities where ``objectClass: person`` `or` ``objectClass: user``.",
                              "format": {
                                "description": "Array of user classes",
                                "items": {
                                  "description": "user class",
                                  "type": "string"
                                },
                                "maxLength": 1,
                                "minLength": 1,
                                "type": "array"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[<string>, ...]"
                            },
                            "verify": {
                              "default": false,
                              "description": "Verify server certificate",
                              "optional": 1,
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/config/access/ldap/{realm}",
                    "text": "{realm}"
                  }
                ],
                "info": {
                  "GET": {
                    "description": "List configured LDAP realms",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "List configured LDAP realms",
                      "properties": {}
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "access",
                          "domains"
                        ],
                        "privs": [
                          "Realm.Allocate"
                        ]
                      }
                    },
                    "returns": {
                      "description": "List of configured LDAP realms.",
                      "items": {
                        "additionalProperties": false,
                        "description": "LDAP configuration properties.",
                        "properties": {
                          "base-dn": {
                            "description": "LDAP Domain",
                            "type": "string"
                          },
                          "bind-dn": {
                            "description": "LDAP Domain",
                            "optional": 1,
                            "type": "string"
                          },
                          "capath": {
                            "description": "CA certificate to use for the server. The path can point to\neither a file, or a directory. If it points to a file,\nthe PEM-formatted X.509 certificate stored at the path\nwill be added as a trusted certificate.\nIf the path points to a directory,\nthe directory replaces the system's default certificate\nstore at `/etc/ssl/certs` - Every file in the directory\nwill be loaded as a trusted certificate.",
                            "optional": 1,
                            "type": "string"
                          },
                          "comment": {
                            "description": "Comment.",
                            "maxLength": 128,
                            "optional": 1,
                            "pattern": "/^[[:^cntrl:]]*$/",
                            "type": "string"
                          },
                          "default": {
                            "default": false,
                            "description": "True if you want this to be the default realm selected on login.",
                            "optional": 1,
                            "type": "boolean"
                          },
                          "filter": {
                            "description": "Custom LDAP search filter for user sync",
                            "optional": 1,
                            "type": "string"
                          },
                          "mode": {
                            "default": "ldap",
                            "description": "LDAP connection type",
                            "enum": [
                              "ldap",
                              "ldap+starttls",
                              "ldaps"
                            ],
                            "optional": 1,
                            "type": "string"
                          },
                          "port": {
                            "description": "Port",
                            "maximum": 65535,
                            "minimum": 0,
                            "optional": 1,
                            "type": "integer"
                          },
                          "realm": {
                            "description": "Realm name.",
                            "maxLength": 32,
                            "minLength": 2,
                            "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                            "type": "string"
                          },
                          "server1": {
                            "description": "LDAP server address",
                            "type": "string"
                          },
                          "server2": {
                            "description": "Fallback LDAP server address",
                            "optional": 1,
                            "type": "string"
                          },
                          "sync-attributes": {
                            "description": "Comma-separated list of key=value pairs for specifying which LDAP attributes map to which PBS user field. For example, to map the LDAP attribute ``mail`` to PBS's ``email``, write ``email=mail``.",
                            "format": {
                              "additionalProperties": false,
                              "description": "Determine which LDAP attributes should be synced to which user attributes",
                              "properties": {
                                "email": {
                                  "description": "Name of the LDAP attribute containing the user's email address",
                                  "optional": 1,
                                  "type": "string"
                                },
                                "firstname": {
                                  "description": "Name of the LDAP attribute containing the user's first name",
                                  "optional": 1,
                                  "type": "string"
                                },
                                "lastname": {
                                  "description": "Name of the LDAP attribute containing the user's last name",
                                  "optional": 1,
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "optional": 1,
                            "type": "string",
                            "typetext": "[[email=<string>] [,firstname=<string>] [,lastname=<string>]]"
                          },
                          "sync-defaults-options": {
                            "description": "sync defaults options",
                            "format": {
                              "additionalProperties": false,
                              "description": "Default options for LDAP synchronization runs",
                              "properties": {
                                "enable-new": {
                                  "description": "Enable new users after sync",
                                  "optional": 1,
                                  "type": "boolean"
                                },
                                "remove-vanished": {
                                  "description": "A semicolon-separated list of things to remove when they or the user vanishes during user synchronization. The following values are possible: ``entry`` removes the user when not returned from the sync; ``properties`` removes any  properties on existing user that do not appear in the source. ``acl`` removes ACLs when the user is not returned from the sync.",
                                  "format": {
                                    "description": "Array of remove-vanished options",
                                    "items": {
                                      "description": "remove-vanished options",
                                      "enum": [
                                        "acl",
                                        "entry",
                                        "properties"
                                      ],
                                      "type": "string"
                                    },
                                    "maxLength": 1,
                                    "minLength": 1,
                                    "type": "array"
                                  },
                                  "optional": 1,
                                  "type": "string",
                                  "typetext": "[acl|entry|properties, ...]"
                                }
                              },
                              "type": "object"
                            },
                            "optional": 1,
                            "type": "string",
                            "typetext": "[[enable-new=<1|0>] [,remove-vanished=<string>]]"
                          },
                          "user-attr": {
                            "description": "Username attribute. Used to map a ``userid`` to LDAP to an LDAP ``dn``.",
                            "type": "string"
                          },
                          "user-classes": {
                            "default": "inetorgperson,posixaccount,person,user",
                            "description": "Comma-separated list of allowed objectClass values for user synchronization. For instance, if ``user-classes`` is set to ``person,user``, then user synchronization will consider all LDAP entities where ``objectClass: person`` `or` ``objectClass: user``.",
                            "format": {
                              "description": "Array of user classes",
                              "items": {
                                "description": "user class",
                                "type": "string"
                              },
                              "maxLength": 1,
                              "minLength": 1,
                              "type": "array"
                            },
                            "optional": 1,
                            "type": "string",
                            "typetext": "[<string>, ...]"
                          },
                          "verify": {
                            "default": false,
                            "description": "Verify server certificate",
                            "optional": 1,
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "POST": {
                    "description": "Create a new LDAP realm",
                    "method": "POST",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Create a new LDAP realm",
                      "properties": {
                        "base-dn": {
                          "description": "LDAP Domain",
                          "type": "string"
                        },
                        "bind-dn": {
                          "description": "LDAP Domain",
                          "optional": 1,
                          "type": "string"
                        },
                        "capath": {
                          "description": "CA certificate to use for the server. The path can point to\neither a file, or a directory. If it points to a file,\nthe PEM-formatted X.509 certificate stored at the path\nwill be added as a trusted certificate.\nIf the path points to a directory,\nthe directory replaces the system's default certificate\nstore at `/etc/ssl/certs` - Every file in the directory\nwill be loaded as a trusted certificate.",
                          "optional": 1,
                          "type": "string"
                        },
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "default": {
                          "default": false,
                          "description": "True if you want this to be the default realm selected on login.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "filter": {
                          "description": "Custom LDAP search filter for user sync",
                          "optional": 1,
                          "type": "string"
                        },
                        "mode": {
                          "default": "ldap",
                          "description": "LDAP connection type",
                          "enum": [
                            "ldap",
                            "ldap+starttls",
                            "ldaps"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "password": {
                          "description": "LDAP bind password",
                          "optional": 1,
                          "type": "string"
                        },
                        "port": {
                          "description": "Port",
                          "maximum": 65535,
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "realm": {
                          "description": "Realm name.",
                          "maxLength": 32,
                          "minLength": 2,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "server1": {
                          "description": "LDAP server address",
                          "type": "string"
                        },
                        "server2": {
                          "description": "Fallback LDAP server address",
                          "optional": 1,
                          "type": "string"
                        },
                        "sync-attributes": {
                          "description": "Comma-separated list of key=value pairs for specifying which LDAP attributes map to which PBS user field. For example, to map the LDAP attribute ``mail`` to PBS's ``email``, write ``email=mail``.",
                          "format": {
                            "additionalProperties": false,
                            "description": "Determine which LDAP attributes should be synced to which user attributes",
                            "properties": {
                              "email": {
                                "description": "Name of the LDAP attribute containing the user's email address",
                                "optional": 1,
                                "type": "string"
                              },
                              "firstname": {
                                "description": "Name of the LDAP attribute containing the user's first name",
                                "optional": 1,
                                "type": "string"
                              },
                              "lastname": {
                                "description": "Name of the LDAP attribute containing the user's last name",
                                "optional": 1,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[[email=<string>] [,firstname=<string>] [,lastname=<string>]]"
                        },
                        "sync-defaults-options": {
                          "description": "sync defaults options",
                          "format": {
                            "additionalProperties": false,
                            "description": "Default options for LDAP synchronization runs",
                            "properties": {
                              "enable-new": {
                                "description": "Enable new users after sync",
                                "optional": 1,
                                "type": "boolean"
                              },
                              "remove-vanished": {
                                "description": "A semicolon-separated list of things to remove when they or the user vanishes during user synchronization. The following values are possible: ``entry`` removes the user when not returned from the sync; ``properties`` removes any  properties on existing user that do not appear in the source. ``acl`` removes ACLs when the user is not returned from the sync.",
                                "format": {
                                  "description": "Array of remove-vanished options",
                                  "items": {
                                    "description": "remove-vanished options",
                                    "enum": [
                                      "acl",
                                      "entry",
                                      "properties"
                                    ],
                                    "type": "string"
                                  },
                                  "maxLength": 1,
                                  "minLength": 1,
                                  "type": "array"
                                },
                                "optional": 1,
                                "type": "string",
                                "typetext": "[acl|entry|properties, ...]"
                              }
                            },
                            "type": "object"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[[enable-new=<1|0>] [,remove-vanished=<string>]]"
                        },
                        "user-attr": {
                          "description": "Username attribute. Used to map a ``userid`` to LDAP to an LDAP ``dn``.",
                          "type": "string"
                        },
                        "user-classes": {
                          "default": "inetorgperson,posixaccount,person,user",
                          "description": "Comma-separated list of allowed objectClass values for user synchronization. For instance, if ``user-classes`` is set to ``person,user``, then user synchronization will consider all LDAP entities where ``objectClass: person`` `or` ``objectClass: user``.",
                          "format": {
                            "description": "Array of user classes",
                            "items": {
                              "description": "user class",
                              "type": "string"
                            },
                            "maxLength": 1,
                            "minLength": 1,
                            "type": "array"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[<string>, ...]"
                        },
                        "verify": {
                          "default": false,
                          "description": "Verify server certificate",
                          "optional": 1,
                          "type": "boolean"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "access",
                          "domains"
                        ],
                        "privs": [
                          "Realm.Allocate"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 0,
                "path": "/config/access/ldap",
                "text": "ldap"
              },
              {
                "children": [
                  {
                    "info": {
                      "DELETE": {
                        "description": "Remove a OpenID realm configuration",
                        "method": "DELETE",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Remove a OpenID realm configuration",
                          "properties": {
                            "digest": {
                              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                              "optional": 1,
                              "pattern": "/^[a-f0-9]{64}$/",
                              "type": "string"
                            },
                            "realm": {
                              "description": "Realm name.",
                              "maxLength": 32,
                              "minLength": 2,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "access",
                              "domains"
                            ],
                            "privs": [
                              "Realm.Allocate"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      },
                      "GET": {
                        "description": "Read the OpenID realm configuration",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Read the OpenID realm configuration",
                          "properties": {
                            "realm": {
                              "description": "Realm name.",
                              "maxLength": 32,
                              "minLength": 2,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "access",
                              "domains"
                            ],
                            "privs": [
                              "Sys.Audit"
                            ]
                          }
                        },
                        "returns": {
                          "additionalProperties": false,
                          "description": "OpenID configuration properties.",
                          "properties": {
                            "acr-values": {
                              "description": "OpenID ACR List",
                              "format": {
                                "description": "Array of OpenId ACRs.",
                                "items": {
                                  "description": "OpenID Authentication Context Class Reference.",
                                  "pattern": "/^[^\\x00-\\x1F\\x7F <>#\"]*$/",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[<string>, ...]"
                            },
                            "autocreate": {
                              "default": false,
                              "description": "Automatically create users if they do not exist.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "client-id": {
                              "description": "OpenID Client ID",
                              "type": "string"
                            },
                            "client-key": {
                              "description": "OpenID Client Key",
                              "optional": 1,
                              "type": "string"
                            },
                            "comment": {
                              "description": "Comment.",
                              "maxLength": 128,
                              "optional": 1,
                              "pattern": "/^[[:^cntrl:]]*$/",
                              "type": "string"
                            },
                            "default": {
                              "default": false,
                              "description": "True if you want this to be the default realm selected on login.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "issuer-url": {
                              "description": "OpenID Issuer Url",
                              "type": "string"
                            },
                            "prompt": {
                              "description": "OpenID Prompt",
                              "optional": 1,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "realm": {
                              "description": "Realm name.",
                              "maxLength": 32,
                              "minLength": 2,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "scopes": {
                              "default": "email profile",
                              "description": "OpenID Scope List",
                              "format": {
                                "description": "Array of OpenId Scopes.",
                                "items": {
                                  "description": "OpenID Scope Name.",
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[<string>, ...]"
                            },
                            "username-claim": {
                              "description": "Use the value of this attribute/claim as unique user name. It is up to the identity provider to guarantee the uniqueness. The OpenID specification only guarantees that Subject ('sub') is unique. Also make sure that the user is not allowed to change that attribute by himself!",
                              "maxLength": 64,
                              "minLength": 1,
                              "optional": 1,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "PUT": {
                        "description": "Update an OpenID realm configuration",
                        "method": "PUT",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Update an OpenID realm configuration",
                          "properties": {
                            "acr-values": {
                              "description": "OpenID ACR List",
                              "format": {
                                "description": "Array of OpenId ACRs.",
                                "items": {
                                  "description": "OpenID Authentication Context Class Reference.",
                                  "pattern": "/^[^\\x00-\\x1F\\x7F <>#\"]*$/",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[<string>, ...]"
                            },
                            "autocreate": {
                              "default": false,
                              "description": "Automatically create users if they do not exist.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "client-id": {
                              "description": "OpenID Client ID",
                              "optional": 1,
                              "type": "string"
                            },
                            "client-key": {
                              "description": "OpenID Client Key",
                              "optional": 1,
                              "type": "string"
                            },
                            "comment": {
                              "description": "Comment.",
                              "maxLength": 128,
                              "optional": 1,
                              "pattern": "/^[[:^cntrl:]]*$/",
                              "type": "string"
                            },
                            "default": {
                              "default": false,
                              "description": "True if you want this to be the default realm selected on login.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "delete": {
                              "description": "List of properties to delete.",
                              "items": {
                                "description": "Deletable property name",
                                "enum": [
                                  "client-key",
                                  "comment",
                                  "default",
                                  "autocreate",
                                  "scopes",
                                  "prompt",
                                  "acr-values"
                                ],
                                "type": "string"
                              },
                              "optional": 1,
                              "type": "array"
                            },
                            "digest": {
                              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                              "optional": 1,
                              "pattern": "/^[a-f0-9]{64}$/",
                              "type": "string"
                            },
                            "issuer-url": {
                              "description": "OpenID Issuer Url",
                              "optional": 1,
                              "type": "string"
                            },
                            "prompt": {
                              "description": "OpenID Prompt",
                              "optional": 1,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "realm": {
                              "description": "Realm name.",
                              "maxLength": 32,
                              "minLength": 2,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "scopes": {
                              "default": "email profile",
                              "description": "OpenID Scope List",
                              "format": {
                                "description": "Array of OpenId Scopes.",
                                "items": {
                                  "description": "OpenID Scope Name.",
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[<string>, ...]"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "access",
                              "domains"
                            ],
                            "privs": [
                              "Realm.Allocate"
                            ]
                          }
                        },
                        "returns": {
                          "additionalProperties": false,
                          "description": "OpenID configuration properties.",
                          "properties": {
                            "acr-values": {
                              "description": "OpenID ACR List",
                              "format": {
                                "description": "Array of OpenId ACRs.",
                                "items": {
                                  "description": "OpenID Authentication Context Class Reference.",
                                  "pattern": "/^[^\\x00-\\x1F\\x7F <>#\"]*$/",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[<string>, ...]"
                            },
                            "autocreate": {
                              "default": false,
                              "description": "Automatically create users if they do not exist.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "client-id": {
                              "description": "OpenID Client ID",
                              "type": "string"
                            },
                            "client-key": {
                              "description": "OpenID Client Key",
                              "optional": 1,
                              "type": "string"
                            },
                            "comment": {
                              "description": "Comment.",
                              "maxLength": 128,
                              "optional": 1,
                              "pattern": "/^[[:^cntrl:]]*$/",
                              "type": "string"
                            },
                            "default": {
                              "default": false,
                              "description": "True if you want this to be the default realm selected on login.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "issuer-url": {
                              "description": "OpenID Issuer Url",
                              "type": "string"
                            },
                            "prompt": {
                              "description": "OpenID Prompt",
                              "optional": 1,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "realm": {
                              "description": "Realm name.",
                              "maxLength": 32,
                              "minLength": 2,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "scopes": {
                              "default": "email profile",
                              "description": "OpenID Scope List",
                              "format": {
                                "description": "Array of OpenId Scopes.",
                                "items": {
                                  "description": "OpenID Scope Name.",
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[<string>, ...]"
                            },
                            "username-claim": {
                              "description": "Use the value of this attribute/claim as unique user name. It is up to the identity provider to guarantee the uniqueness. The OpenID specification only guarantees that Subject ('sub') is unique. Also make sure that the user is not allowed to change that attribute by himself!",
                              "maxLength": 64,
                              "minLength": 1,
                              "optional": 1,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/config/access/openid/{realm}",
                    "text": "{realm}"
                  }
                ],
                "info": {
                  "GET": {
                    "description": "List configured OpenId realms",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "List configured OpenId realms",
                      "properties": {}
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "access",
                          "domains"
                        ],
                        "privs": [
                          "Realm.Allocate"
                        ]
                      }
                    },
                    "returns": {
                      "description": "List of configured OpenId realms.",
                      "items": {
                        "additionalProperties": false,
                        "description": "OpenID configuration properties.",
                        "properties": {
                          "acr-values": {
                            "description": "OpenID ACR List",
                            "format": {
                              "description": "Array of OpenId ACRs.",
                              "items": {
                                "description": "OpenID Authentication Context Class Reference.",
                                "pattern": "/^[^\\x00-\\x1F\\x7F <>#\"]*$/",
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "optional": 1,
                            "type": "string",
                            "typetext": "[<string>, ...]"
                          },
                          "autocreate": {
                            "default": false,
                            "description": "Automatically create users if they do not exist.",
                            "optional": 1,
                            "type": "boolean"
                          },
                          "client-id": {
                            "description": "OpenID Client ID",
                            "type": "string"
                          },
                          "client-key": {
                            "description": "OpenID Client Key",
                            "optional": 1,
                            "type": "string"
                          },
                          "comment": {
                            "description": "Comment.",
                            "maxLength": 128,
                            "optional": 1,
                            "pattern": "/^[[:^cntrl:]]*$/",
                            "type": "string"
                          },
                          "default": {
                            "default": false,
                            "description": "True if you want this to be the default realm selected on login.",
                            "optional": 1,
                            "type": "boolean"
                          },
                          "issuer-url": {
                            "description": "OpenID Issuer Url",
                            "type": "string"
                          },
                          "prompt": {
                            "description": "OpenID Prompt",
                            "optional": 1,
                            "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                            "type": "string"
                          },
                          "realm": {
                            "description": "Realm name.",
                            "maxLength": 32,
                            "minLength": 2,
                            "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                            "type": "string"
                          },
                          "scopes": {
                            "default": "email profile",
                            "description": "OpenID Scope List",
                            "format": {
                              "description": "Array of OpenId Scopes.",
                              "items": {
                                "description": "OpenID Scope Name.",
                                "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "optional": 1,
                            "type": "string",
                            "typetext": "[<string>, ...]"
                          },
                          "username-claim": {
                            "description": "Use the value of this attribute/claim as unique user name. It is up to the identity provider to guarantee the uniqueness. The OpenID specification only guarantees that Subject ('sub') is unique. Also make sure that the user is not allowed to change that attribute by himself!",
                            "maxLength": 64,
                            "minLength": 1,
                            "optional": 1,
                            "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "POST": {
                    "description": "Create a new OpenId realm",
                    "method": "POST",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Create a new OpenId realm",
                      "properties": {
                        "acr-values": {
                          "description": "OpenID ACR List",
                          "format": {
                            "description": "Array of OpenId ACRs.",
                            "items": {
                              "description": "OpenID Authentication Context Class Reference.",
                              "pattern": "/^[^\\x00-\\x1F\\x7F <>#\"]*$/",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[<string>, ...]"
                        },
                        "autocreate": {
                          "default": false,
                          "description": "Automatically create users if they do not exist.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "client-id": {
                          "description": "OpenID Client ID",
                          "type": "string"
                        },
                        "client-key": {
                          "description": "OpenID Client Key",
                          "optional": 1,
                          "type": "string"
                        },
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "default": {
                          "default": false,
                          "description": "True if you want this to be the default realm selected on login.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "issuer-url": {
                          "description": "OpenID Issuer Url",
                          "type": "string"
                        },
                        "prompt": {
                          "description": "OpenID Prompt",
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "realm": {
                          "description": "Realm name.",
                          "maxLength": 32,
                          "minLength": 2,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "scopes": {
                          "default": "email profile",
                          "description": "OpenID Scope List",
                          "format": {
                            "description": "Array of OpenId Scopes.",
                            "items": {
                              "description": "OpenID Scope Name.",
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[<string>, ...]"
                        },
                        "username-claim": {
                          "description": "Use the value of this attribute/claim as unique user name. It is up to the identity provider to guarantee the uniqueness. The OpenID specification only guarantees that Subject ('sub') is unique. Also make sure that the user is not allowed to change that attribute by himself!",
                          "maxLength": 64,
                          "minLength": 1,
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "access",
                          "domains"
                        ],
                        "privs": [
                          "Realm.Allocate"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 0,
                "path": "/config/access/openid",
                "text": "openid"
              },
              {
                "info": {
                  "GET": {
                    "description": "Read the PAM realm configuration",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Read the PAM realm configuration",
                      "properties": {}
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "access",
                          "domains"
                        ],
                        "privs": [
                          "Sys.Audit"
                        ]
                      }
                    },
                    "returns": {
                      "additionalProperties": false,
                      "description": "Built-in PAM realm configuration properties.",
                      "properties": {
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "default": {
                          "default": false,
                          "description": "True if you want this to be the default realm selected on login.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "realm": {
                          "description": "Realm name.",
                          "maxLength": 32,
                          "minLength": 2,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "type": {
                          "description": "type of the realm",
                          "enum": [
                            "pam",
                            "pbs",
                            "openid",
                            "ldap",
                            "ad"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "PUT": {
                    "description": "Update the PAM realm configuration",
                    "method": "PUT",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Update the PAM realm configuration",
                      "properties": {
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "default": {
                          "default": false,
                          "description": "True if you want this to be the default realm selected on login.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "delete": {
                          "description": "List of properties to delete.",
                          "items": {
                            "description": "Deletable property name",
                            "enum": [
                              "comment",
                              "default"
                            ],
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "digest": {
                          "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                          "optional": 1,
                          "pattern": "/^[a-f0-9]{64}$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "access",
                          "domains"
                        ],
                        "privs": [
                          "Realm.Allocate"
                        ]
                      }
                    },
                    "returns": {
                      "additionalProperties": false,
                      "description": "Built-in PAM realm configuration properties.",
                      "properties": {
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "default": {
                          "default": false,
                          "description": "True if you want this to be the default realm selected on login.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "realm": {
                          "description": "Realm name.",
                          "maxLength": 32,
                          "minLength": 2,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "type": {
                          "description": "type of the realm",
                          "enum": [
                            "pam",
                            "pbs",
                            "openid",
                            "ldap",
                            "ad"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  }
                },
                "leaf": 1,
                "path": "/config/access/pam",
                "text": "pam"
              },
              {
                "info": {
                  "GET": {
                    "description": "Read the Proxmox Backup authentication server realm configuration",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Read the Proxmox Backup authentication server realm configuration",
                      "properties": {}
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "access",
                          "domains"
                        ],
                        "privs": [
                          "Sys.Audit"
                        ]
                      }
                    },
                    "returns": {
                      "additionalProperties": false,
                      "description": "Built-in Proxmox Backup Server realm configuration properties.",
                      "properties": {
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "default": {
                          "default": false,
                          "description": "True if you want this to be the default realm selected on login.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "realm": {
                          "description": "Realm name.",
                          "maxLength": 32,
                          "minLength": 2,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "type": {
                          "description": "type of the realm",
                          "enum": [
                            "pam",
                            "pbs",
                            "openid",
                            "ldap",
                            "ad"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "PUT": {
                    "description": "Update the Proxmox Backup authentication server realm configuration",
                    "method": "PUT",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Update the Proxmox Backup authentication server realm configuration",
                      "properties": {
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "default": {
                          "default": false,
                          "description": "True if you want this to be the default realm selected on login.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "delete": {
                          "description": "List of properties to delete.",
                          "items": {
                            "description": "Deletable property name",
                            "enum": [
                              "comment",
                              "default"
                            ],
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "digest": {
                          "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                          "optional": 1,
                          "pattern": "/^[a-f0-9]{64}$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "access",
                          "domains"
                        ],
                        "privs": [
                          "Realm.Allocate"
                        ]
                      }
                    },
                    "returns": {
                      "additionalProperties": false,
                      "description": "Built-in Proxmox Backup Server realm configuration properties.",
                      "properties": {
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "default": {
                          "default": false,
                          "description": "True if you want this to be the default realm selected on login.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "realm": {
                          "description": "Realm name.",
                          "maxLength": 32,
                          "minLength": 2,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "type": {
                          "description": "type of the realm",
                          "enum": [
                            "pam",
                            "pbs",
                            "openid",
                            "ldap",
                            "ad"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  }
                },
                "leaf": 1,
                "path": "/config/access/pbs",
                "text": "pbs"
              },
              {
                "children": [
                  {
                    "info": {
                      "GET": {
                        "description": "Get the TFA configuration.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Get the TFA configuration.",
                          "properties": {}
                        },
                        "permissions": {
                          "user": "all"
                        },
                        "returns": {
                          "additionalProperties": false,
                          "description": "Server side webauthn server configuration.",
                          "optional": 1,
                          "properties": {
                            "allow-subdomains": {
                              "description": "If an `origin` is specified, this specifies whether subdomains should be considered valid\nas well.\n\nMay be changed at any time.\n\nDefaults to `true`.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "id": {
                              "description": "Relying party ID. Must be the domain name without protocol, port or location.\n\nChanging this *will* break existing credentials.",
                              "type": "string"
                            },
                            "origin": {
                              "description": "Site origin. Must be a `https://` URL (or `http://localhost`). Should contain the address\nusers type in their browsers to access the web interface.\n\nChanging this *may* break existing credentials.",
                              "optional": 1,
                              "type": "string"
                            },
                            "rp": {
                              "description": "Relying party name. Any text identifier.\n\nChanging this *may* break existing credentials.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "PUT": {
                        "description": "Update the TFA configuration.",
                        "method": "PUT",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Update the TFA configuration.",
                          "properties": {
                            "allow-subdomains": {
                              "description": "If an `origin` is specified, this specifies whether subdomains should be considered valid\nas well.\n\nMay be changed at any time.\n\nDefaults to `true`.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "delete": {
                              "description": "List of properties to delete.",
                              "items": {
                                "description": "Deletable property name",
                                "enum": [
                                  "origin",
                                  "allow-subdomains"
                                ],
                                "type": "string"
                              },
                              "optional": 1,
                              "type": "array"
                            },
                            "digest": {
                              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                              "optional": 1,
                              "pattern": "/^[a-f0-9]{64}$/",
                              "type": "string"
                            },
                            "id": {
                              "description": "Relying party ID. Must be the domain name without protocol, port or location.\n\nChanging this *will* break existing credentials.",
                              "optional": 1,
                              "type": "string"
                            },
                            "origin": {
                              "description": "Site origin. Must be a `https://` URL (or `http://localhost`). Should contain the address\nusers type in their browsers to access the web interface.\n\nChanging this *may* break existing credentials.",
                              "optional": 1,
                              "type": "string"
                            },
                            "rp": {
                              "description": "Relying party name. Any text identifier.\n\nChanging this *may* break existing credentials.",
                              "optional": 1,
                              "type": "string"
                            }
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/config/access/tfa/webauthn",
                    "text": "webauthn"
                  }
                ],
                "info": {
                  "GET": {
                    "description": "Directory index.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": true,
                      "description": "Directory index.",
                      "properties": {}
                    },
                    "permissions": {
                      "user": "all"
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 0,
                "path": "/config/access/tfa",
                "text": "tfa"
              }
            ],
            "info": {
              "GET": {
                "description": "Directory index.",
                "method": "GET",
                "parameters": {
                  "additionalProperties": true,
                  "description": "Directory index.",
                  "properties": {}
                },
                "permissions": {
                  "user": "all"
                },
                "returns": {
                  "type": "null"
                }
              }
            },
            "leaf": 0,
            "path": "/config/access",
            "text": "access"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "info": {
                      "DELETE": {
                        "description": "Deactivate an ACME account.",
                        "method": "DELETE",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Deactivate an ACME account.",
                          "properties": {
                            "force": {
                              "default": false,
                              "description": "Delete account data even if the server refuses to deactivate the account.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "name": {
                              "description": "ACME account name.",
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "certificates"
                            ],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      },
                      "GET": {
                        "description": "Return existing ACME account information.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Return existing ACME account information.",
                          "properties": {
                            "name": {
                              "description": "ACME account name.",
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "certificates"
                            ],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "additionalProperties": false,
                          "description": "ACME Account information.\n\nThis is what we return via the API.",
                          "properties": {
                            "account": {
                              "additionalProperties": true,
                              "description": "Raw account data.",
                              "properties": {},
                              "type": "object"
                            },
                            "directory": {
                              "description": "The ACME directory URL the account was created at.",
                              "type": "string"
                            },
                            "location": {
                              "description": "The account's own URL within the ACME directory.",
                              "type": "string"
                            },
                            "tos": {
                              "description": "The ToS URL, if the user agreed to one.",
                              "optional": 1,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "PUT": {
                        "description": "Update an ACME account.",
                        "method": "PUT",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Update an ACME account.",
                          "properties": {
                            "contact": {
                              "description": "List of email addresses.",
                              "optional": 1,
                              "type": "string"
                            },
                            "name": {
                              "description": "ACME account name.",
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "certificates"
                            ],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/config/acme/account/{name}",
                    "text": "{name}"
                  }
                ],
                "info": {
                  "GET": {
                    "description": "List ACME accounts.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "List ACME accounts.",
                      "properties": {}
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system",
                          "certificates"
                        ],
                        "privs": [
                          "Sys.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "description": "List of ACME accounts.",
                      "items": {
                        "additionalProperties": false,
                        "description": "An ACME Account entry.\n\nCurrently only contains a 'name' property.",
                        "properties": {
                          "name": {
                            "description": "ACME account name.",
                            "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "POST": {
                    "description": "Register an ACME account.",
                    "method": "POST",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Register an ACME account.",
                      "properties": {
                        "contact": {
                          "description": "List of email addresses.",
                          "type": "string"
                        },
                        "directory": {
                          "description": "The ACME Directory.",
                          "optional": 1,
                          "type": "string"
                        },
                        "eab_hmac_key": {
                          "description": "HMAC Key for External Account Binding.",
                          "optional": 1,
                          "type": "string"
                        },
                        "eab_kid": {
                          "description": "Key Identifier for External Account Binding.",
                          "optional": 1,
                          "type": "string"
                        },
                        "name": {
                          "description": "ACME account name.",
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "tos_url": {
                          "description": "URL of CA TermsOfService - setting this indicates agreement.",
                          "optional": 1,
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system",
                          "certificates"
                        ],
                        "privs": [
                          "Sys.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 0,
                "path": "/config/acme/account",
                "text": "account"
              },
              {
                "info": {
                  "GET": {
                    "description": "Get named known ACME directory endpoints.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Get named known ACME directory endpoints.",
                      "properties": {}
                    },
                    "permissions": {
                      "user": "all"
                    },
                    "returns": {
                      "description": "ACME Challenge Plugin Shema.",
                      "items": {
                        "additionalProperties": false,
                        "description": "Schema for an ACME challenge plugin.",
                        "properties": {
                          "id": {
                            "description": "Plugin ID.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Human readable name, falls back to id.",
                            "type": "string"
                          },
                          "schema": {
                            "additionalProperties": true,
                            "description": "The plugin's parameter schema.",
                            "properties": {},
                            "type": "object"
                          },
                          "type": {
                            "description": "Plugin Type.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  }
                },
                "leaf": 1,
                "path": "/config/acme/challenge-schema",
                "text": "challenge-schema"
              },
              {
                "info": {
                  "GET": {
                    "description": "Get named known ACME directory endpoints.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Get named known ACME directory endpoints.",
                      "properties": {}
                    },
                    "permissions": {
                      "user": "all"
                    },
                    "returns": {
                      "description": "List of known ACME directories.",
                      "items": {
                        "additionalProperties": false,
                        "description": "An ACME directory endpoint with a name and URL.",
                        "properties": {
                          "name": {
                            "description": "The ACME directory's name.",
                            "type": "string"
                          },
                          "url": {
                            "description": "The ACME directory's endpoint URL.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  }
                },
                "leaf": 1,
                "path": "/config/acme/directories",
                "text": "directories"
              },
              {
                "children": [
                  {
                    "info": {
                      "DELETE": {
                        "description": "Delete an ACME plugin configuration.",
                        "method": "DELETE",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Delete an ACME plugin configuration.",
                          "properties": {
                            "id": {
                              "description": "ACME Challenge Plugin ID.",
                              "maxLength": 32,
                              "minLength": 1,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "certificates"
                            ],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      },
                      "GET": {
                        "description": "List ACME challenge plugins.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "List ACME challenge plugins.",
                          "properties": {
                            "id": {
                              "description": "ACME Challenge Plugin ID.",
                              "maxLength": 32,
                              "minLength": 1,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "certificates"
                            ],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "additionalProperties": false,
                          "description": "The API's format is inherited from PVE/PMG:",
                          "properties": {
                            "api": {
                              "description": "DNS Api name.",
                              "optional": 1,
                              "type": "string"
                            },
                            "data": {
                              "description": "Plugin configuration data.",
                              "optional": 1,
                              "type": "string"
                            },
                            "disable": {
                              "description": "Flag to disable the config.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "plugin": {
                              "description": "Plugin ID.",
                              "type": "string"
                            },
                            "type": {
                              "description": "Plugin type.",
                              "type": "string"
                            },
                            "validation-delay": {
                              "description": "Extra delay in seconds to wait before requesting validation.\n\nAllows to cope with long TTL of DNS records.",
                              "maximum": 4294967295,
                              "minimum": 0,
                              "optional": 1,
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "PUT": {
                        "description": "Update an ACME plugin configuration.",
                        "method": "PUT",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Update an ACME plugin configuration.",
                          "properties": {
                            "api": {
                              "description": "DNS API Plugin Id.",
                              "optional": 1,
                              "type": "string"
                            },
                            "data": {
                              "description": "DNS plugin data (base64 encoded with padding).",
                              "optional": 1,
                              "type": "string"
                            },
                            "delete": {
                              "description": "List of properties to delete.",
                              "items": {
                                "description": "Deletable property name",
                                "enum": [
                                  "disable",
                                  "validation-delay"
                                ],
                                "type": "string"
                              },
                              "optional": 1,
                              "type": "array"
                            },
                            "digest": {
                              "description": "Digest to protect against concurrent updates",
                              "optional": 1,
                              "type": "string"
                            },
                            "disable": {
                              "default": false,
                              "description": "Flag to disable the config.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "id": {
                              "description": "ACME Challenge Plugin ID.",
                              "maxLength": 32,
                              "minLength": 1,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "validation-delay": {
                              "default": 30,
                              "description": "Extra delay in seconds to wait before requesting validation.\n\nAllows to cope with long TTL of DNS records.",
                              "maximum": 172800,
                              "minimum": 0,
                              "optional": 1,
                              "type": "integer"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "certificates"
                            ],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/config/acme/plugins/{id}",
                    "text": "{id}"
                  }
                ],
                "info": {
                  "GET": {
                    "description": "List ACME challenge plugins.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "List ACME challenge plugins.",
                      "properties": {}
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system",
                          "certificates"
                        ],
                        "privs": [
                          "Sys.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "description": "List of ACME plugin configurations.",
                      "items": {
                        "additionalProperties": false,
                        "description": "The API's format is inherited from PVE/PMG:",
                        "properties": {
                          "api": {
                            "description": "DNS Api name.",
                            "optional": 1,
                            "type": "string"
                          },
                          "data": {
                            "description": "Plugin configuration data.",
                            "optional": 1,
                            "type": "string"
                          },
                          "disable": {
                            "description": "Flag to disable the config.",
                            "optional": 1,
                            "type": "boolean"
                          },
                          "plugin": {
                            "description": "Plugin ID.",
                            "type": "string"
                          },
                          "type": {
                            "description": "Plugin type.",
                            "type": "string"
                          },
                          "validation-delay": {
                            "description": "Extra delay in seconds to wait before requesting validation.\n\nAllows to cope with long TTL of DNS records.",
                            "maximum": 4294967295,
                            "minimum": 0,
                            "optional": 1,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "POST": {
                    "description": "Add ACME plugin configuration.",
                    "method": "POST",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Add ACME plugin configuration.",
                      "properties": {
                        "api": {
                          "description": "DNS API Plugin Id.",
                          "type": "string"
                        },
                        "data": {
                          "description": "DNS plugin data (base64 encoded with padding).",
                          "type": "string"
                        },
                        "disable": {
                          "default": false,
                          "description": "Flag to disable the config.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "id": {
                          "description": "ACME Challenge Plugin ID.",
                          "maxLength": 32,
                          "minLength": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "type": {
                          "description": "The ACME challenge plugin type.",
                          "type": "string"
                        },
                        "validation-delay": {
                          "default": 30,
                          "description": "Extra delay in seconds to wait before requesting validation.\n\nAllows to cope with long TTL of DNS records.",
                          "maximum": 172800,
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system",
                          "certificates"
                        ],
                        "privs": [
                          "Sys.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 0,
                "path": "/config/acme/plugins",
                "text": "plugins"
              },
              {
                "info": {
                  "GET": {
                    "description": "Get the Terms of Service URL for an ACME directory.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Get the Terms of Service URL for an ACME directory.",
                      "properties": {
                        "directory": {
                          "description": "The ACME Directory.",
                          "optional": 1,
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "user": "all"
                    },
                    "returns": {
                      "description": "The ACME Directory's ToS URL, if any.",
                      "optional": 1,
                      "type": "string"
                    }
                  }
                },
                "leaf": 1,
                "path": "/config/acme/tos",
                "text": "tos"
              }
            ],
            "info": {
              "GET": {
                "description": "Directory index.",
                "method": "GET",
                "parameters": {
                  "additionalProperties": true,
                  "description": "Directory index.",
                  "properties": {}
                },
                "permissions": {
                  "user": "all"
                },
                "returns": {
                  "type": "null"
                }
              }
            },
            "leaf": 0,
            "path": "/config/acme",
            "text": "acme"
          },
          {
            "children": [
              {
                "info": {
                  "DELETE": {
                    "description": "Delete a tape changer configuration",
                    "method": "DELETE",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Delete a tape changer configuration",
                      "properties": {
                        "name": {
                          "description": "Tape Changer Identifier.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "tape",
                          "device",
                          "{name}"
                        ],
                        "privs": [
                          "Tape.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  },
                  "GET": {
                    "description": "Get tape changer configuration",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Get tape changer configuration",
                      "properties": {
                        "name": {
                          "description": "Tape Changer Identifier.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "tape",
                          "device",
                          "{name}"
                        ],
                        "privs": [
                          "Tape.Audit"
                        ]
                      }
                    },
                    "returns": {
                      "additionalProperties": false,
                      "description": "SCSI tape changer",
                      "properties": {
                        "eject-before-unload": {
                          "default": false,
                          "description": "if set to true, tapes are ejected manually before unloading",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "export-slots": {
                          "description": "A list of slot numbers, comma separated. Those slots are reserved for\nImport/Export, i.e. any media in those slots are considered to be\n'offline'.\n",
                          "format": {
                            "description": "Slot list.",
                            "items": {
                              "description": "Slot number",
                              "minimum": 1,
                              "type": "integer"
                            },
                            "type": "array"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[<integer>, ...]"
                        },
                        "name": {
                          "description": "Tape Changer Identifier.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "path": {
                          "description": "Path to Linux generic SCSI device (e.g. '/dev/sg4')",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "PUT": {
                    "description": "Update a tape changer configuration",
                    "method": "PUT",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Update a tape changer configuration",
                      "properties": {
                        "delete": {
                          "description": "List of properties to delete.",
                          "items": {
                            "description": "Deletable property name",
                            "enum": [
                              "export-slots",
                              "eject-before-unload"
                            ],
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "digest": {
                          "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                          "optional": 1,
                          "pattern": "/^[a-f0-9]{64}$/",
                          "type": "string"
                        },
                        "eject-before-unload": {
                          "default": false,
                          "description": "if set to true, tapes are ejected manually before unloading",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "export-slots": {
                          "description": "A list of slot numbers, comma separated. Those slots are reserved for\nImport/Export, i.e. any media in those slots are considered to be\n'offline'.\n",
                          "format": {
                            "description": "Slot list.",
                            "items": {
                              "description": "Slot number",
                              "minimum": 1,
                              "type": "integer"
                            },
                            "type": "array"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[<integer>, ...]"
                        },
                        "name": {
                          "description": "Tape Changer Identifier.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "path": {
                          "description": "Path to Linux generic SCSI device (e.g. '/dev/sg4')",
                          "optional": 1,
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "tape",
                          "device",
                          "{name}"
                        ],
                        "privs": [
                          "Tape.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 1,
                "path": "/config/changer/{name}",
                "text": "{name}"
              }
            ],
            "info": {
              "GET": {
                "description": "List changers",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "List changers",
                  "properties": {}
                },
                "permissions": {
                  "description": "List configured tape changer filtered by Tape.Audit privileges",
                  "user": "all"
                },
                "returns": {
                  "description": "The list of configured changers (with config digest).",
                  "items": {
                    "additionalProperties": false,
                    "description": "SCSI tape changer",
                    "properties": {
                      "eject-before-unload": {
                        "default": false,
                        "description": "if set to true, tapes are ejected manually before unloading",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "export-slots": {
                        "description": "A list of slot numbers, comma separated. Those slots are reserved for\nImport/Export, i.e. any media in those slots are considered to be\n'offline'.\n",
                        "format": {
                          "description": "Slot list.",
                          "items": {
                            "description": "Slot number",
                            "minimum": 1,
                            "type": "integer"
                          },
                          "type": "array"
                        },
                        "optional": 1,
                        "type": "string",
                        "typetext": "[<integer>, ...]"
                      },
                      "name": {
                        "description": "Tape Changer Identifier.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "path": {
                        "description": "Path to Linux generic SCSI device (e.g. '/dev/sg4')",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "POST": {
                "description": "Create a new changer device",
                "method": "POST",
                "parameters": {
                  "additionalProperties": false,
                  "description": "Create a new changer device",
                  "properties": {
                    "eject-before-unload": {
                      "default": false,
                      "description": "if set to true, tapes are ejected manually before unloading",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "export-slots": {
                      "description": "A list of slot numbers, comma separated. Those slots are reserved for\nImport/Export, i.e. any media in those slots are considered to be\n'offline'.\n",
                      "format": {
                        "description": "Slot list.",
                        "items": {
                          "description": "Slot number",
                          "minimum": 1,
                          "type": "integer"
                        },
                        "type": "array"
                      },
                      "optional": 1,
                      "type": "string",
                      "typetext": "[<integer>, ...]"
                    },
                    "name": {
                      "description": "Tape Changer Identifier.",
                      "maxLength": 32,
                      "minLength": 3,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "path": {
                      "description": "Path to Linux generic SCSI device (e.g. '/dev/sg4')",
                      "type": "string"
                    }
                  }
                },
                "permissions": {
                  "check": {
                    "partial": false,
                    "path": [
                      "tape",
                      "device"
                    ],
                    "privs": [
                      "Tape.Modify"
                    ]
                  }
                },
                "returns": {
                  "type": "null"
                }
              }
            },
            "leaf": 0,
            "path": "/config/changer",
            "text": "changer"
          },
          {
            "children": [
              {
                "info": {
                  "DELETE": {
                    "description": "Remove a datastore configuration and optionally delete all its contents.",
                    "method": "DELETE",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Remove a datastore configuration and optionally delete all its contents.",
                      "properties": {
                        "destroy-data": {
                          "default": false,
                          "description": "Delete the datastore's underlying contents",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "digest": {
                          "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                          "optional": 1,
                          "pattern": "/^[a-f0-9]{64}$/",
                          "type": "string"
                        },
                        "keep-job-configs": {
                          "default": false,
                          "description": "If enabled, the job configurations related to this datastore will be kept.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "name": {
                          "description": "Datastore name.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "datastore",
                          "{name}"
                        ],
                        "privs": [
                          "Datastore.Allocate"
                        ]
                      },
                      "description": "Requires Datastore.Allocate and, for a backing-device, Sys.Modify on '/system/disks'."
                    },
                    "returns": {
                      "description": "Unique Process/Task Identifier",
                      "minLength": 36,
                      "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                      "type": "string"
                    }
                  },
                  "GET": {
                    "description": "Read a datastore configuration.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Read a datastore configuration.",
                      "properties": {
                        "name": {
                          "description": "Datastore name.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "datastore",
                          "{name}"
                        ],
                        "privs": [
                          "Datastore.Audit"
                        ]
                      }
                    },
                    "returns": {
                      "additionalProperties": false,
                      "description": "Datastore configuration properties.",
                      "properties": {
                        "backend": {
                          "description": "Datastore backend config",
                          "optional": 1,
                          "type": "string",
                          "typetext": "<backend-config>"
                        },
                        "backing-device": {
                          "description": "The UUID of the filesystem partition for removable datastores.",
                          "optional": 1,
                          "pattern": "/^[0-9a-f]{8}(?:-[0-9a-f]{4}){3}-[0-9a-f]{12}$/",
                          "type": "string"
                        },
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "gc-schedule": {
                          "description": "Run garbage collection job at specified schedule.",
                          "optional": 1,
                          "type": "string",
                          "typetext": "<calendar-event>"
                        },
                        "keep-daily": {
                          "description": "Number of daily backups to keep.",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "keep-hourly": {
                          "description": "Number of hourly backups to keep.",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "keep-last": {
                          "description": "Number of backups to keep.",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "keep-monthly": {
                          "description": "Number of monthly backups to keep.",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "keep-weekly": {
                          "description": "Number of weekly backups to keep.",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "keep-yearly": {
                          "description": "Number of yearly backups to keep.",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "maintenance-mode": {
                          "description": "Maintenance mode, type is either 'offline' or 'read-only', message should be enclosed in \"",
                          "format": {
                            "additionalProperties": false,
                            "default_key": "type",
                            "description": "Maintenance mode",
                            "properties": {
                              "message": {
                                "description": "Message describing the reason for the maintenance.",
                                "maxLength": 64,
                                "optional": 1,
                                "pattern": "/^[[:^cntrl:]]*$/",
                                "type": "string"
                              },
                              "type": {
                                "description": "Maintenance type.",
                                "enum": [
                                  "read-only",
                                  "offline",
                                  "delete",
                                  "unmount",
                                  "s3-refresh"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[type=<enum> [,message=<string>]]"
                        },
                        "name": {
                          "description": "Datastore name.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "notification-mode": {
                          "default": "notification-system",
                          "description": "Configure how notifications for this datastore should be sent.\n`legacy-sendmail` sends email notifications to the user configured\nin `notify-user` via the system's `sendmail` executable.\n`notification-system` emits matchable notification events to the\nnotification system.",
                          "enum": [
                            "legacy-sendmail",
                            "notification-system"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "notify": {
                          "description": "Datastore notification setting, enum can be one of 'always', 'never', or 'error'.",
                          "format": {
                            "additionalProperties": false,
                            "description": "Datastore notify settings",
                            "properties": {
                              "gc": {
                                "description": "When do we send notifications",
                                "enum": [
                                  "never",
                                  "always",
                                  "error"
                                ],
                                "optional": 1,
                                "type": "string"
                              },
                              "prune": {
                                "description": "When do we send notifications",
                                "enum": [
                                  "never",
                                  "always",
                                  "error"
                                ],
                                "optional": 1,
                                "type": "string"
                              },
                              "sync": {
                                "description": "When do we send notifications",
                                "enum": [
                                  "never",
                                  "always",
                                  "error"
                                ],
                                "optional": 1,
                                "type": "string"
                              },
                              "verify": {
                                "description": "When do we send notifications",
                                "enum": [
                                  "never",
                                  "always",
                                  "error"
                                ],
                                "optional": 1,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[[gc=<enum>] [,prune=<enum>] [,sync=<enum>] [,verify=<enum>]]"
                        },
                        "notify-user": {
                          "description": "User ID",
                          "maxLength": 64,
                          "minLength": 3,
                          "optional": 1,
                          "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "path": {
                          "description": "Either the absolute path to the datastore directory, or a relative on-device path for removable datastores.",
                          "maxLength": 4096,
                          "minLength": 1,
                          "type": "string"
                        },
                        "prune-schedule": {
                          "description": "Run prune job at specified schedule.",
                          "optional": 1,
                          "type": "string",
                          "typetext": "<calendar-event>"
                        },
                        "tuning": {
                          "description": "Datastore tuning options",
                          "format": {
                            "additionalProperties": false,
                            "description": "Datastore tuning options",
                            "properties": {
                              "chunk-order": {
                                "default": "inode",
                                "description": "The order to sort chunks by",
                                "enum": [
                                  "none",
                                  "inode"
                                ],
                                "optional": 1,
                                "type": "string"
                              },
                              "gc-atime-cutoff": {
                                "default": 1445,
                                "description": "Cutoff (in minutes) for chunk cleanup atime check in garbage collection phase 2 (default 24h 5m)",
                                "maximum": 2880,
                                "minimum": 1,
                                "optional": 1,
                                "type": "integer"
                              },
                              "gc-atime-safety-check": {
                                "default": true,
                                "description": "Check filesystem atime updates are honored during store creation and garbage collection",
                                "optional": 1,
                                "type": "boolean"
                              },
                              "gc-cache-capacity": {
                                "default": 1048576,
                                "description": "Garbage collection chunk digest cache capacity",
                                "maximum": 8388608,
                                "minimum": 0,
                                "optional": 1,
                                "type": "integer"
                              },
                              "sync-level": {
                                "default": "filesystem",
                                "description": "The level of syncing that is done when writing into a datastore.",
                                "enum": [
                                  "none",
                                  "file",
                                  "filesystem"
                                ],
                                "optional": 1,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[[chunk-order=<enum>] [,gc-atime-cutoff=<integer>] [,gc-atime-safety-check=<1|0>] [,gc-cache-capacity=<integer>] [,sync-level=<enum>]]"
                        },
                        "verify-new": {
                          "description": "If enabled, all new backups will be verified right after completion.",
                          "optional": 1,
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "PUT": {
                    "description": "Update datastore config.",
                    "method": "PUT",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Update datastore config.",
                      "properties": {
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "delete": {
                          "description": "List of properties to delete.",
                          "items": {
                            "description": "Deletable property name",
                            "enum": [
                              "comment",
                              "gc-schedule",
                              "prune-schedule",
                              "keep-last",
                              "keep-hourly",
                              "keep-daily",
                              "keep-weekly",
                              "keep-monthly",
                              "keep-yearly",
                              "verify-new",
                              "notify-user",
                              "notify",
                              "notification-mode",
                              "tuning",
                              "maintenance-mode"
                            ],
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "digest": {
                          "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                          "optional": 1,
                          "pattern": "/^[a-f0-9]{64}$/",
                          "type": "string"
                        },
                        "gc-schedule": {
                          "description": "Run garbage collection job at specified schedule.",
                          "optional": 1,
                          "type": "string",
                          "typetext": "<calendar-event>"
                        },
                        "keep-daily": {
                          "description": "Number of daily backups to keep.",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "keep-hourly": {
                          "description": "Number of hourly backups to keep.",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "keep-last": {
                          "description": "Number of backups to keep.",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "keep-monthly": {
                          "description": "Number of monthly backups to keep.",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "keep-weekly": {
                          "description": "Number of weekly backups to keep.",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "keep-yearly": {
                          "description": "Number of yearly backups to keep.",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "maintenance-mode": {
                          "description": "Maintenance mode, type is either 'offline' or 'read-only', message should be enclosed in \"",
                          "format": {
                            "additionalProperties": false,
                            "default_key": "type",
                            "description": "Maintenance mode",
                            "properties": {
                              "message": {
                                "description": "Message describing the reason for the maintenance.",
                                "maxLength": 64,
                                "optional": 1,
                                "pattern": "/^[[:^cntrl:]]*$/",
                                "type": "string"
                              },
                              "type": {
                                "description": "Maintenance type.",
                                "enum": [
                                  "read-only",
                                  "offline",
                                  "delete",
                                  "unmount",
                                  "s3-refresh"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[type=<enum> [,message=<string>]]"
                        },
                        "name": {
                          "description": "Datastore name.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "notification-mode": {
                          "default": "notification-system",
                          "description": "Configure how notifications for this datastore should be sent.\n`legacy-sendmail` sends email notifications to the user configured\nin `notify-user` via the system's `sendmail` executable.\n`notification-system` emits matchable notification events to the\nnotification system.",
                          "enum": [
                            "legacy-sendmail",
                            "notification-system"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "notify": {
                          "description": "Datastore notification setting, enum can be one of 'always', 'never', or 'error'.",
                          "format": {
                            "additionalProperties": false,
                            "description": "Datastore notify settings",
                            "properties": {
                              "gc": {
                                "description": "When do we send notifications",
                                "enum": [
                                  "never",
                                  "always",
                                  "error"
                                ],
                                "optional": 1,
                                "type": "string"
                              },
                              "prune": {
                                "description": "When do we send notifications",
                                "enum": [
                                  "never",
                                  "always",
                                  "error"
                                ],
                                "optional": 1,
                                "type": "string"
                              },
                              "sync": {
                                "description": "When do we send notifications",
                                "enum": [
                                  "never",
                                  "always",
                                  "error"
                                ],
                                "optional": 1,
                                "type": "string"
                              },
                              "verify": {
                                "description": "When do we send notifications",
                                "enum": [
                                  "never",
                                  "always",
                                  "error"
                                ],
                                "optional": 1,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[[gc=<enum>] [,prune=<enum>] [,sync=<enum>] [,verify=<enum>]]"
                        },
                        "notify-user": {
                          "description": "User ID",
                          "maxLength": 64,
                          "minLength": 3,
                          "optional": 1,
                          "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "prune-schedule": {
                          "description": "Run prune job at specified schedule.",
                          "optional": 1,
                          "type": "string",
                          "typetext": "<calendar-event>"
                        },
                        "tuning": {
                          "description": "Datastore tuning options",
                          "format": {
                            "additionalProperties": false,
                            "description": "Datastore tuning options",
                            "properties": {
                              "chunk-order": {
                                "default": "inode",
                                "description": "The order to sort chunks by",
                                "enum": [
                                  "none",
                                  "inode"
                                ],
                                "optional": 1,
                                "type": "string"
                              },
                              "gc-atime-cutoff": {
                                "default": 1445,
                                "description": "Cutoff (in minutes) for chunk cleanup atime check in garbage collection phase 2 (default 24h 5m)",
                                "maximum": 2880,
                                "minimum": 1,
                                "optional": 1,
                                "type": "integer"
                              },
                              "gc-atime-safety-check": {
                                "default": true,
                                "description": "Check filesystem atime updates are honored during store creation and garbage collection",
                                "optional": 1,
                                "type": "boolean"
                              },
                              "gc-cache-capacity": {
                                "default": 1048576,
                                "description": "Garbage collection chunk digest cache capacity",
                                "maximum": 8388608,
                                "minimum": 0,
                                "optional": 1,
                                "type": "integer"
                              },
                              "sync-level": {
                                "default": "filesystem",
                                "description": "The level of syncing that is done when writing into a datastore.",
                                "enum": [
                                  "none",
                                  "file",
                                  "filesystem"
                                ],
                                "optional": 1,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[[chunk-order=<enum>] [,gc-atime-cutoff=<integer>] [,gc-atime-safety-check=<1|0>] [,gc-cache-capacity=<integer>] [,sync-level=<enum>]]"
                        },
                        "verify-new": {
                          "description": "If enabled, all new backups will be verified right after completion.",
                          "optional": 1,
                          "type": "boolean"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "datastore",
                          "{name}"
                        ],
                        "privs": [
                          "Datastore.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 1,
                "path": "/config/datastore/{name}",
                "text": "{name}"
              }
            ],
            "info": {
              "GET": {
                "description": "List all datastores",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "List all datastores",
                  "properties": {}
                },
                "permissions": {
                  "user": "all"
                },
                "returns": {
                  "description": "List the configured datastores (with config digest).",
                  "items": {
                    "additionalProperties": false,
                    "description": "Datastore configuration properties.",
                    "properties": {
                      "backend": {
                        "description": "Datastore backend config",
                        "optional": 1,
                        "type": "string",
                        "typetext": "<backend-config>"
                      },
                      "backing-device": {
                        "description": "The UUID of the filesystem partition for removable datastores.",
                        "optional": 1,
                        "pattern": "/^[0-9a-f]{8}(?:-[0-9a-f]{4}){3}-[0-9a-f]{12}$/",
                        "type": "string"
                      },
                      "comment": {
                        "description": "Comment.",
                        "maxLength": 128,
                        "optional": 1,
                        "pattern": "/^[[:^cntrl:]]*$/",
                        "type": "string"
                      },
                      "gc-schedule": {
                        "description": "Run garbage collection job at specified schedule.",
                        "optional": 1,
                        "type": "string",
                        "typetext": "<calendar-event>"
                      },
                      "keep-daily": {
                        "description": "Number of daily backups to keep.",
                        "minimum": 1,
                        "optional": 1,
                        "type": "integer"
                      },
                      "keep-hourly": {
                        "description": "Number of hourly backups to keep.",
                        "minimum": 1,
                        "optional": 1,
                        "type": "integer"
                      },
                      "keep-last": {
                        "description": "Number of backups to keep.",
                        "minimum": 1,
                        "optional": 1,
                        "type": "integer"
                      },
                      "keep-monthly": {
                        "description": "Number of monthly backups to keep.",
                        "minimum": 1,
                        "optional": 1,
                        "type": "integer"
                      },
                      "keep-weekly": {
                        "description": "Number of weekly backups to keep.",
                        "minimum": 1,
                        "optional": 1,
                        "type": "integer"
                      },
                      "keep-yearly": {
                        "description": "Number of yearly backups to keep.",
                        "minimum": 1,
                        "optional": 1,
                        "type": "integer"
                      },
                      "maintenance-mode": {
                        "description": "Maintenance mode, type is either 'offline' or 'read-only', message should be enclosed in \"",
                        "format": {
                          "additionalProperties": false,
                          "default_key": "type",
                          "description": "Maintenance mode",
                          "properties": {
                            "message": {
                              "description": "Message describing the reason for the maintenance.",
                              "maxLength": 64,
                              "optional": 1,
                              "pattern": "/^[[:^cntrl:]]*$/",
                              "type": "string"
                            },
                            "type": {
                              "description": "Maintenance type.",
                              "enum": [
                                "read-only",
                                "offline",
                                "delete",
                                "unmount",
                                "s3-refresh"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "optional": 1,
                        "type": "string",
                        "typetext": "[type=<enum> [,message=<string>]]"
                      },
                      "name": {
                        "description": "Datastore name.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "notification-mode": {
                        "default": "notification-system",
                        "description": "Configure how notifications for this datastore should be sent.\n`legacy-sendmail` sends email notifications to the user configured\nin `notify-user` via the system's `sendmail` executable.\n`notification-system` emits matchable notification events to the\nnotification system.",
                        "enum": [
                          "legacy-sendmail",
                          "notification-system"
                        ],
                        "optional": 1,
                        "type": "string"
                      },
                      "notify": {
                        "description": "Datastore notification setting, enum can be one of 'always', 'never', or 'error'.",
                        "format": {
                          "additionalProperties": false,
                          "description": "Datastore notify settings",
                          "properties": {
                            "gc": {
                              "description": "When do we send notifications",
                              "enum": [
                                "never",
                                "always",
                                "error"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "prune": {
                              "description": "When do we send notifications",
                              "enum": [
                                "never",
                                "always",
                                "error"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "sync": {
                              "description": "When do we send notifications",
                              "enum": [
                                "never",
                                "always",
                                "error"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "verify": {
                              "description": "When do we send notifications",
                              "enum": [
                                "never",
                                "always",
                                "error"
                              ],
                              "optional": 1,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "optional": 1,
                        "type": "string",
                        "typetext": "[[gc=<enum>] [,prune=<enum>] [,sync=<enum>] [,verify=<enum>]]"
                      },
                      "notify-user": {
                        "description": "User ID",
                        "maxLength": 64,
                        "minLength": 3,
                        "optional": 1,
                        "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "path": {
                        "description": "Either the absolute path to the datastore directory, or a relative on-device path for removable datastores.",
                        "maxLength": 4096,
                        "minLength": 1,
                        "type": "string"
                      },
                      "prune-schedule": {
                        "description": "Run prune job at specified schedule.",
                        "optional": 1,
                        "type": "string",
                        "typetext": "<calendar-event>"
                      },
                      "tuning": {
                        "description": "Datastore tuning options",
                        "format": {
                          "additionalProperties": false,
                          "description": "Datastore tuning options",
                          "properties": {
                            "chunk-order": {
                              "default": "inode",
                              "description": "The order to sort chunks by",
                              "enum": [
                                "none",
                                "inode"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "gc-atime-cutoff": {
                              "default": 1445,
                              "description": "Cutoff (in minutes) for chunk cleanup atime check in garbage collection phase 2 (default 24h 5m)",
                              "maximum": 2880,
                              "minimum": 1,
                              "optional": 1,
                              "type": "integer"
                            },
                            "gc-atime-safety-check": {
                              "default": true,
                              "description": "Check filesystem atime updates are honored during store creation and garbage collection",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "gc-cache-capacity": {
                              "default": 1048576,
                              "description": "Garbage collection chunk digest cache capacity",
                              "maximum": 8388608,
                              "minimum": 0,
                              "optional": 1,
                              "type": "integer"
                            },
                            "sync-level": {
                              "default": "filesystem",
                              "description": "The level of syncing that is done when writing into a datastore.",
                              "enum": [
                                "none",
                                "file",
                                "filesystem"
                              ],
                              "optional": 1,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "optional": 1,
                        "type": "string",
                        "typetext": "[[chunk-order=<enum>] [,gc-atime-cutoff=<integer>] [,gc-atime-safety-check=<1|0>] [,gc-cache-capacity=<integer>] [,sync-level=<enum>]]"
                      },
                      "verify-new": {
                        "description": "If enabled, all new backups will be verified right after completion.",
                        "optional": 1,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "POST": {
                "description": "Create new datastore config.",
                "method": "POST",
                "parameters": {
                  "additionalProperties": false,
                  "description": "Create new datastore config.",
                  "properties": {
                    "backend": {
                      "description": "Datastore backend config",
                      "optional": 1,
                      "type": "string",
                      "typetext": "<backend-config>"
                    },
                    "backing-device": {
                      "description": "The UUID of the filesystem partition for removable datastores.",
                      "optional": 1,
                      "pattern": "/^[0-9a-f]{8}(?:-[0-9a-f]{4}){3}-[0-9a-f]{12}$/",
                      "type": "string"
                    },
                    "comment": {
                      "description": "Comment.",
                      "maxLength": 128,
                      "optional": 1,
                      "pattern": "/^[[:^cntrl:]]*$/",
                      "type": "string"
                    },
                    "gc-schedule": {
                      "description": "Run garbage collection job at specified schedule.",
                      "optional": 1,
                      "type": "string",
                      "typetext": "<calendar-event>"
                    },
                    "keep-daily": {
                      "description": "Number of daily backups to keep.",
                      "minimum": 1,
                      "optional": 1,
                      "type": "integer"
                    },
                    "keep-hourly": {
                      "description": "Number of hourly backups to keep.",
                      "minimum": 1,
                      "optional": 1,
                      "type": "integer"
                    },
                    "keep-last": {
                      "description": "Number of backups to keep.",
                      "minimum": 1,
                      "optional": 1,
                      "type": "integer"
                    },
                    "keep-monthly": {
                      "description": "Number of monthly backups to keep.",
                      "minimum": 1,
                      "optional": 1,
                      "type": "integer"
                    },
                    "keep-weekly": {
                      "description": "Number of weekly backups to keep.",
                      "minimum": 1,
                      "optional": 1,
                      "type": "integer"
                    },
                    "keep-yearly": {
                      "description": "Number of yearly backups to keep.",
                      "minimum": 1,
                      "optional": 1,
                      "type": "integer"
                    },
                    "maintenance-mode": {
                      "description": "Maintenance mode, type is either 'offline' or 'read-only', message should be enclosed in \"",
                      "format": {
                        "additionalProperties": false,
                        "default_key": "type",
                        "description": "Maintenance mode",
                        "properties": {
                          "message": {
                            "description": "Message describing the reason for the maintenance.",
                            "maxLength": 64,
                            "optional": 1,
                            "pattern": "/^[[:^cntrl:]]*$/",
                            "type": "string"
                          },
                          "type": {
                            "description": "Maintenance type.",
                            "enum": [
                              "read-only",
                              "offline",
                              "delete",
                              "unmount",
                              "s3-refresh"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "optional": 1,
                      "type": "string",
                      "typetext": "[type=<enum> [,message=<string>]]"
                    },
                    "name": {
                      "description": "Datastore name.",
                      "maxLength": 32,
                      "minLength": 3,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "notification-mode": {
                      "default": "notification-system",
                      "description": "Configure how notifications for this datastore should be sent.\n`legacy-sendmail` sends email notifications to the user configured\nin `notify-user` via the system's `sendmail` executable.\n`notification-system` emits matchable notification events to the\nnotification system.",
                      "enum": [
                        "legacy-sendmail",
                        "notification-system"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "notify": {
                      "description": "Datastore notification setting, enum can be one of 'always', 'never', or 'error'.",
                      "format": {
                        "additionalProperties": false,
                        "description": "Datastore notify settings",
                        "properties": {
                          "gc": {
                            "description": "When do we send notifications",
                            "enum": [
                              "never",
                              "always",
                              "error"
                            ],
                            "optional": 1,
                            "type": "string"
                          },
                          "prune": {
                            "description": "When do we send notifications",
                            "enum": [
                              "never",
                              "always",
                              "error"
                            ],
                            "optional": 1,
                            "type": "string"
                          },
                          "sync": {
                            "description": "When do we send notifications",
                            "enum": [
                              "never",
                              "always",
                              "error"
                            ],
                            "optional": 1,
                            "type": "string"
                          },
                          "verify": {
                            "description": "When do we send notifications",
                            "enum": [
                              "never",
                              "always",
                              "error"
                            ],
                            "optional": 1,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "optional": 1,
                      "type": "string",
                      "typetext": "[[gc=<enum>] [,prune=<enum>] [,sync=<enum>] [,verify=<enum>]]"
                    },
                    "notify-user": {
                      "description": "User ID",
                      "maxLength": 64,
                      "minLength": 3,
                      "optional": 1,
                      "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "overwrite-in-use": {
                      "default": false,
                      "description": "Overwrite in use marker (S3 backed datastores only).",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "path": {
                      "description": "Either the absolute path to the datastore directory, or a relative on-device path for removable datastores.",
                      "maxLength": 4096,
                      "minLength": 1,
                      "type": "string"
                    },
                    "prune-schedule": {
                      "description": "Run prune job at specified schedule.",
                      "optional": 1,
                      "type": "string",
                      "typetext": "<calendar-event>"
                    },
                    "reuse-datastore": {
                      "default": false,
                      "description": "Re-use existing datastore directory.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "tuning": {
                      "description": "Datastore tuning options",
                      "format": {
                        "additionalProperties": false,
                        "description": "Datastore tuning options",
                        "properties": {
                          "chunk-order": {
                            "default": "inode",
                            "description": "The order to sort chunks by",
                            "enum": [
                              "none",
                              "inode"
                            ],
                            "optional": 1,
                            "type": "string"
                          },
                          "gc-atime-cutoff": {
                            "default": 1445,
                            "description": "Cutoff (in minutes) for chunk cleanup atime check in garbage collection phase 2 (default 24h 5m)",
                            "maximum": 2880,
                            "minimum": 1,
                            "optional": 1,
                            "type": "integer"
                          },
                          "gc-atime-safety-check": {
                            "default": true,
                            "description": "Check filesystem atime updates are honored during store creation and garbage collection",
                            "optional": 1,
                            "type": "boolean"
                          },
                          "gc-cache-capacity": {
                            "default": 1048576,
                            "description": "Garbage collection chunk digest cache capacity",
                            "maximum": 8388608,
                            "minimum": 0,
                            "optional": 1,
                            "type": "integer"
                          },
                          "sync-level": {
                            "default": "filesystem",
                            "description": "The level of syncing that is done when writing into a datastore.",
                            "enum": [
                              "none",
                              "file",
                              "filesystem"
                            ],
                            "optional": 1,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "optional": 1,
                      "type": "string",
                      "typetext": "[[chunk-order=<enum>] [,gc-atime-cutoff=<integer>] [,gc-atime-safety-check=<1|0>] [,gc-cache-capacity=<integer>] [,sync-level=<enum>]]"
                    },
                    "verify-new": {
                      "description": "If enabled, all new backups will be verified right after completion.",
                      "optional": 1,
                      "type": "boolean"
                    }
                  }
                },
                "permissions": {
                  "check": {
                    "partial": false,
                    "path": [
                      "datastore"
                    ],
                    "privs": [
                      "Datastore.Allocate"
                    ]
                  },
                  "description": "Requires Datastore.Allocate and, for a backing-device, Sys.Modify on '/system/disks'."
                },
                "returns": {
                  "type": "null"
                }
              }
            },
            "leaf": 0,
            "path": "/config/datastore",
            "text": "datastore"
          },
          {
            "children": [
              {
                "info": {
                  "DELETE": {
                    "description": "Delete a drive configuration",
                    "method": "DELETE",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Delete a drive configuration",
                      "properties": {
                        "name": {
                          "description": "Drive Identifier.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "tape",
                          "device",
                          "{name}"
                        ],
                        "privs": [
                          "Tape.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  },
                  "GET": {
                    "description": "Get drive configuration",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Get drive configuration",
                      "properties": {
                        "name": {
                          "description": "Drive Identifier.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "tape",
                          "device",
                          "{name}"
                        ],
                        "privs": [
                          "Tape.Audit"
                        ]
                      }
                    },
                    "returns": {
                      "additionalProperties": false,
                      "description": "Lto SCSI tape driver",
                      "properties": {
                        "changer": {
                          "description": "Tape Changer Identifier.",
                          "maxLength": 32,
                          "minLength": 3,
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "changer-drivenum": {
                          "default": 0,
                          "description": "Associated changer drive number (requires option changer)",
                          "maximum": 255,
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "name": {
                          "description": "Drive Identifier.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "path": {
                          "description": "The path to a LTO SCSI-generic tape device (i.e. '/dev/sg0')",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "PUT": {
                    "description": "Update a drive configuration",
                    "method": "PUT",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Update a drive configuration",
                      "properties": {
                        "changer": {
                          "description": "Tape Changer Identifier.",
                          "maxLength": 32,
                          "minLength": 3,
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "changer-drivenum": {
                          "default": 0,
                          "description": "Associated changer drive number (requires option changer)",
                          "maximum": 255,
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "delete": {
                          "description": "List of properties to delete.",
                          "items": {
                            "description": "Deletable property name",
                            "enum": [
                              "changer",
                              "changer-drivenum"
                            ],
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "digest": {
                          "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                          "optional": 1,
                          "pattern": "/^[a-f0-9]{64}$/",
                          "type": "string"
                        },
                        "name": {
                          "description": "Drive Identifier.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "path": {
                          "description": "The path to a LTO SCSI-generic tape device (i.e. '/dev/sg0')",
                          "optional": 1,
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "tape",
                          "device",
                          "{name}"
                        ],
                        "privs": [
                          "Tape.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 1,
                "path": "/config/drive/{name}",
                "text": "{name}"
              }
            ],
            "info": {
              "GET": {
                "description": "List drives",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "List drives",
                  "properties": {}
                },
                "permissions": {
                  "description": "List configured tape drives filtered by Tape.Audit privileges",
                  "user": "all"
                },
                "returns": {
                  "description": "The list of configured drives (with config digest).",
                  "items": {
                    "additionalProperties": false,
                    "description": "Lto SCSI tape driver",
                    "properties": {
                      "changer": {
                        "description": "Tape Changer Identifier.",
                        "maxLength": 32,
                        "minLength": 3,
                        "optional": 1,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "changer-drivenum": {
                        "default": 0,
                        "description": "Associated changer drive number (requires option changer)",
                        "maximum": 255,
                        "minimum": 0,
                        "optional": 1,
                        "type": "integer"
                      },
                      "name": {
                        "description": "Drive Identifier.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "path": {
                        "description": "The path to a LTO SCSI-generic tape device (i.e. '/dev/sg0')",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "POST": {
                "description": "Create a new drive",
                "method": "POST",
                "parameters": {
                  "additionalProperties": false,
                  "description": "Create a new drive",
                  "properties": {
                    "changer": {
                      "description": "Tape Changer Identifier.",
                      "maxLength": 32,
                      "minLength": 3,
                      "optional": 1,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "changer-drivenum": {
                      "default": 0,
                      "description": "Associated changer drive number (requires option changer)",
                      "maximum": 255,
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer"
                    },
                    "name": {
                      "description": "Drive Identifier.",
                      "maxLength": 32,
                      "minLength": 3,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "path": {
                      "description": "The path to a LTO SCSI-generic tape device (i.e. '/dev/sg0')",
                      "type": "string"
                    }
                  }
                },
                "permissions": {
                  "check": {
                    "partial": false,
                    "path": [
                      "tape",
                      "device"
                    ],
                    "privs": [
                      "Tape.Modify"
                    ]
                  }
                },
                "returns": {
                  "type": "null"
                }
              }
            },
            "leaf": 0,
            "path": "/config/drive",
            "text": "drive"
          },
          {
            "children": [
              {
                "info": {
                  "DELETE": {
                    "description": "Delete a media pool configuration",
                    "method": "DELETE",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Delete a media pool configuration",
                      "properties": {
                        "name": {
                          "description": "Media pool name.",
                          "maxLength": 32,
                          "minLength": 2,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "tape",
                          "pool",
                          "{name}"
                        ],
                        "privs": [
                          "Tape.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  },
                  "GET": {
                    "description": "Get media pool configuration",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Get media pool configuration",
                      "properties": {
                        "name": {
                          "description": "Media pool name.",
                          "maxLength": 32,
                          "minLength": 2,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "tape",
                          "pool",
                          "{name}"
                        ],
                        "privs": [
                          "Tape.Audit"
                        ]
                      }
                    },
                    "returns": {
                      "additionalProperties": false,
                      "description": "Media pool configuration",
                      "properties": {
                        "allocation": {
                          "description": "Media set allocation policy ('continue', 'always', or a calendar event).",
                          "optional": 1,
                          "type": "string"
                        },
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "encrypt": {
                          "description": "Tape encryption key fingerprint (sha256).",
                          "optional": 1,
                          "pattern": "/^(?:[0-9a-fA-F][0-9a-fA-F])(?::[0-9a-fA-F][0-9a-fA-F]){31}$/",
                          "type": "string"
                        },
                        "name": {
                          "description": "Media pool name.",
                          "maxLength": 32,
                          "minLength": 2,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "retention": {
                          "description": "Media retention policy ('overwrite', 'keep', or time span).",
                          "optional": 1,
                          "type": "string"
                        },
                        "template": {
                          "description": "Media set naming template (may contain strftime() time format specifications).",
                          "maxLength": 64,
                          "minLength": 2,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "PUT": {
                    "description": "Update media pool settings",
                    "method": "PUT",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Update media pool settings",
                      "properties": {
                        "allocation": {
                          "description": "Media set allocation policy ('continue', 'always', or a calendar event).",
                          "optional": 1,
                          "type": "string"
                        },
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "delete": {
                          "description": "List of properties to delete.",
                          "items": {
                            "description": "Deletable property name",
                            "enum": [
                              "allocation",
                              "retention",
                              "template",
                              "encrypt",
                              "comment"
                            ],
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "encrypt": {
                          "description": "Tape encryption key fingerprint (sha256).",
                          "optional": 1,
                          "pattern": "/^(?:[0-9a-fA-F][0-9a-fA-F])(?::[0-9a-fA-F][0-9a-fA-F]){31}$/",
                          "type": "string"
                        },
                        "name": {
                          "description": "Media pool name.",
                          "maxLength": 32,
                          "minLength": 2,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "retention": {
                          "description": "Media retention policy ('overwrite', 'keep', or time span).",
                          "optional": 1,
                          "type": "string"
                        },
                        "template": {
                          "description": "Media set naming template (may contain strftime() time format specifications).",
                          "maxLength": 64,
                          "minLength": 2,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "tape",
                          "pool",
                          "{name}"
                        ],
                        "privs": [
                          "Tape.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 1,
                "path": "/config/media-pool/{name}",
                "text": "{name}"
              }
            ],
            "info": {
              "GET": {
                "description": "List media pools",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "List media pools",
                  "properties": {}
                },
                "permissions": {
                  "description": "List configured media pools filtered by Tape.Audit privileges",
                  "user": "all"
                },
                "returns": {
                  "description": "The list of configured media pools (with config digest).",
                  "items": {
                    "additionalProperties": false,
                    "description": "Media pool configuration",
                    "properties": {
                      "allocation": {
                        "description": "Media set allocation policy ('continue', 'always', or a calendar event).",
                        "optional": 1,
                        "type": "string"
                      },
                      "comment": {
                        "description": "Comment.",
                        "maxLength": 128,
                        "optional": 1,
                        "pattern": "/^[[:^cntrl:]]*$/",
                        "type": "string"
                      },
                      "encrypt": {
                        "description": "Tape encryption key fingerprint (sha256).",
                        "optional": 1,
                        "pattern": "/^(?:[0-9a-fA-F][0-9a-fA-F])(?::[0-9a-fA-F][0-9a-fA-F]){31}$/",
                        "type": "string"
                      },
                      "name": {
                        "description": "Media pool name.",
                        "maxLength": 32,
                        "minLength": 2,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "retention": {
                        "description": "Media retention policy ('overwrite', 'keep', or time span).",
                        "optional": 1,
                        "type": "string"
                      },
                      "template": {
                        "description": "Media set naming template (may contain strftime() time format specifications).",
                        "maxLength": 64,
                        "minLength": 2,
                        "optional": 1,
                        "pattern": "/^[[:^cntrl:]]*$/",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "POST": {
                "description": "Create a new media pool",
                "method": "POST",
                "parameters": {
                  "additionalProperties": false,
                  "description": "Create a new media pool",
                  "properties": {
                    "allocation": {
                      "description": "Media set allocation policy ('continue', 'always', or a calendar event).",
                      "optional": 1,
                      "type": "string"
                    },
                    "comment": {
                      "description": "Comment.",
                      "maxLength": 128,
                      "optional": 1,
                      "pattern": "/^[[:^cntrl:]]*$/",
                      "type": "string"
                    },
                    "encrypt": {
                      "description": "Tape encryption key fingerprint (sha256).",
                      "optional": 1,
                      "pattern": "/^(?:[0-9a-fA-F][0-9a-fA-F])(?::[0-9a-fA-F][0-9a-fA-F]){31}$/",
                      "type": "string"
                    },
                    "name": {
                      "description": "Media pool name.",
                      "maxLength": 32,
                      "minLength": 2,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "retention": {
                      "description": "Media retention policy ('overwrite', 'keep', or time span).",
                      "optional": 1,
                      "type": "string"
                    },
                    "template": {
                      "description": "Media set naming template (may contain strftime() time format specifications).",
                      "maxLength": 64,
                      "minLength": 2,
                      "optional": 1,
                      "pattern": "/^[[:^cntrl:]]*$/",
                      "type": "string"
                    }
                  }
                },
                "permissions": {
                  "check": {
                    "partial": false,
                    "path": [
                      "tape",
                      "pool"
                    ],
                    "privs": [
                      "Tape.Modify"
                    ]
                  }
                },
                "returns": {
                  "type": "null"
                }
              }
            },
            "leaf": 0,
            "path": "/config/media-pool",
            "text": "media-pool"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "info": {
                      "DELETE": {
                        "description": "Remove a InfluxDB http server configuration",
                        "method": "DELETE",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Remove a InfluxDB http server configuration",
                          "properties": {
                            "digest": {
                              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                              "optional": 1,
                              "pattern": "/^[a-f0-9]{64}$/",
                              "type": "string"
                            },
                            "name": {
                              "description": "Metrics Server ID.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      },
                      "GET": {
                        "description": "Read the InfluxDB http server configuration",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Read the InfluxDB http server configuration",
                          "properties": {
                            "name": {
                              "description": "Metrics Server ID.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [],
                            "privs": [
                              "Sys.Audit"
                            ]
                          }
                        },
                        "returns": {
                          "additionalProperties": false,
                          "description": "InfluxDB Server (HTTP(s))",
                          "properties": {
                            "bucket": {
                              "default": "proxmox",
                              "description": "InfluxDB Bucket.",
                              "maxLength": 32,
                              "minLength": 1,
                              "optional": 1,
                              "type": "string"
                            },
                            "comment": {
                              "description": "Comment.",
                              "maxLength": 128,
                              "optional": 1,
                              "pattern": "/^[[:^cntrl:]]*$/",
                              "type": "string"
                            },
                            "enable": {
                              "default": true,
                              "description": "Enables or disables the metrics server",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "max-body-size": {
                              "default": 25000000,
                              "description": "The (optional) maximum body size",
                              "optional": 1,
                              "type": "integer"
                            },
                            "name": {
                              "description": "Metrics Server ID.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "organization": {
                              "default": "proxmox",
                              "description": "InfluxDB Organization.",
                              "maxLength": 32,
                              "minLength": 1,
                              "optional": 1,
                              "type": "string"
                            },
                            "token": {
                              "description": "The (optional) API token",
                              "optional": 1,
                              "type": "string"
                            },
                            "url": {
                              "description": "HTTP(s) url with optional port.",
                              "pattern": "/^https?://(?:(?:(?:(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|\\[(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))\\]))(?::(?:[0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]))?)|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))(?:/[^\u0000-\u001f]*)?$/",
                              "type": "string"
                            },
                            "verify-tls": {
                              "default": true,
                              "description": "If true, the certificate will be validated.",
                              "optional": 1,
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "PUT": {
                        "description": "Update an InfluxDB http server configuration",
                        "method": "PUT",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Update an InfluxDB http server configuration",
                          "properties": {
                            "bucket": {
                              "default": "proxmox",
                              "description": "InfluxDB Bucket.",
                              "maxLength": 32,
                              "minLength": 1,
                              "optional": 1,
                              "type": "string"
                            },
                            "comment": {
                              "description": "Comment.",
                              "maxLength": 128,
                              "optional": 1,
                              "pattern": "/^[[:^cntrl:]]*$/",
                              "type": "string"
                            },
                            "delete": {
                              "description": "List of properties to delete.",
                              "items": {
                                "description": "Deletable property name",
                                "enum": [
                                  "enable",
                                  "token",
                                  "bucket",
                                  "organization",
                                  "max-body-size",
                                  "verify-tls",
                                  "comment"
                                ],
                                "type": "string"
                              },
                              "optional": 1,
                              "type": "array"
                            },
                            "digest": {
                              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                              "optional": 1,
                              "pattern": "/^[a-f0-9]{64}$/",
                              "type": "string"
                            },
                            "enable": {
                              "default": true,
                              "description": "Enables or disables the metrics server",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "max-body-size": {
                              "default": 25000000,
                              "description": "The (optional) maximum body size",
                              "optional": 1,
                              "type": "integer"
                            },
                            "name": {
                              "description": "Metrics Server ID.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "organization": {
                              "default": "proxmox",
                              "description": "InfluxDB Organization.",
                              "maxLength": 32,
                              "minLength": 1,
                              "optional": 1,
                              "type": "string"
                            },
                            "token": {
                              "description": "The (optional) API token",
                              "optional": 1,
                              "type": "string"
                            },
                            "url": {
                              "description": "HTTP(s) url with optional port.",
                              "optional": 1,
                              "pattern": "/^https?://(?:(?:(?:(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|\\[(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))\\]))(?::(?:[0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]))?)|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))(?:/[^\u0000-\u001f]*)?$/",
                              "type": "string"
                            },
                            "verify-tls": {
                              "default": true,
                              "description": "If true, the certificate will be validated.",
                              "optional": 1,
                              "type": "boolean"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/config/metrics/influxdb-http/{name}",
                    "text": "{name}"
                  }
                ],
                "info": {
                  "GET": {
                    "description": "List configured InfluxDB http metric servers.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "List configured InfluxDB http metric servers.",
                      "properties": {}
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [],
                        "privs": [
                          "Sys.Audit"
                        ]
                      }
                    },
                    "returns": {
                      "description": "List of configured InfluxDB http metric servers.",
                      "items": {
                        "additionalProperties": false,
                        "description": "InfluxDB Server (HTTP(s))",
                        "properties": {
                          "bucket": {
                            "default": "proxmox",
                            "description": "InfluxDB Bucket.",
                            "maxLength": 32,
                            "minLength": 1,
                            "optional": 1,
                            "type": "string"
                          },
                          "comment": {
                            "description": "Comment.",
                            "maxLength": 128,
                            "optional": 1,
                            "pattern": "/^[[:^cntrl:]]*$/",
                            "type": "string"
                          },
                          "enable": {
                            "default": true,
                            "description": "Enables or disables the metrics server",
                            "optional": 1,
                            "type": "boolean"
                          },
                          "max-body-size": {
                            "default": 25000000,
                            "description": "The (optional) maximum body size",
                            "optional": 1,
                            "type": "integer"
                          },
                          "name": {
                            "description": "Metrics Server ID.",
                            "maxLength": 32,
                            "minLength": 3,
                            "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                            "type": "string"
                          },
                          "organization": {
                            "default": "proxmox",
                            "description": "InfluxDB Organization.",
                            "maxLength": 32,
                            "minLength": 1,
                            "optional": 1,
                            "type": "string"
                          },
                          "token": {
                            "description": "The (optional) API token",
                            "optional": 1,
                            "type": "string"
                          },
                          "url": {
                            "description": "HTTP(s) url with optional port.",
                            "pattern": "/^https?://(?:(?:(?:(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|\\[(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))\\]))(?::(?:[0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]))?)|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))(?:/[^\u0000-\u001f]*)?$/",
                            "type": "string"
                          },
                          "verify-tls": {
                            "default": true,
                            "description": "If true, the certificate will be validated.",
                            "optional": 1,
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "POST": {
                    "description": "Create a new InfluxDB http server configuration",
                    "method": "POST",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Create a new InfluxDB http server configuration",
                      "properties": {
                        "bucket": {
                          "default": "proxmox",
                          "description": "InfluxDB Bucket.",
                          "maxLength": 32,
                          "minLength": 1,
                          "optional": 1,
                          "type": "string"
                        },
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "enable": {
                          "default": true,
                          "description": "Enables or disables the metrics server",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "max-body-size": {
                          "default": 25000000,
                          "description": "The (optional) maximum body size",
                          "optional": 1,
                          "type": "integer"
                        },
                        "name": {
                          "description": "Metrics Server ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "organization": {
                          "default": "proxmox",
                          "description": "InfluxDB Organization.",
                          "maxLength": 32,
                          "minLength": 1,
                          "optional": 1,
                          "type": "string"
                        },
                        "token": {
                          "description": "The (optional) API token",
                          "optional": 1,
                          "type": "string"
                        },
                        "url": {
                          "description": "HTTP(s) url with optional port.",
                          "pattern": "/^https?://(?:(?:(?:(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|\\[(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))\\]))(?::(?:[0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]))?)|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))(?:/[^\u0000-\u001f]*)?$/",
                          "type": "string"
                        },
                        "verify-tls": {
                          "default": true,
                          "description": "If true, the certificate will be validated.",
                          "optional": 1,
                          "type": "boolean"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [],
                        "privs": [
                          "Sys.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 0,
                "path": "/config/metrics/influxdb-http",
                "text": "influxdb-http"
              },
              {
                "children": [
                  {
                    "info": {
                      "DELETE": {
                        "description": "Remove a InfluxDB udp server configuration",
                        "method": "DELETE",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Remove a InfluxDB udp server configuration",
                          "properties": {
                            "digest": {
                              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                              "optional": 1,
                              "pattern": "/^[a-f0-9]{64}$/",
                              "type": "string"
                            },
                            "name": {
                              "description": "Metrics Server ID.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      },
                      "GET": {
                        "description": "Read the InfluxDB udp server configuration",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Read the InfluxDB udp server configuration",
                          "properties": {
                            "name": {
                              "description": "Metrics Server ID.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [],
                            "privs": [
                              "Sys.Audit"
                            ]
                          }
                        },
                        "returns": {
                          "additionalProperties": false,
                          "description": "InfluxDB Server (UDP)",
                          "properties": {
                            "comment": {
                              "description": "Comment.",
                              "maxLength": 128,
                              "optional": 1,
                              "pattern": "/^[[:^cntrl:]]*$/",
                              "type": "string"
                            },
                            "enable": {
                              "default": true,
                              "description": "Enables or disables the metrics server",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "host": {
                              "description": "host:port combination (Host can be DNS name or IP address).",
                              "pattern": "/^(?:(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|\\[(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))\\])):(?:[0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$/",
                              "type": "string"
                            },
                            "mtu": {
                              "default": 1500,
                              "description": "The MTU",
                              "optional": 1,
                              "type": "integer"
                            },
                            "name": {
                              "description": "Metrics Server ID.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "PUT": {
                        "description": "Update an InfluxDB udp server configuration",
                        "method": "PUT",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Update an InfluxDB udp server configuration",
                          "properties": {
                            "comment": {
                              "description": "Comment.",
                              "maxLength": 128,
                              "optional": 1,
                              "pattern": "/^[[:^cntrl:]]*$/",
                              "type": "string"
                            },
                            "delete": {
                              "description": "List of properties to delete.",
                              "items": {
                                "description": "Deletable property name",
                                "enum": [
                                  "enable",
                                  "mtu",
                                  "comment"
                                ],
                                "type": "string"
                              },
                              "optional": 1,
                              "type": "array"
                            },
                            "digest": {
                              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                              "optional": 1,
                              "pattern": "/^[a-f0-9]{64}$/",
                              "type": "string"
                            },
                            "enable": {
                              "default": true,
                              "description": "Enables or disables the metrics server",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "host": {
                              "description": "host:port combination (Host can be DNS name or IP address).",
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|\\[(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))\\])):(?:[0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$/",
                              "type": "string"
                            },
                            "mtu": {
                              "default": 1500,
                              "description": "The MTU",
                              "optional": 1,
                              "type": "integer"
                            },
                            "name": {
                              "description": "Metrics Server ID.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/config/metrics/influxdb-udp/{name}",
                    "text": "{name}"
                  }
                ],
                "info": {
                  "GET": {
                    "description": "List configured InfluxDB udp metric servers.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "List configured InfluxDB udp metric servers.",
                      "properties": {}
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [],
                        "privs": [
                          "Sys.Audit"
                        ]
                      }
                    },
                    "returns": {
                      "description": "List of configured InfluxDB udp metric servers.",
                      "items": {
                        "additionalProperties": false,
                        "description": "InfluxDB Server (UDP)",
                        "properties": {
                          "comment": {
                            "description": "Comment.",
                            "maxLength": 128,
                            "optional": 1,
                            "pattern": "/^[[:^cntrl:]]*$/",
                            "type": "string"
                          },
                          "enable": {
                            "default": true,
                            "description": "Enables or disables the metrics server",
                            "optional": 1,
                            "type": "boolean"
                          },
                          "host": {
                            "description": "host:port combination (Host can be DNS name or IP address).",
                            "pattern": "/^(?:(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|\\[(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))\\])):(?:[0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$/",
                            "type": "string"
                          },
                          "mtu": {
                            "default": 1500,
                            "description": "The MTU",
                            "optional": 1,
                            "type": "integer"
                          },
                          "name": {
                            "description": "Metrics Server ID.",
                            "maxLength": 32,
                            "minLength": 3,
                            "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "POST": {
                    "description": "Create a new InfluxDB udp server configuration",
                    "method": "POST",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Create a new InfluxDB udp server configuration",
                      "properties": {
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "enable": {
                          "default": true,
                          "description": "Enables or disables the metrics server",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "host": {
                          "description": "host:port combination (Host can be DNS name or IP address).",
                          "pattern": "/^(?:(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|\\[(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))\\])):(?:[0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$/",
                          "type": "string"
                        },
                        "mtu": {
                          "default": 1500,
                          "description": "The MTU",
                          "optional": 1,
                          "type": "integer"
                        },
                        "name": {
                          "description": "Metrics Server ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [],
                        "privs": [
                          "Sys.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 0,
                "path": "/config/metrics/influxdb-udp",
                "text": "influxdb-udp"
              }
            ],
            "info": {
              "GET": {
                "description": "Directory index.",
                "method": "GET",
                "parameters": {
                  "additionalProperties": true,
                  "description": "Directory index.",
                  "properties": {}
                },
                "permissions": {
                  "user": "all"
                },
                "returns": {
                  "type": "null"
                }
              }
            },
            "leaf": 0,
            "path": "/config/metrics",
            "text": "metrics"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "children": [
                      {
                        "info": {
                          "DELETE": {
                            "description": "Delete gotify endpoint.",
                            "method": "DELETE",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Delete gotify endpoint.",
                              "properties": {
                                "name": {
                                  "description": "Name schema for targets and matchers",
                                  "maxLength": 32,
                                  "minLength": 2,
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "check": {
                                "partial": false,
                                "path": [
                                  "system",
                                  "notifications"
                                ],
                                "privs": [
                                  "Sys.Modify"
                                ]
                              }
                            },
                            "returns": {
                              "type": "null"
                            }
                          },
                          "GET": {
                            "description": "Get a gotify endpoint.",
                            "method": "GET",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Get a gotify endpoint.",
                              "properties": {
                                "name": {
                                  "description": "Name schema for targets and matchers",
                                  "maxLength": 32,
                                  "minLength": 2,
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "check": {
                                "partial": false,
                                "path": [
                                  "system",
                                  "notifications"
                                ],
                                "privs": [
                                  "Sys.Audit"
                                ]
                              }
                            },
                            "returns": {
                              "additionalProperties": false,
                              "description": "Config for  Gotify notification endpoints",
                              "properties": {
                                "comment": {
                                  "description": "Comment.",
                                  "maxLength": 128,
                                  "optional": 1,
                                  "pattern": "/^[[:^cntrl:]]*$/",
                                  "type": "string"
                                },
                                "disable": {
                                  "description": "Disable this target.",
                                  "optional": 1,
                                  "type": "boolean"
                                },
                                "filter": {
                                  "description": "Deprecated.",
                                  "optional": 1,
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name schema for targets and matchers",
                                  "maxLength": 32,
                                  "minLength": 2,
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                },
                                "origin": {
                                  "description": "The origin of a notification configuration entry.",
                                  "enum": [
                                    "user-created",
                                    "builtin",
                                    "modified-builtin"
                                  ],
                                  "optional": 1,
                                  "type": "string"
                                },
                                "server": {
                                  "description": "Gotify Server URL.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "PUT": {
                            "description": "Update gotify endpoint.",
                            "method": "PUT",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Update gotify endpoint.",
                              "properties": {
                                "comment": {
                                  "description": "Comment.",
                                  "maxLength": 128,
                                  "optional": 1,
                                  "pattern": "/^[[:^cntrl:]]*$/",
                                  "type": "string"
                                },
                                "delete": {
                                  "description": "List of properties to delete.",
                                  "items": {
                                    "description": "The set of properties that can be deleted from a gotify endpoint configuration.",
                                    "enum": [
                                      "comment",
                                      "disable"
                                    ],
                                    "type": "string"
                                  },
                                  "optional": 1,
                                  "type": "array"
                                },
                                "digest": {
                                  "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                                  "optional": 1,
                                  "pattern": "/^[a-f0-9]{64}$/",
                                  "type": "string"
                                },
                                "disable": {
                                  "description": "Disable this target.",
                                  "optional": 1,
                                  "type": "boolean"
                                },
                                "name": {
                                  "description": "Name schema for targets and matchers",
                                  "maxLength": 32,
                                  "minLength": 2,
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                },
                                "server": {
                                  "description": "Gotify Server URL.",
                                  "optional": 1,
                                  "type": "string"
                                },
                                "token": {
                                  "description": "Authentication token",
                                  "optional": 1,
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "check": {
                                "partial": false,
                                "path": [
                                  "system",
                                  "notifications"
                                ],
                                "privs": [
                                  "Sys.Modify"
                                ]
                              }
                            },
                            "returns": {
                              "type": "null"
                            }
                          }
                        },
                        "leaf": 1,
                        "path": "/config/notifications/endpoints/gotify/{name}",
                        "text": "{name}"
                      }
                    ],
                    "info": {
                      "GET": {
                        "description": "List all gotify endpoints.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "List all gotify endpoints.",
                          "properties": {}
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "notifications"
                            ],
                            "privs": [
                              "Sys.Audit"
                            ]
                          }
                        },
                        "returns": {
                          "description": "List of gotify endpoints.",
                          "items": {
                            "additionalProperties": false,
                            "description": "Config for  Gotify notification endpoints",
                            "properties": {
                              "comment": {
                                "description": "Comment.",
                                "maxLength": 128,
                                "optional": 1,
                                "pattern": "/^[[:^cntrl:]]*$/",
                                "type": "string"
                              },
                              "disable": {
                                "description": "Disable this target.",
                                "optional": 1,
                                "type": "boolean"
                              },
                              "filter": {
                                "description": "Deprecated.",
                                "optional": 1,
                                "type": "string"
                              },
                              "name": {
                                "description": "Name schema for targets and matchers",
                                "maxLength": 32,
                                "minLength": 2,
                                "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                "type": "string"
                              },
                              "origin": {
                                "description": "The origin of a notification configuration entry.",
                                "enum": [
                                  "user-created",
                                  "builtin",
                                  "modified-builtin"
                                ],
                                "optional": 1,
                                "type": "string"
                              },
                              "server": {
                                "description": "Gotify Server URL.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "POST": {
                        "description": "Add a new gotify endpoint.",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Add a new gotify endpoint.",
                          "properties": {
                            "comment": {
                              "description": "Comment.",
                              "maxLength": 128,
                              "optional": 1,
                              "pattern": "/^[[:^cntrl:]]*$/",
                              "type": "string"
                            },
                            "disable": {
                              "description": "Disable this target.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "filter": {
                              "description": "Deprecated.",
                              "optional": 1,
                              "type": "string"
                            },
                            "name": {
                              "description": "Name schema for targets and matchers",
                              "maxLength": 32,
                              "minLength": 2,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "origin": {
                              "description": "The origin of a notification configuration entry.",
                              "enum": [
                                "user-created",
                                "builtin",
                                "modified-builtin"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "server": {
                              "description": "Gotify Server URL.",
                              "type": "string"
                            },
                            "token": {
                              "description": "Authentication token",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "notifications"
                            ],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 0,
                    "path": "/config/notifications/endpoints/gotify",
                    "text": "gotify"
                  },
                  {
                    "children": [
                      {
                        "info": {
                          "DELETE": {
                            "description": "Delete sendmail endpoint.",
                            "method": "DELETE",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Delete sendmail endpoint.",
                              "properties": {
                                "name": {
                                  "description": "Name schema for targets and matchers",
                                  "maxLength": 32,
                                  "minLength": 2,
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "check": {
                                "partial": false,
                                "path": [
                                  "system",
                                  "notifications"
                                ],
                                "privs": [
                                  "Sys.Modify"
                                ]
                              }
                            },
                            "returns": {
                              "type": "null"
                            }
                          },
                          "GET": {
                            "description": "Get a sendmail endpoint.",
                            "method": "GET",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Get a sendmail endpoint.",
                              "properties": {
                                "name": {
                                  "description": "Name schema for targets and matchers",
                                  "maxLength": 32,
                                  "minLength": 2,
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "check": {
                                "partial": false,
                                "path": [
                                  "system",
                                  "notifications"
                                ],
                                "privs": [
                                  "Sys.Audit"
                                ]
                              }
                            },
                            "returns": {
                              "additionalProperties": false,
                              "description": "Config for Sendmail notification endpoints",
                              "properties": {
                                "author": {
                                  "description": "Author of the mail. Defaults to 'Proxmox Backup Server ($hostname)'",
                                  "optional": 1,
                                  "type": "string"
                                },
                                "comment": {
                                  "description": "Comment.",
                                  "maxLength": 128,
                                  "optional": 1,
                                  "pattern": "/^[[:^cntrl:]]*$/",
                                  "type": "string"
                                },
                                "disable": {
                                  "description": "Disable this target.",
                                  "optional": 1,
                                  "type": "boolean"
                                },
                                "filter": {
                                  "description": "Deprecated.",
                                  "optional": 1,
                                  "type": "string"
                                },
                                "from-address": {
                                  "description": "`From` address for sent E-Mails.\nIf the parameter is not set, the plugin will fall back to the\nemail-from setting from node.cfg (PBS).\nIf that is also not set, the plugin will default to root@$hostname,\nwhere $hostname is the hostname of the node.",
                                  "optional": 1,
                                  "type": "string"
                                },
                                "mailto": {
                                  "description": "Mail address to send a mail to.",
                                  "items": {
                                    "description": "E-Mail Address.",
                                    "maxLength": 64,
                                    "minLength": 2,
                                    "pattern": "/^[[:^cntrl:]]*$/",
                                    "type": "string"
                                  },
                                  "optional": 1,
                                  "type": "array"
                                },
                                "mailto-user": {
                                  "description": "Users to send a mail to. The email address of the user\nwill be looked up in users.cfg.",
                                  "items": {
                                    "description": "User ID including realm, e.g. root@pam.",
                                    "maxLength": 64,
                                    "minLength": 2,
                                    "pattern": "/^[[:^cntrl:]]*$/",
                                    "type": "string"
                                  },
                                  "optional": 1,
                                  "type": "array"
                                },
                                "name": {
                                  "description": "Name schema for targets and matchers",
                                  "maxLength": 32,
                                  "minLength": 2,
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                },
                                "origin": {
                                  "description": "The origin of a notification configuration entry.",
                                  "enum": [
                                    "user-created",
                                    "builtin",
                                    "modified-builtin"
                                  ],
                                  "optional": 1,
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "PUT": {
                            "description": "Update sendmail endpoint.",
                            "method": "PUT",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Update sendmail endpoint.",
                              "properties": {
                                "author": {
                                  "description": "Author of the mail. Defaults to 'Proxmox Backup Server ($hostname)'",
                                  "optional": 1,
                                  "type": "string"
                                },
                                "comment": {
                                  "description": "Comment.",
                                  "maxLength": 128,
                                  "optional": 1,
                                  "pattern": "/^[[:^cntrl:]]*$/",
                                  "type": "string"
                                },
                                "delete": {
                                  "description": "List of properties to delete.",
                                  "items": {
                                    "description": "The set of properties that can be deleted from a sendmail endpoint configuration.",
                                    "enum": [
                                      "author",
                                      "comment",
                                      "disable",
                                      "from-address",
                                      "mailto",
                                      "mailto-user"
                                    ],
                                    "type": "string"
                                  },
                                  "optional": 1,
                                  "type": "array"
                                },
                                "digest": {
                                  "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                                  "optional": 1,
                                  "pattern": "/^[a-f0-9]{64}$/",
                                  "type": "string"
                                },
                                "disable": {
                                  "description": "Disable this target.",
                                  "optional": 1,
                                  "type": "boolean"
                                },
                                "from-address": {
                                  "description": "`From` address for sent E-Mails.\nIf the parameter is not set, the plugin will fall back to the\nemail-from setting from node.cfg (PBS).\nIf that is also not set, the plugin will default to root@$hostname,\nwhere $hostname is the hostname of the node.",
                                  "optional": 1,
                                  "type": "string"
                                },
                                "mailto": {
                                  "description": "Mail address to send a mail to.",
                                  "items": {
                                    "description": "E-Mail Address.",
                                    "maxLength": 64,
                                    "minLength": 2,
                                    "pattern": "/^[[:^cntrl:]]*$/",
                                    "type": "string"
                                  },
                                  "optional": 1,
                                  "type": "array"
                                },
                                "mailto-user": {
                                  "description": "Users to send a mail to. The email address of the user\nwill be looked up in users.cfg.",
                                  "items": {
                                    "description": "User ID including realm, e.g. root@pam.",
                                    "maxLength": 64,
                                    "minLength": 2,
                                    "pattern": "/^[[:^cntrl:]]*$/",
                                    "type": "string"
                                  },
                                  "optional": 1,
                                  "type": "array"
                                },
                                "name": {
                                  "description": "Name schema for targets and matchers",
                                  "maxLength": 32,
                                  "minLength": 2,
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "check": {
                                "partial": false,
                                "path": [
                                  "system",
                                  "notifications"
                                ],
                                "privs": [
                                  "Sys.Modify"
                                ]
                              }
                            },
                            "returns": {
                              "type": "null"
                            }
                          }
                        },
                        "leaf": 1,
                        "path": "/config/notifications/endpoints/sendmail/{name}",
                        "text": "{name}"
                      }
                    ],
                    "info": {
                      "GET": {
                        "description": "List all sendmail endpoints.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "List all sendmail endpoints.",
                          "properties": {}
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "notifications"
                            ],
                            "privs": [
                              "Sys.Audit"
                            ]
                          }
                        },
                        "returns": {
                          "description": "List of sendmail endpoints.",
                          "items": {
                            "additionalProperties": false,
                            "description": "Config for Sendmail notification endpoints",
                            "properties": {
                              "author": {
                                "description": "Author of the mail. Defaults to 'Proxmox Backup Server ($hostname)'",
                                "optional": 1,
                                "type": "string"
                              },
                              "comment": {
                                "description": "Comment.",
                                "maxLength": 128,
                                "optional": 1,
                                "pattern": "/^[[:^cntrl:]]*$/",
                                "type": "string"
                              },
                              "disable": {
                                "description": "Disable this target.",
                                "optional": 1,
                                "type": "boolean"
                              },
                              "filter": {
                                "description": "Deprecated.",
                                "optional": 1,
                                "type": "string"
                              },
                              "from-address": {
                                "description": "`From` address for sent E-Mails.\nIf the parameter is not set, the plugin will fall back to the\nemail-from setting from node.cfg (PBS).\nIf that is also not set, the plugin will default to root@$hostname,\nwhere $hostname is the hostname of the node.",
                                "optional": 1,
                                "type": "string"
                              },
                              "mailto": {
                                "description": "Mail address to send a mail to.",
                                "items": {
                                  "description": "E-Mail Address.",
                                  "maxLength": 64,
                                  "minLength": 2,
                                  "pattern": "/^[[:^cntrl:]]*$/",
                                  "type": "string"
                                },
                                "optional": 1,
                                "type": "array"
                              },
                              "mailto-user": {
                                "description": "Users to send a mail to. The email address of the user\nwill be looked up in users.cfg.",
                                "items": {
                                  "description": "User ID including realm, e.g. root@pam.",
                                  "maxLength": 64,
                                  "minLength": 2,
                                  "pattern": "/^[[:^cntrl:]]*$/",
                                  "type": "string"
                                },
                                "optional": 1,
                                "type": "array"
                              },
                              "name": {
                                "description": "Name schema for targets and matchers",
                                "maxLength": 32,
                                "minLength": 2,
                                "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                "type": "string"
                              },
                              "origin": {
                                "description": "The origin of a notification configuration entry.",
                                "enum": [
                                  "user-created",
                                  "builtin",
                                  "modified-builtin"
                                ],
                                "optional": 1,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "POST": {
                        "description": "Add a new sendmail endpoint.",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Add a new sendmail endpoint.",
                          "properties": {
                            "author": {
                              "description": "Author of the mail. Defaults to 'Proxmox Backup Server ($hostname)'",
                              "optional": 1,
                              "type": "string"
                            },
                            "comment": {
                              "description": "Comment.",
                              "maxLength": 128,
                              "optional": 1,
                              "pattern": "/^[[:^cntrl:]]*$/",
                              "type": "string"
                            },
                            "disable": {
                              "description": "Disable this target.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "filter": {
                              "description": "Deprecated.",
                              "optional": 1,
                              "type": "string"
                            },
                            "from-address": {
                              "description": "`From` address for sent E-Mails.\nIf the parameter is not set, the plugin will fall back to the\nemail-from setting from node.cfg (PBS).\nIf that is also not set, the plugin will default to root@$hostname,\nwhere $hostname is the hostname of the node.",
                              "optional": 1,
                              "type": "string"
                            },
                            "mailto": {
                              "description": "Mail address to send a mail to.",
                              "items": {
                                "description": "E-Mail Address.",
                                "maxLength": 64,
                                "minLength": 2,
                                "pattern": "/^[[:^cntrl:]]*$/",
                                "type": "string"
                              },
                              "optional": 1,
                              "type": "array"
                            },
                            "mailto-user": {
                              "description": "Users to send a mail to. The email address of the user\nwill be looked up in users.cfg.",
                              "items": {
                                "description": "User ID including realm, e.g. root@pam.",
                                "maxLength": 64,
                                "minLength": 2,
                                "pattern": "/^[[:^cntrl:]]*$/",
                                "type": "string"
                              },
                              "optional": 1,
                              "type": "array"
                            },
                            "name": {
                              "description": "Name schema for targets and matchers",
                              "maxLength": 32,
                              "minLength": 2,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "origin": {
                              "description": "The origin of a notification configuration entry.",
                              "enum": [
                                "user-created",
                                "builtin",
                                "modified-builtin"
                              ],
                              "optional": 1,
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "notifications"
                            ],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 0,
                    "path": "/config/notifications/endpoints/sendmail",
                    "text": "sendmail"
                  },
                  {
                    "children": [
                      {
                        "info": {
                          "DELETE": {
                            "description": "Delete smtp endpoint.",
                            "method": "DELETE",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Delete smtp endpoint.",
                              "properties": {
                                "name": {
                                  "description": "Name schema for targets and matchers",
                                  "maxLength": 32,
                                  "minLength": 2,
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "check": {
                                "partial": false,
                                "path": [
                                  "system",
                                  "notifications"
                                ],
                                "privs": [
                                  "Sys.Modify"
                                ]
                              }
                            },
                            "returns": {
                              "type": "null"
                            }
                          },
                          "GET": {
                            "description": "Get a smtp endpoint.",
                            "method": "GET",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Get a smtp endpoint.",
                              "properties": {
                                "name": {
                                  "description": "Name schema for targets and matchers",
                                  "maxLength": 32,
                                  "minLength": 2,
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "check": {
                                "partial": false,
                                "path": [
                                  "system",
                                  "notifications"
                                ],
                                "privs": [
                                  "Sys.Audit"
                                ]
                              }
                            },
                            "returns": {
                              "additionalProperties": false,
                              "description": "Config for Sendmail notification endpoints",
                              "properties": {
                                "author": {
                                  "description": "Author of the mail. Defaults to 'Proxmox Backup Server ($hostname)'",
                                  "optional": 1,
                                  "type": "string"
                                },
                                "comment": {
                                  "description": "Comment.",
                                  "maxLength": 128,
                                  "optional": 1,
                                  "pattern": "/^[[:^cntrl:]]*$/",
                                  "type": "string"
                                },
                                "disable": {
                                  "description": "Disable this target.",
                                  "optional": 1,
                                  "type": "boolean"
                                },
                                "from-address": {
                                  "description": "`From` address for the mail.\nSMTP relays might require that this address is owned by the user\nin order to avoid spoofing. The `From` header in the email will be\nset to `$author <$from-address>`.",
                                  "type": "string"
                                },
                                "mailto": {
                                  "description": "Mail address to send a mail to.",
                                  "items": {
                                    "description": "E-Mail Address.",
                                    "maxLength": 64,
                                    "minLength": 2,
                                    "pattern": "/^[[:^cntrl:]]*$/",
                                    "type": "string"
                                  },
                                  "optional": 1,
                                  "type": "array"
                                },
                                "mailto-user": {
                                  "description": "Users to send a mail to. The email address of the user\nwill be looked up in users.cfg.",
                                  "items": {
                                    "description": "User ID including realm, e.g. root@pam.",
                                    "maxLength": 64,
                                    "minLength": 2,
                                    "pattern": "/^[[:^cntrl:]]*$/",
                                    "type": "string"
                                  },
                                  "optional": 1,
                                  "type": "array"
                                },
                                "mode": {
                                  "default": "tls",
                                  "description": "Connection security",
                                  "enum": [
                                    "insecure",
                                    "starttls",
                                    "tls"
                                  ],
                                  "optional": 1,
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name schema for targets and matchers",
                                  "maxLength": 32,
                                  "minLength": 2,
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                },
                                "origin": {
                                  "description": "The origin of a notification configuration entry.",
                                  "enum": [
                                    "user-created",
                                    "builtin",
                                    "modified-builtin"
                                  ],
                                  "optional": 1,
                                  "type": "string"
                                },
                                "port": {
                                  "description": "The port to connect to.\nIf not set, the used port defaults to 25 (insecure), 465 (tls)\nor 587 (starttls), depending on the value of mode",
                                  "maximum": 65535,
                                  "minimum": 0,
                                  "optional": 1,
                                  "type": "integer"
                                },
                                "server": {
                                  "description": "Host name or IP of the SMTP relay.",
                                  "type": "string"
                                },
                                "username": {
                                  "description": "Username to use during authentication.\nIf no username is set, no authentication will be performed.\nThe PLAIN and LOGIN authentication methods are supported",
                                  "optional": 1,
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "PUT": {
                            "description": "Update smtp endpoint.",
                            "method": "PUT",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Update smtp endpoint.",
                              "properties": {
                                "author": {
                                  "description": "Author of the mail. Defaults to 'Proxmox Backup Server ($hostname)'",
                                  "optional": 1,
                                  "type": "string"
                                },
                                "comment": {
                                  "description": "Comment.",
                                  "maxLength": 128,
                                  "optional": 1,
                                  "pattern": "/^[[:^cntrl:]]*$/",
                                  "type": "string"
                                },
                                "delete": {
                                  "description": "List of properties to delete.",
                                  "items": {
                                    "description": "The set of properties that can be deleted from a smtp endpoint configuration.",
                                    "enum": [
                                      "author",
                                      "comment",
                                      "disable",
                                      "mailto",
                                      "mailto-user",
                                      "password",
                                      "port",
                                      "username"
                                    ],
                                    "type": "string"
                                  },
                                  "optional": 1,
                                  "type": "array"
                                },
                                "digest": {
                                  "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                                  "optional": 1,
                                  "pattern": "/^[a-f0-9]{64}$/",
                                  "type": "string"
                                },
                                "disable": {
                                  "description": "Disable this target.",
                                  "optional": 1,
                                  "type": "boolean"
                                },
                                "from-address": {
                                  "description": "`From` address for the mail.\nSMTP relays might require that this address is owned by the user\nin order to avoid spoofing. The `From` header in the email will be\nset to `$author <$from-address>`.",
                                  "optional": 1,
                                  "type": "string"
                                },
                                "mailto": {
                                  "description": "Mail address to send a mail to.",
                                  "items": {
                                    "description": "E-Mail Address.",
                                    "maxLength": 64,
                                    "minLength": 2,
                                    "pattern": "/^[[:^cntrl:]]*$/",
                                    "type": "string"
                                  },
                                  "optional": 1,
                                  "type": "array"
                                },
                                "mailto-user": {
                                  "description": "Users to send a mail to. The email address of the user\nwill be looked up in users.cfg.",
                                  "items": {
                                    "description": "User ID including realm, e.g. root@pam.",
                                    "maxLength": 64,
                                    "minLength": 2,
                                    "pattern": "/^[[:^cntrl:]]*$/",
                                    "type": "string"
                                  },
                                  "optional": 1,
                                  "type": "array"
                                },
                                "mode": {
                                  "default": "tls",
                                  "description": "Connection security",
                                  "enum": [
                                    "insecure",
                                    "starttls",
                                    "tls"
                                  ],
                                  "optional": 1,
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name schema for targets and matchers",
                                  "maxLength": 32,
                                  "minLength": 2,
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                },
                                "password": {
                                  "description": "SMTP authentication password",
                                  "optional": 1,
                                  "type": "string"
                                },
                                "port": {
                                  "description": "The port to connect to.\nIf not set, the used port defaults to 25 (insecure), 465 (tls)\nor 587 (starttls), depending on the value of mode",
                                  "maximum": 65535,
                                  "minimum": 0,
                                  "optional": 1,
                                  "type": "integer"
                                },
                                "server": {
                                  "description": "Host name or IP of the SMTP relay.",
                                  "optional": 1,
                                  "type": "string"
                                },
                                "username": {
                                  "description": "Username to use during authentication.\nIf no username is set, no authentication will be performed.\nThe PLAIN and LOGIN authentication methods are supported",
                                  "optional": 1,
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "check": {
                                "partial": false,
                                "path": [
                                  "system",
                                  "notifications"
                                ],
                                "privs": [
                                  "Sys.Modify"
                                ]
                              }
                            },
                            "returns": {
                              "type": "null"
                            }
                          }
                        },
                        "leaf": 1,
                        "path": "/config/notifications/endpoints/smtp/{name}",
                        "text": "{name}"
                      }
                    ],
                    "info": {
                      "GET": {
                        "description": "List all smtp endpoints.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "List all smtp endpoints.",
                          "properties": {}
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "notifications"
                            ],
                            "privs": [
                              "Sys.Audit"
                            ]
                          }
                        },
                        "returns": {
                          "description": "List of smtp endpoints.",
                          "items": {
                            "additionalProperties": false,
                            "description": "Config for Sendmail notification endpoints",
                            "properties": {
                              "author": {
                                "description": "Author of the mail. Defaults to 'Proxmox Backup Server ($hostname)'",
                                "optional": 1,
                                "type": "string"
                              },
                              "comment": {
                                "description": "Comment.",
                                "maxLength": 128,
                                "optional": 1,
                                "pattern": "/^[[:^cntrl:]]*$/",
                                "type": "string"
                              },
                              "disable": {
                                "description": "Disable this target.",
                                "optional": 1,
                                "type": "boolean"
                              },
                              "from-address": {
                                "description": "`From` address for the mail.\nSMTP relays might require that this address is owned by the user\nin order to avoid spoofing. The `From` header in the email will be\nset to `$author <$from-address>`.",
                                "type": "string"
                              },
                              "mailto": {
                                "description": "Mail address to send a mail to.",
                                "items": {
                                  "description": "E-Mail Address.",
                                  "maxLength": 64,
                                  "minLength": 2,
                                  "pattern": "/^[[:^cntrl:]]*$/",
                                  "type": "string"
                                },
                                "optional": 1,
                                "type": "array"
                              },
                              "mailto-user": {
                                "description": "Users to send a mail to. The email address of the user\nwill be looked up in users.cfg.",
                                "items": {
                                  "description": "User ID including realm, e.g. root@pam.",
                                  "maxLength": 64,
                                  "minLength": 2,
                                  "pattern": "/^[[:^cntrl:]]*$/",
                                  "type": "string"
                                },
                                "optional": 1,
                                "type": "array"
                              },
                              "mode": {
                                "default": "tls",
                                "description": "Connection security",
                                "enum": [
                                  "insecure",
                                  "starttls",
                                  "tls"
                                ],
                                "optional": 1,
                                "type": "string"
                              },
                              "name": {
                                "description": "Name schema for targets and matchers",
                                "maxLength": 32,
                                "minLength": 2,
                                "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                "type": "string"
                              },
                              "origin": {
                                "description": "The origin of a notification configuration entry.",
                                "enum": [
                                  "user-created",
                                  "builtin",
                                  "modified-builtin"
                                ],
                                "optional": 1,
                                "type": "string"
                              },
                              "port": {
                                "description": "The port to connect to.\nIf not set, the used port defaults to 25 (insecure), 465 (tls)\nor 587 (starttls), depending on the value of mode",
                                "maximum": 65535,
                                "minimum": 0,
                                "optional": 1,
                                "type": "integer"
                              },
                              "server": {
                                "description": "Host name or IP of the SMTP relay.",
                                "type": "string"
                              },
                              "username": {
                                "description": "Username to use during authentication.\nIf no username is set, no authentication will be performed.\nThe PLAIN and LOGIN authentication methods are supported",
                                "optional": 1,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "POST": {
                        "description": "Add a new smtp endpoint.",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Add a new smtp endpoint.",
                          "properties": {
                            "author": {
                              "description": "Author of the mail. Defaults to 'Proxmox Backup Server ($hostname)'",
                              "optional": 1,
                              "type": "string"
                            },
                            "comment": {
                              "description": "Comment.",
                              "maxLength": 128,
                              "optional": 1,
                              "pattern": "/^[[:^cntrl:]]*$/",
                              "type": "string"
                            },
                            "disable": {
                              "description": "Disable this target.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "from-address": {
                              "description": "`From` address for the mail.\nSMTP relays might require that this address is owned by the user\nin order to avoid spoofing. The `From` header in the email will be\nset to `$author <$from-address>`.",
                              "type": "string"
                            },
                            "mailto": {
                              "description": "Mail address to send a mail to.",
                              "items": {
                                "description": "E-Mail Address.",
                                "maxLength": 64,
                                "minLength": 2,
                                "pattern": "/^[[:^cntrl:]]*$/",
                                "type": "string"
                              },
                              "optional": 1,
                              "type": "array"
                            },
                            "mailto-user": {
                              "description": "Users to send a mail to. The email address of the user\nwill be looked up in users.cfg.",
                              "items": {
                                "description": "User ID including realm, e.g. root@pam.",
                                "maxLength": 64,
                                "minLength": 2,
                                "pattern": "/^[[:^cntrl:]]*$/",
                                "type": "string"
                              },
                              "optional": 1,
                              "type": "array"
                            },
                            "mode": {
                              "default": "tls",
                              "description": "Connection security",
                              "enum": [
                                "insecure",
                                "starttls",
                                "tls"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "name": {
                              "description": "Name schema for targets and matchers",
                              "maxLength": 32,
                              "minLength": 2,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "origin": {
                              "description": "The origin of a notification configuration entry.",
                              "enum": [
                                "user-created",
                                "builtin",
                                "modified-builtin"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "password": {
                              "description": "SMTP authentication password",
                              "optional": 1,
                              "type": "string"
                            },
                            "port": {
                              "description": "The port to connect to.\nIf not set, the used port defaults to 25 (insecure), 465 (tls)\nor 587 (starttls), depending on the value of mode",
                              "maximum": 65535,
                              "minimum": 0,
                              "optional": 1,
                              "type": "integer"
                            },
                            "server": {
                              "description": "Host name or IP of the SMTP relay.",
                              "type": "string"
                            },
                            "username": {
                              "description": "Username to use during authentication.\nIf no username is set, no authentication will be performed.\nThe PLAIN and LOGIN authentication methods are supported",
                              "optional": 1,
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "notifications"
                            ],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 0,
                    "path": "/config/notifications/endpoints/smtp",
                    "text": "smtp"
                  },
                  {
                    "children": [
                      {
                        "info": {
                          "DELETE": {
                            "description": "Delete webhook endpoint.",
                            "method": "DELETE",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Delete webhook endpoint.",
                              "properties": {
                                "name": {
                                  "description": "Name schema for targets and matchers",
                                  "maxLength": 32,
                                  "minLength": 2,
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "check": {
                                "partial": false,
                                "path": [
                                  "system",
                                  "notifications"
                                ],
                                "privs": [
                                  "Sys.Modify"
                                ]
                              }
                            },
                            "returns": {
                              "type": "null"
                            }
                          },
                          "GET": {
                            "description": "Get a webhook endpoint.",
                            "method": "GET",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Get a webhook endpoint.",
                              "properties": {
                                "name": {
                                  "description": "Name schema for targets and matchers",
                                  "maxLength": 32,
                                  "minLength": 2,
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "check": {
                                "partial": false,
                                "path": [
                                  "system",
                                  "notifications"
                                ],
                                "privs": [
                                  "Sys.Audit"
                                ]
                              }
                            },
                            "returns": {
                              "additionalProperties": false,
                              "description": "Config for  Webhook notification endpoints",
                              "properties": {
                                "body": {
                                  "description": "The HTTP body to send. Supports templating.",
                                  "optional": 1,
                                  "type": "string"
                                },
                                "comment": {
                                  "description": "Comment.",
                                  "maxLength": 128,
                                  "optional": 1,
                                  "pattern": "/^[[:^cntrl:]]*$/",
                                  "type": "string"
                                },
                                "disable": {
                                  "description": "Disable this target.",
                                  "optional": 1,
                                  "type": "boolean"
                                },
                                "header": {
                                  "description": "Array of HTTP headers. Each entry is a property string with a name and a value.\nThe value property contains the header in base64 encoding. Supports templating.",
                                  "items": {
                                    "description": "String schema for pairs of keys and base64 encoded values",
                                    "format": {
                                      "additionalProperties": false,
                                      "description": "Datatype used to represent key-value pairs, the value\nbeing encoded in base64.",
                                      "properties": {
                                        "name": {
                                          "description": "Name",
                                          "type": "string"
                                        },
                                        "value": {
                                          "description": "Base64 encoded value",
                                          "optional": 1,
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "string",
                                    "typetext": "[name=<string> [,value=<string>]]"
                                  },
                                  "optional": 1,
                                  "type": "array"
                                },
                                "method": {
                                  "default": "post",
                                  "description": "HTTP Method to use.",
                                  "enum": [
                                    "post",
                                    "put",
                                    "get"
                                  ],
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name schema for targets and matchers",
                                  "maxLength": 32,
                                  "minLength": 2,
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                },
                                "origin": {
                                  "description": "The origin of a notification configuration entry.",
                                  "enum": [
                                    "user-created",
                                    "builtin",
                                    "modified-builtin"
                                  ],
                                  "optional": 1,
                                  "type": "string"
                                },
                                "secret": {
                                  "description": "Array of secrets. Each entry is a property string with a name and an optional value.\nThe value property contains the secret in base64 encoding.\nFor any API endpoints returning the endpoint config,\nonly the secret name but not the value will be returned.\nWhen updating the config, also send all secrets that you want\nto keep, setting only the name but not the value. Can be accessed from templates.",
                                  "items": {
                                    "description": "String schema for pairs of keys and base64 encoded values",
                                    "format": {
                                      "additionalProperties": false,
                                      "description": "Datatype used to represent key-value pairs, the value\nbeing encoded in base64.",
                                      "properties": {
                                        "name": {
                                          "description": "Name",
                                          "type": "string"
                                        },
                                        "value": {
                                          "description": "Base64 encoded value",
                                          "optional": 1,
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "string",
                                    "typetext": "[name=<string> [,value=<string>]]"
                                  },
                                  "optional": 1,
                                  "type": "array"
                                },
                                "url": {
                                  "description": "HTTP(s) url with optional port.",
                                  "pattern": "/^https?://(?:(?:(?:(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|\\[(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))\\]))(?::(?:[0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]))?)|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))(?:/[^\u0000-\u001f]*)?$/",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "PUT": {
                            "description": "Update webhook endpoint.",
                            "method": "PUT",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Update webhook endpoint.",
                              "properties": {
                                "body": {
                                  "description": "The HTTP body to send. Supports templating.",
                                  "optional": 1,
                                  "type": "string"
                                },
                                "comment": {
                                  "description": "Comment.",
                                  "maxLength": 128,
                                  "optional": 1,
                                  "pattern": "/^[[:^cntrl:]]*$/",
                                  "type": "string"
                                },
                                "delete": {
                                  "description": "List of properties to delete.",
                                  "items": {
                                    "description": "Webhook configuration properties that can be deleted.",
                                    "enum": [
                                      "comment",
                                      "disable",
                                      "header",
                                      "body",
                                      "secret"
                                    ],
                                    "type": "string"
                                  },
                                  "optional": 1,
                                  "type": "array"
                                },
                                "digest": {
                                  "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                                  "optional": 1,
                                  "pattern": "/^[a-f0-9]{64}$/",
                                  "type": "string"
                                },
                                "disable": {
                                  "description": "Disable this target.",
                                  "optional": 1,
                                  "type": "boolean"
                                },
                                "header": {
                                  "description": "Array of HTTP headers. Each entry is a property string with a name and a value.\nThe value property contains the header in base64 encoding. Supports templating.",
                                  "items": {
                                    "description": "String schema for pairs of keys and base64 encoded values",
                                    "format": {
                                      "additionalProperties": false,
                                      "description": "Datatype used to represent key-value pairs, the value\nbeing encoded in base64.",
                                      "properties": {
                                        "name": {
                                          "description": "Name",
                                          "type": "string"
                                        },
                                        "value": {
                                          "description": "Base64 encoded value",
                                          "optional": 1,
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "string",
                                    "typetext": "[name=<string> [,value=<string>]]"
                                  },
                                  "optional": 1,
                                  "type": "array"
                                },
                                "method": {
                                  "default": "post",
                                  "description": "HTTP Method to use.",
                                  "enum": [
                                    "post",
                                    "put",
                                    "get"
                                  ],
                                  "optional": 1,
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name schema for targets and matchers",
                                  "maxLength": 32,
                                  "minLength": 2,
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                },
                                "secret": {
                                  "description": "Array of secrets. Each entry is a property string with a name and an optional value.\nThe value property contains the secret in base64 encoding.\nFor any API endpoints returning the endpoint config,\nonly the secret name but not the value will be returned.\nWhen updating the config, also send all secrets that you want\nto keep, setting only the name but not the value. Can be accessed from templates.",
                                  "items": {
                                    "description": "String schema for pairs of keys and base64 encoded values",
                                    "format": {
                                      "additionalProperties": false,
                                      "description": "Datatype used to represent key-value pairs, the value\nbeing encoded in base64.",
                                      "properties": {
                                        "name": {
                                          "description": "Name",
                                          "type": "string"
                                        },
                                        "value": {
                                          "description": "Base64 encoded value",
                                          "optional": 1,
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "string",
                                    "typetext": "[name=<string> [,value=<string>]]"
                                  },
                                  "optional": 1,
                                  "type": "array"
                                },
                                "url": {
                                  "description": "HTTP(s) url with optional port.",
                                  "optional": 1,
                                  "pattern": "/^https?://(?:(?:(?:(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|\\[(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))\\]))(?::(?:[0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]))?)|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))(?:/[^\u0000-\u001f]*)?$/",
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "check": {
                                "partial": false,
                                "path": [
                                  "system",
                                  "notifications"
                                ],
                                "privs": [
                                  "Sys.Modify"
                                ]
                              }
                            },
                            "returns": {
                              "type": "null"
                            }
                          }
                        },
                        "leaf": 1,
                        "path": "/config/notifications/endpoints/webhook/{name}",
                        "text": "{name}"
                      }
                    ],
                    "info": {
                      "GET": {
                        "description": "List all webhook endpoints.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "List all webhook endpoints.",
                          "properties": {}
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "notifications"
                            ],
                            "privs": [
                              "Sys.Audit"
                            ]
                          }
                        },
                        "returns": {
                          "description": "List of webhook endpoints.",
                          "items": {
                            "additionalProperties": false,
                            "description": "Config for  Webhook notification endpoints",
                            "properties": {
                              "body": {
                                "description": "The HTTP body to send. Supports templating.",
                                "optional": 1,
                                "type": "string"
                              },
                              "comment": {
                                "description": "Comment.",
                                "maxLength": 128,
                                "optional": 1,
                                "pattern": "/^[[:^cntrl:]]*$/",
                                "type": "string"
                              },
                              "disable": {
                                "description": "Disable this target.",
                                "optional": 1,
                                "type": "boolean"
                              },
                              "header": {
                                "description": "Array of HTTP headers. Each entry is a property string with a name and a value.\nThe value property contains the header in base64 encoding. Supports templating.",
                                "items": {
                                  "description": "String schema for pairs of keys and base64 encoded values",
                                  "format": {
                                    "additionalProperties": false,
                                    "description": "Datatype used to represent key-value pairs, the value\nbeing encoded in base64.",
                                    "properties": {
                                      "name": {
                                        "description": "Name",
                                        "type": "string"
                                      },
                                      "value": {
                                        "description": "Base64 encoded value",
                                        "optional": 1,
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "string",
                                  "typetext": "[name=<string> [,value=<string>]]"
                                },
                                "optional": 1,
                                "type": "array"
                              },
                              "method": {
                                "default": "post",
                                "description": "HTTP Method to use.",
                                "enum": [
                                  "post",
                                  "put",
                                  "get"
                                ],
                                "type": "string"
                              },
                              "name": {
                                "description": "Name schema for targets and matchers",
                                "maxLength": 32,
                                "minLength": 2,
                                "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                "type": "string"
                              },
                              "origin": {
                                "description": "The origin of a notification configuration entry.",
                                "enum": [
                                  "user-created",
                                  "builtin",
                                  "modified-builtin"
                                ],
                                "optional": 1,
                                "type": "string"
                              },
                              "secret": {
                                "description": "Array of secrets. Each entry is a property string with a name and an optional value.\nThe value property contains the secret in base64 encoding.\nFor any API endpoints returning the endpoint config,\nonly the secret name but not the value will be returned.\nWhen updating the config, also send all secrets that you want\nto keep, setting only the name but not the value. Can be accessed from templates.",
                                "items": {
                                  "description": "String schema for pairs of keys and base64 encoded values",
                                  "format": {
                                    "additionalProperties": false,
                                    "description": "Datatype used to represent key-value pairs, the value\nbeing encoded in base64.",
                                    "properties": {
                                      "name": {
                                        "description": "Name",
                                        "type": "string"
                                      },
                                      "value": {
                                        "description": "Base64 encoded value",
                                        "optional": 1,
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "string",
                                  "typetext": "[name=<string> [,value=<string>]]"
                                },
                                "optional": 1,
                                "type": "array"
                              },
                              "url": {
                                "description": "HTTP(s) url with optional port.",
                                "pattern": "/^https?://(?:(?:(?:(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|\\[(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))\\]))(?::(?:[0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]))?)|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))(?:/[^\u0000-\u001f]*)?$/",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "POST": {
                        "description": "Add a new webhook endpoint.",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Add a new webhook endpoint.",
                          "properties": {
                            "body": {
                              "description": "The HTTP body to send. Supports templating.",
                              "optional": 1,
                              "type": "string"
                            },
                            "comment": {
                              "description": "Comment.",
                              "maxLength": 128,
                              "optional": 1,
                              "pattern": "/^[[:^cntrl:]]*$/",
                              "type": "string"
                            },
                            "disable": {
                              "description": "Disable this target.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "header": {
                              "description": "Array of HTTP headers. Each entry is a property string with a name and a value.\nThe value property contains the header in base64 encoding. Supports templating.",
                              "items": {
                                "description": "String schema for pairs of keys and base64 encoded values",
                                "format": {
                                  "additionalProperties": false,
                                  "description": "Datatype used to represent key-value pairs, the value\nbeing encoded in base64.",
                                  "properties": {
                                    "name": {
                                      "description": "Name",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "Base64 encoded value",
                                      "optional": 1,
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "string",
                                "typetext": "[name=<string> [,value=<string>]]"
                              },
                              "optional": 1,
                              "type": "array"
                            },
                            "method": {
                              "default": "post",
                              "description": "HTTP Method to use.",
                              "enum": [
                                "post",
                                "put",
                                "get"
                              ],
                              "type": "string"
                            },
                            "name": {
                              "description": "Name schema for targets and matchers",
                              "maxLength": 32,
                              "minLength": 2,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "origin": {
                              "description": "The origin of a notification configuration entry.",
                              "enum": [
                                "user-created",
                                "builtin",
                                "modified-builtin"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "secret": {
                              "description": "Array of secrets. Each entry is a property string with a name and an optional value.\nThe value property contains the secret in base64 encoding.\nFor any API endpoints returning the endpoint config,\nonly the secret name but not the value will be returned.\nWhen updating the config, also send all secrets that you want\nto keep, setting only the name but not the value. Can be accessed from templates.",
                              "items": {
                                "description": "String schema for pairs of keys and base64 encoded values",
                                "format": {
                                  "additionalProperties": false,
                                  "description": "Datatype used to represent key-value pairs, the value\nbeing encoded in base64.",
                                  "properties": {
                                    "name": {
                                      "description": "Name",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "Base64 encoded value",
                                      "optional": 1,
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "string",
                                "typetext": "[name=<string> [,value=<string>]]"
                              },
                              "optional": 1,
                              "type": "array"
                            },
                            "url": {
                              "description": "HTTP(s) url with optional port.",
                              "pattern": "/^https?://(?:(?:(?:(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|\\[(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))\\]))(?::(?:[0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]))?)|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))(?:/[^\u0000-\u001f]*)?$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "notifications"
                            ],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 0,
                    "path": "/config/notifications/endpoints/webhook",
                    "text": "webhook"
                  }
                ],
                "info": {
                  "GET": {
                    "description": "Directory index.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": true,
                      "description": "Directory index.",
                      "properties": {}
                    },
                    "permissions": {
                      "user": "all"
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 0,
                "path": "/config/notifications/endpoints",
                "text": "endpoints"
              },
              {
                "info": {
                  "GET": {
                    "description": "List all known, matchable metadata field values.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "List all known, matchable metadata field values.",
                      "properties": {}
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system",
                          "notifications"
                        ],
                        "privs": [
                          "Sys.Audit"
                        ]
                      }
                    },
                    "returns": {
                      "description": "List of known metadata field values.",
                      "items": {
                        "additionalProperties": false,
                        "description": "A matchable metadata field value.",
                        "properties": {
                          "comment": {
                            "description": "Additional comment for this value.",
                            "optional": 1,
                            "type": "string"
                          },
                          "field": {
                            "description": "Field this value belongs to.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Notification metadata value known by the system.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  }
                },
                "leaf": 1,
                "path": "/config/notifications/matcher-field-values",
                "text": "matcher-field-values"
              },
              {
                "info": {
                  "GET": {
                    "description": "Get all known metadata fields.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Get all known metadata fields.",
                      "properties": {}
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system",
                          "notifications"
                        ],
                        "privs": [
                          "Sys.Audit"
                        ]
                      }
                    },
                    "returns": {
                      "description": "List of known metadata fields.",
                      "items": {
                        "additionalProperties": false,
                        "description": "A matchable field.",
                        "properties": {
                          "name": {
                            "description": "Name of the field",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  }
                },
                "leaf": 1,
                "path": "/config/notifications/matcher-fields",
                "text": "matcher-fields"
              },
              {
                "children": [
                  {
                    "info": {
                      "DELETE": {
                        "description": "Delete notification matcher.",
                        "method": "DELETE",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Delete notification matcher.",
                          "properties": {
                            "name": {
                              "description": "Name schema for targets and matchers",
                              "maxLength": 32,
                              "minLength": 2,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "notifications"
                            ],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      },
                      "GET": {
                        "description": "Get a notification matcher.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Get a notification matcher.",
                          "properties": {
                            "name": {
                              "description": "Name schema for targets and matchers",
                              "maxLength": 32,
                              "minLength": 2,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "notifications"
                            ],
                            "privs": [
                              "Sys.Audit"
                            ]
                          }
                        },
                        "returns": {
                          "additionalProperties": false,
                          "description": "Config for Sendmail notification endpoints",
                          "properties": {
                            "comment": {
                              "description": "Comment.",
                              "maxLength": 128,
                              "optional": 1,
                              "pattern": "/^[[:^cntrl:]]*$/",
                              "type": "string"
                            },
                            "disable": {
                              "description": "Disable this matcher.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "invert-match": {
                              "description": "Invert match of the whole filter.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "match-calendar": {
                              "description": "List of matched severity levels.",
                              "items": {
                                "description": "Time stamps to match",
                                "type": "string"
                              },
                              "optional": 1,
                              "type": "array"
                            },
                            "match-field": {
                              "description": "List of matched metadata fields.",
                              "items": {
                                "description": "Fields to match",
                                "type": "string"
                              },
                              "optional": 1,
                              "type": "array"
                            },
                            "match-severity": {
                              "description": "List of matched severity levels.",
                              "items": {
                                "description": "Severity level to match.",
                                "type": "string"
                              },
                              "optional": 1,
                              "type": "array"
                            },
                            "mode": {
                              "default": "all",
                              "description": "The mode in which the results of matches are combined.",
                              "enum": [
                                "all",
                                "any"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "name": {
                              "description": "Name schema for targets and matchers",
                              "maxLength": 32,
                              "minLength": 2,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "origin": {
                              "description": "The origin of a notification configuration entry.",
                              "enum": [
                                "user-created",
                                "builtin",
                                "modified-builtin"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "target": {
                              "description": "Targets to notify.",
                              "items": {
                                "description": "Name schema for targets and matchers",
                                "maxLength": 32,
                                "minLength": 2,
                                "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                "type": "string"
                              },
                              "optional": 1,
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "PUT": {
                        "description": "Update notification matcher.",
                        "method": "PUT",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Update notification matcher.",
                          "properties": {
                            "comment": {
                              "description": "Comment.",
                              "maxLength": 128,
                              "optional": 1,
                              "pattern": "/^[[:^cntrl:]]*$/",
                              "type": "string"
                            },
                            "delete": {
                              "description": "List of properties to delete.",
                              "items": {
                                "description": "The set of matcher properties that can be deleted.",
                                "enum": [
                                  "comment",
                                  "disable",
                                  "invert-match",
                                  "match-calendar",
                                  "match-field",
                                  "match-severity",
                                  "mode",
                                  "target"
                                ],
                                "type": "string"
                              },
                              "optional": 1,
                              "type": "array"
                            },
                            "digest": {
                              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                              "optional": 1,
                              "pattern": "/^[a-f0-9]{64}$/",
                              "type": "string"
                            },
                            "disable": {
                              "description": "Disable this matcher.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "invert-match": {
                              "description": "Invert match of the whole filter.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "match-calendar": {
                              "description": "List of matched severity levels.",
                              "items": {
                                "description": "Time stamps to match",
                                "type": "string"
                              },
                              "optional": 1,
                              "type": "array"
                            },
                            "match-field": {
                              "description": "List of matched metadata fields.",
                              "items": {
                                "description": "Fields to match",
                                "type": "string"
                              },
                              "optional": 1,
                              "type": "array"
                            },
                            "match-severity": {
                              "description": "List of matched severity levels.",
                              "items": {
                                "description": "Severity level to match.",
                                "type": "string"
                              },
                              "optional": 1,
                              "type": "array"
                            },
                            "mode": {
                              "default": "all",
                              "description": "The mode in which the results of matches are combined.",
                              "enum": [
                                "all",
                                "any"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "name": {
                              "description": "Name schema for targets and matchers",
                              "maxLength": 32,
                              "minLength": 2,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "target": {
                              "description": "Targets to notify.",
                              "items": {
                                "description": "Name schema for targets and matchers",
                                "maxLength": 32,
                                "minLength": 2,
                                "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                "type": "string"
                              },
                              "optional": 1,
                              "type": "array"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "notifications"
                            ],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/config/notifications/matchers/{name}",
                    "text": "{name}"
                  }
                ],
                "info": {
                  "GET": {
                    "description": "List all notification matchers.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "List all notification matchers.",
                      "properties": {}
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system",
                          "notifications"
                        ],
                        "privs": [
                          "Sys.Audit"
                        ]
                      }
                    },
                    "returns": {
                      "description": "List of matchers.",
                      "items": {
                        "additionalProperties": false,
                        "description": "Config for Sendmail notification endpoints",
                        "properties": {
                          "comment": {
                            "description": "Comment.",
                            "maxLength": 128,
                            "optional": 1,
                            "pattern": "/^[[:^cntrl:]]*$/",
                            "type": "string"
                          },
                          "disable": {
                            "description": "Disable this matcher.",
                            "optional": 1,
                            "type": "boolean"
                          },
                          "invert-match": {
                            "description": "Invert match of the whole filter.",
                            "optional": 1,
                            "type": "boolean"
                          },
                          "match-calendar": {
                            "description": "List of matched severity levels.",
                            "items": {
                              "description": "Time stamps to match",
                              "type": "string"
                            },
                            "optional": 1,
                            "type": "array"
                          },
                          "match-field": {
                            "description": "List of matched metadata fields.",
                            "items": {
                              "description": "Fields to match",
                              "type": "string"
                            },
                            "optional": 1,
                            "type": "array"
                          },
                          "match-severity": {
                            "description": "List of matched severity levels.",
                            "items": {
                              "description": "Severity level to match.",
                              "type": "string"
                            },
                            "optional": 1,
                            "type": "array"
                          },
                          "mode": {
                            "default": "all",
                            "description": "The mode in which the results of matches are combined.",
                            "enum": [
                              "all",
                              "any"
                            ],
                            "optional": 1,
                            "type": "string"
                          },
                          "name": {
                            "description": "Name schema for targets and matchers",
                            "maxLength": 32,
                            "minLength": 2,
                            "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                            "type": "string"
                          },
                          "origin": {
                            "description": "The origin of a notification configuration entry.",
                            "enum": [
                              "user-created",
                              "builtin",
                              "modified-builtin"
                            ],
                            "optional": 1,
                            "type": "string"
                          },
                          "target": {
                            "description": "Targets to notify.",
                            "items": {
                              "description": "Name schema for targets and matchers",
                              "maxLength": 32,
                              "minLength": 2,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "optional": 1,
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "POST": {
                    "description": "Add a new notification matcher.",
                    "method": "POST",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Add a new notification matcher.",
                      "properties": {
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "disable": {
                          "description": "Disable this matcher.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "invert-match": {
                          "description": "Invert match of the whole filter.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "match-calendar": {
                          "description": "List of matched severity levels.",
                          "items": {
                            "description": "Time stamps to match",
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "match-field": {
                          "description": "List of matched metadata fields.",
                          "items": {
                            "description": "Fields to match",
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "match-severity": {
                          "description": "List of matched severity levels.",
                          "items": {
                            "description": "Severity level to match.",
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "mode": {
                          "default": "all",
                          "description": "The mode in which the results of matches are combined.",
                          "enum": [
                            "all",
                            "any"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "name": {
                          "description": "Name schema for targets and matchers",
                          "maxLength": 32,
                          "minLength": 2,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "origin": {
                          "description": "The origin of a notification configuration entry.",
                          "enum": [
                            "user-created",
                            "builtin",
                            "modified-builtin"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "target": {
                          "description": "Targets to notify.",
                          "items": {
                            "description": "Name schema for targets and matchers",
                            "maxLength": 32,
                            "minLength": 2,
                            "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system",
                          "notifications"
                        ],
                        "privs": [
                          "Sys.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 0,
                "path": "/config/notifications/matchers",
                "text": "matchers"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "info": {
                          "POST": {
                            "description": "Test a given notification target.",
                            "method": "POST",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Test a given notification target.",
                              "properties": {
                                "name": {
                                  "description": "Name schema for targets and matchers",
                                  "maxLength": 32,
                                  "minLength": 2,
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "check": {
                                "partial": false,
                                "path": [
                                  "system",
                                  "notifications"
                                ],
                                "privs": [
                                  "Sys.Modify"
                                ]
                              }
                            },
                            "returns": {
                              "type": "null"
                            }
                          }
                        },
                        "leaf": 1,
                        "path": "/config/notifications/targets/{name}/test",
                        "text": "test"
                      }
                    ],
                    "info": {
                      "GET": {
                        "description": "Directory index.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": true,
                          "description": "Directory index.",
                          "properties": {}
                        },
                        "permissions": {
                          "user": "all"
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 0,
                    "path": "/config/notifications/targets/{name}",
                    "text": "{name}"
                  }
                ],
                "info": {
                  "GET": {
                    "description": "List all notification targets.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "List all notification targets.",
                      "properties": {}
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system",
                          "notifications"
                        ],
                        "privs": [
                          "Sys.Audit"
                        ]
                      }
                    },
                    "returns": {
                      "description": "List of all entities which can be used as notification targets.",
                      "items": {
                        "additionalProperties": false,
                        "description": "Target information",
                        "properties": {
                          "comment": {
                            "description": "Comment",
                            "optional": 1,
                            "type": "string"
                          },
                          "disable": {
                            "description": "Target is disabled",
                            "optional": 1,
                            "type": "boolean"
                          },
                          "name": {
                            "description": "Name of the endpoint",
                            "type": "string"
                          },
                          "origin": {
                            "description": "The origin of a notification configuration entry.",
                            "enum": [
                              "user-created",
                              "builtin",
                              "modified-builtin"
                            ],
                            "type": "string"
                          },
                          "type": {
                            "description": "Type of the endpoint.",
                            "enum": [
                              "sendmail",
                              "smtp",
                              "gotify",
                              "webhook"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  }
                },
                "leaf": 0,
                "path": "/config/notifications/targets",
                "text": "targets"
              }
            ],
            "info": {
              "GET": {
                "description": "Directory index.",
                "method": "GET",
                "parameters": {
                  "additionalProperties": true,
                  "description": "Directory index.",
                  "properties": {}
                },
                "permissions": {
                  "user": "all"
                },
                "returns": {
                  "type": "null"
                }
              }
            },
            "leaf": 0,
            "path": "/config/notifications",
            "text": "notifications"
          },
          {
            "children": [
              {
                "info": {
                  "DELETE": {
                    "description": "Remove a prune job configuration",
                    "method": "DELETE",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Remove a prune job configuration",
                      "properties": {
                        "digest": {
                          "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                          "optional": 1,
                          "pattern": "/^[a-f0-9]{64}$/",
                          "type": "string"
                        },
                        "id": {
                          "description": "Job ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "description": "Requires Datastore.Verify on job's datastore.",
                      "user": "all"
                    },
                    "returns": {
                      "type": "null"
                    }
                  },
                  "GET": {
                    "description": "Read a prune job configuration.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Read a prune job configuration.",
                      "properties": {
                        "id": {
                          "description": "Job ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "description": "Requires Datastore.Audit or Datastore.Verify on job's datastore.",
                      "user": "all"
                    },
                    "returns": {
                      "additionalProperties": false,
                      "description": "Prune configuration.",
                      "properties": {
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "disable": {
                          "default": false,
                          "description": "Disable this job.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "id": {
                          "description": "Job ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "keep-daily": {
                          "description": "Number of daily backups to keep.",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "keep-hourly": {
                          "description": "Number of hourly backups to keep.",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "keep-last": {
                          "description": "Number of backups to keep.",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "keep-monthly": {
                          "description": "Number of monthly backups to keep.",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "keep-weekly": {
                          "description": "Number of weekly backups to keep.",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "keep-yearly": {
                          "description": "Number of yearly backups to keep.",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "max-depth": {
                          "description": "How many levels of namespaces should be operated on (0 == no recursion, empty == automatic full recursion, namespace depths reduce maximum allowed value)",
                          "maximum": 7,
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "ns": {
                          "description": "Namespace.",
                          "maxLength": 256,
                          "optional": 1,
                          "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                          "type": "string"
                        },
                        "schedule": {
                          "description": "Run prune job at specified schedule.",
                          "type": "string",
                          "typetext": "<calendar-event>"
                        },
                        "store": {
                          "description": "Datastore name.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "PUT": {
                    "description": "Update prune job config.",
                    "method": "PUT",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Update prune job config.",
                      "properties": {
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "delete": {
                          "description": "List of properties to delete.",
                          "items": {
                            "description": "Deletable property name",
                            "enum": [
                              "comment",
                              "disable",
                              "ns",
                              "max-depth",
                              "keep-last",
                              "keep-hourly",
                              "keep-daily",
                              "keep-weekly",
                              "keep-monthly",
                              "keep-yearly"
                            ],
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "digest": {
                          "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                          "optional": 1,
                          "pattern": "/^[a-f0-9]{64}$/",
                          "type": "string"
                        },
                        "disable": {
                          "default": false,
                          "description": "Disable this job.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "id": {
                          "description": "Job ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "keep-daily": {
                          "description": "Number of daily backups to keep.",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "keep-hourly": {
                          "description": "Number of hourly backups to keep.",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "keep-last": {
                          "description": "Number of backups to keep.",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "keep-monthly": {
                          "description": "Number of monthly backups to keep.",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "keep-weekly": {
                          "description": "Number of weekly backups to keep.",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "keep-yearly": {
                          "description": "Number of yearly backups to keep.",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "max-depth": {
                          "description": "How many levels of namespaces should be operated on (0 == no recursion, empty == automatic full recursion, namespace depths reduce maximum allowed value)",
                          "maximum": 7,
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "ns": {
                          "description": "Namespace.",
                          "maxLength": 256,
                          "optional": 1,
                          "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                          "type": "string"
                        },
                        "schedule": {
                          "description": "Run prune job at specified schedule.",
                          "optional": 1,
                          "type": "string",
                          "typetext": "<calendar-event>"
                        },
                        "store": {
                          "description": "Datastore name.",
                          "maxLength": 32,
                          "minLength": 3,
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "description": "Requires Datastore.Modify on job's datastore.",
                      "user": "all"
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 1,
                "path": "/config/prune/{id}",
                "text": "{id}"
              }
            ],
            "info": {
              "GET": {
                "description": "List all scheduled prune jobs.",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "List all scheduled prune jobs.",
                  "properties": {}
                },
                "permissions": {
                  "description": "Requires Datastore.Audit.",
                  "user": "all"
                },
                "returns": {
                  "description": "List configured prune schedules.",
                  "items": {
                    "additionalProperties": false,
                    "description": "Prune configuration.",
                    "properties": {
                      "comment": {
                        "description": "Comment.",
                        "maxLength": 128,
                        "optional": 1,
                        "pattern": "/^[[:^cntrl:]]*$/",
                        "type": "string"
                      },
                      "disable": {
                        "default": false,
                        "description": "Disable this job.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "id": {
                        "description": "Job ID.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "keep-daily": {
                        "description": "Number of daily backups to keep.",
                        "minimum": 1,
                        "optional": 1,
                        "type": "integer"
                      },
                      "keep-hourly": {
                        "description": "Number of hourly backups to keep.",
                        "minimum": 1,
                        "optional": 1,
                        "type": "integer"
                      },
                      "keep-last": {
                        "description": "Number of backups to keep.",
                        "minimum": 1,
                        "optional": 1,
                        "type": "integer"
                      },
                      "keep-monthly": {
                        "description": "Number of monthly backups to keep.",
                        "minimum": 1,
                        "optional": 1,
                        "type": "integer"
                      },
                      "keep-weekly": {
                        "description": "Number of weekly backups to keep.",
                        "minimum": 1,
                        "optional": 1,
                        "type": "integer"
                      },
                      "keep-yearly": {
                        "description": "Number of yearly backups to keep.",
                        "minimum": 1,
                        "optional": 1,
                        "type": "integer"
                      },
                      "max-depth": {
                        "description": "How many levels of namespaces should be operated on (0 == no recursion, empty == automatic full recursion, namespace depths reduce maximum allowed value)",
                        "maximum": 7,
                        "minimum": 0,
                        "optional": 1,
                        "type": "integer"
                      },
                      "ns": {
                        "description": "Namespace.",
                        "maxLength": 256,
                        "optional": 1,
                        "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                        "type": "string"
                      },
                      "schedule": {
                        "description": "Run prune job at specified schedule.",
                        "type": "string",
                        "typetext": "<calendar-event>"
                      },
                      "store": {
                        "description": "Datastore name.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "POST": {
                "description": "Create a new prune job.",
                "method": "POST",
                "parameters": {
                  "additionalProperties": false,
                  "description": "Create a new prune job.",
                  "properties": {
                    "comment": {
                      "description": "Comment.",
                      "maxLength": 128,
                      "optional": 1,
                      "pattern": "/^[[:^cntrl:]]*$/",
                      "type": "string"
                    },
                    "disable": {
                      "default": false,
                      "description": "Disable this job.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "id": {
                      "description": "Job ID.",
                      "maxLength": 32,
                      "minLength": 3,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "keep-daily": {
                      "description": "Number of daily backups to keep.",
                      "minimum": 1,
                      "optional": 1,
                      "type": "integer"
                    },
                    "keep-hourly": {
                      "description": "Number of hourly backups to keep.",
                      "minimum": 1,
                      "optional": 1,
                      "type": "integer"
                    },
                    "keep-last": {
                      "description": "Number of backups to keep.",
                      "minimum": 1,
                      "optional": 1,
                      "type": "integer"
                    },
                    "keep-monthly": {
                      "description": "Number of monthly backups to keep.",
                      "minimum": 1,
                      "optional": 1,
                      "type": "integer"
                    },
                    "keep-weekly": {
                      "description": "Number of weekly backups to keep.",
                      "minimum": 1,
                      "optional": 1,
                      "type": "integer"
                    },
                    "keep-yearly": {
                      "description": "Number of yearly backups to keep.",
                      "minimum": 1,
                      "optional": 1,
                      "type": "integer"
                    },
                    "max-depth": {
                      "description": "How many levels of namespaces should be operated on (0 == no recursion, empty == automatic full recursion, namespace depths reduce maximum allowed value)",
                      "maximum": 7,
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer"
                    },
                    "ns": {
                      "description": "Namespace.",
                      "maxLength": 256,
                      "optional": 1,
                      "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                      "type": "string"
                    },
                    "schedule": {
                      "description": "Run prune job at specified schedule.",
                      "type": "string",
                      "typetext": "<calendar-event>"
                    },
                    "store": {
                      "description": "Datastore name.",
                      "maxLength": 32,
                      "minLength": 3,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    }
                  }
                },
                "permissions": {
                  "description": "Requires Datastore.Modify on job's datastore.",
                  "user": "all"
                },
                "returns": {
                  "type": "null"
                }
              }
            },
            "leaf": 0,
            "path": "/config/prune",
            "text": "prune"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "children": [
                      {
                        "children": [
                          {
                            "info": {
                              "GET": {
                                "description": "List groups of a remote.cfg entry's datastore",
                                "method": "GET",
                                "parameters": {
                                  "additionalProperties": false,
                                  "description": "List groups of a remote.cfg entry's datastore",
                                  "properties": {
                                    "name": {
                                      "description": "Remote ID.",
                                      "maxLength": 32,
                                      "minLength": 3,
                                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                      "type": "string"
                                    },
                                    "namespace": {
                                      "description": "Namespace.",
                                      "maxLength": 256,
                                      "optional": 1,
                                      "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                                      "type": "string"
                                    },
                                    "store": {
                                      "description": "Datastore name.",
                                      "maxLength": 32,
                                      "minLength": 3,
                                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                      "type": "string"
                                    }
                                  }
                                },
                                "permissions": {
                                  "check": {
                                    "partial": false,
                                    "path": [
                                      "remote",
                                      "{name}"
                                    ],
                                    "privs": [
                                      "Remote.Audit"
                                    ]
                                  }
                                },
                                "returns": {
                                  "description": "Lists the accessible backup groups in a remote datastore.",
                                  "items": {
                                    "additionalProperties": false,
                                    "description": "Basic information about a backup group.",
                                    "properties": {
                                      "backup-count": {
                                        "description": "Number of contained snapshots",
                                        "type": "integer"
                                      },
                                      "backup-id": {
                                        "description": "Backup ID.",
                                        "pattern": "/^[A-Za-z0-9_][A-Za-z0-9._\\-]*$/",
                                        "type": "string"
                                      },
                                      "backup-type": {
                                        "description": "Backup types.",
                                        "enum": [
                                          "vm",
                                          "ct",
                                          "host"
                                        ],
                                        "type": "string"
                                      },
                                      "comment": {
                                        "description": "The first line from group \"notes\"",
                                        "optional": 1,
                                        "type": "string"
                                      },
                                      "files": {
                                        "description": "List of contained archive files.",
                                        "items": {
                                          "description": "Backup archive name.",
                                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      "last-backup": {
                                        "description": "Backup time (Unix epoch.)",
                                        "minimum": 1,
                                        "type": "integer"
                                      },
                                      "owner": {
                                        "description": "Authentication ID",
                                        "maxLength": 64,
                                        "minLength": 3,
                                        "optional": 1,
                                        "pattern": "/^(?:(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)|(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)!(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))$/",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              }
                            },
                            "leaf": 1,
                            "path": "/config/remote/{name}/scan/{store}/groups",
                            "text": "groups"
                          },
                          {
                            "info": {
                              "GET": {
                                "description": "List namespaces of a datastore of a remote.cfg entry",
                                "method": "GET",
                                "parameters": {
                                  "additionalProperties": false,
                                  "description": "List namespaces of a datastore of a remote.cfg entry",
                                  "properties": {
                                    "name": {
                                      "description": "Remote ID.",
                                      "maxLength": 32,
                                      "minLength": 3,
                                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                      "type": "string"
                                    },
                                    "store": {
                                      "description": "Datastore name.",
                                      "maxLength": 32,
                                      "minLength": 3,
                                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                      "type": "string"
                                    }
                                  }
                                },
                                "permissions": {
                                  "check": {
                                    "partial": false,
                                    "path": [
                                      "remote",
                                      "{name}"
                                    ],
                                    "privs": [
                                      "Remote.Audit"
                                    ]
                                  }
                                },
                                "returns": {
                                  "description": "List the accessible namespaces of a remote datastore.",
                                  "items": {
                                    "additionalProperties": false,
                                    "description": "Basic information about a backup namespace.",
                                    "properties": {
                                      "comment": {
                                        "description": "The first line from the namespace's \"notes\"",
                                        "optional": 1,
                                        "type": "string"
                                      },
                                      "ns": {
                                        "description": "Namespace.",
                                        "maxLength": 256,
                                        "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              }
                            },
                            "leaf": 1,
                            "path": "/config/remote/{name}/scan/{store}/namespaces",
                            "text": "namespaces"
                          }
                        ],
                        "info": {
                          "GET": {
                            "description": "Directory index.",
                            "method": "GET",
                            "parameters": {
                              "additionalProperties": true,
                              "description": "Directory index.",
                              "properties": {}
                            },
                            "permissions": {
                              "user": "all"
                            },
                            "returns": {
                              "type": "null"
                            }
                          }
                        },
                        "leaf": 0,
                        "path": "/config/remote/{name}/scan/{store}",
                        "text": "{store}"
                      }
                    ],
                    "info": {
                      "GET": {
                        "description": "List datastores of a remote.cfg entry",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "List datastores of a remote.cfg entry",
                          "properties": {
                            "name": {
                              "description": "Remote ID.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "remote",
                              "{name}"
                            ],
                            "privs": [
                              "Remote.Audit"
                            ]
                          }
                        },
                        "returns": {
                          "description": "List the accessible datastores.",
                          "items": {
                            "additionalProperties": false,
                            "description": "Basic information about a datastore.",
                            "properties": {
                              "comment": {
                                "description": "Comment.",
                                "maxLength": 128,
                                "optional": 1,
                                "pattern": "/^[[:^cntrl:]]*$/",
                                "type": "string"
                              },
                              "maintenance": {
                                "description": "If the datastore is in maintenance mode, information about it",
                                "format": {
                                  "additionalProperties": false,
                                  "default_key": "type",
                                  "description": "Maintenance mode",
                                  "properties": {
                                    "message": {
                                      "description": "Message describing the reason for the maintenance.",
                                      "maxLength": 64,
                                      "optional": 1,
                                      "pattern": "/^[[:^cntrl:]]*$/",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "Maintenance type.",
                                      "enum": [
                                        "read-only",
                                        "offline",
                                        "delete",
                                        "unmount",
                                        "s3-refresh"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "optional": 1,
                                "type": "string",
                                "typetext": "[type=<enum> [,message=<string>]]"
                              },
                              "mount-status": {
                                "default": "nonremovable",
                                "description": "Current mounting status of a datastore, useful for removable datastores.",
                                "enum": [
                                  "mounted",
                                  "notmounted",
                                  "nonremovable"
                                ],
                                "type": "string"
                              },
                              "store": {
                                "description": "Datastore name.",
                                "maxLength": 32,
                                "minLength": 3,
                                "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      }
                    },
                    "leaf": 0,
                    "path": "/config/remote/{name}/scan",
                    "text": "scan"
                  }
                ],
                "info": {
                  "DELETE": {
                    "description": "Remove a remote from the configuration file.",
                    "method": "DELETE",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Remove a remote from the configuration file.",
                      "properties": {
                        "digest": {
                          "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                          "optional": 1,
                          "pattern": "/^[a-f0-9]{64}$/",
                          "type": "string"
                        },
                        "name": {
                          "description": "Remote ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "remote",
                          "{name}"
                        ],
                        "privs": [
                          "Remote.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  },
                  "GET": {
                    "description": "Read remote configuration data.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Read remote configuration data.",
                      "properties": {
                        "name": {
                          "description": "Remote ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "remote",
                          "{name}"
                        ],
                        "privs": [
                          "Remote.Audit"
                        ]
                      }
                    },
                    "returns": {
                      "additionalProperties": false,
                      "description": "Remote properties.",
                      "properties": {
                        "auth-id": {
                          "description": "Authentication ID",
                          "maxLength": 64,
                          "minLength": 3,
                          "pattern": "/^(?:(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)|(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)!(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))$/",
                          "type": "string"
                        },
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "fingerprint": {
                          "description": "X509 certificate fingerprint (sha256).",
                          "optional": 1,
                          "pattern": "/^(?:[0-9a-fA-F][0-9a-fA-F])(?::[0-9a-fA-F][0-9a-fA-F]){31}$/",
                          "type": "string"
                        },
                        "host": {
                          "description": "DNS name or IP address.",
                          "pattern": "/^(?:(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::)))))$/",
                          "type": "string"
                        },
                        "name": {
                          "description": "Remote ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "port": {
                          "description": "The (optional) port",
                          "optional": 1,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "PUT": {
                    "description": "Update remote configuration.",
                    "method": "PUT",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Update remote configuration.",
                      "properties": {
                        "auth-id": {
                          "description": "Authentication ID",
                          "maxLength": 64,
                          "minLength": 3,
                          "optional": 1,
                          "pattern": "/^(?:(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)|(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)!(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))$/",
                          "type": "string"
                        },
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "delete": {
                          "description": "List of properties to delete.",
                          "items": {
                            "description": "Deletable property name",
                            "enum": [
                              "comment",
                              "fingerprint",
                              "port"
                            ],
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "digest": {
                          "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                          "optional": 1,
                          "pattern": "/^[a-f0-9]{64}$/",
                          "type": "string"
                        },
                        "fingerprint": {
                          "description": "X509 certificate fingerprint (sha256).",
                          "optional": 1,
                          "pattern": "/^(?:[0-9a-fA-F][0-9a-fA-F])(?::[0-9a-fA-F][0-9a-fA-F]){31}$/",
                          "type": "string"
                        },
                        "host": {
                          "description": "DNS name or IP address.",
                          "optional": 1,
                          "pattern": "/^(?:(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::)))))$/",
                          "type": "string"
                        },
                        "name": {
                          "description": "Remote ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "password": {
                          "description": "Password or auth token for remote host.",
                          "maxLength": 1024,
                          "minLength": 1,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "port": {
                          "description": "The (optional) port",
                          "optional": 1,
                          "type": "integer"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "remote",
                          "{name}"
                        ],
                        "privs": [
                          "Remote.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 0,
                "path": "/config/remote/{name}",
                "text": "{name}"
              }
            ],
            "info": {
              "GET": {
                "description": "List all remotes",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "List all remotes",
                  "properties": {}
                },
                "permissions": {
                  "description": "List configured remotes filtered by Remote.Audit privileges",
                  "user": "all"
                },
                "returns": {
                  "description": "The list of configured remotes (with config digest).",
                  "items": {
                    "additionalProperties": false,
                    "description": "Remote properties.",
                    "properties": {
                      "auth-id": {
                        "description": "Authentication ID",
                        "maxLength": 64,
                        "minLength": 3,
                        "pattern": "/^(?:(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)|(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)!(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))$/",
                        "type": "string"
                      },
                      "comment": {
                        "description": "Comment.",
                        "maxLength": 128,
                        "optional": 1,
                        "pattern": "/^[[:^cntrl:]]*$/",
                        "type": "string"
                      },
                      "fingerprint": {
                        "description": "X509 certificate fingerprint (sha256).",
                        "optional": 1,
                        "pattern": "/^(?:[0-9a-fA-F][0-9a-fA-F])(?::[0-9a-fA-F][0-9a-fA-F]){31}$/",
                        "type": "string"
                      },
                      "host": {
                        "description": "DNS name or IP address.",
                        "pattern": "/^(?:(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::)))))$/",
                        "type": "string"
                      },
                      "name": {
                        "description": "Remote ID.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "port": {
                        "description": "The (optional) port",
                        "optional": 1,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "POST": {
                "description": "Create new remote.",
                "method": "POST",
                "parameters": {
                  "additionalProperties": false,
                  "description": "Create new remote.",
                  "properties": {
                    "auth-id": {
                      "description": "Authentication ID",
                      "maxLength": 64,
                      "minLength": 3,
                      "pattern": "/^(?:(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)|(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)!(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))$/",
                      "type": "string"
                    },
                    "comment": {
                      "description": "Comment.",
                      "maxLength": 128,
                      "optional": 1,
                      "pattern": "/^[[:^cntrl:]]*$/",
                      "type": "string"
                    },
                    "fingerprint": {
                      "description": "X509 certificate fingerprint (sha256).",
                      "optional": 1,
                      "pattern": "/^(?:[0-9a-fA-F][0-9a-fA-F])(?::[0-9a-fA-F][0-9a-fA-F]){31}$/",
                      "type": "string"
                    },
                    "host": {
                      "description": "DNS name or IP address.",
                      "pattern": "/^(?:(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::)))))$/",
                      "type": "string"
                    },
                    "name": {
                      "description": "Remote ID.",
                      "maxLength": 32,
                      "minLength": 3,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "password": {
                      "description": "Password or auth token for remote host.",
                      "maxLength": 1024,
                      "minLength": 1,
                      "pattern": "/^[[:^cntrl:]]*$/",
                      "type": "string"
                    },
                    "port": {
                      "description": "The (optional) port",
                      "optional": 1,
                      "type": "integer"
                    }
                  }
                },
                "permissions": {
                  "check": {
                    "partial": false,
                    "path": [
                      "remote"
                    ],
                    "privs": [
                      "Remote.Modify"
                    ]
                  }
                },
                "returns": {
                  "type": "null"
                }
              }
            },
            "leaf": 0,
            "path": "/config/remote",
            "text": "remote"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "info": {
                      "GET": {
                        "description": "List buckets accessible by given s3 client configuration",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "List buckets accessible by given s3 client configuration",
                          "properties": {
                            "id": {
                              "description": "ID to uniquely identify s3 client config.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [],
                            "privs": [
                              "Sys.Audit"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/config/s3/{id}/list-buckets",
                    "text": "list-buckets"
                  }
                ],
                "info": {
                  "DELETE": {
                    "description": "Remove an s3 client configuration.",
                    "method": "DELETE",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Remove an s3 client configuration.",
                      "properties": {
                        "digest": {
                          "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                          "optional": 1,
                          "pattern": "/^[a-f0-9]{64}$/",
                          "type": "string"
                        },
                        "id": {
                          "description": "Job ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system",
                          "s3-endpoint",
                          "{id}"
                        ],
                        "privs": [
                          "Sys.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  },
                  "GET": {
                    "description": "Read an s3 client configuration.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Read an s3 client configuration.",
                      "properties": {
                        "id": {
                          "description": "Job ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system",
                          "s3-endpoint",
                          "{id}"
                        ],
                        "privs": [
                          "Sys.Audit"
                        ]
                      }
                    },
                    "returns": {
                      "additionalProperties": false,
                      "description": "S3 client configuration properties without secret.",
                      "properties": {
                        "access-key": {
                          "description": "Access key for S3 object store.",
                          "type": "string"
                        },
                        "endpoint": {
                          "description": "Endpoint to access S3 object store.",
                          "pattern": "/^(?:(^\\{\\{bucket\\}\\}\\.)*(?:(?:((?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)|\\{\\{region\\}\\})\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::)))))$/",
                          "type": "string"
                        },
                        "fingerprint": {
                          "description": "X509 certificate fingerprint (sha256).",
                          "optional": 1,
                          "pattern": "/^(?:[0-9a-fA-F][0-9a-fA-F])(?::[0-9a-fA-F][0-9a-fA-F]){31}$/",
                          "type": "string"
                        },
                        "id": {
                          "description": "ID to uniquely identify s3 client config.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "path-style": {
                          "default": false,
                          "description": "Use path style bucket addressing over vhost style.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "port": {
                          "description": "Port to access S3 object store.",
                          "optional": 1,
                          "type": "integer"
                        },
                        "provider-quirks": {
                          "description": "List of provider specific feature implementation quirks.",
                          "items": {
                            "description": "Provider specific feature implementation quirks.",
                            "enum": [
                              "skip-if-none-match-header"
                            ],
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "put-rate-limit": {
                          "description": "Rate limit for put requests given as #reqest/s.",
                          "optional": 1,
                          "type": "integer"
                        },
                        "region": {
                          "description": "Region to access S3 object store.",
                          "maxLength": 32,
                          "minLength": 3,
                          "optional": 1,
                          "pattern": "/^[_a-z\\d][-_a-z\\d]+$/",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "PUT": {
                    "description": "Update an s3 client configuration.",
                    "method": "PUT",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Update an s3 client configuration.",
                      "properties": {
                        "access-key": {
                          "description": "Access key for S3 object store.",
                          "optional": 1,
                          "type": "string"
                        },
                        "delete": {
                          "description": "List of properties to delete.",
                          "items": {
                            "description": "Deletable property name",
                            "enum": [
                              "port",
                              "region",
                              "fingerprint",
                              "path-style",
                              "provider-quirks"
                            ],
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "digest": {
                          "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                          "optional": 1,
                          "pattern": "/^[a-f0-9]{64}$/",
                          "type": "string"
                        },
                        "endpoint": {
                          "description": "Endpoint to access S3 object store.",
                          "optional": 1,
                          "pattern": "/^(?:(^\\{\\{bucket\\}\\}\\.)*(?:(?:((?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)|\\{\\{region\\}\\})\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::)))))$/",
                          "type": "string"
                        },
                        "fingerprint": {
                          "description": "X509 certificate fingerprint (sha256).",
                          "optional": 1,
                          "pattern": "/^(?:[0-9a-fA-F][0-9a-fA-F])(?::[0-9a-fA-F][0-9a-fA-F]){31}$/",
                          "type": "string"
                        },
                        "id": {
                          "description": "Job ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "path-style": {
                          "default": false,
                          "description": "Use path style bucket addressing over vhost style.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "port": {
                          "description": "Port to access S3 object store.",
                          "optional": 1,
                          "type": "integer"
                        },
                        "provider-quirks": {
                          "description": "List of provider specific feature implementation quirks.",
                          "items": {
                            "description": "Provider specific feature implementation quirks.",
                            "enum": [
                              "skip-if-none-match-header"
                            ],
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "put-rate-limit": {
                          "description": "Rate limit for put requests given as #reqest/s.",
                          "optional": 1,
                          "type": "integer"
                        },
                        "region": {
                          "description": "Region to access S3 object store.",
                          "maxLength": 32,
                          "minLength": 3,
                          "optional": 1,
                          "pattern": "/^[_a-z\\d][-_a-z\\d]+$/",
                          "type": "string"
                        },
                        "secret-key": {
                          "description": "S3 client secret key.",
                          "optional": 1,
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system",
                          "s3-endpoint",
                          "{id}"
                        ],
                        "privs": [
                          "Sys.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 0,
                "path": "/config/s3/{id}",
                "text": "{id}"
              }
            ],
            "info": {
              "GET": {
                "description": "List all s3 client configurations.",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "List all s3 client configurations.",
                  "properties": {}
                },
                "permissions": {
                  "description": "List configured s3 endpoints filtered by Sys.Audit privileges",
                  "user": "all"
                },
                "returns": {
                  "description": "List configured s3 clients.",
                  "items": {
                    "additionalProperties": false,
                    "description": "S3 client configuration properties without secret.",
                    "properties": {
                      "access-key": {
                        "description": "Access key for S3 object store.",
                        "type": "string"
                      },
                      "endpoint": {
                        "description": "Endpoint to access S3 object store.",
                        "pattern": "/^(?:(^\\{\\{bucket\\}\\}\\.)*(?:(?:((?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)|\\{\\{region\\}\\})\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::)))))$/",
                        "type": "string"
                      },
                      "fingerprint": {
                        "description": "X509 certificate fingerprint (sha256).",
                        "optional": 1,
                        "pattern": "/^(?:[0-9a-fA-F][0-9a-fA-F])(?::[0-9a-fA-F][0-9a-fA-F]){31}$/",
                        "type": "string"
                      },
                      "id": {
                        "description": "ID to uniquely identify s3 client config.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "path-style": {
                        "default": false,
                        "description": "Use path style bucket addressing over vhost style.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "port": {
                        "description": "Port to access S3 object store.",
                        "optional": 1,
                        "type": "integer"
                      },
                      "provider-quirks": {
                        "description": "List of provider specific feature implementation quirks.",
                        "items": {
                          "description": "Provider specific feature implementation quirks.",
                          "enum": [
                            "skip-if-none-match-header"
                          ],
                          "type": "string"
                        },
                        "optional": 1,
                        "type": "array"
                      },
                      "put-rate-limit": {
                        "description": "Rate limit for put requests given as #reqest/s.",
                        "optional": 1,
                        "type": "integer"
                      },
                      "region": {
                        "description": "Region to access S3 object store.",
                        "maxLength": 32,
                        "minLength": 3,
                        "optional": 1,
                        "pattern": "/^[_a-z\\d][-_a-z\\d]+$/",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "POST": {
                "description": "Create a new s3 client configuration.",
                "method": "POST",
                "parameters": {
                  "additionalProperties": false,
                  "description": "Create a new s3 client configuration.",
                  "properties": {
                    "access-key": {
                      "description": "Access key for S3 object store.",
                      "type": "string"
                    },
                    "endpoint": {
                      "description": "Endpoint to access S3 object store.",
                      "pattern": "/^(?:(^\\{\\{bucket\\}\\}\\.)*(?:(?:((?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)|\\{\\{region\\}\\})\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))|(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::)))))$/",
                      "type": "string"
                    },
                    "fingerprint": {
                      "description": "X509 certificate fingerprint (sha256).",
                      "optional": 1,
                      "pattern": "/^(?:[0-9a-fA-F][0-9a-fA-F])(?::[0-9a-fA-F][0-9a-fA-F]){31}$/",
                      "type": "string"
                    },
                    "id": {
                      "description": "ID to uniquely identify s3 client config.",
                      "maxLength": 32,
                      "minLength": 3,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "path-style": {
                      "default": false,
                      "description": "Use path style bucket addressing over vhost style.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "port": {
                      "description": "Port to access S3 object store.",
                      "optional": 1,
                      "type": "integer"
                    },
                    "provider-quirks": {
                      "description": "List of provider specific feature implementation quirks.",
                      "items": {
                        "description": "Provider specific feature implementation quirks.",
                        "enum": [
                          "skip-if-none-match-header"
                        ],
                        "type": "string"
                      },
                      "optional": 1,
                      "type": "array"
                    },
                    "put-rate-limit": {
                      "description": "Rate limit for put requests given as #reqest/s.",
                      "optional": 1,
                      "type": "integer"
                    },
                    "region": {
                      "description": "Region to access S3 object store.",
                      "maxLength": 32,
                      "minLength": 3,
                      "optional": 1,
                      "pattern": "/^[_a-z\\d][-_a-z\\d]+$/",
                      "type": "string"
                    },
                    "secret-key": {
                      "description": "S3 secret key",
                      "type": "string"
                    }
                  }
                },
                "permissions": {
                  "check": {
                    "partial": false,
                    "path": [
                      "system",
                      "s3-endpoint"
                    ],
                    "privs": [
                      "Sys.Modify"
                    ]
                  }
                },
                "returns": {
                  "type": "null"
                }
              }
            },
            "leaf": 0,
            "path": "/config/s3",
            "text": "s3"
          },
          {
            "children": [
              {
                "info": {
                  "DELETE": {
                    "description": "Remove a sync job configuration",
                    "method": "DELETE",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Remove a sync job configuration",
                      "properties": {
                        "digest": {
                          "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                          "optional": 1,
                          "pattern": "/^[a-f0-9]{64}$/",
                          "type": "string"
                        },
                        "id": {
                          "description": "Job ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "description": "For sync jobs in pull direction user needs Datastore.Backup on target datastore, and Remote.Read on source remote. Additionally, remove_vanished requires Datastore.Prune, and any owner other than the user themselves requires Datastore.Modify.\nFor sync jobs in push direction, user needs RemoteDatastore.Backup on remote datastore, and Datastore.Audit, Datastore.Read and Datastore.Modify on the source datastore, the latter not required sync job owned by user. Additionally, remove vanished requires RemoteDatastore.Modify.",
                      "user": "all"
                    },
                    "returns": {
                      "type": "null"
                    }
                  },
                  "GET": {
                    "description": "Read a sync job configuration.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Read a sync job configuration.",
                      "properties": {
                        "id": {
                          "description": "Job ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "description": "Limited to sync job entries where user has Datastore.Audit on target datastore, and Remote.Audit on source remote for sync jobs in pull direction.\nFor push direction the user requires RemoteDatastore.Audit on the remote datastore and Datastore.Audit on the local datastore.",
                      "user": "all"
                    },
                    "returns": {
                      "additionalProperties": false,
                      "description": "Sync Job",
                      "properties": {
                        "burst-in": {
                          "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                          "maxLength": 64,
                          "minLength": 1,
                          "optional": 1,
                          "type": "string"
                        },
                        "burst-out": {
                          "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                          "maxLength": 64,
                          "minLength": 1,
                          "optional": 1,
                          "type": "string"
                        },
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "encrypted-only": {
                          "description": "Only synchronize encrypted backup snapshots, exclude others.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "group-filter": {
                          "description": "List of group filters.",
                          "items": {
                            "description": "Group filter based on group identifier ('group:GROUP'), group type ('type:<vm|ct|host>'), or regex ('regex:RE'). Can be inverted by prepending 'exclude:'.",
                            "type": "string",
                            "typetext": "[<exclude:|include:>]<type:<vm|ct|host>|group:GROUP|regex:RE>"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "id": {
                          "description": "Job ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "max-depth": {
                          "description": "How many levels of namespaces should be operated on (0 == no recursion, empty == automatic full recursion, namespace depths reduce maximum allowed value)",
                          "maximum": 7,
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "ns": {
                          "description": "Namespace.",
                          "maxLength": 256,
                          "optional": 1,
                          "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                          "type": "string"
                        },
                        "owner": {
                          "description": "Authentication ID",
                          "maxLength": 64,
                          "minLength": 3,
                          "optional": 1,
                          "pattern": "/^(?:(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)|(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)!(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))$/",
                          "type": "string"
                        },
                        "rate-in": {
                          "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                          "maxLength": 64,
                          "minLength": 1,
                          "optional": 1,
                          "type": "string"
                        },
                        "rate-out": {
                          "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                          "maxLength": 64,
                          "minLength": 1,
                          "optional": 1,
                          "type": "string"
                        },
                        "remote": {
                          "description": "Remote ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "remote-ns": {
                          "description": "Namespace.",
                          "maxLength": 256,
                          "optional": 1,
                          "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                          "type": "string"
                        },
                        "remote-store": {
                          "description": "Datastore name.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "remove-vanished": {
                          "default": false,
                          "description": "Delete vanished backups. This remove the local copy if the remote backup was deleted.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "resync-corrupt": {
                          "description": "If the verification failed for a local snapshot, try to pull it again.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "run-on-mount": {
                          "description": "Run this job when a relevant datastore is mounted.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "schedule": {
                          "description": "Run sync job at specified schedule.",
                          "optional": 1,
                          "type": "string",
                          "typetext": "<calendar-event>"
                        },
                        "store": {
                          "description": "Datastore name.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "sync-direction": {
                          "default": "pull",
                          "description": "Direction of the sync job, push or pull",
                          "enum": [
                            "pull",
                            "push"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "transfer-last": {
                          "description": "Limit transfer to last N snapshots (per group), skipping others",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "verified-only": {
                          "description": "Only synchronize verified backup snapshots, exclude others.",
                          "optional": 1,
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "PUT": {
                    "description": "Update sync job config.",
                    "method": "PUT",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Update sync job config.",
                      "properties": {
                        "burst-in": {
                          "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                          "maxLength": 64,
                          "minLength": 1,
                          "optional": 1,
                          "type": "string"
                        },
                        "burst-out": {
                          "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                          "maxLength": 64,
                          "minLength": 1,
                          "optional": 1,
                          "type": "string"
                        },
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "delete": {
                          "description": "List of properties to delete.",
                          "items": {
                            "description": "Deletable property name",
                            "enum": [
                              "remote",
                              "owner",
                              "comment",
                              "schedule",
                              "remove-vanished",
                              "group-filter",
                              "rate-in",
                              "burst-in",
                              "rate-out",
                              "burst-out",
                              "ns",
                              "remote-ns",
                              "max-depth",
                              "transfer-last",
                              "encrypted-only",
                              "verified-only",
                              "run-on-mount",
                              "sync-direction"
                            ],
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "digest": {
                          "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                          "optional": 1,
                          "pattern": "/^[a-f0-9]{64}$/",
                          "type": "string"
                        },
                        "encrypted-only": {
                          "description": "Only synchronize encrypted backup snapshots, exclude others.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "group-filter": {
                          "description": "List of group filters.",
                          "items": {
                            "description": "Group filter based on group identifier ('group:GROUP'), group type ('type:<vm|ct|host>'), or regex ('regex:RE'). Can be inverted by prepending 'exclude:'.",
                            "type": "string",
                            "typetext": "[<exclude:|include:>]<type:<vm|ct|host>|group:GROUP|regex:RE>"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "id": {
                          "description": "Job ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "max-depth": {
                          "description": "How many levels of namespaces should be operated on (0 == no recursion, empty == automatic full recursion, namespace depths reduce maximum allowed value)",
                          "maximum": 7,
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "ns": {
                          "description": "Namespace.",
                          "maxLength": 256,
                          "optional": 1,
                          "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                          "type": "string"
                        },
                        "owner": {
                          "description": "Authentication ID",
                          "maxLength": 64,
                          "minLength": 3,
                          "optional": 1,
                          "pattern": "/^(?:(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)|(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)!(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))$/",
                          "type": "string"
                        },
                        "rate-in": {
                          "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                          "maxLength": 64,
                          "minLength": 1,
                          "optional": 1,
                          "type": "string"
                        },
                        "rate-out": {
                          "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                          "maxLength": 64,
                          "minLength": 1,
                          "optional": 1,
                          "type": "string"
                        },
                        "remote": {
                          "description": "Remote ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "remote-ns": {
                          "description": "Namespace.",
                          "maxLength": 256,
                          "optional": 1,
                          "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                          "type": "string"
                        },
                        "remote-store": {
                          "description": "Datastore name.",
                          "maxLength": 32,
                          "minLength": 3,
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "remove-vanished": {
                          "default": false,
                          "description": "Delete vanished backups. This remove the local copy if the remote backup was deleted.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "resync-corrupt": {
                          "description": "If the verification failed for a local snapshot, try to pull it again.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "run-on-mount": {
                          "description": "Run this job when a relevant datastore is mounted.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "schedule": {
                          "description": "Run sync job at specified schedule.",
                          "optional": 1,
                          "type": "string",
                          "typetext": "<calendar-event>"
                        },
                        "store": {
                          "description": "Datastore name.",
                          "maxLength": 32,
                          "minLength": 3,
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "sync-direction": {
                          "default": "pull",
                          "description": "Direction of the sync job, push or pull",
                          "enum": [
                            "pull",
                            "push"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "transfer-last": {
                          "description": "Limit transfer to last N snapshots (per group), skipping others",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "verified-only": {
                          "description": "Only synchronize verified backup snapshots, exclude others.",
                          "optional": 1,
                          "type": "boolean"
                        }
                      }
                    },
                    "permissions": {
                      "description": "For sync jobs in pull direction user needs Datastore.Backup on target datastore, and Remote.Read on source remote. Additionally, remove_vanished requires Datastore.Prune, and any owner other than the user themselves requires Datastore.Modify.\nFor sync jobs in push direction, user needs RemoteDatastore.Backup on remote datastore, and Datastore.Audit, Datastore.Read and Datastore.Modify on the source datastore, the latter not required sync job owned by user. Additionally, remove vanished requires RemoteDatastore.Modify.",
                      "user": "all"
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 1,
                "path": "/config/sync/{id}",
                "text": "{id}"
              }
            ],
            "info": {
              "GET": {
                "description": "List all sync jobs",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "List all sync jobs",
                  "properties": {
                    "sync-direction": {
                      "default": "pull",
                      "description": "The direction of the listed sync jobs: push, pull or all.",
                      "enum": [
                        "all",
                        "push",
                        "pull"
                      ],
                      "optional": 1,
                      "type": "string"
                    }
                  }
                },
                "permissions": {
                  "description": "Limited to sync job entries where user has Datastore.Audit on target datastore, and Remote.Audit on source remote for sync jobs in pull direction.\nFor push direction the user requires RemoteDatastore.Audit on the remote datastore and Datastore.Audit on the local datastore.",
                  "user": "all"
                },
                "returns": {
                  "description": "List configured jobs.",
                  "items": {
                    "additionalProperties": false,
                    "description": "Sync Job",
                    "properties": {
                      "burst-in": {
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                        "maxLength": 64,
                        "minLength": 1,
                        "optional": 1,
                        "type": "string"
                      },
                      "burst-out": {
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                        "maxLength": 64,
                        "minLength": 1,
                        "optional": 1,
                        "type": "string"
                      },
                      "comment": {
                        "description": "Comment.",
                        "maxLength": 128,
                        "optional": 1,
                        "pattern": "/^[[:^cntrl:]]*$/",
                        "type": "string"
                      },
                      "encrypted-only": {
                        "description": "Only synchronize encrypted backup snapshots, exclude others.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "group-filter": {
                        "description": "List of group filters.",
                        "items": {
                          "description": "Group filter based on group identifier ('group:GROUP'), group type ('type:<vm|ct|host>'), or regex ('regex:RE'). Can be inverted by prepending 'exclude:'.",
                          "type": "string",
                          "typetext": "[<exclude:|include:>]<type:<vm|ct|host>|group:GROUP|regex:RE>"
                        },
                        "optional": 1,
                        "type": "array"
                      },
                      "id": {
                        "description": "Job ID.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "max-depth": {
                        "description": "How many levels of namespaces should be operated on (0 == no recursion, empty == automatic full recursion, namespace depths reduce maximum allowed value)",
                        "maximum": 7,
                        "minimum": 0,
                        "optional": 1,
                        "type": "integer"
                      },
                      "ns": {
                        "description": "Namespace.",
                        "maxLength": 256,
                        "optional": 1,
                        "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                        "type": "string"
                      },
                      "owner": {
                        "description": "Authentication ID",
                        "maxLength": 64,
                        "minLength": 3,
                        "optional": 1,
                        "pattern": "/^(?:(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)|(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)!(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))$/",
                        "type": "string"
                      },
                      "rate-in": {
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                        "maxLength": 64,
                        "minLength": 1,
                        "optional": 1,
                        "type": "string"
                      },
                      "rate-out": {
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                        "maxLength": 64,
                        "minLength": 1,
                        "optional": 1,
                        "type": "string"
                      },
                      "remote": {
                        "description": "Remote ID.",
                        "maxLength": 32,
                        "minLength": 3,
                        "optional": 1,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "remote-ns": {
                        "description": "Namespace.",
                        "maxLength": 256,
                        "optional": 1,
                        "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                        "type": "string"
                      },
                      "remote-store": {
                        "description": "Datastore name.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "remove-vanished": {
                        "default": false,
                        "description": "Delete vanished backups. This remove the local copy if the remote backup was deleted.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "resync-corrupt": {
                        "description": "If the verification failed for a local snapshot, try to pull it again.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "run-on-mount": {
                        "description": "Run this job when a relevant datastore is mounted.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "schedule": {
                        "description": "Run sync job at specified schedule.",
                        "optional": 1,
                        "type": "string",
                        "typetext": "<calendar-event>"
                      },
                      "store": {
                        "description": "Datastore name.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "sync-direction": {
                        "default": "pull",
                        "description": "Direction of the sync job, push or pull",
                        "enum": [
                          "pull",
                          "push"
                        ],
                        "optional": 1,
                        "type": "string"
                      },
                      "transfer-last": {
                        "description": "Limit transfer to last N snapshots (per group), skipping others",
                        "minimum": 1,
                        "optional": 1,
                        "type": "integer"
                      },
                      "verified-only": {
                        "description": "Only synchronize verified backup snapshots, exclude others.",
                        "optional": 1,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "POST": {
                "description": "Create a new sync job.",
                "method": "POST",
                "parameters": {
                  "additionalProperties": false,
                  "description": "Create a new sync job.",
                  "properties": {
                    "burst-in": {
                      "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                      "maxLength": 64,
                      "minLength": 1,
                      "optional": 1,
                      "type": "string"
                    },
                    "burst-out": {
                      "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                      "maxLength": 64,
                      "minLength": 1,
                      "optional": 1,
                      "type": "string"
                    },
                    "comment": {
                      "description": "Comment.",
                      "maxLength": 128,
                      "optional": 1,
                      "pattern": "/^[[:^cntrl:]]*$/",
                      "type": "string"
                    },
                    "encrypted-only": {
                      "description": "Only synchronize encrypted backup snapshots, exclude others.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "group-filter": {
                      "description": "List of group filters.",
                      "items": {
                        "description": "Group filter based on group identifier ('group:GROUP'), group type ('type:<vm|ct|host>'), or regex ('regex:RE'). Can be inverted by prepending 'exclude:'.",
                        "type": "string",
                        "typetext": "[<exclude:|include:>]<type:<vm|ct|host>|group:GROUP|regex:RE>"
                      },
                      "optional": 1,
                      "type": "array"
                    },
                    "id": {
                      "description": "Job ID.",
                      "maxLength": 32,
                      "minLength": 3,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "max-depth": {
                      "description": "How many levels of namespaces should be operated on (0 == no recursion, empty == automatic full recursion, namespace depths reduce maximum allowed value)",
                      "maximum": 7,
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer"
                    },
                    "ns": {
                      "description": "Namespace.",
                      "maxLength": 256,
                      "optional": 1,
                      "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                      "type": "string"
                    },
                    "owner": {
                      "description": "Authentication ID",
                      "maxLength": 64,
                      "minLength": 3,
                      "optional": 1,
                      "pattern": "/^(?:(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)|(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)!(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))$/",
                      "type": "string"
                    },
                    "rate-in": {
                      "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                      "maxLength": 64,
                      "minLength": 1,
                      "optional": 1,
                      "type": "string"
                    },
                    "rate-out": {
                      "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                      "maxLength": 64,
                      "minLength": 1,
                      "optional": 1,
                      "type": "string"
                    },
                    "remote": {
                      "description": "Remote ID.",
                      "maxLength": 32,
                      "minLength": 3,
                      "optional": 1,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "remote-ns": {
                      "description": "Namespace.",
                      "maxLength": 256,
                      "optional": 1,
                      "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                      "type": "string"
                    },
                    "remote-store": {
                      "description": "Datastore name.",
                      "maxLength": 32,
                      "minLength": 3,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "remove-vanished": {
                      "default": false,
                      "description": "Delete vanished backups. This remove the local copy if the remote backup was deleted.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "resync-corrupt": {
                      "description": "If the verification failed for a local snapshot, try to pull it again.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "run-on-mount": {
                      "description": "Run this job when a relevant datastore is mounted.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "schedule": {
                      "description": "Run sync job at specified schedule.",
                      "optional": 1,
                      "type": "string",
                      "typetext": "<calendar-event>"
                    },
                    "store": {
                      "description": "Datastore name.",
                      "maxLength": 32,
                      "minLength": 3,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "sync-direction": {
                      "default": "pull",
                      "description": "Direction of the sync job, push or pull",
                      "enum": [
                        "pull",
                        "push"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "transfer-last": {
                      "description": "Limit transfer to last N snapshots (per group), skipping others",
                      "minimum": 1,
                      "optional": 1,
                      "type": "integer"
                    },
                    "verified-only": {
                      "description": "Only synchronize verified backup snapshots, exclude others.",
                      "optional": 1,
                      "type": "boolean"
                    }
                  }
                },
                "permissions": {
                  "description": "For sync jobs in pull direction user needs Datastore.Backup on target datastore, and Remote.Read on source remote. Additionally, remove_vanished requires Datastore.Prune, and any owner other than the user themselves requires Datastore.Modify.\nFor sync jobs in push direction, user needs RemoteDatastore.Backup on remote datastore, and Datastore.Audit, Datastore.Read and Datastore.Modify on the source datastore, the latter not required sync job owned by user. Additionally, remove vanished requires RemoteDatastore.Modify.",
                  "user": "all"
                },
                "returns": {
                  "type": "null"
                }
              }
            },
            "leaf": 0,
            "path": "/config/sync",
            "text": "sync"
          },
          {
            "children": [
              {
                "info": {
                  "DELETE": {
                    "description": "Remove a tape backup job configuration",
                    "method": "DELETE",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Remove a tape backup job configuration",
                      "properties": {
                        "digest": {
                          "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                          "optional": 1,
                          "pattern": "/^[a-f0-9]{64}$/",
                          "type": "string"
                        },
                        "id": {
                          "description": "Job ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "tape",
                          "job",
                          "{id}"
                        ],
                        "privs": [
                          "Tape.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  },
                  "GET": {
                    "description": "Read a tape backup job configuration.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Read a tape backup job configuration.",
                      "properties": {
                        "id": {
                          "description": "Job ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "tape",
                          "job",
                          "{id}"
                        ],
                        "privs": [
                          "Tape.Audit"
                        ]
                      }
                    },
                    "returns": {
                      "additionalProperties": false,
                      "description": "Tape Backup Job",
                      "properties": {
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "drive": {
                          "description": "Drive Identifier.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "eject-media": {
                          "description": "Eject media upon job completion.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "export-media-set": {
                          "description": "Export media set upon job completion.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "group-filter": {
                          "description": "List of group filters.",
                          "items": {
                            "description": "Group filter based on group identifier ('group:GROUP'), group type ('type:<vm|ct|host>'), or regex ('regex:RE'). Can be inverted by prepending 'exclude:'.",
                            "type": "string",
                            "typetext": "[<exclude:|include:>]<type:<vm|ct|host>|group:GROUP|regex:RE>"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "id": {
                          "description": "Job ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "latest-only": {
                          "description": "Backup latest snapshots only.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "max-depth": {
                          "default": 7,
                          "description": "How many levels of namespaces should be operated on (0 == no recursion)",
                          "maximum": 7,
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "notification-mode": {
                          "default": "notification-system",
                          "description": "Configure how notifications for this datastore should be sent.\n`legacy-sendmail` sends email notifications to the user configured\nin `notify-user` via the system's `sendmail` executable.\n`notification-system` emits matchable notification events to the\nnotification system.",
                          "enum": [
                            "legacy-sendmail",
                            "notification-system"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "notify-user": {
                          "description": "User ID",
                          "maxLength": 64,
                          "minLength": 3,
                          "optional": 1,
                          "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "ns": {
                          "description": "Namespace.",
                          "maxLength": 256,
                          "optional": 1,
                          "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                          "type": "string"
                        },
                        "pool": {
                          "description": "Media pool name.",
                          "maxLength": 32,
                          "minLength": 2,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "schedule": {
                          "description": "Run sync job at specified schedule.",
                          "optional": 1,
                          "type": "string",
                          "typetext": "<calendar-event>"
                        },
                        "store": {
                          "description": "Datastore name.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "worker-threads": {
                          "default": 1,
                          "description": "Set the number of worker threads to use for the job",
                          "maximum": 32,
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "PUT": {
                    "description": "Update the tape backup job",
                    "method": "PUT",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Update the tape backup job",
                      "properties": {
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "delete": {
                          "description": "List of properties to delete.",
                          "items": {
                            "description": "Deletable property name",
                            "enum": [
                              "comment",
                              "schedule",
                              "eject-media",
                              "export-media-set",
                              "latest-only",
                              "notify-user",
                              "notification-mode",
                              "group-filter",
                              "max-depth",
                              "ns",
                              "worker-threads"
                            ],
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "digest": {
                          "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                          "optional": 1,
                          "pattern": "/^[a-f0-9]{64}$/",
                          "type": "string"
                        },
                        "drive": {
                          "description": "Drive Identifier.",
                          "maxLength": 32,
                          "minLength": 3,
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "eject-media": {
                          "description": "Eject media upon job completion.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "export-media-set": {
                          "description": "Export media set upon job completion.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "group-filter": {
                          "description": "List of group filters.",
                          "items": {
                            "description": "Group filter based on group identifier ('group:GROUP'), group type ('type:<vm|ct|host>'), or regex ('regex:RE'). Can be inverted by prepending 'exclude:'.",
                            "type": "string",
                            "typetext": "[<exclude:|include:>]<type:<vm|ct|host>|group:GROUP|regex:RE>"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "id": {
                          "description": "Job ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "latest-only": {
                          "description": "Backup latest snapshots only.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "max-depth": {
                          "default": 7,
                          "description": "How many levels of namespaces should be operated on (0 == no recursion)",
                          "maximum": 7,
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "notification-mode": {
                          "default": "notification-system",
                          "description": "Configure how notifications for this datastore should be sent.\n`legacy-sendmail` sends email notifications to the user configured\nin `notify-user` via the system's `sendmail` executable.\n`notification-system` emits matchable notification events to the\nnotification system.",
                          "enum": [
                            "legacy-sendmail",
                            "notification-system"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "notify-user": {
                          "description": "User ID",
                          "maxLength": 64,
                          "minLength": 3,
                          "optional": 1,
                          "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "ns": {
                          "description": "Namespace.",
                          "maxLength": 256,
                          "optional": 1,
                          "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                          "type": "string"
                        },
                        "pool": {
                          "description": "Media pool name.",
                          "maxLength": 32,
                          "minLength": 2,
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "schedule": {
                          "description": "Run sync job at specified schedule.",
                          "optional": 1,
                          "type": "string",
                          "typetext": "<calendar-event>"
                        },
                        "store": {
                          "description": "Datastore name.",
                          "maxLength": 32,
                          "minLength": 3,
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "worker-threads": {
                          "default": 1,
                          "description": "Set the number of worker threads to use for the job",
                          "maximum": 32,
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "tape",
                          "job",
                          "{id}"
                        ],
                        "privs": [
                          "Tape.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 1,
                "path": "/config/tape-backup-job/{id}",
                "text": "{id}"
              }
            ],
            "info": {
              "GET": {
                "description": "List all tape backup jobs",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "List all tape backup jobs",
                  "properties": {}
                },
                "permissions": {
                  "description": "List configured tape jobs filtered by Tape.Audit privileges",
                  "user": "all"
                },
                "returns": {
                  "description": "List configured jobs.",
                  "items": {
                    "additionalProperties": false,
                    "description": "Tape Backup Job",
                    "properties": {
                      "comment": {
                        "description": "Comment.",
                        "maxLength": 128,
                        "optional": 1,
                        "pattern": "/^[[:^cntrl:]]*$/",
                        "type": "string"
                      },
                      "drive": {
                        "description": "Drive Identifier.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "eject-media": {
                        "description": "Eject media upon job completion.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "export-media-set": {
                        "description": "Export media set upon job completion.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "group-filter": {
                        "description": "List of group filters.",
                        "items": {
                          "description": "Group filter based on group identifier ('group:GROUP'), group type ('type:<vm|ct|host>'), or regex ('regex:RE'). Can be inverted by prepending 'exclude:'.",
                          "type": "string",
                          "typetext": "[<exclude:|include:>]<type:<vm|ct|host>|group:GROUP|regex:RE>"
                        },
                        "optional": 1,
                        "type": "array"
                      },
                      "id": {
                        "description": "Job ID.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "latest-only": {
                        "description": "Backup latest snapshots only.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "max-depth": {
                        "default": 7,
                        "description": "How many levels of namespaces should be operated on (0 == no recursion)",
                        "maximum": 7,
                        "minimum": 0,
                        "optional": 1,
                        "type": "integer"
                      },
                      "notification-mode": {
                        "default": "notification-system",
                        "description": "Configure how notifications for this datastore should be sent.\n`legacy-sendmail` sends email notifications to the user configured\nin `notify-user` via the system's `sendmail` executable.\n`notification-system` emits matchable notification events to the\nnotification system.",
                        "enum": [
                          "legacy-sendmail",
                          "notification-system"
                        ],
                        "optional": 1,
                        "type": "string"
                      },
                      "notify-user": {
                        "description": "User ID",
                        "maxLength": 64,
                        "minLength": 3,
                        "optional": 1,
                        "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "ns": {
                        "description": "Namespace.",
                        "maxLength": 256,
                        "optional": 1,
                        "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                        "type": "string"
                      },
                      "pool": {
                        "description": "Media pool name.",
                        "maxLength": 32,
                        "minLength": 2,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "schedule": {
                        "description": "Run sync job at specified schedule.",
                        "optional": 1,
                        "type": "string",
                        "typetext": "<calendar-event>"
                      },
                      "store": {
                        "description": "Datastore name.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "worker-threads": {
                        "default": 1,
                        "description": "Set the number of worker threads to use for the job",
                        "maximum": 32,
                        "minimum": 1,
                        "optional": 1,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "POST": {
                "description": "Create a new tape backup job.",
                "method": "POST",
                "parameters": {
                  "additionalProperties": false,
                  "description": "Create a new tape backup job.",
                  "properties": {
                    "comment": {
                      "description": "Comment.",
                      "maxLength": 128,
                      "optional": 1,
                      "pattern": "/^[[:^cntrl:]]*$/",
                      "type": "string"
                    },
                    "drive": {
                      "description": "Drive Identifier.",
                      "maxLength": 32,
                      "minLength": 3,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "eject-media": {
                      "description": "Eject media upon job completion.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "export-media-set": {
                      "description": "Export media set upon job completion.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "group-filter": {
                      "description": "List of group filters.",
                      "items": {
                        "description": "Group filter based on group identifier ('group:GROUP'), group type ('type:<vm|ct|host>'), or regex ('regex:RE'). Can be inverted by prepending 'exclude:'.",
                        "type": "string",
                        "typetext": "[<exclude:|include:>]<type:<vm|ct|host>|group:GROUP|regex:RE>"
                      },
                      "optional": 1,
                      "type": "array"
                    },
                    "id": {
                      "description": "Job ID.",
                      "maxLength": 32,
                      "minLength": 3,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "latest-only": {
                      "description": "Backup latest snapshots only.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "max-depth": {
                      "default": 7,
                      "description": "How many levels of namespaces should be operated on (0 == no recursion)",
                      "maximum": 7,
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer"
                    },
                    "notification-mode": {
                      "default": "notification-system",
                      "description": "Configure how notifications for this datastore should be sent.\n`legacy-sendmail` sends email notifications to the user configured\nin `notify-user` via the system's `sendmail` executable.\n`notification-system` emits matchable notification events to the\nnotification system.",
                      "enum": [
                        "legacy-sendmail",
                        "notification-system"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "notify-user": {
                      "description": "User ID",
                      "maxLength": 64,
                      "minLength": 3,
                      "optional": 1,
                      "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "ns": {
                      "description": "Namespace.",
                      "maxLength": 256,
                      "optional": 1,
                      "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                      "type": "string"
                    },
                    "pool": {
                      "description": "Media pool name.",
                      "maxLength": 32,
                      "minLength": 2,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "schedule": {
                      "description": "Run sync job at specified schedule.",
                      "optional": 1,
                      "type": "string",
                      "typetext": "<calendar-event>"
                    },
                    "store": {
                      "description": "Datastore name.",
                      "maxLength": 32,
                      "minLength": 3,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "worker-threads": {
                      "default": 1,
                      "description": "Set the number of worker threads to use for the job",
                      "maximum": 32,
                      "minimum": 1,
                      "optional": 1,
                      "type": "integer"
                    }
                  }
                },
                "permissions": {
                  "check": {
                    "partial": false,
                    "path": [
                      "tape",
                      "job"
                    ],
                    "privs": [
                      "Tape.Modify"
                    ]
                  }
                },
                "returns": {
                  "type": "null"
                }
              }
            },
            "leaf": 0,
            "path": "/config/tape-backup-job",
            "text": "tape-backup-job"
          },
          {
            "children": [
              {
                "info": {
                  "DELETE": {
                    "description": "Remove a encryption key from the database\n\nPlease note that you can no longer access tapes using this key.",
                    "method": "DELETE",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Remove a encryption key from the database\n\nPlease note that you can no longer access tapes using this key.",
                      "properties": {
                        "digest": {
                          "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                          "optional": 1,
                          "pattern": "/^[a-f0-9]{64}$/",
                          "type": "string"
                        },
                        "fingerprint": {
                          "description": "Tape encryption key fingerprint (sha256).",
                          "pattern": "/^(?:[0-9a-fA-F][0-9a-fA-F])(?::[0-9a-fA-F][0-9a-fA-F]){31}$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "tape",
                          "pool"
                        ],
                        "privs": [
                          "Tape.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  },
                  "GET": {
                    "description": "Get key config (public key part)",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Get key config (public key part)",
                      "properties": {
                        "fingerprint": {
                          "description": "Tape encryption key fingerprint (sha256).",
                          "pattern": "/^(?:[0-9a-fA-F][0-9a-fA-F])(?::[0-9a-fA-F][0-9a-fA-F]){31}$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "tape",
                          "pool"
                        ],
                        "privs": [
                          "Tape.Audit"
                        ]
                      }
                    },
                    "returns": {
                      "additionalProperties": false,
                      "description": "Encryption Key Information",
                      "properties": {
                        "created": {
                          "description": "Key creation time",
                          "type": "integer"
                        },
                        "fingerprint": {
                          "description": "X509 certificate fingerprint (sha256).",
                          "optional": 1,
                          "pattern": "/^(?:[0-9a-fA-F][0-9a-fA-F])(?::[0-9a-fA-F][0-9a-fA-F]){31}$/",
                          "type": "string"
                        },
                        "hint": {
                          "description": "Password hint",
                          "optional": 1,
                          "type": "string"
                        },
                        "kdf": {
                          "default": "scrypt",
                          "description": "Key derivation function for password protected encryption keys.",
                          "enum": [
                            "none",
                            "scrypt",
                            "pbkdf2"
                          ],
                          "type": "string"
                        },
                        "modified": {
                          "description": "Key modification time",
                          "type": "integer"
                        },
                        "path": {
                          "description": "Path to key (if stored in a file)",
                          "optional": 1,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "PUT": {
                    "description": "Change the encryption key's password (and password hint).",
                    "method": "PUT",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Change the encryption key's password (and password hint).",
                      "properties": {
                        "digest": {
                          "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                          "optional": 1,
                          "pattern": "/^[a-f0-9]{64}$/",
                          "type": "string"
                        },
                        "fingerprint": {
                          "description": "Tape encryption key fingerprint (sha256).",
                          "pattern": "/^(?:[0-9a-fA-F][0-9a-fA-F])(?::[0-9a-fA-F][0-9a-fA-F]){31}$/",
                          "type": "string"
                        },
                        "force": {
                          "default": false,
                          "description": "Reset the passphrase for a tape key, using the root-only accessible copy.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "hint": {
                          "description": "Password hint.",
                          "maxLength": 64,
                          "minLength": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "kdf": {
                          "default": "scrypt",
                          "description": "Key derivation function for password protected encryption keys.",
                          "enum": [
                            "none",
                            "scrypt",
                            "pbkdf2"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "new-password": {
                          "description": "The new password.",
                          "minLength": 5,
                          "type": "string"
                        },
                        "password": {
                          "description": "The current password.",
                          "minLength": 5,
                          "optional": 1,
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "tape",
                          "pool"
                        ],
                        "privs": [
                          "Tape.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 1,
                "path": "/config/tape-encryption-keys/{fingerprint}",
                "text": "{fingerprint}"
              }
            ],
            "info": {
              "GET": {
                "description": "List existing keys",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "List existing keys",
                  "properties": {}
                },
                "permissions": {
                  "check": {
                    "partial": false,
                    "path": [
                      "tape",
                      "pool"
                    ],
                    "privs": [
                      "Tape.Audit"
                    ]
                  }
                },
                "returns": {
                  "description": "The list of tape encryption keys (with config digest).",
                  "items": {
                    "additionalProperties": false,
                    "description": "Encryption Key Information",
                    "properties": {
                      "created": {
                        "description": "Key creation time",
                        "type": "integer"
                      },
                      "fingerprint": {
                        "description": "X509 certificate fingerprint (sha256).",
                        "optional": 1,
                        "pattern": "/^(?:[0-9a-fA-F][0-9a-fA-F])(?::[0-9a-fA-F][0-9a-fA-F]){31}$/",
                        "type": "string"
                      },
                      "hint": {
                        "description": "Password hint",
                        "optional": 1,
                        "type": "string"
                      },
                      "kdf": {
                        "default": "scrypt",
                        "description": "Key derivation function for password protected encryption keys.",
                        "enum": [
                          "none",
                          "scrypt",
                          "pbkdf2"
                        ],
                        "type": "string"
                      },
                      "modified": {
                        "description": "Key modification time",
                        "type": "integer"
                      },
                      "path": {
                        "description": "Path to key (if stored in a file)",
                        "optional": 1,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "POST": {
                "description": "Create a new encryption key",
                "method": "POST",
                "parameters": {
                  "additionalProperties": false,
                  "description": "Create a new encryption key",
                  "properties": {
                    "hint": {
                      "description": "Password hint.",
                      "maxLength": 64,
                      "minLength": 1,
                      "optional": 1,
                      "pattern": "/^[[:^cntrl:]]*$/",
                      "type": "string"
                    },
                    "kdf": {
                      "default": "scrypt",
                      "description": "Key derivation function for password protected encryption keys.",
                      "enum": [
                        "none",
                        "scrypt",
                        "pbkdf2"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "key": {
                      "description": "Restore/Re-create a key from this JSON string.",
                      "maxLength": 600,
                      "minLength": 300,
                      "optional": 1,
                      "type": "string"
                    },
                    "password": {
                      "description": "A secret password.",
                      "minLength": 5,
                      "type": "string"
                    }
                  }
                },
                "permissions": {
                  "check": {
                    "partial": false,
                    "path": [
                      "tape",
                      "pool"
                    ],
                    "privs": [
                      "Tape.Modify"
                    ]
                  }
                },
                "returns": {
                  "description": "Tape encryption key fingerprint (sha256).",
                  "pattern": "/^(?:[0-9a-fA-F][0-9a-fA-F])(?::[0-9a-fA-F][0-9a-fA-F]){31}$/",
                  "type": "string"
                }
              }
            },
            "leaf": 0,
            "path": "/config/tape-encryption-keys",
            "text": "tape-encryption-keys"
          },
          {
            "children": [
              {
                "info": {
                  "DELETE": {
                    "description": "Remove a traffic control rule from the configuration file.",
                    "method": "DELETE",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Remove a traffic control rule from the configuration file.",
                      "properties": {
                        "digest": {
                          "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                          "optional": 1,
                          "pattern": "/^[a-f0-9]{64}$/",
                          "type": "string"
                        },
                        "name": {
                          "description": "Rule ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [],
                        "privs": [
                          "Sys.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  },
                  "GET": {
                    "description": "Read traffic control configuration data.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Read traffic control configuration data.",
                      "properties": {
                        "name": {
                          "description": "Rule ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [],
                        "privs": [
                          "Sys.Audit"
                        ]
                      }
                    },
                    "returns": {
                      "additionalProperties": false,
                      "description": "Traffic control rule",
                      "properties": {
                        "burst-in": {
                          "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                          "maxLength": 64,
                          "minLength": 1,
                          "optional": 1,
                          "type": "string"
                        },
                        "burst-out": {
                          "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                          "maxLength": 64,
                          "minLength": 1,
                          "optional": 1,
                          "type": "string"
                        },
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "name": {
                          "description": "Rule ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "network": {
                          "description": "Rule applies to Source IPs within this networks",
                          "items": {
                            "description": "IP address (IPv4 or IPv6) with netmask (CIDR notation).",
                            "maxLength": 43,
                            "pattern": "/^(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))/\\d{1,2})$|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::)))/\\d{1,3})$)$/",
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "rate-in": {
                          "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                          "maxLength": 64,
                          "minLength": 1,
                          "optional": 1,
                          "type": "string"
                        },
                        "rate-out": {
                          "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                          "maxLength": 64,
                          "minLength": 1,
                          "optional": 1,
                          "type": "string"
                        },
                        "timeframe": {
                          "description": "Enable the rule at specific times",
                          "items": {
                            "description": "Timeframe to specify when the rule is active.",
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "PUT": {
                    "description": "Update traffic control configuration.",
                    "method": "PUT",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Update traffic control configuration.",
                      "properties": {
                        "burst-in": {
                          "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                          "maxLength": 64,
                          "minLength": 1,
                          "optional": 1,
                          "type": "string"
                        },
                        "burst-out": {
                          "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                          "maxLength": 64,
                          "minLength": 1,
                          "optional": 1,
                          "type": "string"
                        },
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "delete": {
                          "description": "List of properties to delete.",
                          "items": {
                            "description": "Deletable property name",
                            "enum": [
                              "rate-in",
                              "burst-in",
                              "rate-out",
                              "burst-out",
                              "comment",
                              "timeframe"
                            ],
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "digest": {
                          "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                          "optional": 1,
                          "pattern": "/^[a-f0-9]{64}$/",
                          "type": "string"
                        },
                        "name": {
                          "description": "Rule ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "network": {
                          "description": "Rule applies to Source IPs within this networks",
                          "items": {
                            "description": "IP address (IPv4 or IPv6) with netmask (CIDR notation).",
                            "maxLength": 43,
                            "pattern": "/^(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))/\\d{1,2})$|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::)))/\\d{1,3})$)$/",
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "rate-in": {
                          "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                          "maxLength": 64,
                          "minLength": 1,
                          "optional": 1,
                          "type": "string"
                        },
                        "rate-out": {
                          "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                          "maxLength": 64,
                          "minLength": 1,
                          "optional": 1,
                          "type": "string"
                        },
                        "timeframe": {
                          "description": "Enable the rule at specific times",
                          "items": {
                            "description": "Timeframe to specify when the rule is active.",
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [],
                        "privs": [
                          "Sys.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 1,
                "path": "/config/traffic-control/{name}",
                "text": "{name}"
              }
            ],
            "info": {
              "GET": {
                "description": "List traffic control rules",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "List traffic control rules",
                  "properties": {}
                },
                "permissions": {
                  "check": {
                    "partial": false,
                    "path": [],
                    "privs": [
                      "Sys.Modify"
                    ]
                  }
                },
                "returns": {
                  "description": "The list of configured traffic control rules (with config digest).",
                  "items": {
                    "additionalProperties": false,
                    "description": "Traffic control rule",
                    "properties": {
                      "burst-in": {
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                        "maxLength": 64,
                        "minLength": 1,
                        "optional": 1,
                        "type": "string"
                      },
                      "burst-out": {
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                        "maxLength": 64,
                        "minLength": 1,
                        "optional": 1,
                        "type": "string"
                      },
                      "comment": {
                        "description": "Comment.",
                        "maxLength": 128,
                        "optional": 1,
                        "pattern": "/^[[:^cntrl:]]*$/",
                        "type": "string"
                      },
                      "name": {
                        "description": "Rule ID.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "network": {
                        "description": "Rule applies to Source IPs within this networks",
                        "items": {
                          "description": "IP address (IPv4 or IPv6) with netmask (CIDR notation).",
                          "maxLength": 43,
                          "pattern": "/^(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))/\\d{1,2})$|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::)))/\\d{1,3})$)$/",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "rate-in": {
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                        "maxLength": 64,
                        "minLength": 1,
                        "optional": 1,
                        "type": "string"
                      },
                      "rate-out": {
                        "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                        "maxLength": 64,
                        "minLength": 1,
                        "optional": 1,
                        "type": "string"
                      },
                      "timeframe": {
                        "description": "Enable the rule at specific times",
                        "items": {
                          "description": "Timeframe to specify when the rule is active.",
                          "type": "string"
                        },
                        "optional": 1,
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "POST": {
                "description": "Create new traffic control rule.",
                "method": "POST",
                "parameters": {
                  "additionalProperties": false,
                  "description": "Create new traffic control rule.",
                  "properties": {
                    "burst-in": {
                      "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                      "maxLength": 64,
                      "minLength": 1,
                      "optional": 1,
                      "type": "string"
                    },
                    "burst-out": {
                      "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                      "maxLength": 64,
                      "minLength": 1,
                      "optional": 1,
                      "type": "string"
                    },
                    "comment": {
                      "description": "Comment.",
                      "maxLength": 128,
                      "optional": 1,
                      "pattern": "/^[[:^cntrl:]]*$/",
                      "type": "string"
                    },
                    "name": {
                      "description": "Rule ID.",
                      "maxLength": 32,
                      "minLength": 3,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "network": {
                      "description": "Rule applies to Source IPs within this networks",
                      "items": {
                        "description": "IP address (IPv4 or IPv6) with netmask (CIDR notation).",
                        "maxLength": 43,
                        "pattern": "/^(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))/\\d{1,2})$|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::)))/\\d{1,3})$)$/",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "rate-in": {
                      "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                      "maxLength": 64,
                      "minLength": 1,
                      "optional": 1,
                      "type": "string"
                    },
                    "rate-out": {
                      "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                      "maxLength": 64,
                      "minLength": 1,
                      "optional": 1,
                      "type": "string"
                    },
                    "timeframe": {
                      "description": "Enable the rule at specific times",
                      "items": {
                        "description": "Timeframe to specify when the rule is active.",
                        "type": "string"
                      },
                      "optional": 1,
                      "type": "array"
                    }
                  }
                },
                "permissions": {
                  "check": {
                    "partial": false,
                    "path": [],
                    "privs": [
                      "Sys.Modify"
                    ]
                  }
                },
                "returns": {
                  "type": "null"
                }
              }
            },
            "leaf": 0,
            "path": "/config/traffic-control",
            "text": "traffic-control"
          },
          {
            "children": [
              {
                "info": {
                  "DELETE": {
                    "description": "Remove a verification job configuration",
                    "method": "DELETE",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Remove a verification job configuration",
                      "properties": {
                        "digest": {
                          "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                          "optional": 1,
                          "pattern": "/^[a-f0-9]{64}$/",
                          "type": "string"
                        },
                        "id": {
                          "description": "Job ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "description": "Requires Datastore.Verify on job's datastore.",
                      "user": "all"
                    },
                    "returns": {
                      "type": "null"
                    }
                  },
                  "GET": {
                    "description": "Read a verification job configuration.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Read a verification job configuration.",
                      "properties": {
                        "id": {
                          "description": "Job ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "description": "Requires Datastore.Audit or Datastore.Verify on job's datastore.",
                      "user": "all"
                    },
                    "returns": {
                      "additionalProperties": false,
                      "description": "Verification Job",
                      "properties": {
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "id": {
                          "description": "Job ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "ignore-verified": {
                          "default": true,
                          "description": "Do not verify backups that are already verified if their verification is not outdated.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "max-depth": {
                          "default": 7,
                          "description": "How many levels of namespaces should be operated on (0 == no recursion)",
                          "maximum": 7,
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "ns": {
                          "description": "Namespace.",
                          "maxLength": 256,
                          "optional": 1,
                          "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                          "type": "string"
                        },
                        "outdated-after": {
                          "description": "Days after that a verification becomes outdated. (0 is deprecated)'",
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "schedule": {
                          "description": "Run verify job at specified schedule.",
                          "optional": 1,
                          "type": "string",
                          "typetext": "<calendar-event>"
                        },
                        "store": {
                          "description": "Datastore name.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "PUT": {
                    "description": "Update verification job config.",
                    "method": "PUT",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Update verification job config.",
                      "properties": {
                        "comment": {
                          "description": "Comment.",
                          "maxLength": 128,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "delete": {
                          "description": "List of properties to delete.",
                          "items": {
                            "description": "Deletable property name",
                            "enum": [
                              "ignore-verified",
                              "comment",
                              "schedule",
                              "outdated-after",
                              "ns",
                              "max-depth"
                            ],
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "digest": {
                          "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                          "optional": 1,
                          "pattern": "/^[a-f0-9]{64}$/",
                          "type": "string"
                        },
                        "id": {
                          "description": "Job ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "ignore-verified": {
                          "default": true,
                          "description": "Do not verify backups that are already verified if their verification is not outdated.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "max-depth": {
                          "default": 7,
                          "description": "How many levels of namespaces should be operated on (0 == no recursion)",
                          "maximum": 7,
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "ns": {
                          "description": "Namespace.",
                          "maxLength": 256,
                          "optional": 1,
                          "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                          "type": "string"
                        },
                        "outdated-after": {
                          "description": "Days after that a verification becomes outdated. (0 is deprecated)'",
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "schedule": {
                          "description": "Run verify job at specified schedule.",
                          "optional": 1,
                          "type": "string",
                          "typetext": "<calendar-event>"
                        },
                        "store": {
                          "description": "Datastore name.",
                          "maxLength": 32,
                          "minLength": 3,
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "description": "Requires Datastore.Verify on job's datastore.",
                      "user": "all"
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 1,
                "path": "/config/verify/{id}",
                "text": "{id}"
              }
            ],
            "info": {
              "GET": {
                "description": "List all verification jobs",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "List all verification jobs",
                  "properties": {}
                },
                "permissions": {
                  "description": "Requires Datastore.Audit or Datastore.Verify on datastore.",
                  "user": "all"
                },
                "returns": {
                  "description": "List configured jobs.",
                  "items": {
                    "additionalProperties": false,
                    "description": "Verification Job",
                    "properties": {
                      "comment": {
                        "description": "Comment.",
                        "maxLength": 128,
                        "optional": 1,
                        "pattern": "/^[[:^cntrl:]]*$/",
                        "type": "string"
                      },
                      "id": {
                        "description": "Job ID.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "ignore-verified": {
                        "default": true,
                        "description": "Do not verify backups that are already verified if their verification is not outdated.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "max-depth": {
                        "default": 7,
                        "description": "How many levels of namespaces should be operated on (0 == no recursion)",
                        "maximum": 7,
                        "minimum": 0,
                        "optional": 1,
                        "type": "integer"
                      },
                      "ns": {
                        "description": "Namespace.",
                        "maxLength": 256,
                        "optional": 1,
                        "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                        "type": "string"
                      },
                      "outdated-after": {
                        "description": "Days after that a verification becomes outdated. (0 is deprecated)'",
                        "minimum": 0,
                        "optional": 1,
                        "type": "integer"
                      },
                      "schedule": {
                        "description": "Run verify job at specified schedule.",
                        "optional": 1,
                        "type": "string",
                        "typetext": "<calendar-event>"
                      },
                      "store": {
                        "description": "Datastore name.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "POST": {
                "description": "Create a new verification job.",
                "method": "POST",
                "parameters": {
                  "additionalProperties": false,
                  "description": "Create a new verification job.",
                  "properties": {
                    "comment": {
                      "description": "Comment.",
                      "maxLength": 128,
                      "optional": 1,
                      "pattern": "/^[[:^cntrl:]]*$/",
                      "type": "string"
                    },
                    "id": {
                      "description": "Job ID.",
                      "maxLength": 32,
                      "minLength": 3,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "ignore-verified": {
                      "default": true,
                      "description": "Do not verify backups that are already verified if their verification is not outdated.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "max-depth": {
                      "default": 7,
                      "description": "How many levels of namespaces should be operated on (0 == no recursion)",
                      "maximum": 7,
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer"
                    },
                    "ns": {
                      "description": "Namespace.",
                      "maxLength": 256,
                      "optional": 1,
                      "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                      "type": "string"
                    },
                    "outdated-after": {
                      "description": "Days after that a verification becomes outdated. (0 is deprecated)'",
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer"
                    },
                    "schedule": {
                      "description": "Run verify job at specified schedule.",
                      "optional": 1,
                      "type": "string",
                      "typetext": "<calendar-event>"
                    },
                    "store": {
                      "description": "Datastore name.",
                      "maxLength": 32,
                      "minLength": 3,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    }
                  }
                },
                "permissions": {
                  "description": "Requires Datastore.Verify on job's datastore.",
                  "user": "all"
                },
                "returns": {
                  "type": "null"
                }
              }
            },
            "leaf": 0,
            "path": "/config/verify",
            "text": "verify"
          }
        ],
        "info": {
          "GET": {
            "description": "Directory index.",
            "method": "GET",
            "parameters": {
              "additionalProperties": true,
              "description": "Directory index.",
              "properties": {}
            },
            "permissions": {
              "user": "all"
            },
            "returns": {
              "type": "null"
            }
          }
        },
        "leaf": 0,
        "path": "/config",
        "text": "config"
      },
      {
        "children": [
          {
            "children": [
              {
                "children": [
                  {
                    "info": {
                      "GET": {
                        "description": "Retrieve the changelog of the specified package.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Retrieve the changelog of the specified package.",
                          "properties": {
                            "name": {
                              "description": "Package name to get changelog of.",
                              "type": "string"
                            },
                            "node": {
                              "description": "Node name (or 'localhost')",
                              "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                              "type": "string"
                            },
                            "version": {
                              "description": "Package version to get changelog of. Omit to use candidate version.",
                              "optional": 1,
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "description": "Unique Process/Task Identifier",
                          "minLength": 36,
                          "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                          "type": "string"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/nodes/{node}/apt/changelog",
                    "text": "changelog"
                  },
                  {
                    "info": {
                      "GET": {
                        "description": "Get APT repository information.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Get APT repository information.",
                          "properties": {
                            "node": {
                              "description": "Node name (or 'localhost')",
                              "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [],
                            "privs": [
                              "Sys.Audit"
                            ]
                          }
                        },
                        "returns": {
                          "additionalProperties": false,
                          "description": "Result from parsing the APT repository files in /etc/apt/.",
                          "properties": {
                            "digest": {
                              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                              "pattern": "/^[a-f0-9]{64}$/",
                              "type": "string"
                            },
                            "errors": {
                              "description": "List of problematic files.",
                              "items": {
                                "additionalProperties": false,
                                "description": "Error type for problems with APT repository files.",
                                "properties": {
                                  "error": {
                                    "description": "The error message.",
                                    "type": "string"
                                  },
                                  "path": {
                                    "description": "The path to the problematic file.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "files": {
                              "description": "List of parsed repository files.",
                              "items": {
                                "additionalProperties": false,
                                "description": "Represents an abstract APT repository file.",
                                "properties": {
                                  "content": {
                                    "description": "The file content, if already parsed.",
                                    "optional": 1,
                                    "type": "string"
                                  },
                                  "digest": {
                                    "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                                    "optional": 1,
                                    "pattern": "/^[a-f0-9]{64}$/",
                                    "type": "string"
                                  },
                                  "file-type": {
                                    "description": "The type of format used for an APT repository.",
                                    "enum": [
                                      "list",
                                      "sources"
                                    ],
                                    "type": "string"
                                  },
                                  "path": {
                                    "description": "The path to the file. If None, `contents` must be set directly.",
                                    "optional": 1,
                                    "type": "string"
                                  },
                                  "repositories": {
                                    "description": "List of APT repositories.",
                                    "items": {
                                      "additionalProperties": false,
                                      "description": "Describes an APT repository.",
                                      "properties": {
                                        "Comment": {
                                          "description": "Associated comment.",
                                          "optional": 1,
                                          "type": "string"
                                        },
                                        "Components": {
                                          "description": "List of repository components.",
                                          "items": {
                                            "description": "Repository component.",
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "Enabled": {
                                          "description": "Whether the repository is enabled or not.",
                                          "type": "boolean"
                                        },
                                        "FileType": {
                                          "description": "The type of format used for an APT repository.",
                                          "enum": [
                                            "list",
                                            "sources"
                                          ],
                                          "type": "string"
                                        },
                                        "Options": {
                                          "description": "Additional options.",
                                          "items": {
                                            "additionalProperties": false,
                                            "description": "Additional options for an APT repository.\nUsed for both single- and multi-value options.",
                                            "properties": {
                                              "Key": {
                                                "description": "Option key.",
                                                "type": "string"
                                              },
                                              "Values": {
                                                "description": "Option values.",
                                                "items": {
                                                  "description": "Value.",
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "optional": 1,
                                          "type": "array"
                                        },
                                        "Suites": {
                                          "description": "List of distributions.",
                                          "items": {
                                            "description": "Package distribution.",
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "Types": {
                                          "description": "List of package types.",
                                          "items": {
                                            "description": "The type of an APT package.",
                                            "enum": [
                                              "deb",
                                              "deb-src"
                                            ],
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "URIs": {
                                          "description": "List of repository URIs.",
                                          "items": {
                                            "description": "Repository URI.",
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "infos": {
                              "description": "List of additional information/warnings about the repositories",
                              "items": {
                                "additionalProperties": false,
                                "description": "Additional information for a repository.",
                                "properties": {
                                  "index": {
                                    "description": "Index of the associated repository within the file (starting from 0).",
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  "kind": {
                                    "description": "Info kind (e.g. \"warning\")",
                                    "type": "string"
                                  },
                                  "message": {
                                    "description": "Info message",
                                    "type": "string"
                                  },
                                  "path": {
                                    "description": "Path to the defining file.",
                                    "type": "string"
                                  },
                                  "property": {
                                    "description": "The property from which the info originates (e.g. \"Suites\")",
                                    "optional": 1,
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "standard-repos": {
                              "description": "List of standard repositories and their configuration status.",
                              "items": {
                                "additionalProperties": false,
                                "description": "Reference to a standard repository and configuration status.",
                                "properties": {
                                  "description": {
                                    "description": "Description of the repository.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle referencing a standard repository.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Display name of the repository.",
                                    "type": "string"
                                  },
                                  "status": {
                                    "description": "Configuration status of the associated repository, where `None` means\nnot configured, and `Some(bool)` indicates enabled or disabled.",
                                    "optional": 1,
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "POST": {
                        "description": "Change the properties of the specified repository.\n\nThe `digest` parameter asserts that the configuration has not been modified.",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Change the properties of the specified repository.\n\nThe `digest` parameter asserts that the configuration has not been modified.",
                          "properties": {
                            "digest": {
                              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                              "optional": 1,
                              "pattern": "/^[a-f0-9]{64}$/",
                              "type": "string"
                            },
                            "enabled": {
                              "description": "Whether the repository should be enabled or not.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "index": {
                              "description": "Index within the file (starting from 0).",
                              "type": "integer"
                            },
                            "node": {
                              "description": "Node name (or 'localhost')",
                              "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                              "type": "string"
                            },
                            "path": {
                              "description": "Path to the containing file.",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      },
                      "PUT": {
                        "description": "Add the repository identified by the `handle`.\nIf the repository is already configured, it will be set to enabled.\n\nThe `digest` parameter asserts that the configuration has not been modified.",
                        "method": "PUT",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Add the repository identified by the `handle`.\nIf the repository is already configured, it will be set to enabled.\n\nThe `digest` parameter asserts that the configuration has not been modified.",
                          "properties": {
                            "digest": {
                              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                              "optional": 1,
                              "pattern": "/^[a-f0-9]{64}$/",
                              "type": "string"
                            },
                            "handle": {
                              "description": "Handles for Proxmox repositories.",
                              "enum": [
                                "enterprise",
                                "no-subscription",
                                "test",
                                "ceph-squid-enterprise",
                                "ceph-squid-no-subscription",
                                "ceph-squid-test"
                              ],
                              "type": "string"
                            },
                            "node": {
                              "description": "Node name (or 'localhost')",
                              "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/nodes/{node}/apt/repositories",
                    "text": "repositories"
                  },
                  {
                    "info": {
                      "GET": {
                        "description": "List available APT updates",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "List available APT updates",
                          "properties": {
                            "node": {
                              "description": "Node name (or 'localhost')",
                              "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [],
                            "privs": [
                              "Sys.Audit"
                            ]
                          }
                        },
                        "returns": {
                          "description": "A list of packages with available updates.",
                          "items": {
                            "additionalProperties": false,
                            "description": "Describes a package for which an update is available.",
                            "properties": {
                              "Arch": {
                                "description": "Package architecture",
                                "type": "string"
                              },
                              "Description": {
                                "description": "Human readable package description",
                                "type": "string"
                              },
                              "ExtraInfo": {
                                "description": "Custom extra field for additional package information",
                                "optional": 1,
                                "type": "string"
                              },
                              "OldVersion": {
                                "description": "Old version currently installed",
                                "type": "string"
                              },
                              "Origin": {
                                "description": "Package origin",
                                "type": "string"
                              },
                              "Package": {
                                "description": "Package name",
                                "type": "string"
                              },
                              "Priority": {
                                "description": "Package priority in human-readable form",
                                "type": "string"
                              },
                              "Section": {
                                "description": "Package section",
                                "type": "string"
                              },
                              "Title": {
                                "description": "Package title",
                                "type": "string"
                              },
                              "Version": {
                                "description": "New version to be updated to",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "POST": {
                        "description": "Update the APT database",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Update the APT database",
                          "properties": {
                            "node": {
                              "description": "Node name (or 'localhost')",
                              "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                              "type": "string"
                            },
                            "notify": {
                              "default": false,
                              "description": "Send notification mail about new package updates available to the email\naddress configured for 'root@pam').",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "quiet": {
                              "default": false,
                              "description": "Only produces output suitable for logging, omitting progress indicators.",
                              "optional": 1,
                              "type": "boolean"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "description": "Unique Process/Task Identifier",
                          "minLength": 36,
                          "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                          "type": "string"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/nodes/{node}/apt/update",
                    "text": "update"
                  },
                  {
                    "info": {
                      "GET": {
                        "description": "Get package information for important Proxmox Backup Server packages.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Get package information for important Proxmox Backup Server packages.",
                          "properties": {
                            "node": {
                              "description": "Node name (or 'localhost')",
                              "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [],
                            "privs": [
                              "Sys.Audit"
                            ]
                          }
                        },
                        "returns": {
                          "description": "List of more relevant packages.",
                          "items": {
                            "additionalProperties": false,
                            "description": "Describes a package for which an update is available.",
                            "properties": {
                              "Arch": {
                                "description": "Package architecture",
                                "type": "string"
                              },
                              "Description": {
                                "description": "Human readable package description",
                                "type": "string"
                              },
                              "ExtraInfo": {
                                "description": "Custom extra field for additional package information",
                                "optional": 1,
                                "type": "string"
                              },
                              "OldVersion": {
                                "description": "Old version currently installed",
                                "type": "string"
                              },
                              "Origin": {
                                "description": "Package origin",
                                "type": "string"
                              },
                              "Package": {
                                "description": "Package name",
                                "type": "string"
                              },
                              "Priority": {
                                "description": "Package priority in human-readable form",
                                "type": "string"
                              },
                              "Section": {
                                "description": "Package section",
                                "type": "string"
                              },
                              "Title": {
                                "description": "Package title",
                                "type": "string"
                              },
                              "Version": {
                                "description": "New version to be updated to",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/nodes/{node}/apt/versions",
                    "text": "versions"
                  }
                ],
                "info": {
                  "GET": {
                    "description": "Directory index.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": true,
                      "description": "Directory index.",
                      "properties": {}
                    },
                    "permissions": {
                      "user": "all"
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 0,
                "path": "/nodes/{node}/apt",
                "text": "apt"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "info": {
                          "POST": {
                            "description": "Order a new ACME certificate.",
                            "method": "POST",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Order a new ACME certificate.",
                              "properties": {
                                "force": {
                                  "default": false,
                                  "description": "Force replacement of existing files.",
                                  "optional": 1,
                                  "type": "boolean"
                                },
                                "node": {
                                  "description": "Node name (or 'localhost')",
                                  "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "check": {
                                "partial": false,
                                "path": [
                                  "system",
                                  "certificates"
                                ],
                                "privs": [
                                  "Sys.Modify"
                                ]
                              }
                            },
                            "returns": {
                              "type": "null"
                            }
                          },
                          "PUT": {
                            "description": "Renew the current ACME certificate if it expires within 30 days (or always if the `force`\nparameter is set).",
                            "method": "PUT",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Renew the current ACME certificate if it expires within 30 days (or always if the `force`\nparameter is set).",
                              "properties": {
                                "force": {
                                  "default": false,
                                  "description": "Force replacement of existing files.",
                                  "optional": 1,
                                  "type": "boolean"
                                },
                                "node": {
                                  "description": "Node name (or 'localhost')",
                                  "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "check": {
                                "partial": false,
                                "path": [
                                  "system",
                                  "certificates"
                                ],
                                "privs": [
                                  "Sys.Modify"
                                ]
                              }
                            },
                            "returns": {
                              "type": "null"
                            }
                          }
                        },
                        "leaf": 1,
                        "path": "/nodes/{node}/certificates/acme/certificate",
                        "text": "certificate"
                      }
                    ],
                    "info": {
                      "GET": {
                        "description": "Directory index.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": true,
                          "description": "Directory index.",
                          "properties": {}
                        },
                        "permissions": {
                          "user": "all"
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 0,
                    "path": "/nodes/{node}/certificates/acme",
                    "text": "acme"
                  },
                  {
                    "info": {
                      "DELETE": {
                        "description": "Delete the current certificate and regenerate a self signed one.",
                        "method": "DELETE",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Delete the current certificate and regenerate a self signed one.",
                          "properties": {
                            "node": {
                              "description": "Node name (or 'localhost')",
                              "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                              "type": "string"
                            },
                            "restart": {
                              "default": false,
                              "description": "UI compatibility parameter, ignored",
                              "optional": 1,
                              "type": "boolean"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "certificates"
                            ],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      },
                      "POST": {
                        "description": "Upload a custom certificate.",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Upload a custom certificate.",
                          "properties": {
                            "certificates": {
                              "description": "PEM encoded certificate (chain).",
                              "type": "string"
                            },
                            "force": {
                              "default": false,
                              "description": "Force replacement of existing files.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "key": {
                              "description": "PEM encoded private key.",
                              "optional": 1,
                              "type": "string"
                            },
                            "node": {
                              "description": "Node name (or 'localhost')",
                              "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                              "type": "string"
                            },
                            "restart": {
                              "default": false,
                              "description": "UI compatibility parameter, ignored",
                              "optional": 1,
                              "type": "boolean"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "certificates"
                            ],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "description": "List of certificate infos.",
                          "items": {
                            "additionalProperties": false,
                            "description": "Certificate information.",
                            "properties": {
                              "filename": {
                                "description": "Certificate file name.",
                                "type": "string"
                              },
                              "fingerprint": {
                                "description": "The SSL Fingerprint.",
                                "optional": 1,
                                "type": "string"
                              },
                              "issuer": {
                                "description": "Certificate issuer name.",
                                "type": "string"
                              },
                              "notafter": {
                                "description": "Certificate's notAfter timestamp (UNIX epoch).",
                                "optional": 1,
                                "type": "integer"
                              },
                              "notbefore": {
                                "description": "Certificate's notBefore timestamp (UNIX epoch).",
                                "optional": 1,
                                "type": "integer"
                              },
                              "pem": {
                                "description": "Certificate in PEM format.",
                                "optional": 1,
                                "type": "string"
                              },
                              "public-key-bits": {
                                "description": "Certificate's public key size if available.",
                                "maximum": 4294967295,
                                "minimum": 0,
                                "optional": 1,
                                "type": "integer"
                              },
                              "public-key-type": {
                                "description": "Certificate's public key algorithm.",
                                "type": "string"
                              },
                              "san": {
                                "description": "List of certificate's SubjectAlternativeName entries.",
                                "items": {
                                  "description": "A SubjectAlternateName entry.",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "subject": {
                                "description": "Certificate subject name.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/nodes/{node}/certificates/custom",
                    "text": "custom"
                  },
                  {
                    "info": {
                      "GET": {
                        "description": "Get certificate info.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Get certificate info.",
                          "properties": {
                            "node": {
                              "description": "Node name (or 'localhost')",
                              "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "certificates"
                            ],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "description": "List of certificate infos.",
                          "items": {
                            "additionalProperties": false,
                            "description": "Certificate information.",
                            "properties": {
                              "filename": {
                                "description": "Certificate file name.",
                                "type": "string"
                              },
                              "fingerprint": {
                                "description": "The SSL Fingerprint.",
                                "optional": 1,
                                "type": "string"
                              },
                              "issuer": {
                                "description": "Certificate issuer name.",
                                "type": "string"
                              },
                              "notafter": {
                                "description": "Certificate's notAfter timestamp (UNIX epoch).",
                                "optional": 1,
                                "type": "integer"
                              },
                              "notbefore": {
                                "description": "Certificate's notBefore timestamp (UNIX epoch).",
                                "optional": 1,
                                "type": "integer"
                              },
                              "pem": {
                                "description": "Certificate in PEM format.",
                                "optional": 1,
                                "type": "string"
                              },
                              "public-key-bits": {
                                "description": "Certificate's public key size if available.",
                                "maximum": 4294967295,
                                "minimum": 0,
                                "optional": 1,
                                "type": "integer"
                              },
                              "public-key-type": {
                                "description": "Certificate's public key algorithm.",
                                "type": "string"
                              },
                              "san": {
                                "description": "List of certificate's SubjectAlternativeName entries.",
                                "items": {
                                  "description": "A SubjectAlternateName entry.",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "subject": {
                                "description": "Certificate subject name.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/nodes/{node}/certificates/info",
                    "text": "info"
                  }
                ],
                "info": {
                  "GET": {
                    "description": "Directory index.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": true,
                      "description": "Directory index.",
                      "properties": {}
                    },
                    "permissions": {
                      "user": "all"
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 0,
                "path": "/nodes/{node}/certificates",
                "text": "certificates"
              },
              {
                "info": {
                  "GET": {
                    "description": "Get the node configuration",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Get the node configuration",
                      "properties": {
                        "node": {
                          "description": "Node name (or 'localhost')",
                          "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system"
                        ],
                        "privs": [
                          "Sys.Audit"
                        ]
                      }
                    },
                    "returns": {
                      "additionalProperties": false,
                      "description": "Node specific configuration.",
                      "properties": {
                        "acme": {
                          "description": "The acme account to use on this node.",
                          "format": {
                            "additionalProperties": false,
                            "description": "The ACME configuration.\n\nCurrently only contains the name of the account use.",
                            "properties": {
                              "account": {
                                "description": "ACME account name.",
                                "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[account=<string>]"
                        },
                        "acmedomain0": {
                          "description": "ACME domain configuration string",
                          "format": {
                            "additionalProperties": false,
                            "default_key": "domain",
                            "description": "A domain entry for an ACME certificate.",
                            "properties": {
                              "alias": {
                                "description": "The domain to use for challenges instead of the default acme challenge domain.\n\nThis is useful if you use CNAME entries to redirect `_acme-challenge.*` domains to a\ndifferent DNS server.",
                                "optional": 1,
                                "pattern": "/^(?:(?:(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                                "type": "string"
                              },
                              "domain": {
                                "description": "The domain to certify for.",
                                "pattern": "/^(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                                "type": "string"
                              },
                              "plugin": {
                                "description": "The plugin to use to validate this domain.\n\nEmpty means standalone HTTP validation is used.",
                                "optional": 1,
                                "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[domain=<string> [,alias=<string>] [,plugin=<string>]]"
                        },
                        "acmedomain1": {
                          "description": "ACME domain configuration string",
                          "format": {
                            "additionalProperties": false,
                            "default_key": "domain",
                            "description": "A domain entry for an ACME certificate.",
                            "properties": {
                              "alias": {
                                "description": "The domain to use for challenges instead of the default acme challenge domain.\n\nThis is useful if you use CNAME entries to redirect `_acme-challenge.*` domains to a\ndifferent DNS server.",
                                "optional": 1,
                                "pattern": "/^(?:(?:(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                                "type": "string"
                              },
                              "domain": {
                                "description": "The domain to certify for.",
                                "pattern": "/^(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                                "type": "string"
                              },
                              "plugin": {
                                "description": "The plugin to use to validate this domain.\n\nEmpty means standalone HTTP validation is used.",
                                "optional": 1,
                                "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[domain=<string> [,alias=<string>] [,plugin=<string>]]"
                        },
                        "acmedomain2": {
                          "description": "ACME domain configuration string",
                          "format": {
                            "additionalProperties": false,
                            "default_key": "domain",
                            "description": "A domain entry for an ACME certificate.",
                            "properties": {
                              "alias": {
                                "description": "The domain to use for challenges instead of the default acme challenge domain.\n\nThis is useful if you use CNAME entries to redirect `_acme-challenge.*` domains to a\ndifferent DNS server.",
                                "optional": 1,
                                "pattern": "/^(?:(?:(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                                "type": "string"
                              },
                              "domain": {
                                "description": "The domain to certify for.",
                                "pattern": "/^(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                                "type": "string"
                              },
                              "plugin": {
                                "description": "The plugin to use to validate this domain.\n\nEmpty means standalone HTTP validation is used.",
                                "optional": 1,
                                "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[domain=<string> [,alias=<string>] [,plugin=<string>]]"
                        },
                        "acmedomain3": {
                          "description": "ACME domain configuration string",
                          "format": {
                            "additionalProperties": false,
                            "default_key": "domain",
                            "description": "A domain entry for an ACME certificate.",
                            "properties": {
                              "alias": {
                                "description": "The domain to use for challenges instead of the default acme challenge domain.\n\nThis is useful if you use CNAME entries to redirect `_acme-challenge.*` domains to a\ndifferent DNS server.",
                                "optional": 1,
                                "pattern": "/^(?:(?:(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                                "type": "string"
                              },
                              "domain": {
                                "description": "The domain to certify for.",
                                "pattern": "/^(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                                "type": "string"
                              },
                              "plugin": {
                                "description": "The plugin to use to validate this domain.\n\nEmpty means standalone HTTP validation is used.",
                                "optional": 1,
                                "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[domain=<string> [,alias=<string>] [,plugin=<string>]]"
                        },
                        "acmedomain4": {
                          "description": "ACME domain configuration string",
                          "format": {
                            "additionalProperties": false,
                            "default_key": "domain",
                            "description": "A domain entry for an ACME certificate.",
                            "properties": {
                              "alias": {
                                "description": "The domain to use for challenges instead of the default acme challenge domain.\n\nThis is useful if you use CNAME entries to redirect `_acme-challenge.*` domains to a\ndifferent DNS server.",
                                "optional": 1,
                                "pattern": "/^(?:(?:(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                                "type": "string"
                              },
                              "domain": {
                                "description": "The domain to certify for.",
                                "pattern": "/^(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                                "type": "string"
                              },
                              "plugin": {
                                "description": "The plugin to use to validate this domain.\n\nEmpty means standalone HTTP validation is used.",
                                "optional": 1,
                                "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[domain=<string> [,alias=<string>] [,plugin=<string>]]"
                        },
                        "ciphers-tls-1.2": {
                          "description": "OpenSSL cipher list used by the proxy for TLS <= 1.2",
                          "optional": 1,
                          "pattern": "/^[0-9A-Za-z_:, +!\\-@=.]+$/",
                          "type": "string"
                        },
                        "ciphers-tls-1.3": {
                          "description": "OpenSSL ciphersuites list used by the proxy for TLS 1.3",
                          "optional": 1,
                          "pattern": "/^[0-9A-Za-z_:, +!\\-@=.]+$/",
                          "type": "string"
                        },
                        "consent-text": {
                          "description": "Consent banner text",
                          "maxLength": 65536,
                          "optional": 1,
                          "type": "string"
                        },
                        "default-lang": {
                          "description": "All available languages in Proxmox. Taken from proxmox-i18n repository.\npt_BR, zh_CN, and zh_TW use the same case in the translation files.",
                          "enum": [
                            "ar",
                            "ca",
                            "da",
                            "de",
                            "en",
                            "es",
                            "eu",
                            "fa",
                            "fr",
                            "gl",
                            "he",
                            "hu",
                            "it",
                            "ja",
                            "kr",
                            "nb",
                            "nl",
                            "nn",
                            "pl",
                            "pt_BR",
                            "ru",
                            "sl",
                            "sv",
                            "tr",
                            "zh_CN",
                            "zh_TW"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "description": {
                          "description": "Comment (multiple lines).",
                          "optional": 1,
                          "pattern": "/(?m)^([[:^cntrl:]]*)$/",
                          "type": "string"
                        },
                        "email-from": {
                          "description": "E-Mail Address.",
                          "maxLength": 64,
                          "minLength": 2,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "http-proxy": {
                          "description": "HTTP proxy configuration [http://]<host>[:port]",
                          "maxLength": 128,
                          "minLength": 1,
                          "optional": 1,
                          "type": "string",
                          "typetext": "[http://]<host>[:port]"
                        },
                        "task-log-max-days": {
                          "description": "Maximum days to keep Task logs",
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "PUT": {
                    "description": "Update the node configuration",
                    "method": "PUT",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Update the node configuration",
                      "properties": {
                        "acme": {
                          "description": "The acme account to use on this node.",
                          "format": {
                            "additionalProperties": false,
                            "description": "The ACME configuration.\n\nCurrently only contains the name of the account use.",
                            "properties": {
                              "account": {
                                "description": "ACME account name.",
                                "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[account=<string>]"
                        },
                        "acmedomain0": {
                          "description": "ACME domain configuration string",
                          "format": {
                            "additionalProperties": false,
                            "default_key": "domain",
                            "description": "A domain entry for an ACME certificate.",
                            "properties": {
                              "alias": {
                                "description": "The domain to use for challenges instead of the default acme challenge domain.\n\nThis is useful if you use CNAME entries to redirect `_acme-challenge.*` domains to a\ndifferent DNS server.",
                                "optional": 1,
                                "pattern": "/^(?:(?:(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                                "type": "string"
                              },
                              "domain": {
                                "description": "The domain to certify for.",
                                "pattern": "/^(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                                "type": "string"
                              },
                              "plugin": {
                                "description": "The plugin to use to validate this domain.\n\nEmpty means standalone HTTP validation is used.",
                                "optional": 1,
                                "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[domain=<string> [,alias=<string>] [,plugin=<string>]]"
                        },
                        "acmedomain1": {
                          "description": "ACME domain configuration string",
                          "format": {
                            "additionalProperties": false,
                            "default_key": "domain",
                            "description": "A domain entry for an ACME certificate.",
                            "properties": {
                              "alias": {
                                "description": "The domain to use for challenges instead of the default acme challenge domain.\n\nThis is useful if you use CNAME entries to redirect `_acme-challenge.*` domains to a\ndifferent DNS server.",
                                "optional": 1,
                                "pattern": "/^(?:(?:(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                                "type": "string"
                              },
                              "domain": {
                                "description": "The domain to certify for.",
                                "pattern": "/^(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                                "type": "string"
                              },
                              "plugin": {
                                "description": "The plugin to use to validate this domain.\n\nEmpty means standalone HTTP validation is used.",
                                "optional": 1,
                                "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[domain=<string> [,alias=<string>] [,plugin=<string>]]"
                        },
                        "acmedomain2": {
                          "description": "ACME domain configuration string",
                          "format": {
                            "additionalProperties": false,
                            "default_key": "domain",
                            "description": "A domain entry for an ACME certificate.",
                            "properties": {
                              "alias": {
                                "description": "The domain to use for challenges instead of the default acme challenge domain.\n\nThis is useful if you use CNAME entries to redirect `_acme-challenge.*` domains to a\ndifferent DNS server.",
                                "optional": 1,
                                "pattern": "/^(?:(?:(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                                "type": "string"
                              },
                              "domain": {
                                "description": "The domain to certify for.",
                                "pattern": "/^(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                                "type": "string"
                              },
                              "plugin": {
                                "description": "The plugin to use to validate this domain.\n\nEmpty means standalone HTTP validation is used.",
                                "optional": 1,
                                "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[domain=<string> [,alias=<string>] [,plugin=<string>]]"
                        },
                        "acmedomain3": {
                          "description": "ACME domain configuration string",
                          "format": {
                            "additionalProperties": false,
                            "default_key": "domain",
                            "description": "A domain entry for an ACME certificate.",
                            "properties": {
                              "alias": {
                                "description": "The domain to use for challenges instead of the default acme challenge domain.\n\nThis is useful if you use CNAME entries to redirect `_acme-challenge.*` domains to a\ndifferent DNS server.",
                                "optional": 1,
                                "pattern": "/^(?:(?:(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                                "type": "string"
                              },
                              "domain": {
                                "description": "The domain to certify for.",
                                "pattern": "/^(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                                "type": "string"
                              },
                              "plugin": {
                                "description": "The plugin to use to validate this domain.\n\nEmpty means standalone HTTP validation is used.",
                                "optional": 1,
                                "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[domain=<string> [,alias=<string>] [,plugin=<string>]]"
                        },
                        "acmedomain4": {
                          "description": "ACME domain configuration string",
                          "format": {
                            "additionalProperties": false,
                            "default_key": "domain",
                            "description": "A domain entry for an ACME certificate.",
                            "properties": {
                              "alias": {
                                "description": "The domain to use for challenges instead of the default acme challenge domain.\n\nThis is useful if you use CNAME entries to redirect `_acme-challenge.*` domains to a\ndifferent DNS server.",
                                "optional": 1,
                                "pattern": "/^(?:(?:(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9_](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                                "type": "string"
                              },
                              "domain": {
                                "description": "The domain to certify for.",
                                "pattern": "/^(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)\\.)*(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?))$/",
                                "type": "string"
                              },
                              "plugin": {
                                "description": "The plugin to use to validate this domain.\n\nEmpty means standalone HTTP validation is used.",
                                "optional": 1,
                                "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[domain=<string> [,alias=<string>] [,plugin=<string>]]"
                        },
                        "ciphers-tls-1.2": {
                          "description": "OpenSSL cipher list used by the proxy for TLS <= 1.2",
                          "optional": 1,
                          "pattern": "/^[0-9A-Za-z_:, +!\\-@=.]+$/",
                          "type": "string"
                        },
                        "ciphers-tls-1.3": {
                          "description": "OpenSSL ciphersuites list used by the proxy for TLS 1.3",
                          "optional": 1,
                          "pattern": "/^[0-9A-Za-z_:, +!\\-@=.]+$/",
                          "type": "string"
                        },
                        "consent-text": {
                          "description": "Consent banner text",
                          "maxLength": 65536,
                          "optional": 1,
                          "type": "string"
                        },
                        "default-lang": {
                          "description": "All available languages in Proxmox. Taken from proxmox-i18n repository.\npt_BR, zh_CN, and zh_TW use the same case in the translation files.",
                          "enum": [
                            "ar",
                            "ca",
                            "da",
                            "de",
                            "en",
                            "es",
                            "eu",
                            "fa",
                            "fr",
                            "gl",
                            "he",
                            "hu",
                            "it",
                            "ja",
                            "kr",
                            "nb",
                            "nl",
                            "nn",
                            "pl",
                            "pt_BR",
                            "ru",
                            "sl",
                            "sv",
                            "tr",
                            "zh_CN",
                            "zh_TW"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "delete": {
                          "description": "List of properties to delete.",
                          "items": {
                            "description": "Deletable property name",
                            "enum": [
                              "acme",
                              "acmedomain0",
                              "acmedomain1",
                              "acmedomain2",
                              "acmedomain3",
                              "acmedomain4",
                              "http-proxy",
                              "email-from",
                              "ciphers-tls-1.3",
                              "ciphers-tls-1.2",
                              "default-lang",
                              "description",
                              "task-log-max-days",
                              "consent-text"
                            ],
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "description": {
                          "description": "Comment (multiple lines).",
                          "optional": 1,
                          "pattern": "/(?m)^([[:^cntrl:]]*)$/",
                          "type": "string"
                        },
                        "digest": {
                          "description": "Digest to protect against concurrent updates",
                          "optional": 1,
                          "type": "string"
                        },
                        "email-from": {
                          "description": "E-Mail Address.",
                          "maxLength": 64,
                          "minLength": 2,
                          "optional": 1,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        },
                        "http-proxy": {
                          "description": "HTTP proxy configuration [http://]<host>[:port]",
                          "maxLength": 128,
                          "minLength": 1,
                          "optional": 1,
                          "type": "string",
                          "typetext": "[http://]<host>[:port]"
                        },
                        "node": {
                          "description": "Node name (or 'localhost')",
                          "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                          "type": "string"
                        },
                        "task-log-max-days": {
                          "description": "Maximum days to keep Task logs",
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system"
                        ],
                        "privs": [
                          "Sys.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 1,
                "path": "/nodes/{node}/config",
                "text": "config"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "info": {
                          "DELETE": {
                            "description": "Remove a Filesystem mounted under `/mnt/datastore/<name>`.",
                            "method": "DELETE",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Remove a Filesystem mounted under `/mnt/datastore/<name>`.",
                              "properties": {
                                "name": {
                                  "description": "Datastore name.",
                                  "maxLength": 32,
                                  "minLength": 3,
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                },
                                "node": {
                                  "description": "Node name (or 'localhost')",
                                  "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "check": {
                                "partial": false,
                                "path": [
                                  "system",
                                  "disks"
                                ],
                                "privs": [
                                  "Sys.Modify"
                                ]
                              }
                            },
                            "returns": {
                              "type": "null"
                            }
                          }
                        },
                        "leaf": 1,
                        "path": "/nodes/{node}/disks/directory/{name}",
                        "text": "{name}"
                      }
                    ],
                    "info": {
                      "GET": {
                        "description": "List systemd datastore mount units.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "List systemd datastore mount units.",
                          "properties": {
                            "node": {
                              "description": "Node name (or 'localhost')",
                              "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "disks"
                            ],
                            "privs": [
                              "Sys.Audit"
                            ]
                          }
                        },
                        "returns": {
                          "description": "List of removable-datastore devices and systemd datastore mount units.",
                          "items": {
                            "additionalProperties": false,
                            "description": "Datastore mount info.",
                            "properties": {
                              "device": {
                                "description": "The mounted device.",
                                "type": "string"
                              },
                              "filesystem": {
                                "description": "A file system type supported by our tooling.",
                                "enum": [
                                  "ext4",
                                  "xfs"
                                ],
                                "optional": 1,
                                "type": "string"
                              },
                              "name": {
                                "description": "The name of the mount",
                                "type": "string"
                              },
                              "options": {
                                "description": "Mount options",
                                "optional": 1,
                                "type": "string"
                              },
                              "path": {
                                "description": "The mount path.",
                                "type": "string"
                              },
                              "removable": {
                                "description": "This is removable",
                                "type": "boolean"
                              },
                              "unitfile": {
                                "description": "The path of the mount unit.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "POST": {
                        "description": "Create a Filesystem on an unused disk. Will be mounted under `/mnt/datastore/<name>`.",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Create a Filesystem on an unused disk. Will be mounted under `/mnt/datastore/<name>`.",
                          "properties": {
                            "add-datastore": {
                              "default": false,
                              "description": "Configure a datastore using the directory.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "disk": {
                              "description": "Block device name (/sys/block/<name>).",
                              "maxLength": 64,
                              "minLength": 3,
                              "pattern": "/^(?:(?:h|s|x?v)d[a-z]+)|(?:nvme\\d+n\\d+)$/",
                              "type": "string"
                            },
                            "filesystem": {
                              "description": "A file system type supported by our tooling.",
                              "enum": [
                                "ext4",
                                "xfs"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "name": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "node": {
                              "description": "Node name (or 'localhost')",
                              "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                              "type": "string"
                            },
                            "removable-datastore": {
                              "default": false,
                              "description": "The added datastore is removable.",
                              "optional": 1,
                              "type": "boolean"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "disks"
                            ],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "description": "Unique Process/Task Identifier",
                          "minLength": 36,
                          "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                          "type": "string"
                        }
                      }
                    },
                    "leaf": 0,
                    "path": "/nodes/{node}/disks/directory",
                    "text": "directory"
                  },
                  {
                    "info": {
                      "POST": {
                        "description": "Initialize empty Disk with GPT",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Initialize empty Disk with GPT",
                          "properties": {
                            "disk": {
                              "description": "Block device name (/sys/block/<name>).",
                              "maxLength": 64,
                              "minLength": 3,
                              "pattern": "/^(?:(?:h|s|x?v)d[a-z]+)|(?:nvme\\d+n\\d+)$/",
                              "type": "string"
                            },
                            "node": {
                              "description": "Node name (or 'localhost')",
                              "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                              "type": "string"
                            },
                            "uuid": {
                              "description": "UUID for the GPT table.",
                              "maxLength": 36,
                              "optional": 1,
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "disks"
                            ],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "description": "Unique Process/Task Identifier",
                          "minLength": 36,
                          "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                          "type": "string"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/nodes/{node}/disks/initgpt",
                    "text": "initgpt"
                  },
                  {
                    "info": {
                      "GET": {
                        "description": "List local disks",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "List local disks",
                          "properties": {
                            "include-partitions": {
                              "default": false,
                              "description": "Include partitions.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "node": {
                              "description": "Node name (or 'localhost')",
                              "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                              "type": "string"
                            },
                            "skipsmart": {
                              "default": false,
                              "description": "Skip smart checks.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "usage-type": {
                              "description": "What a block device (disk) is used for.",
                              "enum": [
                                "unused",
                                "mounted",
                                "lvm",
                                "zfs",
                                "devicemapper",
                                "partitions",
                                "filesystem"
                              ],
                              "optional": 1,
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "disks"
                            ],
                            "privs": [
                              "Sys.Audit"
                            ]
                          }
                        },
                        "returns": {
                          "description": "Local disk list.",
                          "items": {
                            "additionalProperties": false,
                            "description": "Information about how a Disk is used",
                            "properties": {
                              "devpath": {
                                "description": "Linux device path (/dev/xxx)",
                                "optional": 1,
                                "type": "string"
                              },
                              "disk-type": {
                                "description": "This is just a rough estimate for a \"type\" of disk.",
                                "enum": [
                                  "unknown",
                                  "hdd",
                                  "ssd",
                                  "usb"
                                ],
                                "type": "string"
                              },
                              "gpt": {
                                "description": "Set if disk contains a GPT partition table",
                                "type": "boolean"
                              },
                              "model": {
                                "description": "Model",
                                "optional": 1,
                                "type": "string"
                              },
                              "name": {
                                "description": "Disk name (`/sys/block/<name>`)",
                                "type": "string"
                              },
                              "partitions": {
                                "description": "Partitions on the device",
                                "items": {
                                  "additionalProperties": false,
                                  "description": "Basic information about a partition",
                                  "properties": {
                                    "devpath": {
                                      "description": "The partition devpath",
                                      "optional": 1,
                                      "type": "string"
                                    },
                                    "filesystem": {
                                      "description": "The filesystem of the partition",
                                      "optional": 1,
                                      "type": "string"
                                    },
                                    "gpt": {
                                      "description": "GPT partition",
                                      "type": "boolean"
                                    },
                                    "mounted": {
                                      "description": "Is the partition mounted",
                                      "type": "boolean"
                                    },
                                    "name": {
                                      "description": "The partition name",
                                      "type": "string"
                                    },
                                    "size": {
                                      "description": "Size in bytes",
                                      "minimum": 0,
                                      "optional": 1,
                                      "type": "integer"
                                    },
                                    "used": {
                                      "description": "What a block device partition is used for.",
                                      "enum": [
                                        "unused",
                                        "lvm",
                                        "zfs",
                                        "zfsreserved",
                                        "efi",
                                        "bios",
                                        "filesystem"
                                      ],
                                      "type": "string"
                                    },
                                    "uuid": {
                                      "description": "UUID",
                                      "optional": 1,
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "optional": 1,
                                "type": "array"
                              },
                              "rpm": {
                                "description": "RPM",
                                "minimum": 0,
                                "optional": 1,
                                "type": "integer"
                              },
                              "serial": {
                                "description": "Serisal number",
                                "optional": 1,
                                "type": "string"
                              },
                              "size": {
                                "description": "Disk size",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "status": {
                                "description": "SMART status",
                                "enum": [
                                  "passed",
                                  "failed",
                                  "unknown"
                                ],
                                "type": "string"
                              },
                              "used": {
                                "description": "What a block device (disk) is used for.",
                                "enum": [
                                  "unused",
                                  "mounted",
                                  "lvm",
                                  "zfs",
                                  "devicemapper",
                                  "partitions",
                                  "filesystem"
                                ],
                                "type": "string"
                              },
                              "vendor": {
                                "description": "Vendor",
                                "optional": 1,
                                "type": "string"
                              },
                              "wearout": {
                                "description": "Disk wearout",
                                "optional": 1,
                                "type": "number"
                              },
                              "wwn": {
                                "description": "WWN",
                                "optional": 1,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/nodes/{node}/disks/list",
                    "text": "list"
                  },
                  {
                    "info": {
                      "GET": {
                        "description": "Get SMART attributes and health of a disk.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Get SMART attributes and health of a disk.",
                          "properties": {
                            "disk": {
                              "description": "Block device name (/sys/block/<name>).",
                              "maxLength": 64,
                              "minLength": 3,
                              "pattern": "/^(?:(?:h|s|x?v)d[a-z]+)|(?:nvme\\d+n\\d+)$/",
                              "type": "string"
                            },
                            "healthonly": {
                              "description": "If true returns only the health status.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "node": {
                              "description": "Node name (or 'localhost')",
                              "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "disks"
                            ],
                            "privs": [
                              "Sys.Audit"
                            ]
                          }
                        },
                        "returns": {
                          "additionalProperties": false,
                          "description": "Data from smartctl",
                          "properties": {
                            "attributes": {
                              "description": "SMART attributes.",
                              "items": {
                                "additionalProperties": false,
                                "description": "SMART Attribute",
                                "properties": {
                                  "flags": {
                                    "description": "ATA Flags",
                                    "optional": 1,
                                    "type": "string"
                                  },
                                  "id": {
                                    "description": "ATA Attribute ID",
                                    "minimum": 0,
                                    "optional": 1,
                                    "type": "integer"
                                  },
                                  "name": {
                                    "description": "Attribute name",
                                    "type": "string"
                                  },
                                  "normalized": {
                                    "description": "ATA normalized value (0..100)",
                                    "optional": 1,
                                    "type": "number"
                                  },
                                  "raw": {
                                    "description": "Attribute raw value",
                                    "type": "string"
                                  },
                                  "threshold": {
                                    "description": "ATA threshold",
                                    "optional": 1,
                                    "type": "number"
                                  },
                                  "value": {
                                    "description": "duplicate of raw - kept for API stability",
                                    "type": "string"
                                  },
                                  "worst": {
                                    "description": "ATA worst",
                                    "optional": 1,
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "status": {
                              "description": "SMART status",
                              "enum": [
                                "passed",
                                "failed",
                                "unknown"
                              ],
                              "type": "string"
                            },
                            "wearout": {
                              "description": "Wearout level.",
                              "optional": 1,
                              "type": "number"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/nodes/{node}/disks/smart",
                    "text": "smart"
                  },
                  {
                    "info": {
                      "PUT": {
                        "description": "wipe disk",
                        "method": "PUT",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "wipe disk",
                          "properties": {
                            "disk": {
                              "description": "(Partition) block device name (/sys/class/block/<name>).",
                              "maxLength": 64,
                              "minLength": 3,
                              "pattern": "/^(?:(?:h|s|x?v)d[a-z]+\\d*)|(?:nvme\\d+n\\d+(p\\d+)?)$/",
                              "type": "string"
                            },
                            "node": {
                              "description": "Node name (or 'localhost')",
                              "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "disks"
                            ],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "description": "Unique Process/Task Identifier",
                          "minLength": 36,
                          "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                          "type": "string"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/nodes/{node}/disks/wipedisk",
                    "text": "wipedisk"
                  },
                  {
                    "children": [
                      {
                        "info": {
                          "GET": {
                            "description": "Get zpool status details.",
                            "method": "GET",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Get zpool status details.",
                              "properties": {
                                "name": {
                                  "description": "ZFS Pool Name",
                                  "pattern": "/^[a-zA-Z][a-z0-9A-Z\\-_.:]+$/",
                                  "type": "string"
                                },
                                "node": {
                                  "description": "Node name (or 'localhost')",
                                  "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "check": {
                                "partial": false,
                                "path": [
                                  "system",
                                  "disks"
                                ],
                                "privs": [
                                  "Sys.Audit"
                                ]
                              }
                            },
                            "returns": {
                              "additionalProperties": false,
                              "description": "zpool vdev tree with status",
                              "properties": {},
                              "type": "object"
                            }
                          }
                        },
                        "leaf": 1,
                        "path": "/nodes/{node}/disks/zfs/{name}",
                        "text": "{name}"
                      }
                    ],
                    "info": {
                      "GET": {
                        "description": "List zfs pools.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "List zfs pools.",
                          "properties": {
                            "node": {
                              "description": "Node name (or 'localhost')",
                              "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "disks"
                            ],
                            "privs": [
                              "Sys.Audit"
                            ]
                          }
                        },
                        "returns": {
                          "description": "List of zpools.",
                          "items": {
                            "additionalProperties": false,
                            "description": "zpool list item",
                            "properties": {
                              "alloc": {
                                "description": "Used size",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "dedup": {
                                "description": "ZFS deduplication ratio",
                                "type": "number"
                              },
                              "frag": {
                                "description": "ZFS fragnentation level",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "free": {
                                "description": "Free space",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "health": {
                                "description": "Health",
                                "type": "string"
                              },
                              "name": {
                                "description": "zpool name",
                                "type": "string"
                              },
                              "size": {
                                "description": "Total size",
                                "minimum": 0,
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "POST": {
                        "description": "Create a new ZFS pool. Will be mounted under `/mnt/datastore/<name>`.",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Create a new ZFS pool. Will be mounted under `/mnt/datastore/<name>`.",
                          "properties": {
                            "add-datastore": {
                              "description": "Configure a datastore using the zpool.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "ashift": {
                              "default": 12,
                              "description": "Pool sector size exponent.",
                              "maximum": 16,
                              "minimum": 9,
                              "optional": 1,
                              "type": "integer"
                            },
                            "compression": {
                              "default": "On",
                              "description": "The ZFS compression algorithm to use.",
                              "enum": [
                                "gzip",
                                "lz4",
                                "lzjb",
                                "zle",
                                "zstd",
                                "on",
                                "off"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "devices": {
                              "description": "A list of disk names, comma separated.",
                              "format": {
                                "description": "Disk name list.",
                                "items": {
                                  "description": "Block device name (/sys/block/<name>).",
                                  "maxLength": 64,
                                  "minLength": 3,
                                  "pattern": "/^(?:(?:h|s|x?v)d[a-z]+)|(?:nvme\\d+n\\d+)$/",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "type": "string",
                              "typetext": "[<string>, ...]"
                            },
                            "name": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "node": {
                              "description": "Node name (or 'localhost')",
                              "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                              "type": "string"
                            },
                            "raidlevel": {
                              "description": "The ZFS RAID level to use.",
                              "enum": [
                                "single",
                                "mirror",
                                "raid10",
                                "raidz",
                                "raidz2",
                                "raidz3"
                              ],
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "disks"
                            ],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "description": "Unique Process/Task Identifier",
                          "minLength": 36,
                          "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                          "type": "string"
                        }
                      }
                    },
                    "leaf": 0,
                    "path": "/nodes/{node}/disks/zfs",
                    "text": "zfs"
                  }
                ],
                "info": {
                  "GET": {
                    "description": "Directory index.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": true,
                      "description": "Directory index.",
                      "properties": {}
                    },
                    "permissions": {
                      "user": "all"
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 0,
                "path": "/nodes/{node}/disks",
                "text": "disks"
              },
              {
                "info": {
                  "GET": {
                    "description": "Read DNS settings.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Read DNS settings.",
                      "properties": {
                        "node": {
                          "description": "Node name (or 'localhost')",
                          "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system",
                          "network",
                          "dns"
                        ],
                        "privs": [
                          "Sys.Audit"
                        ]
                      }
                    },
                    "returns": {
                      "additionalProperties": false,
                      "description": "Returns DNS server IPs and sreach domain.",
                      "properties": {
                        "digest": {
                          "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                          "pattern": "/^[a-f0-9]{64}$/",
                          "type": "string"
                        },
                        "dns1": {
                          "description": "First name server IP address.",
                          "optional": 1,
                          "pattern": "/^(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))$/",
                          "type": "string"
                        },
                        "dns2": {
                          "description": "Second name server IP address.",
                          "optional": 1,
                          "pattern": "/^(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))$/",
                          "type": "string"
                        },
                        "dns3": {
                          "description": "Third name server IP address.",
                          "optional": 1,
                          "pattern": "/^(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))$/",
                          "type": "string"
                        },
                        "search": {
                          "description": "Search domain for host-name lookup.",
                          "optional": 1,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "PUT": {
                    "description": "Update DNS settings.",
                    "method": "PUT",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Update DNS settings.",
                      "properties": {
                        "delete": {
                          "description": "List of properties to delete.",
                          "items": {
                            "description": "Deletable property name",
                            "enum": [
                              "dns1",
                              "dns2",
                              "dns3"
                            ],
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "digest": {
                          "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                          "optional": 1,
                          "pattern": "/^[a-f0-9]{64}$/",
                          "type": "string"
                        },
                        "dns1": {
                          "description": "First name server IP address.",
                          "optional": 1,
                          "pattern": "/^(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))$/",
                          "type": "string"
                        },
                        "dns2": {
                          "description": "Second name server IP address.",
                          "optional": 1,
                          "pattern": "/^(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))$/",
                          "type": "string"
                        },
                        "dns3": {
                          "description": "Third name server IP address.",
                          "optional": 1,
                          "pattern": "/^(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::))))$/",
                          "type": "string"
                        },
                        "node": {
                          "description": "Node name (or 'localhost')",
                          "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                          "type": "string"
                        },
                        "search": {
                          "description": "Search domain for host-name lookup.",
                          "optional": 1,
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system",
                          "network",
                          "dns"
                        ],
                        "privs": [
                          "Sys.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 1,
                "path": "/nodes/{node}/dns",
                "text": "dns"
              },
              {
                "info": {
                  "GET": {
                    "description": "Read syslog entries.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Read syslog entries.",
                      "properties": {
                        "endcursor": {
                          "description": "End before the given Cursor. Conflicts with 'until'",
                          "optional": 1,
                          "type": "string"
                        },
                        "lastentries": {
                          "description": "Limit to the last X lines. Conflicts with a range.",
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "node": {
                          "description": "Node name (or 'localhost')",
                          "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                          "type": "string"
                        },
                        "since": {
                          "description": "Display all log since this UNIX epoch. Conflicts with 'startcursor'.",
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "startcursor": {
                          "description": "Start after the given Cursor. Conflicts with 'since'.",
                          "optional": 1,
                          "type": "string"
                        },
                        "until": {
                          "description": "Display all log until this UNIX epoch. Conflicts with 'endcursor'.",
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system",
                          "log"
                        ],
                        "privs": [
                          "Sys.Audit"
                        ]
                      }
                    },
                    "returns": {
                      "description": "Returns a list of journal entries.",
                      "items": {
                        "description": "Line text.",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  }
                },
                "leaf": 1,
                "path": "/nodes/{node}/journal",
                "text": "journal"
              },
              {
                "children": [
                  {
                    "info": {
                      "DELETE": {
                        "description": "Remove network interface configuration.",
                        "method": "DELETE",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Remove network interface configuration.",
                          "properties": {
                            "digest": {
                              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                              "optional": 1,
                              "pattern": "/^[a-f0-9]{64}$/",
                              "type": "string"
                            },
                            "iface": {
                              "description": "Network interface name.",
                              "maxLength": 15,
                              "minLength": 1,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "node": {
                              "description": "Node name (or 'localhost')",
                              "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "network",
                              "interfaces",
                              "{iface}"
                            ],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      },
                      "GET": {
                        "description": "Read a network interface configuration.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Read a network interface configuration.",
                          "properties": {
                            "iface": {
                              "description": "Network interface name.",
                              "maxLength": 15,
                              "minLength": 1,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "node": {
                              "description": "Node name (or 'localhost')",
                              "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "network",
                              "interfaces",
                              "{iface}"
                            ],
                            "privs": [
                              "Sys.Audit"
                            ]
                          }
                        },
                        "returns": {
                          "additionalProperties": false,
                          "description": "Network Interface configuration",
                          "properties": {
                            "active": {
                              "description": "Interface is active (UP)",
                              "type": "boolean"
                            },
                            "altnames": {
                              "description": "List of altnames for this interface",
                              "items": {
                                "description": "altname",
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "autostart": {
                              "description": "Autostart interface",
                              "type": "boolean"
                            },
                            "bond-primary": {
                              "description": "Network interface name.",
                              "maxLength": 15,
                              "minLength": 1,
                              "optional": 1,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "bond_mode": {
                              "description": "Linux Bond Mode",
                              "enum": [
                                "balance-rr",
                                "active-backup",
                                "balance-xor",
                                "broadcast",
                                "802.3ad",
                                "balance-tlb",
                                "balance-alb"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "bond_xmit_hash_policy": {
                              "description": "Bond Transmit Hash Policy for LACP (802.3ad)",
                              "enum": [
                                "layer2",
                                "layer2+3",
                                "layer3+4"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "bridge_ports": {
                              "description": "Network interface list.",
                              "items": {
                                "description": "Network interface name.",
                                "maxLength": 15,
                                "minLength": 1,
                                "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                "type": "string"
                              },
                              "optional": 1,
                              "type": "array"
                            },
                            "bridge_vlan_aware": {
                              "description": "Enable bridge vlan support.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "cidr": {
                              "description": "IPv4 address with netmask (CIDR notation).",
                              "maxLength": 18,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))/\\d{1,2})$$/",
                              "type": "string"
                            },
                            "cidr6": {
                              "description": "IPv6 address with netmask (CIDR notation).",
                              "maxLength": 43,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::)))/\\d{1,3})$$/",
                              "type": "string"
                            },
                            "comments": {
                              "description": "Comments (inet, may span multiple lines)",
                              "optional": 1,
                              "type": "string"
                            },
                            "comments6": {
                              "description": "Comments (inet6, may span multiple lines)",
                              "optional": 1,
                              "type": "string"
                            },
                            "gateway": {
                              "description": "IPv4 address.",
                              "maxLength": 15,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))$/",
                              "type": "string"
                            },
                            "gateway6": {
                              "description": "IPv6 address.",
                              "maxLength": 39,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::)))$/",
                              "type": "string"
                            },
                            "method": {
                              "description": "Interface configuration method",
                              "enum": [
                                "manual",
                                "static",
                                "dhcp",
                                "loopback"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "method6": {
                              "description": "Interface configuration method",
                              "enum": [
                                "manual",
                                "static",
                                "dhcp",
                                "loopback"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "mtu": {
                              "description": "Maximum Transmission Unit",
                              "minimum": 0,
                              "optional": 1,
                              "type": "integer"
                            },
                            "name": {
                              "description": "Network interface name.",
                              "maxLength": 15,
                              "minLength": 1,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "options": {
                              "description": "Option list (inet)",
                              "items": {
                                "description": "Optional attribute line.",
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "options6": {
                              "description": "Option list (inet6)",
                              "items": {
                                "description": "Optional attribute line.",
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "slaves": {
                              "description": "Network interface list.",
                              "items": {
                                "description": "Network interface name.",
                                "maxLength": 15,
                                "minLength": 1,
                                "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                "type": "string"
                              },
                              "optional": 1,
                              "type": "array"
                            },
                            "type": {
                              "description": "Network interface type",
                              "enum": [
                                "loopback",
                                "eth",
                                "bridge",
                                "bond",
                                "vlan",
                                "alias",
                                "unknown"
                              ],
                              "type": "string"
                            },
                            "vlan-id": {
                              "description": "VLAN ID.",
                              "optional": 1,
                              "type": "integer"
                            },
                            "vlan-raw-device": {
                              "description": "Network interface name.",
                              "maxLength": 15,
                              "minLength": 1,
                              "optional": 1,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "PUT": {
                        "description": "Update network interface config.",
                        "method": "PUT",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Update network interface config.",
                          "properties": {
                            "autostart": {
                              "description": "Autostart interface.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "bond-primary": {
                              "description": "Network interface name.",
                              "maxLength": 15,
                              "minLength": 1,
                              "optional": 1,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "bond_mode": {
                              "description": "Linux Bond Mode",
                              "enum": [
                                "balance-rr",
                                "active-backup",
                                "balance-xor",
                                "broadcast",
                                "802.3ad",
                                "balance-tlb",
                                "balance-alb"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "bond_xmit_hash_policy": {
                              "description": "Bond Transmit Hash Policy for LACP (802.3ad)",
                              "enum": [
                                "layer2",
                                "layer2+3",
                                "layer3+4"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "bridge_ports": {
                              "description": "A list of network devices, comma separated.",
                              "format": {
                                "description": "Network interface list.",
                                "items": {
                                  "description": "Network interface name.",
                                  "maxLength": 15,
                                  "minLength": 1,
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[<string>, ...]"
                            },
                            "bridge_vlan_aware": {
                              "description": "Enable bridge vlan support.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "cidr": {
                              "description": "IPv4 address with netmask (CIDR notation).",
                              "maxLength": 18,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))/\\d{1,2})$$/",
                              "type": "string"
                            },
                            "cidr6": {
                              "description": "IPv6 address with netmask (CIDR notation).",
                              "maxLength": 43,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::)))/\\d{1,3})$$/",
                              "type": "string"
                            },
                            "comments": {
                              "description": "Comments (inet, may span multiple lines)",
                              "optional": 1,
                              "type": "string"
                            },
                            "comments6": {
                              "description": "Comments (inet5, may span multiple lines)",
                              "optional": 1,
                              "type": "string"
                            },
                            "delete": {
                              "description": "List of properties to delete.",
                              "items": {
                                "description": "Deletable property name",
                                "enum": [
                                  "cidr",
                                  "cidr6",
                                  "gateway",
                                  "gateway6",
                                  "method",
                                  "method6",
                                  "comments",
                                  "comments6",
                                  "mtu",
                                  "autostart",
                                  "bridge_ports",
                                  "bridge_vlan_aware",
                                  "slaves",
                                  "bond-primary",
                                  "bond_xmit_hash_policy"
                                ],
                                "type": "string"
                              },
                              "optional": 1,
                              "type": "array"
                            },
                            "digest": {
                              "description": "Prevent changes if current configuration file has different SHA256 digest. This can be used to prevent concurrent modifications.",
                              "optional": 1,
                              "pattern": "/^[a-f0-9]{64}$/",
                              "type": "string"
                            },
                            "gateway": {
                              "description": "IPv4 address.",
                              "maxLength": 15,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))$/",
                              "type": "string"
                            },
                            "gateway6": {
                              "description": "IPv6 address.",
                              "maxLength": 39,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::)))$/",
                              "type": "string"
                            },
                            "iface": {
                              "description": "Network interface name.",
                              "maxLength": 15,
                              "minLength": 1,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "method": {
                              "description": "Interface configuration method",
                              "enum": [
                                "manual",
                                "static",
                                "dhcp",
                                "loopback"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "method6": {
                              "description": "Interface configuration method",
                              "enum": [
                                "manual",
                                "static",
                                "dhcp",
                                "loopback"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "mtu": {
                              "default": 1500,
                              "description": "Maximum Transmission Unit.",
                              "maximum": 65535,
                              "minimum": 46,
                              "optional": 1,
                              "type": "integer"
                            },
                            "node": {
                              "description": "Node name (or 'localhost')",
                              "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                              "type": "string"
                            },
                            "slaves": {
                              "description": "A list of network devices, comma separated.",
                              "format": {
                                "description": "Network interface list.",
                                "items": {
                                  "description": "Network interface name.",
                                  "maxLength": 15,
                                  "minLength": 1,
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "optional": 1,
                              "type": "string",
                              "typetext": "[<string>, ...]"
                            },
                            "type": {
                              "description": "Network interface type",
                              "enum": [
                                "loopback",
                                "eth",
                                "bridge",
                                "bond",
                                "vlan",
                                "alias",
                                "unknown"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "vlan-id": {
                              "description": "VLAN ID.",
                              "optional": 1,
                              "type": "integer"
                            },
                            "vlan-raw-device": {
                              "description": "Network interface name.",
                              "maxLength": 15,
                              "minLength": 1,
                              "optional": 1,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "system",
                              "network",
                              "interfaces",
                              "{iface}"
                            ],
                            "privs": [
                              "Sys.Modify"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/nodes/{node}/network/{iface}",
                    "text": "{iface}"
                  }
                ],
                "info": {
                  "DELETE": {
                    "description": "Revert network configuration (rm /etc/network/interfaces.new).",
                    "method": "DELETE",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Revert network configuration (rm /etc/network/interfaces.new).",
                      "properties": {
                        "node": {
                          "description": "Node name (or 'localhost')",
                          "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system",
                          "network",
                          "interfaces"
                        ],
                        "privs": [
                          "Sys.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  },
                  "GET": {
                    "description": "List all datastores",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "List all datastores",
                      "properties": {
                        "node": {
                          "description": "Node name (or 'localhost')",
                          "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system",
                          "network",
                          "interfaces"
                        ],
                        "privs": [
                          "Sys.Audit"
                        ]
                      }
                    },
                    "returns": {
                      "description": "List network devices (with config digest).",
                      "items": {
                        "additionalProperties": false,
                        "description": "Network Interface configuration",
                        "properties": {
                          "active": {
                            "description": "Interface is active (UP)",
                            "type": "boolean"
                          },
                          "altnames": {
                            "description": "List of altnames for this interface",
                            "items": {
                              "description": "altname",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "autostart": {
                            "description": "Autostart interface",
                            "type": "boolean"
                          },
                          "bond-primary": {
                            "description": "Network interface name.",
                            "maxLength": 15,
                            "minLength": 1,
                            "optional": 1,
                            "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                            "type": "string"
                          },
                          "bond_mode": {
                            "description": "Linux Bond Mode",
                            "enum": [
                              "balance-rr",
                              "active-backup",
                              "balance-xor",
                              "broadcast",
                              "802.3ad",
                              "balance-tlb",
                              "balance-alb"
                            ],
                            "optional": 1,
                            "type": "string"
                          },
                          "bond_xmit_hash_policy": {
                            "description": "Bond Transmit Hash Policy for LACP (802.3ad)",
                            "enum": [
                              "layer2",
                              "layer2+3",
                              "layer3+4"
                            ],
                            "optional": 1,
                            "type": "string"
                          },
                          "bridge_ports": {
                            "description": "Network interface list.",
                            "items": {
                              "description": "Network interface name.",
                              "maxLength": 15,
                              "minLength": 1,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "optional": 1,
                            "type": "array"
                          },
                          "bridge_vlan_aware": {
                            "description": "Enable bridge vlan support.",
                            "optional": 1,
                            "type": "boolean"
                          },
                          "cidr": {
                            "description": "IPv4 address with netmask (CIDR notation).",
                            "maxLength": 18,
                            "optional": 1,
                            "pattern": "/^(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))/\\d{1,2})$$/",
                            "type": "string"
                          },
                          "cidr6": {
                            "description": "IPv6 address with netmask (CIDR notation).",
                            "maxLength": 43,
                            "optional": 1,
                            "pattern": "/^(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::)))/\\d{1,3})$$/",
                            "type": "string"
                          },
                          "comments": {
                            "description": "Comments (inet, may span multiple lines)",
                            "optional": 1,
                            "type": "string"
                          },
                          "comments6": {
                            "description": "Comments (inet6, may span multiple lines)",
                            "optional": 1,
                            "type": "string"
                          },
                          "gateway": {
                            "description": "IPv4 address.",
                            "maxLength": 15,
                            "optional": 1,
                            "pattern": "/^(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))$/",
                            "type": "string"
                          },
                          "gateway6": {
                            "description": "IPv6 address.",
                            "maxLength": 39,
                            "optional": 1,
                            "pattern": "/^(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::)))$/",
                            "type": "string"
                          },
                          "method": {
                            "description": "Interface configuration method",
                            "enum": [
                              "manual",
                              "static",
                              "dhcp",
                              "loopback"
                            ],
                            "optional": 1,
                            "type": "string"
                          },
                          "method6": {
                            "description": "Interface configuration method",
                            "enum": [
                              "manual",
                              "static",
                              "dhcp",
                              "loopback"
                            ],
                            "optional": 1,
                            "type": "string"
                          },
                          "mtu": {
                            "description": "Maximum Transmission Unit",
                            "minimum": 0,
                            "optional": 1,
                            "type": "integer"
                          },
                          "name": {
                            "description": "Network interface name.",
                            "maxLength": 15,
                            "minLength": 1,
                            "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                            "type": "string"
                          },
                          "options": {
                            "description": "Option list (inet)",
                            "items": {
                              "description": "Optional attribute line.",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "options6": {
                            "description": "Option list (inet6)",
                            "items": {
                              "description": "Optional attribute line.",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "slaves": {
                            "description": "Network interface list.",
                            "items": {
                              "description": "Network interface name.",
                              "maxLength": 15,
                              "minLength": 1,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "optional": 1,
                            "type": "array"
                          },
                          "type": {
                            "description": "Network interface type",
                            "enum": [
                              "loopback",
                              "eth",
                              "bridge",
                              "bond",
                              "vlan",
                              "alias",
                              "unknown"
                            ],
                            "type": "string"
                          },
                          "vlan-id": {
                            "description": "VLAN ID.",
                            "optional": 1,
                            "type": "integer"
                          },
                          "vlan-raw-device": {
                            "description": "Network interface name.",
                            "maxLength": 15,
                            "minLength": 1,
                            "optional": 1,
                            "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "POST": {
                    "description": "Create network interface configuration.",
                    "method": "POST",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Create network interface configuration.",
                      "properties": {
                        "autostart": {
                          "description": "Autostart interface.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "bond-primary": {
                          "description": "Network interface name.",
                          "maxLength": 15,
                          "minLength": 1,
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "bond_mode": {
                          "description": "Linux Bond Mode",
                          "enum": [
                            "balance-rr",
                            "active-backup",
                            "balance-xor",
                            "broadcast",
                            "802.3ad",
                            "balance-tlb",
                            "balance-alb"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "bond_xmit_hash_policy": {
                          "description": "Bond Transmit Hash Policy for LACP (802.3ad)",
                          "enum": [
                            "layer2",
                            "layer2+3",
                            "layer3+4"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "bridge_ports": {
                          "description": "A list of network devices, comma separated.",
                          "format": {
                            "description": "Network interface list.",
                            "items": {
                              "description": "Network interface name.",
                              "maxLength": 15,
                              "minLength": 1,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[<string>, ...]"
                        },
                        "bridge_vlan_aware": {
                          "description": "Enable bridge vlan support.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "cidr": {
                          "description": "IPv4 address with netmask (CIDR notation).",
                          "maxLength": 18,
                          "optional": 1,
                          "pattern": "/^(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))/\\d{1,2})$$/",
                          "type": "string"
                        },
                        "cidr6": {
                          "description": "IPv6 address with netmask (CIDR notation).",
                          "maxLength": 43,
                          "optional": 1,
                          "pattern": "/^(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::)))/\\d{1,3})$$/",
                          "type": "string"
                        },
                        "comments": {
                          "description": "Comments (inet, may span multiple lines)",
                          "optional": 1,
                          "type": "string"
                        },
                        "comments6": {
                          "description": "Comments (inet5, may span multiple lines)",
                          "optional": 1,
                          "type": "string"
                        },
                        "gateway": {
                          "description": "IPv4 address.",
                          "maxLength": 15,
                          "optional": 1,
                          "pattern": "/^(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))$/",
                          "type": "string"
                        },
                        "gateway6": {
                          "description": "IPv6 address.",
                          "maxLength": 39,
                          "optional": 1,
                          "pattern": "/^(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){6})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:::(?:(?:[0-9a-fA-F]{1,4}):){5})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){4})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,1}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){3})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,2}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){2})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,3}(?:[0-9a-fA-F]{1,4}))?::(?:(?:[0-9a-fA-F]{1,4}):){1})(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,4}(?:[0-9a-fA-F]{1,4}))?::)(?:(?:(?:(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9])\\.){3}(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9])?[0-9]))|(?:[0-9a-fA-F]{1,4}):(?:[0-9a-fA-F]{1,4}))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,5}(?:[0-9a-fA-F]{1,4}))?::)(?:[0-9a-fA-F]{1,4}))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4}):){0,6}(?:[0-9a-fA-F]{1,4}))?::)))$/",
                          "type": "string"
                        },
                        "iface": {
                          "description": "Network interface name.",
                          "maxLength": 15,
                          "minLength": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "method": {
                          "description": "Interface configuration method",
                          "enum": [
                            "manual",
                            "static",
                            "dhcp",
                            "loopback"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "method6": {
                          "description": "Interface configuration method",
                          "enum": [
                            "manual",
                            "static",
                            "dhcp",
                            "loopback"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "mtu": {
                          "default": 1500,
                          "description": "Maximum Transmission Unit.",
                          "maximum": 65535,
                          "minimum": 46,
                          "optional": 1,
                          "type": "integer"
                        },
                        "node": {
                          "description": "Node name (or 'localhost')",
                          "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                          "type": "string"
                        },
                        "slaves": {
                          "description": "A list of network devices, comma separated.",
                          "format": {
                            "description": "Network interface list.",
                            "items": {
                              "description": "Network interface name.",
                              "maxLength": 15,
                              "minLength": 1,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "optional": 1,
                          "type": "string",
                          "typetext": "[<string>, ...]"
                        },
                        "type": {
                          "description": "Network interface type",
                          "enum": [
                            "loopback",
                            "eth",
                            "bridge",
                            "bond",
                            "vlan",
                            "alias",
                            "unknown"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "vlan-id": {
                          "description": "VLAN ID.",
                          "optional": 1,
                          "type": "integer"
                        },
                        "vlan-raw-device": {
                          "description": "Network interface name.",
                          "maxLength": 15,
                          "minLength": 1,
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system",
                          "network",
                          "interfaces",
                          "{iface}"
                        ],
                        "privs": [
                          "Sys.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  },
                  "PUT": {
                    "description": "Reload network configuration (requires ifupdown2).",
                    "method": "PUT",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Reload network configuration (requires ifupdown2).",
                      "properties": {
                        "node": {
                          "description": "Node name (or 'localhost')",
                          "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system",
                          "network",
                          "interfaces"
                        ],
                        "privs": [
                          "Sys.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 0,
                "path": "/nodes/{node}/network",
                "text": "network"
              },
              {
                "info": {
                  "GET": {
                    "description": "Generate a report",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Generate a report",
                      "properties": {
                        "node": {
                          "description": "Node name (or 'localhost')",
                          "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system",
                          "status"
                        ],
                        "privs": [
                          "Sys.Audit"
                        ]
                      }
                    },
                    "returns": {
                      "description": "Returns report of the node",
                      "type": "string"
                    }
                  }
                },
                "leaf": 1,
                "path": "/nodes/{node}/report",
                "text": "report"
              },
              {
                "info": {
                  "GET": {
                    "description": "Read node stats",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Read node stats",
                      "properties": {
                        "cf": {
                          "description": "RRD consolidation mode",
                          "enum": [
                            "MAX",
                            "AVERAGE"
                          ],
                          "type": "string"
                        },
                        "node": {
                          "description": "Node name (or 'localhost')",
                          "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                          "type": "string"
                        },
                        "timeframe": {
                          "description": "RRD time frame",
                          "enum": [
                            "hour",
                            "day",
                            "week",
                            "month",
                            "year",
                            "decade"
                          ],
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system",
                          "status"
                        ],
                        "privs": [
                          "Sys.Audit"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 1,
                "path": "/nodes/{node}/rrd",
                "text": "rrd"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "info": {
                          "POST": {
                            "description": "Reload service.",
                            "method": "POST",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Reload service.",
                              "properties": {
                                "node": {
                                  "description": "Node name (or 'localhost')",
                                  "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                                  "type": "string"
                                },
                                "service": {
                                  "description": "Service ID.",
                                  "maxLength": 256,
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "check": {
                                "partial": false,
                                "path": [
                                  "system",
                                  "services",
                                  "{service}"
                                ],
                                "privs": [
                                  "Sys.Modify"
                                ]
                              }
                            },
                            "returns": {
                              "type": "null"
                            }
                          }
                        },
                        "leaf": 1,
                        "path": "/nodes/{node}/services/{service}/reload",
                        "text": "reload"
                      },
                      {
                        "info": {
                          "POST": {
                            "description": "Restart service.",
                            "method": "POST",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Restart service.",
                              "properties": {
                                "node": {
                                  "description": "Node name (or 'localhost')",
                                  "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                                  "type": "string"
                                },
                                "service": {
                                  "description": "Service ID.",
                                  "maxLength": 256,
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "check": {
                                "partial": false,
                                "path": [
                                  "system",
                                  "services",
                                  "{service}"
                                ],
                                "privs": [
                                  "Sys.Modify"
                                ]
                              }
                            },
                            "returns": {
                              "type": "null"
                            }
                          }
                        },
                        "leaf": 1,
                        "path": "/nodes/{node}/services/{service}/restart",
                        "text": "restart"
                      },
                      {
                        "info": {
                          "POST": {
                            "description": "Start service.",
                            "method": "POST",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Start service.",
                              "properties": {
                                "node": {
                                  "description": "Node name (or 'localhost')",
                                  "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                                  "type": "string"
                                },
                                "service": {
                                  "description": "Service ID.",
                                  "maxLength": 256,
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "check": {
                                "partial": false,
                                "path": [
                                  "system",
                                  "services",
                                  "{service}"
                                ],
                                "privs": [
                                  "Sys.Modify"
                                ]
                              }
                            },
                            "returns": {
                              "type": "null"
                            }
                          }
                        },
                        "leaf": 1,
                        "path": "/nodes/{node}/services/{service}/start",
                        "text": "start"
                      },
                      {
                        "info": {
                          "GET": {
                            "description": "Read service properties.",
                            "method": "GET",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Read service properties.",
                              "properties": {
                                "node": {
                                  "description": "Node name (or 'localhost')",
                                  "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                                  "type": "string"
                                },
                                "service": {
                                  "description": "Service ID.",
                                  "maxLength": 256,
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "check": {
                                "partial": false,
                                "path": [
                                  "system",
                                  "services",
                                  "{service}"
                                ],
                                "privs": [
                                  "Sys.Audit"
                                ]
                              }
                            },
                            "returns": {
                              "type": "null"
                            }
                          }
                        },
                        "leaf": 1,
                        "path": "/nodes/{node}/services/{service}/state",
                        "text": "state"
                      },
                      {
                        "info": {
                          "POST": {
                            "description": "Stop service.",
                            "method": "POST",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Stop service.",
                              "properties": {
                                "node": {
                                  "description": "Node name (or 'localhost')",
                                  "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                                  "type": "string"
                                },
                                "service": {
                                  "description": "Service ID.",
                                  "maxLength": 256,
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "check": {
                                "partial": false,
                                "path": [
                                  "system",
                                  "services",
                                  "{service}"
                                ],
                                "privs": [
                                  "Sys.Modify"
                                ]
                              }
                            },
                            "returns": {
                              "type": "null"
                            }
                          }
                        },
                        "leaf": 1,
                        "path": "/nodes/{node}/services/{service}/stop",
                        "text": "stop"
                      }
                    ],
                    "info": {
                      "GET": {
                        "description": "Directory index.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": true,
                          "description": "Directory index.",
                          "properties": {}
                        },
                        "permissions": {
                          "user": "all"
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 0,
                    "path": "/nodes/{node}/services/{service}",
                    "text": "{service}"
                  }
                ],
                "info": {
                  "GET": {
                    "description": "Service list.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Service list.",
                      "properties": {
                        "node": {
                          "description": "Node name (or 'localhost')",
                          "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system",
                          "services"
                        ],
                        "privs": [
                          "Sys.Audit"
                        ]
                      }
                    },
                    "returns": {
                      "description": "Returns a list of systemd services.",
                      "items": {
                        "additionalProperties": false,
                        "description": "Service details.",
                        "properties": {
                          "desc": {
                            "description": "systemd service description.",
                            "type": "string"
                          },
                          "name": {
                            "description": "systemd service name.",
                            "type": "string"
                          },
                          "service": {
                            "description": "Service ID.",
                            "maxLength": 256,
                            "type": "string"
                          },
                          "state": {
                            "description": "systemd service 'SubState'.",
                            "type": "string"
                          },
                          "unit-state": {
                            "description": "systemd service unit state.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  }
                },
                "leaf": 0,
                "path": "/nodes/{node}/services",
                "text": "services"
              },
              {
                "info": {
                  "GET": {
                    "description": "Read node memory, CPU and (root) disk usage",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Read node memory, CPU and (root) disk usage",
                      "properties": {
                        "node": {
                          "description": "Node name (or 'localhost')",
                          "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system",
                          "status"
                        ],
                        "privs": [
                          "Sys.Audit"
                        ]
                      }
                    },
                    "returns": {
                      "additionalProperties": false,
                      "description": "The Node status",
                      "properties": {
                        "boot-info": {
                          "additionalProperties": false,
                          "description": "Holds the Bootmodes",
                          "properties": {
                            "mode": {
                              "description": "The possible BootModes",
                              "enum": [
                                "efi",
                                "legacy-bios"
                              ],
                              "type": "string"
                            },
                            "secureboot": {
                              "description": "SecureBoot status",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "cpu": {
                          "description": "Total CPU usage since last query.",
                          "type": "number"
                        },
                        "cpuinfo": {
                          "additionalProperties": false,
                          "description": "Information about the CPU",
                          "properties": {
                            "cpus": {
                              "description": "The number of CPU cores (incl. threads)",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "model": {
                              "description": "The CPU model",
                              "type": "string"
                            },
                            "sockets": {
                              "description": "The number of CPU sockets",
                              "minimum": 0,
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "current-kernel": {
                          "additionalProperties": false,
                          "description": "The current kernel version (output of `uname`)",
                          "properties": {
                            "machine": {
                              "description": "The machine architecture",
                              "type": "string"
                            },
                            "release": {
                              "description": "The kernel release number",
                              "type": "string"
                            },
                            "sysname": {
                              "description": "The systemname/nodename",
                              "type": "string"
                            },
                            "version": {
                              "description": "The kernel version",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "info": {
                          "additionalProperties": false,
                          "description": "Contains general node information such as the fingerprint`",
                          "properties": {
                            "fingerprint": {
                              "description": "The SSL Fingerprint",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "kversion": {
                          "description": "The current kernel version (LEGACY string type).",
                          "type": "string"
                        },
                        "loadavg": {
                          "description": "Load for 1, 5 and 15 minutes.",
                          "items": {
                            "description": "the load",
                            "type": "number"
                          },
                          "type": "array"
                        },
                        "memory": {
                          "additionalProperties": false,
                          "description": "Node memory usage counters",
                          "properties": {
                            "free": {
                              "description": "Free memory",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "total": {
                              "description": "Total memory",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "used": {
                              "description": "Used memory",
                              "minimum": 0,
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "root": {
                          "additionalProperties": false,
                          "description": "Storage space usage information.",
                          "properties": {
                            "avail": {
                              "description": "Available space (bytes).",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "total": {
                              "description": "Total space (bytes).",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "used": {
                              "description": "Used space (bytes).",
                              "minimum": 0,
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "swap": {
                          "additionalProperties": false,
                          "description": "Node swap usage counters",
                          "properties": {
                            "free": {
                              "description": "Free swap",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "total": {
                              "description": "Total swap",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "used": {
                              "description": "Used swap",
                              "minimum": 0,
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "uptime": {
                          "description": "The current uptime of the server.",
                          "minimum": 0,
                          "type": "integer"
                        },
                        "wait": {
                          "description": "Total IO wait since last query.",
                          "type": "number"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "POST": {
                    "description": "Reboot or shutdown the node.",
                    "method": "POST",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Reboot or shutdown the node.",
                      "properties": {
                        "command": {
                          "description": "Node Power command type.",
                          "enum": [
                            "reboot",
                            "shutdown"
                          ],
                          "type": "string"
                        },
                        "node": {
                          "description": "Node name (or 'localhost')",
                          "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system",
                          "status"
                        ],
                        "privs": [
                          "Sys.PowerManagement"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 1,
                "path": "/nodes/{node}/status",
                "text": "status"
              },
              {
                "info": {
                  "DELETE": {
                    "description": "Delete subscription info.",
                    "method": "DELETE",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Delete subscription info.",
                      "properties": {
                        "node": {
                          "description": "Node name (or 'localhost')",
                          "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system"
                        ],
                        "privs": [
                          "Sys.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  },
                  "GET": {
                    "description": "Read subscription info.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Read subscription info.",
                      "properties": {
                        "node": {
                          "description": "Node name (or 'localhost')",
                          "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "user": "all"
                    },
                    "returns": {
                      "additionalProperties": false,
                      "description": "Proxmox subscription information",
                      "properties": {
                        "checktime": {
                          "description": "timestamp of the last check done",
                          "optional": 1,
                          "type": "integer"
                        },
                        "key": {
                          "description": "the subscription key, if set and permitted to access",
                          "optional": 1,
                          "type": "string"
                        },
                        "message": {
                          "description": "a more human readable status message",
                          "optional": 1,
                          "type": "string"
                        },
                        "nextduedate": {
                          "description": "next due date of the set subscription",
                          "optional": 1,
                          "type": "string"
                        },
                        "productname": {
                          "description": "human readable productname of the set subscription",
                          "optional": 1,
                          "type": "string"
                        },
                        "regdate": {
                          "description": "register date of the set subscription",
                          "optional": 1,
                          "type": "string"
                        },
                        "serverid": {
                          "description": "the server ID, if permitted to access",
                          "optional": 1,
                          "type": "string"
                        },
                        "signature": {
                          "description": "Signature for offline keys",
                          "optional": 1,
                          "type": "string"
                        },
                        "status": {
                          "default": "notfound",
                          "description": "Subscription status",
                          "enum": [
                            "new",
                            "notfound",
                            "active",
                            "invalid",
                            "expired",
                            "suspended"
                          ],
                          "type": "string"
                        },
                        "url": {
                          "description": "URL to the web shop",
                          "optional": 1,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "POST": {
                    "description": "Check and update subscription status.",
                    "method": "POST",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Check and update subscription status.",
                      "properties": {
                        "force": {
                          "default": false,
                          "description": "Always connect to server, even if information in cache is up to date.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "node": {
                          "description": "Node name (or 'localhost')",
                          "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system"
                        ],
                        "privs": [
                          "Sys.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  },
                  "PUT": {
                    "description": "Set a subscription key and check it.",
                    "method": "PUT",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Set a subscription key and check it.",
                      "properties": {
                        "key": {
                          "description": "Proxmox Backup Server subscription key.",
                          "maxLength": 16,
                          "minLength": 15,
                          "pattern": "/^pbs(?:[cbsp])-[0-9a-f]{10}$/",
                          "type": "string"
                        },
                        "node": {
                          "description": "Node name (or 'localhost')",
                          "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system"
                        ],
                        "privs": [
                          "Sys.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 1,
                "path": "/nodes/{node}/subscription",
                "text": "subscription"
              },
              {
                "info": {
                  "GET": {
                    "description": "Read syslog entries.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Read syslog entries.",
                      "properties": {
                        "limit": {
                          "description": "Max. number of lines.",
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "node": {
                          "description": "Node name (or 'localhost')",
                          "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                          "type": "string"
                        },
                        "service": {
                          "description": "Service ID.",
                          "maxLength": 128,
                          "optional": 1,
                          "type": "string"
                        },
                        "since": {
                          "description": "Display all log since this date-time string.",
                          "optional": 1,
                          "pattern": "/^\\d{4}-\\d{2}-\\d{2}( \\d{2}:\\d{2}(:\\d{2})?)?$/",
                          "type": "string"
                        },
                        "start": {
                          "description": "Start line number.",
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "until": {
                          "description": "Display all log until this date-time string.",
                          "optional": 1,
                          "pattern": "/^\\d{4}-\\d{2}-\\d{2}( \\d{2}:\\d{2}(:\\d{2})?)?$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system",
                          "log"
                        ],
                        "privs": [
                          "Sys.Audit"
                        ]
                      }
                    },
                    "returns": {
                      "description": "Returns a list of syslog entries.",
                      "items": {
                        "additionalProperties": false,
                        "description": "Syslog line with line number.",
                        "properties": {
                          "n": {
                            "description": "Line number.",
                            "type": "integer"
                          },
                          "t": {
                            "description": "Line text.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  }
                },
                "leaf": 1,
                "path": "/nodes/{node}/syslog",
                "text": "syslog"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "info": {
                          "GET": {
                            "description": "Read the task log",
                            "method": "DOWNLOAD",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Read the task log",
                              "properties": {
                                "download": {
                                  "default": false,
                                  "description": "Whether the tasklog file should be downloaded. This parameter can't be used in conjunction with other parameters",
                                  "optional": 1,
                                  "type": "boolean"
                                },
                                "limit": {
                                  "default": 50,
                                  "description": "The amount of lines to read from the tasklog. Setting this parameter to 0 will return all lines until the end of the file.",
                                  "minimum": 0,
                                  "optional": 1,
                                  "type": "integer"
                                },
                                "node": {
                                  "description": "Node name (or 'localhost')",
                                  "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                                  "type": "string"
                                },
                                "start": {
                                  "default": 0,
                                  "description": "Start at this line when reading the tasklog",
                                  "minimum": 0,
                                  "optional": 1,
                                  "type": "integer"
                                },
                                "test-status": {
                                  "description": "Test task status, and set result attribute \"active\" accordingly.",
                                  "optional": 1,
                                  "type": "boolean"
                                },
                                "upid": {
                                  "description": "Unique Process/Task Identifier",
                                  "minLength": 36,
                                  "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "description": "Users can access their own tasks, or need Sys.Audit on /system/tasks.",
                              "user": "all"
                            },
                            "returns": {
                              "type": "null"
                            }
                          }
                        },
                        "leaf": 1,
                        "path": "/nodes/{node}/tasks/{upid}/log",
                        "text": "log"
                      },
                      {
                        "info": {
                          "GET": {
                            "description": "Get task status.",
                            "method": "GET",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Get task status.",
                              "properties": {
                                "node": {
                                  "description": "Node name (or 'localhost')",
                                  "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                                  "type": "string"
                                },
                                "upid": {
                                  "description": "Unique Process/Task Identifier",
                                  "minLength": 36,
                                  "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "description": "Users can access their own tasks, or need Sys.Audit on /system/tasks.",
                              "user": "all"
                            },
                            "returns": {
                              "additionalProperties": false,
                              "description": "Task status information.",
                              "properties": {
                                "exitstatus": {
                                  "description": "'OK', 'Error: <msg>', or 'unknown'.",
                                  "optional": 1,
                                  "type": "string"
                                },
                                "id": {
                                  "description": "Worker ID (arbitrary ASCII string)",
                                  "optional": 1,
                                  "type": "string"
                                },
                                "node": {
                                  "description": "Node name (or 'localhost')",
                                  "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                                  "type": "string"
                                },
                                "pid": {
                                  "description": "The Unix PID.",
                                  "type": "integer"
                                },
                                "pstart": {
                                  "description": "The Unix process start time from `/proc/pid/stat`",
                                  "type": "integer"
                                },
                                "starttime": {
                                  "description": "The task start time (Epoch)",
                                  "type": "integer"
                                },
                                "status": {
                                  "description": "'running' or 'stopped'",
                                  "type": "string"
                                },
                                "tokenid": {
                                  "description": "The token ID part of an API token authentication id.\n\nThis alone does NOT uniquely identify the API token - use a full `Authid` for such use cases.",
                                  "optional": 1,
                                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "Worker type (arbitrary ASCII string)",
                                  "type": "string"
                                },
                                "upid": {
                                  "description": "Unique Process/Task Identifier",
                                  "minLength": 36,
                                  "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                                  "type": "string"
                                },
                                "user": {
                                  "description": "User ID",
                                  "maxLength": 64,
                                  "minLength": 3,
                                  "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          }
                        },
                        "leaf": 1,
                        "path": "/nodes/{node}/tasks/{upid}/status",
                        "text": "status"
                      }
                    ],
                    "info": {
                      "DELETE": {
                        "description": "Try to stop a task.",
                        "method": "DELETE",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Try to stop a task.",
                          "properties": {
                            "node": {
                              "description": "Node name (or 'localhost')",
                              "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                              "type": "string"
                            },
                            "upid": {
                              "description": "Unique Process/Task Identifier",
                              "minLength": 36,
                              "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "description": "Users can stop their own tasks, or need Sys.Modify on /system/tasks.",
                          "user": "all"
                        },
                        "returns": {
                          "type": "null"
                        }
                      },
                      "GET": {
                        "description": "Directory index.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": true,
                          "description": "Directory index.",
                          "properties": {}
                        },
                        "permissions": {
                          "user": "all"
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 0,
                    "path": "/nodes/{node}/tasks/{upid}",
                    "text": "{upid}"
                  }
                ],
                "info": {
                  "GET": {
                    "description": "List tasks.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "List tasks.",
                      "properties": {
                        "errors": {
                          "default": false,
                          "description": "Only list erroneous tasks.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "limit": {
                          "default": 50,
                          "description": "Only list this amount of tasks. (0 means no limit)",
                          "optional": 1,
                          "type": "integer"
                        },
                        "node": {
                          "description": "Node name (or 'localhost')",
                          "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                          "type": "string"
                        },
                        "running": {
                          "default": false,
                          "description": "Only list running tasks.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "since": {
                          "description": "Only list tasks since this UNIX epoch.",
                          "optional": 1,
                          "type": "integer"
                        },
                        "start": {
                          "default": 0,
                          "description": "List tasks beginning from this offset.",
                          "optional": 1,
                          "type": "integer"
                        },
                        "statusfilter": {
                          "description": "Only list tasks which have any one of the listed status.",
                          "items": {
                            "description": "The state (result) of a finished worker task.",
                            "enum": [
                              "ok",
                              "warning",
                              "error",
                              "unknown"
                            ],
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "store": {
                          "description": "Datastore name.",
                          "maxLength": 32,
                          "minLength": 3,
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "typefilter": {
                          "description": "Only list tasks whose type contains this.",
                          "optional": 1,
                          "type": "string"
                        },
                        "until": {
                          "description": "Only list tasks until this UNIX epoch.",
                          "optional": 1,
                          "type": "integer"
                        },
                        "userfilter": {
                          "description": "Only list tasks from this user.",
                          "optional": 1,
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "description": "Users can only see their own tasks, unless they have Sys.Audit on /system/tasks.",
                      "user": "all"
                    },
                    "returns": {
                      "description": "A list of tasks.",
                      "items": {
                        "additionalProperties": false,
                        "description": "Task properties.",
                        "properties": {
                          "endtime": {
                            "description": "The task end time (Epoch)",
                            "optional": 1,
                            "type": "integer"
                          },
                          "node": {
                            "description": "The node name where the task is running on.",
                            "type": "string"
                          },
                          "pid": {
                            "description": "The Unix PID",
                            "type": "integer"
                          },
                          "pstart": {
                            "description": "The task start time (Epoch)",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "starttime": {
                            "description": "The task start time (Epoch)",
                            "type": "integer"
                          },
                          "status": {
                            "description": "Task end status",
                            "optional": 1,
                            "type": "string"
                          },
                          "upid": {
                            "description": "Unique Process/Task Identifier",
                            "minLength": 36,
                            "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                            "type": "string"
                          },
                          "user": {
                            "description": "The authenticated entity who started the task",
                            "type": "string"
                          },
                          "worker_id": {
                            "description": "Worker ID (arbitrary ASCII string)",
                            "optional": 1,
                            "type": "string"
                          },
                          "worker_type": {
                            "description": "Worker type (arbitrary ASCII string)",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  }
                },
                "leaf": 0,
                "path": "/nodes/{node}/tasks",
                "text": "tasks"
              },
              {
                "info": {
                  "POST": {
                    "description": "Call termproxy and return shell ticket",
                    "method": "POST",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Call termproxy and return shell ticket",
                      "properties": {
                        "cmd": {
                          "description": "The command to run.",
                          "enum": [
                            "login",
                            "upgrade"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "node": {
                          "description": "Node name (or 'localhost')",
                          "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system"
                        ],
                        "privs": [
                          "Sys.Console"
                        ]
                      },
                      "description": "Restricted to users on realm 'pam'"
                    },
                    "returns": {
                      "additionalProperties": false,
                      "description": "Object with the user, ticket, port and upid",
                      "properties": {
                        "port": {
                          "description": "",
                          "type": "string"
                        },
                        "ticket": {
                          "description": "",
                          "type": "string"
                        },
                        "upid": {
                          "description": "",
                          "type": "string"
                        },
                        "user": {
                          "description": "",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  }
                },
                "leaf": 1,
                "path": "/nodes/{node}/termproxy",
                "text": "termproxy"
              },
              {
                "info": {
                  "GET": {
                    "description": "Read server time and time zone settings.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Read server time and time zone settings.",
                      "properties": {
                        "node": {
                          "description": "Node name (or 'localhost')",
                          "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "user": "all"
                    },
                    "returns": {
                      "additionalProperties": false,
                      "description": "Returns server time and timezone.",
                      "properties": {
                        "localtime": {
                          "description": "Seconds since 1970-01-01 00:00:00 UTC. (local time)",
                          "minimum": 1297163644,
                          "type": "integer"
                        },
                        "time": {
                          "description": "Seconds since 1970-01-01 00:00:00 UTC.",
                          "minimum": 1297163644,
                          "type": "integer"
                        },
                        "timezone": {
                          "description": "Time zone. The file '/usr/share/zoneinfo/zone.tab' contains the list of valid names.",
                          "maxLength": 64,
                          "minLength": 2,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "PUT": {
                    "description": "Set time zone",
                    "method": "PUT",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Set time zone",
                      "properties": {
                        "node": {
                          "description": "Node name (or 'localhost')",
                          "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                          "type": "string"
                        },
                        "timezone": {
                          "description": "Time zone. The file '/usr/share/zoneinfo/zone.tab' contains the list of valid names.",
                          "maxLength": 64,
                          "minLength": 2,
                          "pattern": "/^[[:^cntrl:]]*$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system",
                          "time"
                        ],
                        "privs": [
                          "Sys.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 1,
                "path": "/nodes/{node}/time",
                "text": "time"
              },
              {
                "info": {
                  "GET": {
                    "description": "Upgraded to websocket",
                    "method": "DOWNLOAD",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Upgraded to websocket",
                      "properties": {
                        "node": {
                          "description": "Node name (or 'localhost')",
                          "pattern": "/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?)$/",
                          "type": "string"
                        },
                        "port": {
                          "description": "Terminal port",
                          "type": "integer"
                        },
                        "vncticket": {
                          "description": "Terminal ticket",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "system"
                        ],
                        "privs": [
                          "Sys.Console"
                        ]
                      },
                      "description": "The user needs Sys.Console on /system."
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 1,
                "path": "/nodes/{node}/vncwebsocket",
                "text": "vncwebsocket"
              }
            ],
            "info": {
              "GET": {
                "description": "Directory index.",
                "method": "GET",
                "parameters": {
                  "additionalProperties": true,
                  "description": "Directory index.",
                  "properties": {}
                },
                "permissions": {
                  "user": "all"
                },
                "returns": {
                  "type": "null"
                }
              }
            },
            "leaf": 0,
            "path": "/nodes/{node}",
            "text": "{node}"
          }
        ],
        "info": {
          "GET": {
            "description": "List Nodes (only for compatibility)",
            "method": "GET",
            "parameters": {
              "additionalProperties": false,
              "description": "List Nodes (only for compatibility)",
              "properties": {}
            },
            "returns": {
              "type": "null"
            }
          }
        },
        "leaf": 0,
        "path": "/nodes",
        "text": "nodes"
      },
      {
        "info": {
          "GET": {
            "description": "Dummy method which replies with `{ \"pong\": True }`",
            "method": "GET",
            "parameters": {
              "additionalProperties": false,
              "description": "Dummy method which replies with `{ \"pong\": True }`",
              "properties": {}
            },
            "permissions": {
              "description": "Anyone can access this, because it's used for a cheap check if the API daemon is online.",
              "user": "world"
            },
            "returns": {
              "additionalProperties": false,
              "description": "Dummy ping",
              "properties": {
                "pong": {
                  "description": "Always true",
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          }
        },
        "leaf": 1,
        "path": "/ping",
        "text": "ping"
      },
      {
        "info": {
          "POST": {
            "description": "Sync store from other repository",
            "method": "POST",
            "parameters": {
              "additionalProperties": false,
              "description": "Sync store from other repository",
              "properties": {
                "burst-in": {
                  "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                  "maxLength": 64,
                  "minLength": 1,
                  "optional": 1,
                  "type": "string"
                },
                "burst-out": {
                  "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                  "maxLength": 64,
                  "minLength": 1,
                  "optional": 1,
                  "type": "string"
                },
                "encrypted-only": {
                  "description": "Only synchronize encrypted backup snapshots, exclude others.",
                  "optional": 1,
                  "type": "boolean"
                },
                "group-filter": {
                  "description": "List of group filters.",
                  "items": {
                    "description": "Group filter based on group identifier ('group:GROUP'), group type ('type:<vm|ct|host>'), or regex ('regex:RE'). Can be inverted by prepending 'exclude:'.",
                    "type": "string",
                    "typetext": "[<exclude:|include:>]<type:<vm|ct|host>|group:GROUP|regex:RE>"
                  },
                  "optional": 1,
                  "type": "array"
                },
                "max-depth": {
                  "description": "How many levels of namespaces should be operated on (0 == no recursion, empty == automatic full recursion, namespace depths reduce maximum allowed value)",
                  "maximum": 7,
                  "minimum": 0,
                  "optional": 1,
                  "type": "integer"
                },
                "ns": {
                  "description": "Namespace.",
                  "maxLength": 256,
                  "optional": 1,
                  "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                  "type": "string"
                },
                "rate-in": {
                  "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                  "maxLength": 64,
                  "minLength": 1,
                  "optional": 1,
                  "type": "string"
                },
                "rate-out": {
                  "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                  "maxLength": 64,
                  "minLength": 1,
                  "optional": 1,
                  "type": "string"
                },
                "remote": {
                  "description": "Remote ID.",
                  "maxLength": 32,
                  "minLength": 3,
                  "optional": 1,
                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                  "type": "string"
                },
                "remote-ns": {
                  "description": "Namespace.",
                  "maxLength": 256,
                  "optional": 1,
                  "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                  "type": "string"
                },
                "remote-store": {
                  "description": "Datastore name.",
                  "maxLength": 32,
                  "minLength": 3,
                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                  "type": "string"
                },
                "remove-vanished": {
                  "default": false,
                  "description": "Delete vanished backups. This remove the local copy if the remote backup was deleted.",
                  "optional": 1,
                  "type": "boolean"
                },
                "resync-corrupt": {
                  "description": "If the verification failed for a local snapshot, try to pull it again.",
                  "optional": 1,
                  "type": "boolean"
                },
                "store": {
                  "description": "Datastore name.",
                  "maxLength": 32,
                  "minLength": 3,
                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                  "type": "string"
                },
                "transfer-last": {
                  "description": "Limit transfer to last N snapshots (per group), skipping others",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "verified-only": {
                  "description": "Only synchronize verified backup snapshots, exclude others.",
                  "optional": 1,
                  "type": "boolean"
                }
              }
            },
            "permissions": {
              "description": "The user needs Datastore.Backup privilege on '/datastore/{store}',\nand needs to own the backup group. Remote.Read is required on '/remote/{remote}/{remote-store}'.\nThe delete flag additionally requires the Datastore.Prune privilege on '/datastore/{store}'.\n",
              "user": "all"
            },
            "returns": {
              "type": "null"
            }
          }
        },
        "leaf": 1,
        "path": "/pull",
        "text": "pull"
      },
      {
        "info": {
          "POST": {
            "description": "Push store to other repository",
            "method": "POST",
            "parameters": {
              "additionalProperties": false,
              "description": "Push store to other repository",
              "properties": {
                "burst-in": {
                  "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                  "maxLength": 64,
                  "minLength": 1,
                  "optional": 1,
                  "type": "string"
                },
                "burst-out": {
                  "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                  "maxLength": 64,
                  "minLength": 1,
                  "optional": 1,
                  "type": "string"
                },
                "encrypted-only": {
                  "description": "Only synchronize encrypted backup snapshots, exclude others.",
                  "optional": 1,
                  "type": "boolean"
                },
                "group-filter": {
                  "description": "List of group filters.",
                  "items": {
                    "description": "Group filter based on group identifier ('group:GROUP'), group type ('type:<vm|ct|host>'), or regex ('regex:RE'). Can be inverted by prepending 'exclude:'.",
                    "type": "string",
                    "typetext": "[<exclude:|include:>]<type:<vm|ct|host>|group:GROUP|regex:RE>"
                  },
                  "optional": 1,
                  "type": "array"
                },
                "max-depth": {
                  "description": "How many levels of namespaces should be operated on (0 == no recursion, empty == automatic full recursion, namespace depths reduce maximum allowed value)",
                  "maximum": 7,
                  "minimum": 0,
                  "optional": 1,
                  "type": "integer"
                },
                "ns": {
                  "description": "Namespace.",
                  "maxLength": 256,
                  "optional": 1,
                  "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                  "type": "string"
                },
                "rate-in": {
                  "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                  "maxLength": 64,
                  "minLength": 1,
                  "optional": 1,
                  "type": "string"
                },
                "rate-out": {
                  "description": "Byte size with optional unit (B, KB (base 10), MB, GB, ..., KiB (base 2), MiB, Gib, ...).",
                  "maxLength": 64,
                  "minLength": 1,
                  "optional": 1,
                  "type": "string"
                },
                "remote": {
                  "description": "Remote ID.",
                  "maxLength": 32,
                  "minLength": 3,
                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                  "type": "string"
                },
                "remote-ns": {
                  "description": "Namespace.",
                  "maxLength": 256,
                  "optional": 1,
                  "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                  "type": "string"
                },
                "remote-store": {
                  "description": "Datastore name.",
                  "maxLength": 32,
                  "minLength": 3,
                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                  "type": "string"
                },
                "remove-vanished": {
                  "default": false,
                  "description": "Delete vanished backups. This remove the local copy if the remote backup was deleted.",
                  "optional": 1,
                  "type": "boolean"
                },
                "store": {
                  "description": "Datastore name.",
                  "maxLength": 32,
                  "minLength": 3,
                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                  "type": "string"
                },
                "transfer-last": {
                  "description": "Limit transfer to last N snapshots (per group), skipping others",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "verified-only": {
                  "description": "Only synchronize verified backup snapshots, exclude others.",
                  "optional": 1,
                  "type": "boolean"
                }
              }
            },
            "permissions": {
              "description": "The user needs (at least) Remote.DatastoreBackup on \".\n            \"'/remote/{remote}/{remote-store}[/{remote-ns}]', and either Datastore.Backup or \".\n            \"Datastore.Read on '/datastore/{store}[/{ns}]'. The 'remove-vanished' parameter might \".\n            \"require additional privileges.",
              "user": "all"
            },
            "returns": {
              "type": "null"
            }
          }
        },
        "leaf": 1,
        "path": "/push",
        "text": "push"
      },
      {
        "info": {
          "GET": {
            "description": "Upgraded to backup protocol ('proxmox-backup-reader-protocol-v1').",
            "method": "DOWNLOAD",
            "parameters": {
              "additionalProperties": false,
              "description": "Upgraded to backup protocol ('proxmox-backup-reader-protocol-v1').",
              "properties": {
                "backup-id": {
                  "description": "Backup ID.",
                  "pattern": "/^[A-Za-z0-9_][A-Za-z0-9._\\-]*$/",
                  "type": "string"
                },
                "backup-time": {
                  "description": "Backup time (Unix epoch.)",
                  "minimum": 1,
                  "type": "integer"
                },
                "backup-type": {
                  "description": "Backup type.",
                  "enum": [
                    "vm",
                    "ct",
                    "host"
                  ],
                  "type": "string"
                },
                "debug": {
                  "description": "Enable verbose debug logging.",
                  "optional": 1,
                  "type": "boolean"
                },
                "ns": {
                  "description": "Namespace.",
                  "maxLength": 256,
                  "optional": 1,
                  "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                  "type": "string"
                },
                "store": {
                  "description": "Datastore name.",
                  "maxLength": 32,
                  "minLength": 3,
                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                  "type": "string"
                }
              }
            },
            "permissions": {
              "description": "The user needs Datastore.Read privilege on /datastore/{store}.",
              "user": "all"
            },
            "returns": {
              "type": "null"
            }
          }
        },
        "leaf": 1,
        "path": "/reader",
        "text": "reader"
      },
      {
        "children": [
          {
            "info": {
              "GET": {
                "description": "List Datastore usages and estimates",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "List Datastore usages and estimates",
                  "properties": {}
                },
                "permissions": {
                  "user": "all"
                },
                "returns": {
                  "description": "Lists the Status of the Datastores.",
                  "items": {
                    "additionalProperties": false,
                    "description": "Status of a Datastore",
                    "properties": {
                      "avail": {
                        "description": "The available bytes of the underlying storage. (-1 on error)",
                        "minimum": 0,
                        "optional": 1,
                        "type": "integer"
                      },
                      "error": {
                        "description": "An error description, for example, when the datastore could not be looked up",
                        "optional": 1,
                        "type": "string"
                      },
                      "estimated-full-date": {
                        "description": "Estimation of the UNIX epoch when the storage will be full.\nIt's calculated via a simple Linear Regression (Least Squares) over the RRD data of the\nlast Month. Missing if not enough data points are available yet. An estimate in the past\nmeans that usage is declining or not changing.",
                        "optional": 1,
                        "type": "integer"
                      },
                      "gc-status": {
                        "additionalProperties": false,
                        "description": "Garbage collection status.",
                        "optional": 1,
                        "properties": {
                          "cache-stats": {
                            "additionalProperties": false,
                            "description": "Garbage collection cache statistics",
                            "optional": 1,
                            "properties": {
                              "hits": {
                                "description": "Number of atime update cache hits",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "misses": {
                                "description": "Number of atime update cache misses",
                                "minimum": 0,
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "disk-bytes": {
                            "description": "Bytes used on disk.",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "disk-chunks": {
                            "description": "Chunks used on disk.",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "index-data-bytes": {
                            "description": "Sum of bytes referred by index files.",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "index-file-count": {
                            "description": "Number of processed index files.",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "pending-bytes": {
                            "description": "Sum of pending bytes (pending removal - kept for safety).",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "pending-chunks": {
                            "description": "Number of pending chunks (pending removal - kept for safety).",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "removed-bad": {
                            "description": "Number of chunks marked as .bad by verify that have been removed by GC.",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "removed-bytes": {
                            "description": "Sum of removed bytes.",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "removed-chunks": {
                            "description": "Number of removed chunks.",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "still-bad": {
                            "description": "Number of chunks still marked as .bad after garbage collection.",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "upid": {
                            "description": "Unique Process/Task Identifier",
                            "minLength": 36,
                            "optional": 1,
                            "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "history": {
                        "description": "A list of usages of the past (last Month).",
                        "items": {
                          "description": "The usage of a time in the past. Either null or between 0.0 and 1.0.",
                          "type": "number"
                        },
                        "optional": 1,
                        "type": "array"
                      },
                      "history-delta": {
                        "description": "History resolution (seconds)",
                        "minimum": 0,
                        "optional": 1,
                        "type": "integer"
                      },
                      "history-start": {
                        "description": "History start time (epoch)",
                        "minimum": 0,
                        "optional": 1,
                        "type": "integer"
                      },
                      "mount-status": {
                        "default": "nonremovable",
                        "description": "Current mounting status of a datastore, useful for removable datastores.",
                        "enum": [
                          "mounted",
                          "notmounted",
                          "nonremovable"
                        ],
                        "type": "string"
                      },
                      "store": {
                        "description": "Datastore name.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "total": {
                        "description": "The Size of the underlying storage in bytes.",
                        "minimum": 0,
                        "optional": 1,
                        "type": "integer"
                      },
                      "used": {
                        "description": "The used bytes of the underlying storage.",
                        "minimum": 0,
                        "optional": 1,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "leaf": 1,
            "path": "/status/datastore-usage",
            "text": "datastore-usage"
          },
          {
            "info": {
              "GET": {
                "description": "Return backup server metrics.",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "Return backup server metrics.",
                  "properties": {
                    "history": {
                      "default": false,
                      "description": "Include historic values (last 30 minutes)",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "start-time": {
                      "default": 0,
                      "description": "Only return values with a timestamp > start-time. Only has an effect if 'history' is also set",
                      "optional": 1,
                      "type": "integer"
                    }
                  }
                },
                "permissions": {
                  "description": "Users need Sys.Audit on /system/status for host metrics and Datastore.Audit on /datastore/{store} for datastore metrics",
                  "user": "all"
                },
                "returns": {
                  "type": "null"
                }
              }
            },
            "leaf": 1,
            "path": "/status/metrics",
            "text": "metrics"
          }
        ],
        "info": {
          "GET": {
            "description": "Directory index.",
            "method": "GET",
            "parameters": {
              "additionalProperties": true,
              "description": "Directory index.",
              "properties": {}
            },
            "permissions": {
              "user": "all"
            },
            "returns": {
              "type": "null"
            }
          }
        },
        "leaf": 0,
        "path": "/status",
        "text": "status"
      },
      {
        "children": [
          {
            "children": [
              {
                "info": {
                  "POST": {
                    "description": "Runs a tape backup job manually.",
                    "method": "POST",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Runs a tape backup job manually.",
                      "properties": {
                        "id": {
                          "description": "Job ID.",
                          "maxLength": 32,
                          "minLength": 3,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "description": "The user needs Tape.Write privilege on /tape/pool/{pool} and /tape/drive/{drive}, Datastore.Read privilege on /datastore/{store}.",
                      "user": "all"
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 1,
                "path": "/tape/backup/{id}",
                "text": "{id}"
              }
            ],
            "info": {
              "GET": {
                "description": "List all tape backup jobs",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "List all tape backup jobs",
                  "properties": {}
                },
                "permissions": {
                  "description": "List configured tape jobs filtered by Tape.Audit privileges",
                  "user": "all"
                },
                "returns": {
                  "description": "List configured thape backup jobs and their status",
                  "items": {
                    "additionalProperties": false,
                    "description": "Status of Tape Backup Job",
                    "properties": {
                      "comment": {
                        "description": "Comment.",
                        "maxLength": 128,
                        "optional": 1,
                        "pattern": "/^[[:^cntrl:]]*$/",
                        "type": "string"
                      },
                      "drive": {
                        "description": "Drive Identifier.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "eject-media": {
                        "description": "Eject media upon job completion.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "export-media-set": {
                        "description": "Export media set upon job completion.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "group-filter": {
                        "description": "List of group filters.",
                        "items": {
                          "description": "Group filter based on group identifier ('group:GROUP'), group type ('type:<vm|ct|host>'), or regex ('regex:RE'). Can be inverted by prepending 'exclude:'.",
                          "type": "string",
                          "typetext": "[<exclude:|include:>]<type:<vm|ct|host>|group:GROUP|regex:RE>"
                        },
                        "optional": 1,
                        "type": "array"
                      },
                      "id": {
                        "description": "Job ID.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "last-run-endtime": {
                        "description": "Endtime of the last run.",
                        "optional": 1,
                        "type": "integer"
                      },
                      "last-run-state": {
                        "description": "Result of the last run.",
                        "optional": 1,
                        "type": "string"
                      },
                      "last-run-upid": {
                        "description": "Task UPID of the last run.",
                        "optional": 1,
                        "type": "string"
                      },
                      "latest-only": {
                        "description": "Backup latest snapshots only.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "max-depth": {
                        "default": 7,
                        "description": "How many levels of namespaces should be operated on (0 == no recursion)",
                        "maximum": 7,
                        "minimum": 0,
                        "optional": 1,
                        "type": "integer"
                      },
                      "next-media-label": {
                        "description": "Next tape used (best guess)",
                        "optional": 1,
                        "type": "string"
                      },
                      "next-run": {
                        "description": "Estimated time of the next run (UNIX epoch).",
                        "optional": 1,
                        "type": "integer"
                      },
                      "notification-mode": {
                        "default": "notification-system",
                        "description": "Configure how notifications for this datastore should be sent.\n`legacy-sendmail` sends email notifications to the user configured\nin `notify-user` via the system's `sendmail` executable.\n`notification-system` emits matchable notification events to the\nnotification system.",
                        "enum": [
                          "legacy-sendmail",
                          "notification-system"
                        ],
                        "optional": 1,
                        "type": "string"
                      },
                      "notify-user": {
                        "description": "User ID",
                        "maxLength": 64,
                        "minLength": 3,
                        "optional": 1,
                        "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "ns": {
                        "description": "Namespace.",
                        "maxLength": 256,
                        "optional": 1,
                        "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                        "type": "string"
                      },
                      "pool": {
                        "description": "Media pool name.",
                        "maxLength": 32,
                        "minLength": 2,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "schedule": {
                        "description": "Run sync job at specified schedule.",
                        "optional": 1,
                        "type": "string",
                        "typetext": "<calendar-event>"
                      },
                      "store": {
                        "description": "Datastore name.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "worker-threads": {
                        "default": 1,
                        "description": "Set the number of worker threads to use for the job",
                        "maximum": 32,
                        "minimum": 1,
                        "optional": 1,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "POST": {
                "description": "Backup datastore to tape media pool",
                "method": "POST",
                "parameters": {
                  "additionalProperties": false,
                  "description": "Backup datastore to tape media pool",
                  "properties": {
                    "drive": {
                      "description": "Drive Identifier.",
                      "maxLength": 32,
                      "minLength": 3,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "eject-media": {
                      "description": "Eject media upon job completion.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "export-media-set": {
                      "description": "Export media set upon job completion.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "force-media-set": {
                      "default": false,
                      "description": "Ignore the allocation policy and start a new media-set.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "group-filter": {
                      "description": "List of group filters.",
                      "items": {
                        "description": "Group filter based on group identifier ('group:GROUP'), group type ('type:<vm|ct|host>'), or regex ('regex:RE'). Can be inverted by prepending 'exclude:'.",
                        "type": "string",
                        "typetext": "[<exclude:|include:>]<type:<vm|ct|host>|group:GROUP|regex:RE>"
                      },
                      "optional": 1,
                      "type": "array"
                    },
                    "latest-only": {
                      "description": "Backup latest snapshots only.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "max-depth": {
                      "default": 7,
                      "description": "How many levels of namespaces should be operated on (0 == no recursion)",
                      "maximum": 7,
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer"
                    },
                    "notification-mode": {
                      "default": "notification-system",
                      "description": "Configure how notifications for this datastore should be sent.\n`legacy-sendmail` sends email notifications to the user configured\nin `notify-user` via the system's `sendmail` executable.\n`notification-system` emits matchable notification events to the\nnotification system.",
                      "enum": [
                        "legacy-sendmail",
                        "notification-system"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "notify-user": {
                      "description": "User ID",
                      "maxLength": 64,
                      "minLength": 3,
                      "optional": 1,
                      "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "ns": {
                      "description": "Namespace.",
                      "maxLength": 256,
                      "optional": 1,
                      "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                      "type": "string"
                    },
                    "pool": {
                      "description": "Media pool name.",
                      "maxLength": 32,
                      "minLength": 2,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "store": {
                      "description": "Datastore name.",
                      "maxLength": 32,
                      "minLength": 3,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "worker-threads": {
                      "default": 1,
                      "description": "Set the number of worker threads to use for the job",
                      "maximum": 32,
                      "minimum": 1,
                      "optional": 1,
                      "type": "integer"
                    }
                  }
                },
                "permissions": {
                  "description": "The user needs Tape.Write privilege on /tape/pool/{pool} and /tape/drive/{drive}, Datastore.Read privilege on /datastore/{store}.",
                  "user": "all"
                },
                "returns": {
                  "description": "Unique Process/Task Identifier",
                  "minLength": 36,
                  "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                  "type": "string"
                }
              }
            },
            "leaf": 0,
            "path": "/tape/backup",
            "text": "backup"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "info": {
                      "GET": {
                        "description": "Get tape changer status",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Get tape changer status",
                          "properties": {
                            "cache": {
                              "default": true,
                              "description": "Use cached value.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "name": {
                              "description": "Tape Changer Identifier.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "tape",
                              "device",
                              "{name}"
                            ],
                            "privs": [
                              "Tape.Audit"
                            ]
                          }
                        },
                        "returns": {
                          "description": "A status entry for each drive and slot.",
                          "items": {
                            "additionalProperties": false,
                            "description": "Mtx Status Entry",
                            "properties": {
                              "entry-id": {
                                "description": "The ID of the slot or drive",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "entry-kind": {
                                "description": "Mtx Entry Kind",
                                "enum": [
                                  "drive",
                                  "slot",
                                  "import-export"
                                ],
                                "type": "string"
                              },
                              "label-text": {
                                "description": "Media Label/Barcode.",
                                "maxLength": 32,
                                "minLength": 2,
                                "optional": 1,
                                "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                                "type": "string"
                              },
                              "loaded-slot": {
                                "description": "The slot the drive was loaded from",
                                "minimum": 0,
                                "optional": 1,
                                "type": "integer"
                              },
                              "state": {
                                "description": "The current state of the drive",
                                "optional": 1,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/tape/changer/{name}/status",
                    "text": "status"
                  },
                  {
                    "info": {
                      "POST": {
                        "description": "Transfers media from one slot to another",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Transfers media from one slot to another",
                          "properties": {
                            "from": {
                              "description": "Source slot number",
                              "minimum": 1,
                              "type": "integer"
                            },
                            "name": {
                              "description": "Tape Changer Identifier.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "to": {
                              "description": "Destination slot number",
                              "minimum": 1,
                              "type": "integer"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "tape",
                              "device",
                              "{name}"
                            ],
                            "privs": [
                              "Tape.Read"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/tape/changer/{name}/transfer",
                    "text": "transfer"
                  }
                ],
                "info": {
                  "GET": {
                    "description": "Directory index.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": true,
                      "description": "Directory index.",
                      "properties": {}
                    },
                    "permissions": {
                      "user": "all"
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 0,
                "path": "/tape/changer/{name}",
                "text": "{name}"
              }
            ],
            "info": {
              "GET": {
                "description": "List changers",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "List changers",
                  "properties": {}
                },
                "permissions": {
                  "description": "List configured tape changer filtered by Tape.Audit privileges",
                  "user": "all"
                },
                "returns": {
                  "description": "The list of configured changers with model information.",
                  "items": {
                    "additionalProperties": false,
                    "description": "Changer config with optional device identification attributes",
                    "properties": {
                      "eject-before-unload": {
                        "default": false,
                        "description": "if set to true, tapes are ejected manually before unloading",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "export-slots": {
                        "description": "A list of slot numbers, comma separated. Those slots are reserved for\nImport/Export, i.e. any media in those slots are considered to be\n'offline'.\n",
                        "format": {
                          "description": "Slot list.",
                          "items": {
                            "description": "Slot number",
                            "minimum": 1,
                            "type": "integer"
                          },
                          "type": "array"
                        },
                        "optional": 1,
                        "type": "string",
                        "typetext": "[<integer>, ...]"
                      },
                      "model": {
                        "description": "Model (autodetected)",
                        "optional": 1,
                        "type": "string"
                      },
                      "name": {
                        "description": "Tape Changer Identifier.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "path": {
                        "description": "Path to Linux generic SCSI device (e.g. '/dev/sg4')",
                        "type": "string"
                      },
                      "serial": {
                        "description": "Serial number (autodetected)",
                        "optional": 1,
                        "type": "string"
                      },
                      "vendor": {
                        "description": "Vendor (autodetected)",
                        "optional": 1,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "leaf": 0,
            "path": "/tape/changer",
            "text": "changer"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "info": {
                      "POST": {
                        "description": "Label media with barcodes from changer device",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Label media with barcodes from changer device",
                          "properties": {
                            "drive": {
                              "description": "Drive Identifier.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "pool": {
                              "description": "Media pool name.",
                              "maxLength": 32,
                              "minLength": 2,
                              "optional": 1,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "tape",
                              "device",
                              "{drive}"
                            ],
                            "privs": [
                              "Tape.Write"
                            ]
                          }
                        },
                        "returns": {
                          "description": "Unique Process/Task Identifier",
                          "minLength": 36,
                          "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                          "type": "string"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/tape/drive/{drive}/barcode-label-media",
                    "text": "barcode-label-media"
                  },
                  {
                    "info": {
                      "GET": {
                        "description": "Read Cartridge Memory (Medium auxiliary memory attributes)",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Read Cartridge Memory (Medium auxiliary memory attributes)",
                          "properties": {
                            "drive": {
                              "description": "Drive Identifier.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "tape",
                              "device",
                              "{drive}"
                            ],
                            "privs": [
                              "Tape.Audit"
                            ]
                          }
                        },
                        "returns": {
                          "description": "A List of medium auxiliary memory attributes.",
                          "items": {
                            "additionalProperties": false,
                            "description": "Medium auxiliary memory attributes (MAM)",
                            "properties": {
                              "id": {
                                "description": "Attribute id",
                                "maximum": 65535,
                                "minimum": 0,
                                "type": "integer"
                              },
                              "name": {
                                "description": "Attribute name",
                                "type": "string"
                              },
                              "value": {
                                "description": "Attribute value",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/tape/drive/{drive}/cartridge-memory",
                    "text": "cartridge-memory"
                  },
                  {
                    "info": {
                      "POST": {
                        "description": "Scan media and record content",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Scan media and record content",
                          "properties": {
                            "drive": {
                              "description": "Drive Identifier.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "force": {
                              "description": "Force overriding existing index.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "scan": {
                              "description": "Re-read the whole tape to reconstruct the catalog instead of restoring saved versions.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "verbose": {
                              "description": "Verbose mode - log all found chunks.",
                              "optional": 1,
                              "type": "boolean"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "tape",
                              "device",
                              "{drive}"
                            ],
                            "privs": [
                              "Tape.Read"
                            ]
                          }
                        },
                        "returns": {
                          "description": "Unique Process/Task Identifier",
                          "minLength": 36,
                          "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                          "type": "string"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/tape/drive/{drive}/catalog",
                    "text": "catalog"
                  },
                  {
                    "info": {
                      "PUT": {
                        "description": "Clean drive",
                        "method": "PUT",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Clean drive",
                          "properties": {
                            "drive": {
                              "description": "Drive Identifier.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "tape",
                              "device",
                              "{drive}"
                            ],
                            "privs": [
                              "Tape.Read"
                            ]
                          }
                        },
                        "returns": {
                          "description": "Unique Process/Task Identifier",
                          "minLength": 36,
                          "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                          "type": "string"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/tape/drive/{drive}/clean",
                    "text": "clean"
                  },
                  {
                    "info": {
                      "POST": {
                        "description": "Eject/Unload drive media",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Eject/Unload drive media",
                          "properties": {
                            "drive": {
                              "description": "Drive Identifier.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "tape",
                              "device",
                              "{drive}"
                            ],
                            "privs": [
                              "Tape.Read"
                            ]
                          }
                        },
                        "returns": {
                          "description": "Unique Process/Task Identifier",
                          "minLength": 36,
                          "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                          "type": "string"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/tape/drive/{drive}/eject-media",
                    "text": "eject-media"
                  },
                  {
                    "info": {
                      "PUT": {
                        "description": "Export media with specified label",
                        "method": "PUT",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Export media with specified label",
                          "properties": {
                            "drive": {
                              "description": "Drive Identifier.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "label-text": {
                              "description": "Media Label/Barcode.",
                              "maxLength": 32,
                              "minLength": 2,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "tape",
                              "device",
                              "{drive}"
                            ],
                            "privs": [
                              "Tape.Read"
                            ]
                          }
                        },
                        "returns": {
                          "description": "The import-export slot number the media was transferred to.",
                          "minimum": 1,
                          "type": "integer"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/tape/drive/{drive}/export-media",
                    "text": "export-media"
                  },
                  {
                    "info": {
                      "POST": {
                        "description": "Format media. Check for label-text if given (cancels if wrong media).",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Format media. Check for label-text if given (cancels if wrong media).",
                          "properties": {
                            "drive": {
                              "description": "Drive Identifier.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "fast": {
                              "default": true,
                              "description": "Use fast erase.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "label-text": {
                              "description": "Media Label/Barcode.",
                              "maxLength": 32,
                              "minLength": 2,
                              "optional": 1,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "tape",
                              "device",
                              "{drive}"
                            ],
                            "privs": [
                              "Tape.Write"
                            ]
                          }
                        },
                        "returns": {
                          "description": "Unique Process/Task Identifier",
                          "minLength": 36,
                          "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                          "type": "string"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/tape/drive/{drive}/format-media",
                    "text": "format-media"
                  },
                  {
                    "info": {
                      "GET": {
                        "description": "List known media labels (Changer Inventory)\n\nNote: Only useful for drives with associated changer device.\n\nThis method queries the changer to get a list of media labels.\n\nNote: This updates the media online status.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "List known media labels (Changer Inventory)\n\nNote: Only useful for drives with associated changer device.\n\nThis method queries the changer to get a list of media labels.\n\nNote: This updates the media online status.",
                          "properties": {
                            "drive": {
                              "description": "Drive Identifier.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "tape",
                              "device",
                              "{drive}"
                            ],
                            "privs": [
                              "Tape.Read"
                            ]
                          }
                        },
                        "returns": {
                          "description": "The list of media labels with associated media Uuid (if any).",
                          "items": {
                            "additionalProperties": false,
                            "description": "Label with optional Uuid",
                            "properties": {
                              "label-text": {
                                "description": "Changer label text (or Barcode)",
                                "type": "string"
                              },
                              "uuid": {
                                "description": "Media Uuid.",
                                "optional": 1,
                                "pattern": "/^[0-9a-f]{8}(?:-[0-9a-f]{4}){3}-[0-9a-f]{12}$/",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "PUT": {
                        "description": "Update inventory\n\nNote: Only useful for drives with associated changer device.\n\nThis method queries the changer to get a list of media labels. It\nthen loads any unknown media into the drive, reads the label, and\nstore the result to the media database.\n\nIf `catalog` is true, also tries to restore the catalog from tape.\n\nNote: This updates the media online status.",
                        "method": "PUT",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Update inventory\n\nNote: Only useful for drives with associated changer device.\n\nThis method queries the changer to get a list of media labels. It\nthen loads any unknown media into the drive, reads the label, and\nstore the result to the media database.\n\nIf `catalog` is true, also tries to restore the catalog from tape.\n\nNote: This updates the media online status.",
                          "properties": {
                            "catalog": {
                              "default": false,
                              "description": "Restore the catalog from tape.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "drive": {
                              "description": "Drive Identifier.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "read-all-labels": {
                              "default": false,
                              "description": "Load all tapes and try read labels (even if already inventoried)",
                              "optional": 1,
                              "type": "boolean"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "tape",
                              "device",
                              "{drive}"
                            ],
                            "privs": [
                              "Tape.Read"
                            ]
                          }
                        },
                        "returns": {
                          "description": "Unique Process/Task Identifier",
                          "minLength": 36,
                          "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                          "type": "string"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/tape/drive/{drive}/inventory",
                    "text": "inventory"
                  },
                  {
                    "info": {
                      "POST": {
                        "description": "Label media\n\nWrite a new media label to the media in 'drive'. The media is\nassigned to the specified 'pool', or else to the free media pool.\n\nNote: The media need to be empty (you may want to format it first).",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Label media\n\nWrite a new media label to the media in 'drive'. The media is\nassigned to the specified 'pool', or else to the free media pool.\n\nNote: The media need to be empty (you may want to format it first).",
                          "properties": {
                            "drive": {
                              "description": "Drive Identifier.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "label-text": {
                              "description": "Media Label/Barcode.",
                              "maxLength": 32,
                              "minLength": 2,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "pool": {
                              "description": "Media pool name.",
                              "maxLength": 32,
                              "minLength": 2,
                              "optional": 1,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "tape",
                              "device",
                              "{drive}"
                            ],
                            "privs": [
                              "Tape.Write"
                            ]
                          }
                        },
                        "returns": {
                          "description": "Unique Process/Task Identifier",
                          "minLength": 36,
                          "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                          "type": "string"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/tape/drive/{drive}/label-media",
                    "text": "label-media"
                  },
                  {
                    "info": {
                      "POST": {
                        "description": "Load media with specified label\n\nIssue a media load request to the associated changer device.",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Load media with specified label\n\nIssue a media load request to the associated changer device.",
                          "properties": {
                            "drive": {
                              "description": "Drive Identifier.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "label-text": {
                              "description": "Media Label/Barcode.",
                              "maxLength": 32,
                              "minLength": 2,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "tape",
                              "device",
                              "{drive}"
                            ],
                            "privs": [
                              "Tape.Read"
                            ]
                          }
                        },
                        "returns": {
                          "description": "Unique Process/Task Identifier",
                          "minLength": 36,
                          "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                          "type": "string"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/tape/drive/{drive}/load-media",
                    "text": "load-media"
                  },
                  {
                    "info": {
                      "POST": {
                        "description": "Load media from the specified slot\n\nIssue a media load request to the associated changer device.",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Load media from the specified slot\n\nIssue a media load request to the associated changer device.",
                          "properties": {
                            "drive": {
                              "description": "Drive Identifier.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "source-slot": {
                              "description": "Source slot number.",
                              "minimum": 1,
                              "type": "integer"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "tape",
                              "device",
                              "{drive}"
                            ],
                            "privs": [
                              "Tape.Read"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/tape/drive/{drive}/load-slot",
                    "text": "load-slot"
                  },
                  {
                    "info": {
                      "GET": {
                        "description": "Read media label (optionally inventorize media)",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Read media label (optionally inventorize media)",
                          "properties": {
                            "drive": {
                              "description": "Drive Identifier.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "inventorize": {
                              "description": "Inventorize media",
                              "optional": 1,
                              "type": "boolean"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "tape",
                              "device",
                              "{drive}"
                            ],
                            "privs": [
                              "Tape.Read"
                            ]
                          }
                        },
                        "returns": {
                          "additionalProperties": false,
                          "description": "Media label info",
                          "properties": {
                            "ctime": {
                              "description": "Creation time stamp",
                              "type": "integer"
                            },
                            "encryption-key-fingerprint": {
                              "description": "Encryption key fingerprint",
                              "optional": 1,
                              "type": "string"
                            },
                            "label-text": {
                              "description": "Media label text (or Barcode)",
                              "type": "string"
                            },
                            "media-set-ctime": {
                              "description": "MediaSet Creation time stamp",
                              "optional": 1,
                              "type": "integer"
                            },
                            "media-set-uuid": {
                              "description": "MediaSet Uuid (We use the all-zero Uuid to reseve an empty media for a specific pool).",
                              "optional": 1,
                              "pattern": "/^[0-9a-f]{8}(?:-[0-9a-f]{4}){3}-[0-9a-f]{12}$/",
                              "type": "string"
                            },
                            "pool": {
                              "description": "MediaSet Pool",
                              "optional": 1,
                              "type": "string"
                            },
                            "seq-nr": {
                              "description": "MediaSet media sequence number",
                              "minimum": 0,
                              "optional": 1,
                              "type": "integer"
                            },
                            "uuid": {
                              "description": "Media Uuid.",
                              "pattern": "/^[0-9a-f]{8}(?:-[0-9a-f]{4}){3}-[0-9a-f]{12}$/",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/tape/drive/{drive}/read-label",
                    "text": "read-label"
                  },
                  {
                    "info": {
                      "POST": {
                        "description": "Try to restore a tape encryption key",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Try to restore a tape encryption key",
                          "properties": {
                            "drive": {
                              "description": "Drive Identifier.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "password": {
                              "description": "The password the key was encrypted with.",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "tape",
                              "device",
                              "{drive}"
                            ],
                            "privs": [
                              "Tape.Read"
                            ]
                          }
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/tape/drive/{drive}/restore-key",
                    "text": "restore-key"
                  },
                  {
                    "info": {
                      "POST": {
                        "description": "Rewind tape",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Rewind tape",
                          "properties": {
                            "drive": {
                              "description": "Drive Identifier.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "tape",
                              "device",
                              "{drive}"
                            ],
                            "privs": [
                              "Tape.Read"
                            ]
                          }
                        },
                        "returns": {
                          "description": "Unique Process/Task Identifier",
                          "minLength": 36,
                          "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                          "type": "string"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/tape/drive/{drive}/rewind",
                    "text": "rewind"
                  },
                  {
                    "info": {
                      "GET": {
                        "description": "Get drive/media status",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Get drive/media status",
                          "properties": {
                            "drive": {
                              "description": "Drive Identifier.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "tape",
                              "device",
                              "{drive}"
                            ],
                            "privs": [
                              "Tape.Audit"
                            ]
                          }
                        },
                        "returns": {
                          "additionalProperties": false,
                          "description": "Drive/Media status for Lto SCSI drives.\n\nMedia related data is optional - only set if there is a medium\nloaded.",
                          "properties": {
                            "alert-flags": {
                              "description": "Tape Alert Flags",
                              "optional": 1,
                              "type": "string"
                            },
                            "block-number": {
                              "description": "Current block number",
                              "minimum": 0,
                              "optional": 1,
                              "type": "integer"
                            },
                            "blocksize": {
                              "description": "Block size (0 is variable size)",
                              "maximum": 4294967295,
                              "minimum": 0,
                              "type": "integer"
                            },
                            "buffer-mode": {
                              "description": "Drive buffer mode",
                              "maximum": 255,
                              "minimum": 0,
                              "type": "integer"
                            },
                            "bytes-read": {
                              "description": "Total Bytes Read in Medium Life",
                              "minimum": 0,
                              "optional": 1,
                              "type": "integer"
                            },
                            "bytes-written": {
                              "description": "Total Bytes Written in Medium Life",
                              "minimum": 0,
                              "optional": 1,
                              "type": "integer"
                            },
                            "compression": {
                              "description": "Compression enabled",
                              "type": "boolean"
                            },
                            "density": {
                              "description": "The density of a tape medium, derived from the LTO version.",
                              "enum": [
                                "Unknown",
                                "LTO1",
                                "LTO2",
                                "LTO3",
                                "LTO4",
                                "LTO5",
                                "LTO6",
                                "LTO7",
                                "LTO7M8",
                                "LTO8",
                                "LTO9"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "drive-activity": {
                              "description": "The DT Device Activity from DT Device Status LP page",
                              "enum": [
                                "no-activity",
                                "cleaning",
                                "loading",
                                "unloading",
                                "other",
                                "reading",
                                "writing",
                                "locating",
                                "rewinding",
                                "erasing",
                                "formatting",
                                "calibrating",
                                "other-d-t",
                                "microcode-update",
                                "reading-encrypted",
                                "writing-encrypted"
                              ],
                              "optional": 1,
                              "type": "string"
                            },
                            "file-number": {
                              "description": "Current file number",
                              "minimum": 0,
                              "optional": 1,
                              "type": "integer"
                            },
                            "manufactured": {
                              "description": "Medium Manufacture Date (epoch)",
                              "optional": 1,
                              "type": "integer"
                            },
                            "medium-passes": {
                              "description": "Count of the total number of times the medium has passed over\nthe head.",
                              "minimum": 0,
                              "optional": 1,
                              "type": "integer"
                            },
                            "medium-wearout": {
                              "description": "Estimated tape wearout factor (assuming max. 16000 end-to-end passes)",
                              "optional": 1,
                              "type": "number"
                            },
                            "product": {
                              "description": "Product",
                              "type": "string"
                            },
                            "revision": {
                              "description": "Revision",
                              "type": "string"
                            },
                            "vendor": {
                              "description": "Vendor",
                              "type": "string"
                            },
                            "volume-mounts": {
                              "description": "Number of mounts for the current volume (i.e., Thread Count)",
                              "minimum": 0,
                              "optional": 1,
                              "type": "integer"
                            },
                            "write-protect": {
                              "description": "Media is write protected",
                              "optional": 1,
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/tape/drive/{drive}/status",
                    "text": "status"
                  },
                  {
                    "info": {
                      "POST": {
                        "description": "Unload media via changer",
                        "method": "POST",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Unload media via changer",
                          "properties": {
                            "drive": {
                              "description": "Drive Identifier.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "target-slot": {
                              "description": "Target slot number. If omitted, defaults to the slot that the drive was loaded from.",
                              "minimum": 1,
                              "optional": 1,
                              "type": "integer"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "tape",
                              "device",
                              "{drive}"
                            ],
                            "privs": [
                              "Tape.Read"
                            ]
                          }
                        },
                        "returns": {
                          "description": "Unique Process/Task Identifier",
                          "minLength": 36,
                          "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                          "type": "string"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/tape/drive/{drive}/unload",
                    "text": "unload"
                  },
                  {
                    "info": {
                      "GET": {
                        "description": "Read Volume Statistics (SCSI log page 17h)",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": false,
                          "description": "Read Volume Statistics (SCSI log page 17h)",
                          "properties": {
                            "drive": {
                              "description": "Drive Identifier.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "check": {
                            "partial": false,
                            "path": [
                              "tape",
                              "device",
                              "{drive}"
                            ],
                            "privs": [
                              "Tape.Audit"
                            ]
                          }
                        },
                        "returns": {
                          "additionalProperties": false,
                          "description": "Volume statistics from SCSI log page 17h",
                          "properties": {
                            "beginning-of-medium-passes": {
                              "description": "Beginning of medium passes",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "last-load-read-compression-ratio": {
                              "description": "Last load read compression ratio",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "last-load-write-compression-ratio": {
                              "description": "Last load write compression ratio",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "last-mount-bytes-read": {
                              "description": "Last mount bytes read",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "last-mount-bytes-written": {
                              "description": "Last mount bytes written",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "last-mount-unrecovered-read-errors": {
                              "description": "Last mount unrecovered read errors",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "last-mount-unrecovered-write-errors": {
                              "description": "Last mount unrecovered write errors",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "lifetime-bytes-read": {
                              "description": "Lifetime bytes read",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "lifetime-bytes-written": {
                              "description": "Lifetime bytes written",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "medium-mount-time": {
                              "description": "Medium mount time",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "medium-ready-time": {
                              "description": "Medium ready time",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "middle-of-tape-passes": {
                              "description": "Middle of medium passes",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "serial": {
                              "description": "Volume serial number",
                              "type": "string"
                            },
                            "total-native-capacity": {
                              "description": "Total native capacity",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "total-used-native-capacity": {
                              "description": "Total used native capacity",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "volume-datasets-read": {
                              "description": "Total datasets read",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "volume-datasets-written": {
                              "description": "Total data sets written",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "volume-mounts": {
                              "description": "Volume mounts (thread count)",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "volume-recovered-read-errors": {
                              "description": "Total read retries",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "volume-recovered-write-data-errors": {
                              "description": "Write retries",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "volume-unrecovered-read-errors": {
                              "description": "Total unrecovered read errors",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "volume-unrecovered-write-data-errors": {
                              "description": "Total unrecovered write errors",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "volume-unrecovered-write-servo-errors": {
                              "description": "Total fatal suspended writes",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "volume-write-servo-errors": {
                              "description": "Total suspended writes",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "worm": {
                              "description": "Volume is WORM",
                              "type": "boolean"
                            },
                            "write-protect": {
                              "description": "Write protect",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "leaf": 1,
                    "path": "/tape/drive/{drive}/volume-statistics",
                    "text": "volume-statistics"
                  }
                ],
                "info": {
                  "GET": {
                    "description": "Directory index.",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": true,
                      "description": "Directory index.",
                      "properties": {}
                    },
                    "permissions": {
                      "user": "all"
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 0,
                "path": "/tape/drive/{drive}",
                "text": "{drive}"
              }
            ],
            "info": {
              "GET": {
                "description": "List drives",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "List drives",
                  "properties": {
                    "changer": {
                      "description": "Tape Changer Identifier.",
                      "maxLength": 32,
                      "minLength": 3,
                      "optional": 1,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "query-activity": {
                      "default": false,
                      "description": "If true, queries and returns the drive activity for each drive.",
                      "optional": 1,
                      "type": "boolean"
                    }
                  }
                },
                "permissions": {
                  "description": "List configured tape drives filtered by Tape.Audit privileges",
                  "user": "all"
                },
                "returns": {
                  "description": "The list of configured drives with model information.",
                  "items": {
                    "additionalProperties": false,
                    "description": "Drive list entry",
                    "properties": {
                      "activity": {
                        "description": "The DT Device Activity from DT Device Status LP page",
                        "enum": [
                          "no-activity",
                          "cleaning",
                          "loading",
                          "unloading",
                          "other",
                          "reading",
                          "writing",
                          "locating",
                          "rewinding",
                          "erasing",
                          "formatting",
                          "calibrating",
                          "other-d-t",
                          "microcode-update",
                          "reading-encrypted",
                          "writing-encrypted"
                        ],
                        "optional": 1,
                        "type": "string"
                      },
                      "changer": {
                        "description": "Tape Changer Identifier.",
                        "maxLength": 32,
                        "minLength": 3,
                        "optional": 1,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "changer-drivenum": {
                        "default": 0,
                        "description": "Associated changer drive number (requires option changer)",
                        "maximum": 255,
                        "minimum": 0,
                        "optional": 1,
                        "type": "integer"
                      },
                      "model": {
                        "description": "Model (autodetected)",
                        "optional": 1,
                        "type": "string"
                      },
                      "name": {
                        "description": "Drive Identifier.",
                        "maxLength": 32,
                        "minLength": 3,
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                        "type": "string"
                      },
                      "path": {
                        "description": "The path to a LTO SCSI-generic tape device (i.e. '/dev/sg0')",
                        "type": "string"
                      },
                      "serial": {
                        "description": "Serial number (autodetected)",
                        "optional": 1,
                        "type": "string"
                      },
                      "state": {
                        "description": "the state of the drive if locked",
                        "optional": 1,
                        "type": "string"
                      },
                      "vendor": {
                        "description": "Vendor (autodetected)",
                        "optional": 1,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "leaf": 0,
            "path": "/tape/drive",
            "text": "drive"
          },
          {
            "children": [
              {
                "info": {
                  "GET": {
                    "description": "List media content",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "List media content",
                      "properties": {
                        "backup-id": {
                          "description": "Backup ID.",
                          "optional": 1,
                          "pattern": "/^[A-Za-z0-9_][A-Za-z0-9._\\-]*$/",
                          "type": "string"
                        },
                        "backup-type": {
                          "description": "Backup types.",
                          "enum": [
                            "vm",
                            "ct",
                            "host"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "label-text": {
                          "description": "Media Label/Barcode.",
                          "maxLength": 32,
                          "minLength": 2,
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "media": {
                          "description": "Media Uuid.",
                          "optional": 1,
                          "pattern": "/^[0-9a-f]{8}(?:-[0-9a-f]{4}){3}-[0-9a-f]{12}$/",
                          "type": "string"
                        },
                        "media-set": {
                          "description": "MediaSet Uuid (We use the all-zero Uuid to reseve an empty media for a specific pool).",
                          "optional": 1,
                          "pattern": "/^[0-9a-f]{8}(?:-[0-9a-f]{4}){3}-[0-9a-f]{12}$/",
                          "type": "string"
                        },
                        "pool": {
                          "description": "Media pool name.",
                          "maxLength": 32,
                          "minLength": 2,
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "description": "List content filtered by Tape.Audit privilege on pool",
                      "user": "all"
                    },
                    "returns": {
                      "description": "Media content list.",
                      "items": {
                        "additionalProperties": false,
                        "description": "Media content list entry",
                        "properties": {
                          "backup-time": {
                            "description": "Snapshot creation time (epoch)",
                            "type": "integer"
                          },
                          "label-text": {
                            "description": "Media label text (or Barcode)",
                            "type": "string"
                          },
                          "media-set-ctime": {
                            "description": "MediaSet Creation time stamp",
                            "type": "integer"
                          },
                          "media-set-name": {
                            "description": "Media set name",
                            "type": "string"
                          },
                          "media-set-uuid": {
                            "description": "MediaSet Uuid (We use the all-zero Uuid to reseve an empty media for a specific pool).",
                            "pattern": "/^[0-9a-f]{8}(?:-[0-9a-f]{4}){3}-[0-9a-f]{12}$/",
                            "type": "string"
                          },
                          "pool": {
                            "description": "Media Pool",
                            "type": "string"
                          },
                          "seq-nr": {
                            "description": "Media set seq_nr",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "snapshot": {
                            "description": "Backup snapshot",
                            "type": "string"
                          },
                          "store": {
                            "description": "Datastore Name",
                            "type": "string"
                          },
                          "uuid": {
                            "description": "Media Uuid.",
                            "pattern": "/^[0-9a-f]{8}(?:-[0-9a-f]{4}){3}-[0-9a-f]{12}$/",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  }
                },
                "leaf": 1,
                "path": "/tape/media/content",
                "text": "content"
              },
              {
                "info": {
                  "GET": {
                    "description": "Destroy media (completely remove from database)",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Destroy media (completely remove from database)",
                      "properties": {
                        "force": {
                          "description": "Force removal (even if media is used in a media set).",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "label-text": {
                          "description": "Media Label/Barcode.",
                          "maxLength": 32,
                          "minLength": 2,
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "uuid": {
                          "description": "Media Uuid.",
                          "optional": 1,
                          "pattern": "/^[0-9a-f]{8}(?:-[0-9a-f]{4}){3}-[0-9a-f]{12}$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "tape"
                        ],
                        "privs": [
                          "Tape.Write"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 1,
                "path": "/tape/media/destroy",
                "text": "destroy"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "info": {
                          "GET": {
                            "description": "Get current media status",
                            "method": "GET",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Get current media status",
                              "properties": {
                                "uuid": {
                                  "description": "Media Uuid.",
                                  "pattern": "/^[0-9a-f]{8}(?:-[0-9a-f]{4}){3}-[0-9a-f]{12}$/",
                                  "type": "string"
                                }
                              }
                            },
                            "returns": {
                              "type": "null"
                            }
                          },
                          "POST": {
                            "description": "Update media status (None, 'full', 'damaged' or 'retired')\n\nIt is not allowed to set status to 'writable' or 'unknown' (those\nare internally managed states).",
                            "method": "POST",
                            "parameters": {
                              "additionalProperties": false,
                              "description": "Update media status (None, 'full', 'damaged' or 'retired')\n\nIt is not allowed to set status to 'writable' or 'unknown' (those\nare internally managed states).",
                              "properties": {
                                "status": {
                                  "description": "Media status\nMedia Status",
                                  "enum": [
                                    "writable",
                                    "full",
                                    "unknown",
                                    "damaged",
                                    "retired"
                                  ],
                                  "optional": 1,
                                  "type": "string"
                                },
                                "uuid": {
                                  "description": "Media Uuid.",
                                  "pattern": "/^[0-9a-f]{8}(?:-[0-9a-f]{4}){3}-[0-9a-f]{12}$/",
                                  "type": "string"
                                }
                              }
                            },
                            "permissions": {
                              "check": {
                                "partial": false,
                                "path": [
                                  "tape"
                                ],
                                "privs": [
                                  "Tape.Modify"
                                ]
                              }
                            },
                            "returns": {
                              "type": "null"
                            }
                          }
                        },
                        "leaf": 1,
                        "path": "/tape/media/list/{uuid}/status",
                        "text": "status"
                      }
                    ],
                    "info": {
                      "GET": {
                        "description": "Directory index.",
                        "method": "GET",
                        "parameters": {
                          "additionalProperties": true,
                          "description": "Directory index.",
                          "properties": {}
                        },
                        "permissions": {
                          "user": "all"
                        },
                        "returns": {
                          "type": "null"
                        }
                      }
                    },
                    "leaf": 0,
                    "path": "/tape/media/list/{uuid}",
                    "text": "{uuid}"
                  }
                ],
                "info": {
                  "GET": {
                    "description": "List pool media",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "List pool media",
                      "properties": {
                        "pool": {
                          "description": "Media pool name.",
                          "maxLength": 32,
                          "minLength": 2,
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "update-status": {
                          "default": true,
                          "description": "Try to update tape library status (check what tapes are online).",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "update-status-changer": {
                          "description": "Tape Changer Identifier.",
                          "maxLength": 32,
                          "minLength": 3,
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "description": "List of registered backup media filtered by Tape.Audit privileges on pool",
                      "user": "all"
                    },
                    "returns": {
                      "description": "List of registered backup media.",
                      "items": {
                        "additionalProperties": false,
                        "description": "Media list entry",
                        "properties": {
                          "bytes-used": {
                            "description": "Bytes currently used",
                            "minimum": 0,
                            "optional": 1,
                            "type": "integer"
                          },
                          "catalog": {
                            "description": "Catalog status OK",
                            "type": "boolean"
                          },
                          "ctime": {
                            "description": "Creation time stamp",
                            "type": "integer"
                          },
                          "expired": {
                            "description": "Expired flag",
                            "type": "boolean"
                          },
                          "label-text": {
                            "description": "Media label text (or Barcode)",
                            "type": "string"
                          },
                          "location": {
                            "description": "Media location (e.g. 'offline', 'online-<changer_name>', 'vault-<vault_name>')",
                            "type": "string"
                          },
                          "media-set-ctime": {
                            "description": "MediaSet creation time stamp",
                            "optional": 1,
                            "type": "integer"
                          },
                          "media-set-name": {
                            "description": "Media set name",
                            "optional": 1,
                            "type": "string"
                          },
                          "media-set-uuid": {
                            "description": "MediaSet Uuid (We use the all-zero Uuid to reseve an empty media for a specific pool).",
                            "optional": 1,
                            "pattern": "/^[0-9a-f]{8}(?:-[0-9a-f]{4}){3}-[0-9a-f]{12}$/",
                            "type": "string"
                          },
                          "pool": {
                            "description": "Media Pool",
                            "optional": 1,
                            "type": "string"
                          },
                          "seq-nr": {
                            "description": "Media set seq_nr",
                            "minimum": 0,
                            "optional": 1,
                            "type": "integer"
                          },
                          "status": {
                            "description": "Media status\nMedia Status",
                            "enum": [
                              "writable",
                              "full",
                              "unknown",
                              "damaged",
                              "retired"
                            ],
                            "type": "string"
                          },
                          "uuid": {
                            "description": "Media Uuid.",
                            "pattern": "/^[0-9a-f]{8}(?:-[0-9a-f]{4}){3}-[0-9a-f]{12}$/",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  }
                },
                "leaf": 0,
                "path": "/tape/media/list",
                "text": "list"
              },
              {
                "info": {
                  "GET": {
                    "description": "List Media sets",
                    "method": "GET",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "List Media sets",
                      "properties": {}
                    },
                    "permissions": {
                      "description": "List of media sets filtered by Tape.Audit privileges on pool",
                      "user": "all"
                    },
                    "returns": {
                      "description": "List of media sets.",
                      "items": {
                        "additionalProperties": false,
                        "description": "Media Set list entry",
                        "properties": {
                          "media-set-ctime": {
                            "description": "MediaSet creation time stamp",
                            "type": "integer"
                          },
                          "media-set-name": {
                            "description": "Media set name",
                            "type": "string"
                          },
                          "media-set-uuid": {
                            "description": "MediaSet Uuid (We use the all-zero Uuid to reseve an empty media for a specific pool).",
                            "pattern": "/^[0-9a-f]{8}(?:-[0-9a-f]{4}){3}-[0-9a-f]{12}$/",
                            "type": "string"
                          },
                          "pool": {
                            "description": "Media Pool",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  }
                },
                "leaf": 1,
                "path": "/tape/media/media-sets",
                "text": "media-sets"
              },
              {
                "info": {
                  "POST": {
                    "description": "Change Tape location to vault (if given), or offline.",
                    "method": "POST",
                    "parameters": {
                      "additionalProperties": false,
                      "description": "Change Tape location to vault (if given), or offline.",
                      "properties": {
                        "label-text": {
                          "description": "Media Label/Barcode.",
                          "maxLength": 32,
                          "minLength": 2,
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        },
                        "uuid": {
                          "description": "Media Uuid.",
                          "optional": 1,
                          "pattern": "/^[0-9a-f]{8}(?:-[0-9a-f]{4}){3}-[0-9a-f]{12}$/",
                          "type": "string"
                        },
                        "vault-name": {
                          "description": "Vault name.",
                          "maxLength": 32,
                          "minLength": 3,
                          "optional": 1,
                          "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string"
                        }
                      }
                    },
                    "permissions": {
                      "check": {
                        "partial": false,
                        "path": [
                          "tape"
                        ],
                        "privs": [
                          "Tape.Modify"
                        ]
                      }
                    },
                    "returns": {
                      "type": "null"
                    }
                  }
                },
                "leaf": 1,
                "path": "/tape/media/move",
                "text": "move"
              }
            ],
            "info": {
              "GET": {
                "description": "Directory index.",
                "method": "GET",
                "parameters": {
                  "additionalProperties": true,
                  "description": "Directory index.",
                  "properties": {}
                },
                "permissions": {
                  "user": "all"
                },
                "returns": {
                  "type": "null"
                }
              }
            },
            "leaf": 0,
            "path": "/tape/media",
            "text": "media"
          },
          {
            "info": {
              "POST": {
                "description": "Restore data from media-set. Namespaces will be automatically created if necessary.",
                "method": "POST",
                "parameters": {
                  "additionalProperties": false,
                  "description": "Restore data from media-set. Namespaces will be automatically created if necessary.",
                  "properties": {
                    "drive": {
                      "description": "Drive Identifier.",
                      "maxLength": 32,
                      "minLength": 3,
                      "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "media-set": {
                      "description": "Media set UUID.",
                      "type": "string"
                    },
                    "namespaces": {
                      "description": "List of namespace to restore.",
                      "items": {
                        "description": "A namespace mapping",
                        "format": {
                          "additionalProperties": false,
                          "description": "A namespace mapping",
                          "properties": {
                            "max-depth": {
                              "default": 7,
                              "description": "How many levels of namespaces should be operated on (0 == no recursion)",
                              "maximum": 7,
                              "minimum": 0,
                              "optional": 1,
                              "type": "integer"
                            },
                            "source": {
                              "description": "Namespace.",
                              "maxLength": 256,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                              "type": "string"
                            },
                            "store": {
                              "description": "Datastore name.",
                              "maxLength": 32,
                              "minLength": 3,
                              "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                              "type": "string"
                            },
                            "target": {
                              "description": "Namespace.",
                              "maxLength": 256,
                              "optional": 1,
                              "pattern": "/^(?:(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))?$/",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "string",
                        "typetext": "[store=<string> [,max-depth=<integer>] [,source=<string>] [,target=<string>]]"
                      },
                      "optional": 1,
                      "type": "array"
                    },
                    "notification-mode": {
                      "default": "notification-system",
                      "description": "Configure how notifications for this datastore should be sent.\n`legacy-sendmail` sends email notifications to the user configured\nin `notify-user` via the system's `sendmail` executable.\n`notification-system` emits matchable notification events to the\nnotification system.",
                      "enum": [
                        "legacy-sendmail",
                        "notification-system"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "notify-user": {
                      "description": "User ID",
                      "maxLength": 64,
                      "minLength": 3,
                      "optional": 1,
                      "pattern": "/^(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                      "type": "string"
                    },
                    "owner": {
                      "description": "Authentication ID",
                      "maxLength": 64,
                      "minLength": 3,
                      "optional": 1,
                      "pattern": "/^(?:(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)|(?:[^\\s:/[:cntrl:]]+)@(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)!(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*))$/",
                      "type": "string"
                    },
                    "snapshots": {
                      "description": "List of snapshots.",
                      "items": {
                        "description": "A snapshot in the format: 'store:[ns/namespace/...]type/id/time",
                        "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*):(?:(?:ns/(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/){0,7}ns/(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)/)?((?:host|vm|ct))/([A-Za-z0-9_][A-Za-z0-9._\\-]*)/([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z)$/",
                        "type": "string",
                        "typetext": "store:[ns/namespace/...]type/id/time"
                      },
                      "optional": 1,
                      "type": "array"
                    },
                    "store": {
                      "description": "A list of Datastore mappings (or single datastore), comma separated. For example 'a=b,e' maps the source datastore 'a' to target 'b and all other sources to the default 'e'. If no default is given, only the specified sources are mapped.",
                      "format": {
                        "description": "Datastore mapping list.",
                        "items": {
                          "description": "Datastore mapping.",
                          "maxLength": 65,
                          "minLength": 3,
                          "pattern": "/^(?:(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)=)?(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                          "type": "string",
                          "typetext": "(<source>=)?<target>"
                        },
                        "type": "array"
                      },
                      "type": "string",
                      "typetext": "[(<source>=)?<target>, ...]"
                    }
                  }
                },
                "permissions": {
                  "description": "The user needs Tape.Read privilege on /tape/pool/{pool} and /tape/drive/{drive}, Datastore.Backup privilege on /datastore/{store}/[{namespace}], Datastore.Modify privileges to create namespaces (if they don't exist).",
                  "user": "all"
                },
                "returns": {
                  "description": "Unique Process/Task Identifier",
                  "minLength": 36,
                  "pattern": "/^UPID:(?P<node>[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?):(?P<pid>[0-9A-Fa-f]{8}):(?P<pstart>[0-9A-Fa-f]{8,9}):(?P<task_id>[0-9A-Fa-f]{8,16}):(?P<starttime>[0-9A-Fa-f]{8}):(?P<wtype>[^:\\s]+):(?P<wid>[^:\\s]*):(?P<authid>[^:\\s]+):$/",
                  "type": "string"
                }
              }
            },
            "leaf": 1,
            "path": "/tape/restore",
            "text": "restore"
          },
          {
            "info": {
              "GET": {
                "description": "Scan for SCSI tape changers",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "Scan for SCSI tape changers",
                  "properties": {}
                },
                "returns": {
                  "description": "The list of autodetected tape changers.",
                  "items": {
                    "additionalProperties": false,
                    "description": "Tape device information",
                    "properties": {
                      "kind": {
                        "description": "Kind of device",
                        "enum": [
                          "changer",
                          "tape"
                        ],
                        "type": "string"
                      },
                      "major": {
                        "description": "Device major number",
                        "maximum": 4294967295,
                        "minimum": 0,
                        "type": "integer"
                      },
                      "minor": {
                        "description": "Device minor number",
                        "maximum": 4294967295,
                        "minimum": 0,
                        "type": "integer"
                      },
                      "model": {
                        "description": "Model (autodetected)",
                        "type": "string"
                      },
                      "path": {
                        "description": "Path to the linux device node",
                        "type": "string"
                      },
                      "serial": {
                        "description": "Serial number (autodetected)",
                        "type": "string"
                      },
                      "vendor": {
                        "description": "Vendor (autodetected)",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "leaf": 1,
            "path": "/tape/scan-changers",
            "text": "scan-changers"
          },
          {
            "info": {
              "GET": {
                "description": "Scan tape drives",
                "method": "GET",
                "parameters": {
                  "additionalProperties": false,
                  "description": "Scan tape drives",
                  "properties": {}
                },
                "returns": {
                  "description": "The list of autodetected tape drives.",
                  "items": {
                    "additionalProperties": false,
                    "description": "Tape device information",
                    "properties": {
                      "kind": {
                        "description": "Kind of device",
                        "enum": [
                          "changer",
                          "tape"
                        ],
                        "type": "string"
                      },
                      "major": {
                        "description": "Device major number",
                        "maximum": 4294967295,
                        "minimum": 0,
                        "type": "integer"
                      },
                      "minor": {
                        "description": "Device minor number",
                        "maximum": 4294967295,
                        "minimum": 0,
                        "type": "integer"
                      },
                      "model": {
                        "description": "Model (autodetected)",
                        "type": "string"
                      },
                      "path": {
                        "description": "Path to the linux device node",
                        "type": "string"
                      },
                      "serial": {
                        "description": "Serial number (autodetected)",
                        "type": "string"
                      },
                      "vendor": {
                        "description": "Vendor (autodetected)",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "leaf": 1,
            "path": "/tape/scan-drives",
            "text": "scan-drives"
          }
        ],
        "info": {
          "GET": {
            "description": "Directory index.",
            "method": "GET",
            "parameters": {
              "additionalProperties": true,
              "description": "Directory index.",
              "properties": {}
            },
            "permissions": {
              "user": "all"
            },
            "returns": {
              "type": "null"
            }
          }
        },
        "leaf": 0,
        "path": "/tape",
        "text": "tape"
      },
      {
        "info": {
          "GET": {
            "description": "Proxmox Backup Server API version.",
            "method": "GET",
            "parameters": {
              "additionalProperties": false,
              "description": "Proxmox Backup Server API version.",
              "properties": {}
            },
            "permissions": {
              "user": "all"
            },
            "returns": {
              "additionalProperties": false,
              "description": "Api version information",
              "properties": {
                "release": {
                  "description": "Version release",
                  "type": "string"
                },
                "repoid": {
                  "description": "Version repository id",
                  "type": "string"
                },
                "version": {
                  "description": "Version 'major.minor'",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "leaf": 1,
        "path": "/version",
        "text": "version"
      }
    ],
    "expanded": true,
    "info": {
      "GET": {
        "description": "Directory index.",
        "method": "GET",
        "parameters": {
          "additionalProperties": true,
          "description": "Directory index.",
          "properties": {}
        },
        "permissions": {
          "user": "all"
        },
        "returns": {
          "type": "null"
        }
      }
    },
    "leaf": 0,
    "path": "/",
    "text": "&#x200b;Management API (HTTP)"
  },
  {
    "children": [
      {
        "info": {
          "POST": {
            "description": "Upload binary blob file.",
            "method": "UPLOAD",
            "parameters": {
              "additionalProperties": false,
              "description": "Upload binary blob file.",
              "properties": {
                "encoded-size": {
                  "description": "Encoded blob size.",
                  "maximum": 16777260,
                  "minimum": 12,
                  "type": "integer"
                },
                "file-name": {
                  "description": "Backup archive name.",
                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                  "type": "string"
                }
              }
            },
            "returns": {
              "type": "null"
            }
          }
        },
        "leaf": 1,
        "path": "/backup/_upgrade_/blob",
        "text": "blob"
      },
      {
        "info": {
          "POST": {
            "description": "Upload a new chunk.",
            "method": "UPLOAD",
            "parameters": {
              "additionalProperties": false,
              "description": "Upload a new chunk.",
              "properties": {
                "digest": {
                  "description": "Chunk digest (SHA256).",
                  "pattern": "/^[a-f0-9]{64}$/",
                  "type": "string"
                },
                "encoded-size": {
                  "description": "Encoded chunk size.",
                  "maximum": 16777260,
                  "minimum": 13,
                  "type": "integer"
                },
                "size": {
                  "description": "Chunk size.",
                  "maximum": 16777216,
                  "minimum": 1,
                  "type": "integer"
                },
                "wid": {
                  "description": "Dynamic writer ID.",
                  "maximum": 256,
                  "minimum": 1,
                  "type": "integer"
                }
              }
            },
            "returns": {
              "type": "null"
            }
          }
        },
        "leaf": 1,
        "path": "/backup/_upgrade_/dynamic_chunk",
        "text": "dynamic_chunk"
      },
      {
        "info": {
          "POST": {
            "description": "Close dynamic index writer.",
            "method": "POST",
            "parameters": {
              "additionalProperties": false,
              "description": "Close dynamic index writer.",
              "properties": {
                "chunk-count": {
                  "description": "Chunk count. This is used to verify that the server got all chunks.",
                  "minimum": 1,
                  "type": "integer"
                },
                "csum": {
                  "description": "Digest list checksum.",
                  "type": "string"
                },
                "size": {
                  "description": "File size. This is used to verify that the server got all data.",
                  "minimum": 1,
                  "type": "integer"
                },
                "wid": {
                  "description": "Dynamic writer ID.",
                  "maximum": 256,
                  "minimum": 1,
                  "type": "integer"
                }
              }
            },
            "returns": {
              "type": "null"
            }
          }
        },
        "leaf": 1,
        "path": "/backup/_upgrade_/dynamic_close",
        "text": "dynamic_close"
      },
      {
        "info": {
          "POST": {
            "description": "Create dynamic chunk index file.",
            "method": "POST",
            "parameters": {
              "additionalProperties": false,
              "description": "Create dynamic chunk index file.",
              "properties": {
                "archive-name": {
                  "description": "Backup archive name.",
                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                  "type": "string"
                }
              }
            },
            "returns": {
              "type": "null"
            }
          },
          "PUT": {
            "description": "Append chunk to dynamic index writer.",
            "method": "PUT",
            "parameters": {
              "additionalProperties": false,
              "description": "Append chunk to dynamic index writer.",
              "properties": {
                "digest-list": {
                  "description": "Chunk digest list.",
                  "items": {
                    "description": "Chunk digest (SHA256).",
                    "pattern": "/^[a-f0-9]{64}$/",
                    "type": "string"
                  },
                  "type": "array"
                },
                "offset-list": {
                  "description": "Chunk offset list.",
                  "items": {
                    "description": "Corresponding chunk offsets.",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "type": "array"
                },
                "wid": {
                  "description": "Dynamic writer ID.",
                  "maximum": 256,
                  "minimum": 1,
                  "type": "integer"
                }
              }
            },
            "returns": {
              "type": "null"
            }
          }
        },
        "leaf": 1,
        "path": "/backup/_upgrade_/dynamic_index",
        "text": "dynamic_index"
      },
      {
        "info": {
          "POST": {
            "description": "Mark backup as finished.",
            "method": "POST",
            "parameters": {
              "additionalProperties": false,
              "description": "Mark backup as finished.",
              "properties": {}
            },
            "returns": {
              "type": "null"
            }
          }
        },
        "leaf": 1,
        "path": "/backup/_upgrade_/finish",
        "text": "finish"
      },
      {
        "info": {
          "POST": {
            "description": "Upload a new chunk.",
            "method": "UPLOAD",
            "parameters": {
              "additionalProperties": false,
              "description": "Upload a new chunk.",
              "properties": {
                "digest": {
                  "description": "Chunk digest (SHA256).",
                  "pattern": "/^[a-f0-9]{64}$/",
                  "type": "string"
                },
                "encoded-size": {
                  "description": "Encoded chunk size.",
                  "maximum": 16777260,
                  "minimum": 13,
                  "type": "integer"
                },
                "size": {
                  "description": "Chunk size.",
                  "maximum": 16777216,
                  "minimum": 1,
                  "type": "integer"
                },
                "wid": {
                  "description": "Fixed writer ID.",
                  "maximum": 256,
                  "minimum": 1,
                  "type": "integer"
                }
              }
            },
            "returns": {
              "type": "null"
            }
          }
        },
        "leaf": 1,
        "path": "/backup/_upgrade_/fixed_chunk",
        "text": "fixed_chunk"
      },
      {
        "info": {
          "POST": {
            "description": "Close fixed index writer.",
            "method": "POST",
            "parameters": {
              "additionalProperties": false,
              "description": "Close fixed index writer.",
              "properties": {
                "chunk-count": {
                  "description": "Chunk count. This is used to verify that the server got all chunks. Ignored for incremental backups.",
                  "minimum": 0,
                  "type": "integer"
                },
                "csum": {
                  "description": "Digest list checksum.",
                  "type": "string"
                },
                "size": {
                  "description": "File size. This is used to verify that the server got all data. Ignored for incremental backups.",
                  "minimum": 0,
                  "type": "integer"
                },
                "wid": {
                  "description": "Fixed writer ID.",
                  "maximum": 256,
                  "minimum": 1,
                  "type": "integer"
                }
              }
            },
            "returns": {
              "type": "null"
            }
          }
        },
        "leaf": 1,
        "path": "/backup/_upgrade_/fixed_close",
        "text": "fixed_close"
      },
      {
        "info": {
          "POST": {
            "description": "Create fixed chunk index file.",
            "method": "POST",
            "parameters": {
              "additionalProperties": false,
              "description": "Create fixed chunk index file.",
              "properties": {
                "archive-name": {
                  "description": "Backup archive name.",
                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                  "type": "string"
                },
                "reuse-csum": {
                  "description": "If set, compare last backup's csum and reuse index for incremental backup if it matches.",
                  "optional": 1,
                  "type": "string"
                },
                "size": {
                  "description": "File size.",
                  "minimum": 1,
                  "type": "integer"
                }
              }
            },
            "returns": {
              "type": "null"
            }
          },
          "PUT": {
            "description": "Append chunk to fixed index writer.",
            "method": "PUT",
            "parameters": {
              "additionalProperties": false,
              "description": "Append chunk to fixed index writer.",
              "properties": {
                "digest-list": {
                  "description": "Chunk digest list.",
                  "items": {
                    "description": "Chunk digest (SHA256).",
                    "pattern": "/^[a-f0-9]{64}$/",
                    "type": "string"
                  },
                  "type": "array"
                },
                "offset-list": {
                  "description": "Chunk offset list.",
                  "items": {
                    "description": "Corresponding chunk offsets.",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "type": "array"
                },
                "wid": {
                  "description": "Fixed writer ID.",
                  "maximum": 256,
                  "minimum": 1,
                  "type": "integer"
                }
              }
            },
            "returns": {
              "type": "null"
            }
          }
        },
        "leaf": 1,
        "path": "/backup/_upgrade_/fixed_index",
        "text": "fixed_index"
      },
      {
        "info": {
          "GET": {
            "description": "Download archive from previous backup.",
            "method": "DOWNLOAD",
            "parameters": {
              "additionalProperties": false,
              "description": "Download archive from previous backup.",
              "properties": {
                "archive-name": {
                  "description": "Backup archive name.",
                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                  "type": "string"
                }
              }
            },
            "returns": {
              "type": "null"
            }
          }
        },
        "leaf": 1,
        "path": "/backup/_upgrade_/previous",
        "text": "previous"
      },
      {
        "info": {
          "GET": {
            "description": "Get previous backup time.",
            "method": "GET",
            "parameters": {
              "additionalProperties": false,
              "description": "Get previous backup time.",
              "properties": {}
            },
            "returns": {
              "type": "null"
            }
          }
        },
        "leaf": 1,
        "path": "/backup/_upgrade_/previous_backup_time",
        "text": "previous_backup_time"
      },
      {
        "info": {
          "POST": {
            "description": "Test upload speed.",
            "method": "UPLOAD",
            "parameters": {
              "additionalProperties": false,
              "description": "Test upload speed.",
              "properties": {}
            },
            "returns": {
              "type": "null"
            }
          }
        },
        "leaf": 1,
        "path": "/backup/_upgrade_/speedtest",
        "text": "speedtest"
      }
    ],
    "info": {
      "GET": {
        "description": "Directory index.",
        "method": "GET",
        "parameters": {
          "additionalProperties": true,
          "description": "Directory index.",
          "properties": {}
        },
        "permissions": {
          "user": "all"
        },
        "returns": {
          "type": "null"
        }
      }
    },
    "leaf": 0,
    "path": "/backup/_upgrade_",
    "text": "Backup API (HTTP/2)"
  },
  {
    "children": [
      {
        "info": {
          "GET": {
            "description": "Download specified chunk.",
            "method": "DOWNLOAD",
            "parameters": {
              "additionalProperties": false,
              "description": "Download specified chunk.",
              "properties": {
                "digest": {
                  "description": "Chunk digest (SHA256).",
                  "pattern": "/^[a-f0-9]{64}$/",
                  "type": "string"
                }
              }
            },
            "returns": {
              "type": "null"
            }
          }
        },
        "leaf": 1,
        "path": "/reader/_upgrade_/chunk",
        "text": "chunk"
      },
      {
        "info": {
          "GET": {
            "description": "Download specified file.",
            "method": "DOWNLOAD",
            "parameters": {
              "additionalProperties": false,
              "description": "Download specified file.",
              "properties": {
                "file-name": {
                  "description": "Backup archive name.",
                  "pattern": "/^(?:[A-Za-z0-9_][A-Za-z0-9._\\-]*)$/",
                  "type": "string"
                }
              }
            },
            "returns": {
              "type": "null"
            }
          }
        },
        "leaf": 1,
        "path": "/reader/_upgrade_/download",
        "text": "download"
      },
      {
        "info": {
          "GET": {
            "description": "Test 1M block download speed.",
            "method": "DOWNLOAD",
            "parameters": {
              "additionalProperties": false,
              "description": "Test 1M block download speed.",
              "properties": {}
            },
            "returns": {
              "type": "null"
            }
          }
        },
        "leaf": 1,
        "path": "/reader/_upgrade_/speedtest",
        "text": "speedtest"
      }
    ],
    "info": {
      "GET": {
        "description": "Directory index.",
        "method": "GET",
        "parameters": {
          "additionalProperties": true,
          "description": "Directory index.",
          "properties": {}
        },
        "permissions": {
          "user": "all"
        },
        "returns": {
          "type": "null"
        }
      }
    },
    "leaf": 0,
    "path": "/reader/_upgrade_",
    "text": "Restore API (HTTP/2)"
  }
];
/*global apiSchema*/

Ext.onReady(function () {
    Ext.define('pmx-param-schema', {
        extend: 'Ext.data.Model',
        fields: [
            'name',
            'type',
            'typetext',
            'description',
            'verbose_description',
            'enum',
            'minimum',
            'maximum',
            'minLength',
            'maxLength',
            'pattern',
            'title',
            'requires',
            'format',
            'default',
            'disallow',
            'extends',
            'links',
            'instance-types',
            {
                name: 'optional',
                type: 'boolean',
            },
        ],
    });

    let store = Ext.define('pmx-updated-treestore', {
        extend: 'Ext.data.TreeStore',
        model: Ext.define('pmx-api-doc', {
            extend: 'Ext.data.Model',
            fields: ['path', 'info', 'text'],
        }),
        proxy: {
            type: 'memory',
            data: apiSchema,
        },
        sorters: [
            {
                property: 'leaf',
                direction: 'ASC',
            },
            {
                property: 'text',
                direction: 'ASC',
            },
        ],
        filterer: 'bottomup',
        doFilter: function (node) {
            this.filterNodes(node, this.getFilters().getFilterFn(), true);
        },

        filterNodes: function (node, filterFn, parentVisible) {
            let me = this;

            let match =
                filterFn(node) && (parentVisible || (node.isRoot() && !me.getRootVisible()));

            if (node.childNodes && node.childNodes.length) {
                let bottomUpFiltering = me.filterer === 'bottomup';
                let childMatch;
                for (const child of node.childNodes) {
                    childMatch =
                        me.filterNodes(child, filterFn, match || bottomUpFiltering) || childMatch;
                }
                if (bottomUpFiltering) {
                    match = childMatch || match;
                }
            }

            node.set('visible', match, me._silentOptions);
            return match;
        },
    }).create();

    let render_description = function (value, metaData, record) {
        let pdef = record.data;

        value = pdef.verbose_description || value;

        // TODO: try to render asciidoc correctly

        metaData.style = 'white-space:pre-wrap;';

        return Ext.htmlEncode(value);
    };

    let render_type = function (value, metaData, record) {
        let pdef = record.data;

        return pdef.enum ? 'enum' : pdef.type || 'string';
    };

    const renderFormatString = function (obj) {
        if (!Ext.isObject(obj)) {
            return obj;
        }
        const mandatory = [];
        const optional = [];
        Object.entries(obj).forEach(function ([name, param]) {
            let list = param.optional ? optional : mandatory;
            let str = param.default_key ? `[${name}=]` : `${name}=`;
            if (param.alias) {
                return;
            } else if (param.enum) {
                str += `(${param.enum?.join(' | ')})`;
            } else {
                str += `<${param.format_description || param.pattern || param.type}>`;
            }
            list.push(str);
        });
        return mandatory.join(', ') + ' ' + optional.map((each) => `[,${each}]`).join(' ');
    };

    let render_simple_format = function (pdef, type_fallback) {
        if (pdef.typetext) {
            return pdef.typetext;
        }
        if (pdef.enum) {
            return pdef.enum.join(' | ');
        }
        if (pdef.format) {
            return renderFormatString(pdef.format);
        }
        if (pdef.pattern) {
            return pdef.pattern;
        }
        if (pdef.type === 'boolean') {
            return `<true|false>`;
        }
        if (type_fallback && pdef.type) {
            return `<${pdef.type}>`;
        }
        if (pdef.minimum || pdef.maximum) {
            return `${pdef.minimum || 'N'} - ${pdef.maximum || 'N'}`;
        }
        return '';
    };

    let render_format = function (value, metaData, record) {
        let pdef = record.data;

        metaData.style = 'white-space:normal;';

        if (pdef.type === 'array' && pdef.items) {
            let format = render_simple_format(pdef.items, true);
            return `[${Ext.htmlEncode(format)}, ...]`;
        }

        return Ext.htmlEncode(render_simple_format(pdef));
    };

    let real_path = function (path) {
        if (!path.match(/^[/]/)) {
            path = `/${path}`;
        }
        return path.replace(/^.*\/_upgrade_(\/)?/, '/');
    };

    let permission_text = function (permission) {
        let permhtml = '';

        if (permission.user) {
            if (!permission.description) {
                if (permission.user === 'world') {
                    permhtml += 'Accessible without any authentication.';
                } else if (permission.user === 'all') {
                    permhtml += 'Accessible by all authenticated users.';
                } else {
                    permhtml += `Only accessible by user "${permission.user}"`;
                }
            }
        } else if (permission.check) {
            permhtml += `<pre>Check: ${Ext.htmlEncode(JSON.stringify(permission.check))}</pre>`;
        } else if (permission.userParam) {
            permhtml += `<div>Check if user matches parameter '${permission.userParam}'`;
        } else if (permission.or) {
            permhtml += "<div>Or<div style='padding-left: 10px;'>";
            permhtml += permission.or.map((v) => permission_text(v)).join('');
            permhtml += '</div></div>';
        } else if (permission.and) {
            permhtml += "<div>And<div style='padding-left: 10px;'>";
            permhtml += permission.and.map((v) => permission_text(v)).join('');
            permhtml += '</div></div>';
        } else {
            permhtml += 'Unknown syntax!';
        }

        return permhtml;
    };

    let render_docu = function (data) {
        let md = data.info;

        let items = [];

        Ext.Array.each(['GET', 'POST', 'PUT', 'DELETE'], function (method) {
            let info = md[method];
            if (info) {
                let endpoint = real_path(data.path);
                let usage = `<table><tr><td>HTTP:&nbsp;&nbsp;&nbsp;</td><td>`;
                usage += `${method} /api2/json${endpoint}</td></tr>`;

                if (typeof cliUsageRenderer === 'function') {
                    usage += cliUsageRenderer(method, endpoint);
                }

                let sections = [
                    {
                        title: 'Description',
                        html: Ext.htmlEncode(info.description),
                        bodyPadding: 10,
                    },
                    {
                        title: 'Usage',
                        html: usage,
                        bodyPadding: 10,
                    },
                ];

                if (info.parameters && info.parameters.properties) {
                    let pstore = Ext.create('Ext.data.Store', {
                        model: 'pmx-param-schema',
                        proxy: {
                            type: 'memory',
                        },
                        groupField: 'optional',
                        sorters: [
                            {
                                property: 'instance-types',
                                direction: 'ASC',
                            },
                            {
                                property: 'name',
                                direction: 'ASC',
                            },
                        ],
                    });

                    let has_type_properties = false;

                    Ext.Object.each(info.parameters.properties, function (name, pdef) {
                        if (pdef.oneOf) {
                            pdef.oneOf.forEach((alternative) => {
                                alternative.name = name;
                                pstore.add(alternative);
                                has_type_properties = true;
                            });
                        } else if (pdef['instance-types']) {
                            pdef['instance-types'].forEach((type) => {
                                let typePdef = Ext.apply({}, pdef);
                                typePdef.name = name;
                                typePdef['instance-types'] = [type];
                                pstore.add(typePdef);
                                has_type_properties = true;
                            });
                        } else {
                            pdef.name = name;
                            pstore.add(pdef);
                        }
                    });

                    pstore.sort();

                    let groupingFeature = Ext.create('Ext.grid.feature.Grouping', {
                        enableGroupingMenu: false,
                        groupHeaderTpl:
                            '<tpl if="groupValue">Optional</tpl><tpl if="!groupValue">Required</tpl>',
                    });

                    sections.push({
                        xtype: 'gridpanel',
                        title: 'Parameters',
                        features: [groupingFeature],
                        store: pstore,
                        viewConfig: {
                            trackOver: false,
                            stripeRows: true,
                            enableTextSelection: true,
                        },
                        columns: [
                            {
                                header: 'Name',
                                dataIndex: 'name',
                                flex: 1,
                            },
                            {
                                header: 'Type',
                                dataIndex: 'type',
                                renderer: render_type,
                                flex: 1,
                            },
                            {
                                header: 'For Types',
                                dataIndex: 'instance-types',
                                hidden: !has_type_properties,
                                flex: 1,
                            },
                            {
                                header: 'Default',
                                dataIndex: 'default',
                                flex: 1,
                            },
                            {
                                header: 'Format',
                                dataIndex: 'type',
                                renderer: render_format,
                                flex: 2,
                            },
                            {
                                header: 'Description',
                                dataIndex: 'description',
                                renderer: render_description,
                                flex: 6,
                            },
                        ],
                    });
                }

                if (info.returns) {
                    let retinf = info.returns;
                    let rtype = retinf.type;
                    if (!rtype && retinf.items) {
                        rtype = 'array';
                    }
                    if (!rtype) {
                        rtype = 'object';
                    }

                    let rpstore = Ext.create('Ext.data.Store', {
                        model: 'pmx-param-schema',
                        proxy: {
                            type: 'memory',
                        },
                        groupField: 'optional',
                        sorters: [
                            {
                                property: 'name',
                                direction: 'ASC',
                            },
                        ],
                    });

                    let properties;
                    if (rtype === 'array' && retinf.items.properties) {
                        properties = retinf.items.properties;
                    }

                    if (rtype === 'object' && retinf.properties) {
                        properties = retinf.properties;
                    }

                    Ext.Object.each(properties, function (name, pdef) {
                        pdef.name = name;
                        rpstore.add(pdef);
                    });

                    rpstore.sort();

                    let groupingFeature = Ext.create('Ext.grid.feature.Grouping', {
                        enableGroupingMenu: false,
                        groupHeaderTpl:
                            '<tpl if="groupValue">Optional</tpl><tpl if="!groupValue">Obligatory</tpl>',
                    });
                    let returnhtml;
                    if (retinf.items) {
                        returnhtml =
                            '<pre>items: ' +
                            Ext.htmlEncode(JSON.stringify(retinf.items, null, 4)) +
                            '</pre>';
                    }

                    if (retinf.properties) {
                        returnhtml = returnhtml || '';
                        returnhtml +=
                            '<pre>properties:' +
                            Ext.htmlEncode(JSON.stringify(retinf.properties, null, 4)) +
                            '</pre>';
                    }

                    let rawSection = Ext.create('Ext.panel.Panel', {
                        bodyPadding: '0px 10px 10px 10px',
                        html: returnhtml,
                        hidden: true,
                    });

                    sections.push({
                        xtype: 'gridpanel',
                        title: 'Returns: ' + rtype,
                        features: [groupingFeature],
                        store: rpstore,
                        viewConfig: {
                            trackOver: false,
                            stripeRows: true,
                            enableTextSelection: true,
                        },
                        columns: [
                            {
                                header: 'Name',
                                dataIndex: 'name',
                                flex: 1,
                            },
                            {
                                header: 'Type',
                                dataIndex: 'type',
                                renderer: render_type,
                                flex: 1,
                            },
                            {
                                header: 'Default',
                                dataIndex: 'default',
                                flex: 1,
                            },
                            {
                                header: 'Format',
                                dataIndex: 'type',
                                renderer: render_format,
                                flex: 2,
                            },
                            {
                                header: 'Description',
                                dataIndex: 'description',
                                renderer: render_description,
                                flex: 6,
                            },
                        ],
                        bbar: [
                            {
                                xtype: 'button',
                                text: 'Show RAW',
                                handler: function (btn) {
                                    rawSection.setVisible(!rawSection.isVisible());
                                    btn.setText(rawSection.isVisible() ? 'Hide RAW' : 'Show RAW');
                                },
                            },
                        ],
                    });

                    sections.push(rawSection);
                }

                if (!data.path.match(/\/_upgrade_/)) {
                    let permhtml = '';

                    if (!info.permissions) {
                        permhtml = 'Root only.';
                    } else {
                        if (info.permissions.description) {
                            permhtml +=
                                "<div style='white-space:pre-wrap;padding-bottom:10px;'>" +
                                Ext.htmlEncode(info.permissions.description) +
                                '</div>';
                        }
                        permhtml += permission_text(info.permissions);
                    }

                    if (info.allowtoken !== undefined && !info.allowtoken) {
                        permhtml += '<br />This API endpoint is not available for API tokens.';
                    }

                    sections.push({
                        title: 'Required permissions',
                        bodyPadding: 10,
                        html: permhtml,
                    });
                }

                items.push({
                    title: method,
                    autoScroll: true,
                    defaults: {
                        border: false,
                    },
                    items: sections,
                });
            }
        });

        let ct = Ext.getCmp('docview');
        ct.setTitle('Path: ' + real_path(data.path));
        ct.removeAll(true);
        ct.add(items);
        ct.setActiveTab(0);
    };

    Ext.define('Ext.form.SearchField', {
        extend: 'Ext.form.field.Text',
        alias: 'widget.searchfield',

        emptyText: 'Search...',

        flex: 1,

        inputType: 'search',
        listeners: {
            change: function () {
                let value = this.getValue();
                if (!Ext.isEmpty(value)) {
                    store.filter({
                        property: 'path',
                        value: value,
                        anyMatch: true,
                    });
                } else {
                    store.clearFilter();
                }
            },
        },
    });

    let treePanel = Ext.create('Ext.tree.Panel', {
        title: 'Resource Tree',
        tbar: [
            {
                xtype: 'searchfield',
            },
        ],
        tools: [
            {
                type: 'expand',
                tooltip: 'Expand all',
                tooltipType: 'title',
                callback: (tree) => tree.expandAll(),
            },
            {
                type: 'collapse',
                tooltip: 'Collapse all',
                tooltipType: 'title',
                callback: (tree) => tree.collapseAll(),
            },
        ],
        store: store,
        width: 200,
        region: 'west',
        split: true,
        margins: '5 0 5 5',
        rootVisible: false,
        listeners: {
            selectionchange: function (v, selections) {
                if (!selections[0]) {
                    return;
                }
                let rec = selections[0];
                render_docu(rec.data);
                location.hash = '#' + rec.data.path;
            },
        },
    });

    Ext.create('Ext.container.Viewport', {
        layout: 'border',
        renderTo: Ext.getBody(),
        items: [
            treePanel,
            {
                xtype: 'tabpanel',
                title: 'Documentation',
                id: 'docview',
                region: 'center',
                margins: '5 5 5 0',
                layout: 'fit',
                items: [],
            },
        ],
    });

    let deepLink = function () {
        let path = window.location.hash.substring(1).replace(/\/\s*$/, '');
        let endpoint = store.findNode('path', path);

        if (endpoint) {
            treePanel.getSelectionModel().select(endpoint);
            treePanel.expandPath(endpoint.getPath());
            render_docu(endpoint.data);
        }
    };
    window.onhashchange = deepLink;

    deepLink();
});
