name: Update Proxmox API Specifications

permissions:
  contents: read

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: "0 2 * * 0"
  workflow_dispatch:
    # Allow manual triggering
    inputs:
      api_type:
        description: "API type to update"
        required: true
        default: "both"
        type: choice
        options:
          - both
          - pve
          - pbs

jobs:
  update-pve-specs:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.api_type == 'both' || github.event.inputs.api_type == 'pve' || github.event_name == 'schedule' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install UV
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install Python dependencies
        run: uv sync

      - name: Download latest PVE API documentation
        run: |
          # Download the latest PVE API viewer page
          curl -L "https://pve.proxmox.com/pve-docs/api-viewer/apidoc.js" \
               -o proxmox-virtual-environment/apidoc.js

      - name: Generate PVE OpenAPI specification
        run: |
          cd scripts/pve
          echo "üîç Current directory: $(pwd)"
          echo "üìÅ Files before generation:"
          ls -la
          
          echo "üöÄ Running PVE OpenAPI generation..."
          uv run python generate_openapi.py
          
          echo "üîÑ Running YAML conversion..."
          uv run python convert_to_yaml.py
          
          echo "üìÅ Files after generation:"
          ls -la *.json *.yaml 2>/dev/null || echo "No JSON/YAML files found"
          
          echo "üì¶ Moving files to output directory..."
          # Move generated files to correct location
          if [ -f "pve-api.json" ]; then
            mv pve-api.json ../../proxmox-virtual-environment/
            echo "‚úÖ Moved pve-api.json"
          else
            echo "‚ùå pve-api.json not found"
            exit 1
          fi
          
          if [ -f "pve-api.yaml" ]; then
            mv pve-api.yaml ../../proxmox-virtual-environment/
            echo "‚úÖ Moved pve-api.yaml"
          else
            echo "‚ùå pve-api.yaml not found"
            exit 1
          fi
          
          echo "üìÅ Final verification:"
          ls -la ../../proxmox-virtual-environment/*.json ../../proxmox-virtual-environment/*.yaml 2>/dev/null || echo "Files not found in target directory"

      - name: Install OpenAPI validator
        run: |
          # Install Python-based OpenAPI validator instead of npm
          uv add --dev openapi-spec-validator

      - name: Validate PVE OpenAPI specification
        run: |
          echo "üîç Validating PVE OpenAPI specifications..."
          
          if [ -f "proxmox-virtual-environment/pve-api.json" ]; then
            echo "üìÑ Validating pve-api.json..."
            uv run python -c "
from openapi_spec_validator import validate_spec
import yaml, json
with open('proxmox-virtual-environment/pve-api.json') as f:
    spec = json.load(f)
validate_spec(spec)
print('‚úÖ pve-api.json validation passed')
"
          else
            echo "‚ùå pve-api.json not found for validation"
            exit 1
          fi
          
          if [ -f "proxmox-virtual-environment/pve-api.yaml" ]; then
            echo "üìÑ Validating pve-api.yaml..."
            uv run python -c "
from openapi_spec_validator import validate_spec
import yaml
with open('proxmox-virtual-environment/pve-api.yaml') as f:
    spec = yaml.safe_load(f)
validate_spec(spec)
print('‚úÖ pve-api.yaml validation passed')
"
          else
            echo "‚ùå pve-api.yaml not found for validation"
            exit 1
          fi

      - name: Update PVE README with stats
        run: |
          cd proxmox-virtual-environment
          uv run python << 'EOF'
          import json
          import re

          # Load the API spec
          with open('pve-api.json', 'r') as f:
              spec = json.load(f)

          # Calculate statistics
          total_paths = len(spec.get('paths', {}))
          total_operations = sum(len([k for k in path.keys() if k in ['get', 'post', 'put', 'delete', 'patch']]) 
                                for path in spec['paths'].values())

          # Update README
          with open('README.md', 'r') as f:
              content = f.read()

          # Update statistics in README
          content = re.sub(r'- \*\*Total Endpoints\*\*: \d+ unique API paths', 
                          f'- **Total Endpoints**: {total_paths} unique API paths', content)
          content = re.sub(r'- \*\*Total Operations\*\*: \d+ HTTP operations', 
                          f'- **Total Operations**: {total_operations} HTTP operations', content)

          with open('README.md', 'w') as f:
              f.write(content)
          EOF

  update-pbs-specs:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.api_type == 'both' || github.event.inputs.api_type == 'pbs' || github.event_name == 'schedule' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install UV
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install Python dependencies
        run: uv sync

      - name: Download latest PBS API documentation
        run: |
          # Download the latest PBS API viewer page  
          curl -L "https://pbs.proxmox.com/docs/api-viewer/apidoc.js" \
               -o proxmox-backup-server/apidoc.js

      - name: Generate PBS OpenAPI specification
        run: |
          cd scripts/pbs
          echo "üîç Current directory: $(pwd)"
          echo "üìÅ Files before generation:"
          ls -la
          
          echo "üöÄ Running PBS OpenAPI generation..."
          uv run python generate_openapi.py
          
          echo "üîÑ Running YAML conversion..."
          uv run python convert_to_yaml.py
          
          echo "üìÅ Files after generation:"
          ls -la *.json *.yaml 2>/dev/null || echo "No JSON/YAML files found"
          
          echo "üì¶ Moving files to output directory..."
          # Move generated files to correct location
          if [ -f "pbs-api.json" ]; then
            mv pbs-api.json ../../proxmox-backup-server/
            echo "‚úÖ Moved pbs-api.json"
          else
            echo "‚ùå pbs-api.json not found"
            exit 1
          fi
          
          if [ -f "pbs-api.yaml" ]; then
            mv pbs-api.yaml ../../proxmox-backup-server/
            echo "‚úÖ Moved pbs-api.yaml"
          else
            echo "‚ùå pbs-api.yaml not found"
            exit 1
          fi
          
          echo "üìÅ Final verification:"
          ls -la ../../proxmox-backup-server/*.json ../../proxmox-backup-server/*.yaml 2>/dev/null || echo "Files not found in target directory"

      - name: Install OpenAPI validator
        run: |
          # Install Python-based OpenAPI validator instead of npm
          uv add --dev openapi-spec-validator

      - name: Validate PBS OpenAPI specification
        run: |
          echo "üîç Validating PBS OpenAPI specifications..."
          
          if [ -f "proxmox-backup-server/pbs-api.json" ]; then
            echo "üìÑ Validating pbs-api.json..."
            uv run python -c "
from openapi_spec_validator import validate_spec
import yaml, json
with open('proxmox-backup-server/pbs-api.json') as f:
    spec = json.load(f)
validate_spec(spec)
print('‚úÖ pbs-api.json validation passed')
"
          else
            echo "‚ùå pbs-api.json not found for validation"
            exit 1
          fi
          
          if [ -f "proxmox-backup-server/pbs-api.yaml" ]; then
            echo "üìÑ Validating pbs-api.yaml..."
            uv run python -c "
from openapi_spec_validator import validate_spec
import yaml
with open('proxmox-backup-server/pbs-api.yaml') as f:
    spec = yaml.safe_load(f)
validate_spec(spec)
print('‚úÖ pbs-api.yaml validation passed')
"
          else
            echo "‚ùå pbs-api.yaml not found for validation"
            exit 1
          fi

      - name: Update PBS README with stats
        run: |
          cd proxmox-backup-server
          uv run python << 'EOF'
          import json
          import re
          import os

          # Load the API spec
          with open('pbs-api.json', 'r') as f:
              spec = json.load(f)

          # Calculate statistics
          total_paths = len(spec.get('paths', {}))
          total_operations = sum(len([k for k in path.keys() if k in ['get', 'post', 'put', 'delete', 'patch']]) 
                                for path in spec['paths'].values())

          # Get file sizes
          json_size = os.path.getsize('pbs-api.json')
          yaml_size = os.path.getsize('pbs-api.yaml')

          # Update README
          with open('README.md', 'r') as f:
              content = f.read()

          # Update statistics in README
          content = re.sub(r'- \*\*Total Endpoints\*\*: \d+ unique API paths', 
                          f'- **Total Endpoints**: {total_paths} unique API paths', content)
          content = re.sub(r'- \*\*Total Operations\*\*: \d+ HTTP operations', 
                          f'- **Total Operations**: {total_operations} HTTP operations', content)
          content = re.sub(r'- `pbs-api\.json` - \*\*[\d.]+\w+\*\* comprehensive JSON', 
                          f'- `pbs-api.json` - **{json_size/1024/1024:.1f}MB** comprehensive JSON', content)
          content = re.sub(r'- `pbs-api\.yaml` - \*\*[\d.]+\w+\*\* comprehensive YAML', 
                          f'- `pbs-api.yaml` - **{yaml_size/1024:.0f}KB** comprehensive YAML', content)

          with open('README.md', 'w') as f:
              f.write(content)
          EOF

  commit-changes:
    runs-on: ubuntu-latest
    needs: [update-pve-specs, update-pbs-specs]
    if: always() && (needs.update-pve-specs.result == 'success' || needs.update-pbs-specs.result == 'success')
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Commit and push changes
        run: |
          git add .

          # Check if there are any changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          # Create commit message
          commit_msg="chore: Update Proxmox API specifications\n\n"

          if [[ "${{ needs.update-pve-specs.result }}" == "success" ]]; then
            commit_msg+="- Updated PVE API specifications\n"
          fi

          if [[ "${{ needs.update-pbs-specs.result }}" == "success" ]]; then
            commit_msg+="- Updated PBS API specifications\n"
          fi

          commit_msg+="\nAuto-generated by GitHub Actions on $(date -u +"%Y-%m-%d %H:%M:%S UTC")"

          git commit -m "$commit_msg"
          git push

  notify-completion:
    runs-on: ubuntu-latest
    needs: [commit-changes]
    if: always()

    steps:
      - name: Notify completion
        run: |
          if [[ "${{ needs.commit-changes.result }}" == "success" ]]; then
            echo "‚úÖ API specifications updated successfully"
          else
            echo "‚ùå Failed to update API specifications"
            exit 1
          fi
