{
  "openapi": "3.0.3",
  "info": {
    "title": "Proxmox VE API",
    "description": "Complete Proxmox Virtual Environment API specification for managing virtualized infrastructure.\n\nThis specification covers all aspects of Proxmox VE management including:\n- **Virtual Machine Management**: Create, configure, and manage VMs\n- **Container Management**: LXC container lifecycle management  \n- **Storage Management**: Configure and manage storage backends\n- **Network Configuration**: Virtual networks and firewall rules\n- **Cluster Operations**: Multi-node cluster management\n- **User Management**: Authentication, authorization, and access control\n- **Backup & Restore**: Data protection and recovery\n- **Monitoring**: System status and performance metrics\n\nThe API supports both token-based authentication and session-based authentication with CSRF protection.",
    "version": "8.0.0",
    "contact": {
      "name": "Proxmox Support",
      "url": "https://www.proxmox.com",
      "email": "support@proxmox.com"
    },
    "license": {
      "name": "AGPL v3",
      "url": "https://www.gnu.org/licenses/agpl-3.0.html"
    }
  },
  "servers": [
    {
      "url": "https://{host}:8006/api2/json",
      "description": "Proxmox VE Server (JSON format)",
      "variables": {
        "host": {
          "default": "localhost",
          "description": "Proxmox VE server hostname or IP address"
        }
      }
    }
  ],
  "components": {
    "securitySchemes": {
      "ApiTokenAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "API token authentication. Format: PVEAPIToken=USER@REALM!TOKENID=UUID"
      },
      "CookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "PVEAuthCookie",
        "description": "Session cookie authentication obtained from /access/ticket"
      },
      "CSRFPreventionToken": {
        "type": "apiKey",
        "in": "header",
        "name": "CSRFPreventionToken",
        "description": "CSRF prevention token required for state-changing operations when using cookie auth"
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "nullable": true
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "Task": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "Task ID for tracking async operations"
          }
        }
      }
    }
  },
  "paths": {
    "/nodes/{node}/hosts": {
      "get": {
        "summary": "Read",
        "description": "Read storage configuration.",
        "operationId": "get_nodes_node_hosts",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "storage",
            "in": "query",
            "required": true,
            "description": "The storage identifier.",
            "schema": {
              "type": "string",
              "description": "The storage identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete storage configuration.",
        "operationId": "delete_nodes_node_hosts",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "storage",
            "in": "query",
            "required": true,
            "description": "The storage identifier.",
            "schema": {
              "type": "string",
              "description": "The storage identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/sdn": {
      "get": {
        "summary": "Status",
        "description": "Read node status",
        "operationId": "get_nodes_node_sdn",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/access/ticket": {
      "get": {
        "summary": "Read Pool",
        "description": "Get pool configuration (deprecated, no support for nested pools, use 'GET /pools/?poolid={poolid}').",
        "operationId": "get_access_ticket",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "poolid",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string",
              "enum": [
                "qemu",
                "lxc",
                "storage"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Change Password",
        "description": "Change user password.\n\n**Required permissions:** Each user is allowed to change their own password. A user can change the password of another user if they have 'Realm.AllocateUser' (on the realm of user <userid>) and 'User.Modify' permission on /access/groups/<group> on a group where user <userid> is member of. For the PAM realm, a password change does not take  effect cluster-wide, but only applies to the local node.",
        "operationId": "put_access_ticket",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "password",
            "in": "query",
            "required": true,
            "description": "The new password.",
            "schema": {
              "type": "string",
              "description": "The new password."
            }
          },
          {
            "name": "userid",
            "in": "query",
            "required": true,
            "description": "Full User ID, in the `name@realm` format.",
            "schema": {
              "type": "string",
              "description": "Full User ID, in the `name@realm` format."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Pool Deprecated",
        "description": "Delete pool (deprecated, no support for nested pools, use 'DELETE /pools/?poolid={poolid}').\n\n**Required permissions:** You can only delete empty pools (no members).",
        "operationId": "delete_access_ticket",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "poolid",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/remote_migrate": {
      "get": {
        "summary": "Vm Feature",
        "description": "Check if feature for virtual machine is available.",
        "operationId": "get_nodes_node_lxc_vmid_remote_migrate",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "feature",
            "in": "query",
            "required": true,
            "description": "Feature to check.",
            "schema": {
              "type": "string",
              "description": "Feature to check.",
              "enum": [
                "snapshot",
                "clone",
                "copy"
              ]
            }
          },
          {
            "name": "snapname",
            "in": "query",
            "required": false,
            "description": "The name of the snapshot.",
            "schema": {
              "type": "string",
              "description": "The name of the snapshot."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Migrate Vm",
        "description": "Migrate the container to another node. Creates a new migration task.",
        "operationId": "post_nodes_node_lxc_vmid_remote_migrate",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "bwlimit",
            "in": "query",
            "required": false,
            "description": "Override I/O bandwidth limit (in KiB/s).",
            "schema": {
              "type": "number",
              "description": "Override I/O bandwidth limit (in KiB/s).",
              "default": "migrate limit from datacenter or storage config"
            }
          },
          {
            "name": "online",
            "in": "query",
            "required": false,
            "description": "Use online/live migration.",
            "schema": {
              "type": "boolean",
              "description": "Use online/live migration."
            }
          },
          {
            "name": "restart",
            "in": "query",
            "required": false,
            "description": "Use restart migration",
            "schema": {
              "type": "boolean",
              "description": "Use restart migration"
            }
          },
          {
            "name": "target",
            "in": "query",
            "required": true,
            "description": "Target node.",
            "schema": {
              "type": "string",
              "description": "Target node."
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "required": false,
            "description": "Timeout in seconds for shutdown for restart migration",
            "schema": {
              "type": "integer",
              "description": "Timeout in seconds for shutdown for restart migration",
              "default": 180
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/exec-status": {
      "get": {
        "summary": "File-Read",
        "description": "Reads the given file via guest agent. Is limited to 16777216 bytes.",
        "operationId": "get_nodes_node_qemu_vmid_agent_exec-status",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "file",
            "in": "query",
            "required": true,
            "description": "The path to the file",
            "schema": {
              "type": "string",
              "description": "The path to the file"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "File-Write",
        "description": "Writes the given file via guest agent.",
        "operationId": "post_nodes_node_qemu_vmid_agent_exec-status",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "content",
            "in": "query",
            "required": true,
            "description": "The content to write into the file.",
            "schema": {
              "type": "string",
              "description": "The content to write into the file."
            }
          },
          {
            "name": "encode",
            "in": "query",
            "required": false,
            "description": "If set, the content will be encoded as base64 (required by QEMU).Otherwise the content needs to be encoded beforehand - defaults to true.",
            "schema": {
              "type": "boolean",
              "description": "If set, the content will be encoded as base64 (required by QEMU).Otherwise the content needs to be encoded beforehand - defaults to true.",
              "default": 1
            }
          },
          {
            "name": "file",
            "in": "query",
            "required": true,
            "description": "The path to the file.",
            "schema": {
              "type": "string",
              "description": "The path to the file."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/acme": {
      "get": {
        "summary": "Index",
        "description": "ACMEAccount index.",
        "operationId": "get_cluster_acme",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/status/start": {
      "post": {
        "summary": "Vm Shutdown",
        "description": "Shutdown the container. This will trigger a clean shutdown of the container, see lxc-stop(1) for details.",
        "operationId": "post_nodes_node_lxc_vmid_status_start",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "forceStop",
            "in": "query",
            "required": false,
            "description": "Make sure the Container stops.",
            "schema": {
              "type": "boolean",
              "description": "Make sure the Container stops.",
              "default": 0
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "required": false,
            "description": "Wait maximal timeout seconds.",
            "schema": {
              "type": "integer",
              "description": "Wait maximal timeout seconds.",
              "default": 60
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/tasks": {
      "get": {
        "summary": "Get Options",
        "description": "Get datacenter options. Without 'Sys.Audit' on '/' not all options are returned.",
        "operationId": "get_cluster_tasks",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/fstrim": {
      "get": {
        "summary": "Get-Memory-Block-Info",
        "description": "Execute get-memory-block-info.",
        "operationId": "get_nodes_node_qemu_vmid_agent_fstrim",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/storage": {
      "get": {
        "summary": "Read User Tfa Type",
        "description": "Get user TFA types (Personal and Realm).",
        "operationId": "get_storage",
        "tags": [
          "Storage"
        ],
        "parameters": [
          {
            "name": "multiple",
            "in": "query",
            "required": false,
            "description": "Request all entries as an array.",
            "schema": {
              "type": "boolean",
              "description": "Request all entries as an array.",
              "default": 0
            }
          },
          {
            "name": "userid",
            "in": "query",
            "required": true,
            "description": "Full User ID, in the `name@realm` format.",
            "schema": {
              "type": "string",
              "description": "Full User ID, in the `name@realm` format."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Unlock Tfa",
        "description": "Unlock a user's TFA authentication.",
        "operationId": "put_storage",
        "tags": [
          "Storage"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "required": true,
            "description": "Full User ID, in the `name@realm` format.",
            "schema": {
              "type": "string",
              "description": "Full User ID, in the `name@realm` format."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Remove Token",
        "description": "Remove API token for a specific user.",
        "operationId": "delete_storage",
        "tags": [
          "Storage"
        ],
        "parameters": [
          {
            "name": "tokenid",
            "in": "query",
            "required": true,
            "description": "User-specific token identifier.",
            "schema": {
              "type": "string",
              "description": "User-specific token identifier."
            }
          },
          {
            "name": "userid",
            "in": "query",
            "required": true,
            "description": "Full User ID, in the `name@realm` format.",
            "schema": {
              "type": "string",
              "description": "Full User ID, in the `name@realm` format."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/notifications/matchers/{name}": {
      "get": {
        "summary": "Get Matchers",
        "description": "Returns a list of all matchers",
        "operationId": "get_cluster_notifications_matchers_name",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc": {
      "get": {
        "summary": "Index",
        "description": "Directory index.",
        "operationId": "get_nodes_node_lxc",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/storage/{storage}/file-restore": {
      "get": {
        "summary": "Rrd",
        "description": "Read storage RRD statistics (returns PNG).",
        "operationId": "get_nodes_node_storage_storage_file-restore",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "required": true,
            "description": "storage identifier",
            "schema": {
              "type": "string",
              "description": "Storage identifier"
            }
          },
          {
            "name": "cf",
            "in": "query",
            "required": false,
            "description": "The RRD consolidation function",
            "schema": {
              "type": "string",
              "description": "The RRD consolidation function",
              "enum": [
                "AVERAGE",
                "MAX"
              ]
            }
          },
          {
            "name": "ds",
            "in": "query",
            "required": true,
            "description": "The list of datasources you want to display.",
            "schema": {
              "type": "string",
              "description": "The list of datasources you want to display."
            }
          },
          {
            "name": "timeframe",
            "in": "query",
            "required": true,
            "description": "Specify the time frame you are interested in.",
            "schema": {
              "type": "string",
              "description": "Specify the time frame you are interested in.",
              "enum": [
                "hour",
                "day",
                "week",
                "month",
                "year"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/notifications/matchers": {
      "get": {
        "summary": "Join Api Version",
        "description": "Return the version of the cluster join API available on this node.",
        "operationId": "get_cluster_notifications_matchers",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Addnode",
        "description": "Adds a node to the cluster configuration. This call is for internal use.",
        "operationId": "post_cluster_notifications_matchers",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "apiversion",
            "in": "query",
            "required": false,
            "description": "The JOIN_API_VERSION of the new node.",
            "schema": {
              "type": "integer",
              "description": "The JOIN_API_VERSION of the new node."
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "Do not throw error if node already exists.",
            "schema": {
              "type": "boolean",
              "description": "Do not throw error if node already exists."
            }
          },
          {
            "name": "address",
            "in": "query",
            "required": true,
            "description": "Hostname (or IP) of this corosync link address.",
            "schema": {
              "type": "string",
              "description": "Hostname (or IP) of this corosync link address."
            }
          },
          {
            "name": "priority",
            "in": "query",
            "required": false,
            "description": "The priority for the link when knet is used in 'passive' mode (default). Lower value means higher priority. Only valid for cluster create, ignored on node add.",
            "schema": {
              "type": "integer",
              "description": "The priority for the link when knet is used in 'passive' mode (default). Lower value means higher priority. Only valid for cluster create, ignored on node add.",
              "default": 0
            }
          },
          {
            "name": "new_node_ip",
            "in": "query",
            "required": false,
            "description": "IP Address of node to add. Used as fallback if no links are given.",
            "schema": {
              "type": "string",
              "description": "IP Address of node to add. Used as fallback if no links are given."
            }
          },
          {
            "name": "node",
            "in": "query",
            "required": true,
            "description": "The cluster node name.",
            "schema": {
              "type": "string",
              "description": "The cluster node name."
            }
          },
          {
            "name": "nodeid",
            "in": "query",
            "required": false,
            "description": "Node id for this node.",
            "schema": {
              "type": "integer",
              "description": "Node id for this node."
            }
          },
          {
            "name": "votes",
            "in": "query",
            "required": false,
            "description": "Number of votes for this node",
            "schema": {
              "type": "integer",
              "description": "Number of votes for this node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delnode",
        "description": "Removes a node from the cluster configuration.",
        "operationId": "delete_cluster_notifications_matchers",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "query",
            "required": true,
            "description": "The cluster node name.",
            "schema": {
              "type": "string",
              "description": "The cluster node name."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/get-users": {
      "get": {
        "summary": "Network-Get-Interfaces",
        "description": "Execute network-get-interfaces.",
        "operationId": "get_nodes_node_qemu_vmid_agent_get-users",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/termproxy": {
      "get": {
        "summary": "Vncwebsocket",
        "description": "Opens a weksocket for VNC traffic.\n\n**Required permissions:** You also need to pass a valid ticket (vncticket).",
        "operationId": "get_nodes_node_lxc_vmid_termproxy",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "port",
            "in": "query",
            "required": true,
            "description": "Port number returned by previous vncproxy call.",
            "schema": {
              "type": "integer",
              "description": "Port number returned by previous vncproxy call."
            }
          },
          {
            "name": "vncticket",
            "in": "query",
            "required": true,
            "description": "Ticket from previous call to vncproxy.",
            "schema": {
              "type": "string",
              "description": "Ticket from previous call to vncproxy."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Spiceproxy",
        "description": "Returns a SPICE configuration to connect to the CT.",
        "operationId": "post_nodes_node_lxc_vmid_termproxy",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "proxy",
            "in": "query",
            "required": false,
            "description": "SPICE proxy server. This can be used by the client to specify the proxy server. All nodes in a cluster runs 'spiceproxy', so it is up to the client to choose one. By default, we return the node where the VM is currently running. As reasonable setting is to use same node you use to connect to the API (This is window.location.hostname for the JS GUI).",
            "schema": {
              "type": "string",
              "description": "SPICE proxy server. This can be used by the client to specify the proxy server. All nodes in a cluster runs 'spiceproxy', so it is up to the client to choose one. By default, we return the node where the VM is currently running. As reasonable setting is to use same node you use to connect to the API (This is window.location.hostname for the JS GUI)."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/backup-info/not-backed-up": {
      "get": {
        "summary": "Index",
        "description": "Index for backup info related endpoints",
        "operationId": "get_cluster_backup-info_not-backed-up",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Relocate",
        "description": "Request resource relocatzion to another node. This stops the service on the old node, and restarts it on the target node.",
        "operationId": "post_cluster_backup-info_not-backed-up",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "query",
            "required": true,
            "description": "Target node.",
            "schema": {
              "type": "string",
              "description": "Target node."
            }
          },
          {
            "name": "sid",
            "in": "query",
            "required": true,
            "description": "HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100).",
            "schema": {
              "type": "string",
              "description": "HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100)."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete resource configuration.",
        "operationId": "delete_cluster_backup-info_not-backed-up",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "sid",
            "in": "query",
            "required": true,
            "description": "HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100).",
            "schema": {
              "type": "string",
              "description": "HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100)."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/access/roles": {
      "get": {
        "summary": "Read Acl",
        "description": "Get Access Control List (ACLs).\n\n**Required permissions:** The returned list is restricted to objects where you have rights to modify permissions.",
        "operationId": "get_access_roles",
        "tags": [
          "Access Control"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Update Acl",
        "description": "Update Access Control List (add or remove permissions).",
        "operationId": "put_access_roles",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "delete",
            "in": "query",
            "required": false,
            "description": "Remove permissions (instead of adding it).",
            "schema": {
              "type": "boolean",
              "description": "Remove permissions (instead of adding it)."
            }
          },
          {
            "name": "groups",
            "in": "query",
            "required": false,
            "description": "List of groups.",
            "schema": {
              "type": "string",
              "description": "List of groups."
            }
          },
          {
            "name": "path",
            "in": "query",
            "required": true,
            "description": "Access control path",
            "schema": {
              "type": "string",
              "description": "Access control path"
            }
          },
          {
            "name": "propagate",
            "in": "query",
            "required": false,
            "description": "Allow to propagate (inherit) permissions.",
            "schema": {
              "type": "boolean",
              "description": "Allow to propagate (inherit) permissions.",
              "default": 1
            }
          },
          {
            "name": "roles",
            "in": "query",
            "required": true,
            "description": "List of roles.",
            "schema": {
              "type": "string",
              "description": "List of roles."
            }
          },
          {
            "name": "tokens",
            "in": "query",
            "required": false,
            "description": "List of API tokens.",
            "schema": {
              "type": "string",
              "description": "List of API tokens."
            }
          },
          {
            "name": "users",
            "in": "query",
            "required": false,
            "description": "List of users.",
            "schema": {
              "type": "string",
              "description": "List of users."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/access/users/{userid}/token/{tokenid}": {
      "get": {
        "summary": "Token Index",
        "description": "Get user API tokens.",
        "operationId": "get_access_users_userid_token_tokenid",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "description": "userid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenid",
            "in": "path",
            "required": true,
            "description": "tokenid identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete User",
        "description": "Delete user.",
        "operationId": "delete_access_users_userid_token_tokenid",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "description": "userid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenid",
            "in": "path",
            "required": true,
            "description": "tokenid identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/jobs/schedule-analyze": {
      "get": {
        "summary": "Get",
        "description": "Get directory mapping.",
        "operationId": "get_cluster_jobs_schedule-analyze",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Update",
        "description": "Update a directory mapping.",
        "operationId": "put_cluster_jobs_schedule-analyze",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "delete",
            "in": "query",
            "required": false,
            "description": "A list of settings you want to delete.",
            "schema": {
              "type": "string",
              "description": "A list of settings you want to delete."
            }
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "description": "Description of the directory mapping",
            "schema": {
              "type": "string",
              "description": "Description of the directory mapping"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The ID of the directory mapping",
            "schema": {
              "type": "string",
              "description": "The ID of the directory mapping"
            }
          },
          {
            "name": "node",
            "in": "query",
            "required": true,
            "description": "The cluster node name.",
            "schema": {
              "type": "string",
              "description": "The cluster node name."
            }
          },
          {
            "name": "path",
            "in": "query",
            "required": true,
            "description": "Absolute directory path that should be shared with the guest.",
            "schema": {
              "type": "string",
              "description": "Absolute directory path that should be shared with the guest."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Remove directory mapping.",
        "operationId": "delete_cluster_jobs_schedule-analyze",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/notifications/targets/{name}/test": {
      "get": {
        "summary": "Get All Targets",
        "description": "Returns a list of all entities that can be used as notification targets.",
        "operationId": "get_cluster_notifications_targets_name_test",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Matcher",
        "description": "Remove matcher",
        "operationId": "delete_cluster_notifications_targets_name_test",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/pool/{name}": {
      "get": {
        "summary": "Lspools",
        "description": "List all pools and their settings (which are settable by the POST/PUT endpoints).",
        "operationId": "get_nodes_node_ceph_pool_name",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/status/suspend": {
      "get": {
        "summary": "Vmcmdidx",
        "description": "Directory index",
        "operationId": "get_nodes_node_qemu_vmid_status_suspend",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Vm Resume",
        "description": "Resume virtual machine.",
        "operationId": "post_nodes_node_qemu_vmid_status_suspend",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "nocheck",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skiplock",
            "in": "query",
            "required": false,
            "description": "Ignore locks - only root is allowed to use this option.",
            "schema": {
              "type": "boolean",
              "description": "Ignore locks - only root is allowed to use this option."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Vm Sendkey",
        "description": "Send key event to virtual machine.",
        "operationId": "put_nodes_node_qemu_vmid_status_suspend",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "key",
            "in": "query",
            "required": true,
            "description": "The key (qemu monitor encoding).",
            "schema": {
              "type": "string",
              "description": "The key (qemu monitor encoding)."
            }
          },
          {
            "name": "skiplock",
            "in": "query",
            "required": false,
            "description": "Ignore locks - only root is allowed to use this option.",
            "schema": {
              "type": "boolean",
              "description": "Ignore locks - only root is allowed to use this option."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/acme/plugins/{id}": {
      "get": {
        "summary": "Index",
        "description": "ACME plugin index.",
        "operationId": "get_cluster_acme_plugins_id",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Only list ACME plugins of a specific type",
            "schema": {
              "type": "string",
              "description": "Only list ACME plugins of a specific type",
              "enum": [
                "dns",
                "standalone"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/mtunnel": {
      "get": {
        "summary": "Vmdiridx",
        "description": "Directory index",
        "operationId": "get_nodes_node_qemu_vmid_mtunnel",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Destroy Vm",
        "description": "Destroy the VM and  all used/owned volumes. Removes any VM specific permissions and firewall rules",
        "operationId": "delete_nodes_node_qemu_vmid_mtunnel",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "purge",
            "in": "query",
            "required": false,
            "description": "Remove VMID from configurations, like backup & replication jobs and HA.",
            "schema": {
              "type": "boolean",
              "description": "Remove VMID from configurations, like backup & replication jobs and HA."
            }
          },
          {
            "name": "skiplock",
            "in": "query",
            "required": false,
            "description": "Ignore locks - only root is allowed to use this option.",
            "schema": {
              "type": "boolean",
              "description": "Ignore locks - only root is allowed to use this option."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/disks/wipedisk": {
      "get": {
        "summary": "Changelog",
        "description": "Get package changelogs.",
        "operationId": "get_nodes_node_disks_wipedisk",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "Package name.",
            "schema": {
              "type": "string",
              "description": "Package name."
            }
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "description": "Package version.",
            "schema": {
              "type": "string",
              "description": "Package version."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Update Database",
        "description": "This is used to resynchronize the package index files from their sources (apt-get update).",
        "operationId": "post_nodes_node_disks_wipedisk",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "notify",
            "in": "query",
            "required": false,
            "description": "Send notification about new packages.",
            "schema": {
              "type": "boolean",
              "description": "Send notification about new packages.",
              "default": 0
            }
          },
          {
            "name": "quiet",
            "in": "query",
            "required": false,
            "description": "Only produces output suitable for logging, omitting progress indicators.",
            "schema": {
              "type": "boolean",
              "description": "Only produces output suitable for logging, omitting progress indicators.",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/certificates": {
      "get": {
        "summary": "Get Config",
        "description": "Get node configuration options.",
        "operationId": "get_nodes_node_certificates",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "property",
            "in": "query",
            "required": false,
            "description": "Return only a specific property from the node configuration.",
            "schema": {
              "type": "string",
              "description": "Return only a specific property from the node configuration.",
              "default": "all",
              "enum": [
                "acme",
                "acmedomain0",
                "acmedomain1",
                "acmedomain2",
                "acmedomain3",
                "acmedomain4",
                "acmedomain5",
                "ballooning-target",
                "description",
                "startall-onboot-delay",
                "wakeonlan"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/storage/{storage}/content/{volume}": {
      "get": {
        "summary": "Index",
        "description": "List storage content.",
        "operationId": "get_nodes_node_storage_storage_content_volume",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "required": true,
            "description": "storage identifier",
            "schema": {
              "type": "string",
              "description": "Storage identifier"
            }
          },
          {
            "name": "volume",
            "in": "path",
            "required": true,
            "description": "volume identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "in": "query",
            "required": false,
            "description": "Only list content of this type.",
            "schema": {
              "type": "string",
              "description": "Only list content of this type."
            }
          },
          {
            "name": "vmid",
            "in": "query",
            "required": false,
            "description": "Only list images for this VM",
            "schema": {
              "type": "integer",
              "description": "Only list images for this VM"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/status/reboot": {
      "get": {
        "summary": "Vmcmdidx",
        "description": "Directory index",
        "operationId": "get_nodes_node_lxc_vmid_status_reboot",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Rollback",
        "description": "Rollback LXC state to specified snapshot.",
        "operationId": "post_nodes_node_lxc_vmid_status_reboot",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "snapname",
            "in": "query",
            "required": true,
            "description": "The name of the snapshot.",
            "schema": {
              "type": "string",
              "description": "The name of the snapshot."
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "description": "Whether the container should get started after rolling back successfully",
            "schema": {
              "type": "boolean",
              "description": "Whether the container should get started after rolling back successfully",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/apt": {
      "get": {
        "summary": "Get Rule",
        "description": "Get single rule data.",
        "operationId": "get_nodes_node_apt",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "pos",
            "in": "query",
            "required": false,
            "description": "Update rule at position <pos>.",
            "schema": {
              "type": "integer",
              "description": "Update rule at position <pos>."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Rule",
        "description": "Delete rule.",
        "operationId": "delete_nodes_node_apt",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "pos",
            "in": "query",
            "required": false,
            "description": "Update rule at position <pos>.",
            "schema": {
              "type": "integer",
              "description": "Update rule at position <pos>."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/ha/status/manager_status": {
      "get": {
        "summary": "Get Plugin Config",
        "description": "Get ACME plugin configuration.",
        "operationId": "get_cluster_ha_status_manager_status",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "Unique identifier for ACME plugin instance.",
            "schema": {
              "type": "string",
              "description": "Unique identifier for ACME plugin instance."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Plugin",
        "description": "Delete ACME plugin configuration.",
        "operationId": "delete_cluster_ha_status_manager_status",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "Unique identifier for ACME plugin instance.",
            "schema": {
              "type": "string",
              "description": "Unique identifier for ACME plugin instance."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/mapping/dir": {
      "get": {
        "summary": "Get",
        "description": "Get PCI Mapping.",
        "operationId": "get_cluster_mapping_dir",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Remove Hardware Mapping.",
        "operationId": "delete_cluster_mapping_dir",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/unlink": {
      "post": {
        "summary": "Termproxy",
        "description": "Creates a TCP proxy connections.",
        "operationId": "post_nodes_node_qemu_vmid_unlink",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "serial",
            "in": "query",
            "required": false,
            "description": "opens a serial terminal (defaults to display)",
            "schema": {
              "type": "string",
              "description": "opens a serial terminal (defaults to display)",
              "enum": [
                "serial0",
                "serial1",
                "serial2",
                "serial3"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/suspend-ram": {
      "post": {
        "summary": "Exec",
        "description": "Executes the given command in the vm via the guest-agent and returns an object with the pid.",
        "operationId": "post_nodes_node_qemu_vmid_agent_suspend-ram",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "items",
            "in": "query",
            "required": true,
            "description": "A single part of the program + arguments.",
            "schema": {
              "type": "string",
              "description": "A single part of the program + arguments."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/sdn/zones": {
      "get": {
        "summary": "Version",
        "description": "API version details",
        "operationId": "get_nodes_node_sdn_zones",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}": {
      "get": {
        "summary": "Read",
        "description": "Read storage configuration.",
        "operationId": "get_nodes_node",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "storage",
            "in": "query",
            "required": true,
            "description": "The storage identifier.",
            "schema": {
              "type": "string",
              "description": "The storage identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete storage configuration.",
        "operationId": "delete_nodes_node",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "storage",
            "in": "query",
            "required": true,
            "description": "The storage identifier.",
            "schema": {
              "type": "string",
              "description": "The storage identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/vzdump/defaults": {
      "get": {
        "summary": "Extractconfig",
        "description": "Extract configuration from vzdump backup archive.\n\n**Required permissions:** The user needs 'VM.Backup' permissions on the backed up guest ID, and 'Datastore.AllocateSpace' on the backup storage.",
        "operationId": "get_nodes_node_vzdump_defaults",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "volume",
            "in": "query",
            "required": true,
            "description": "Volume identifier",
            "schema": {
              "type": "string",
              "description": "Volume identifier"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/status": {
      "get": {
        "summary": "Index",
        "description": "Cluster index.",
        "operationId": "get_cluster_status",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Rule",
        "description": "Delete rule.",
        "operationId": "delete_cluster_status",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "node",
            "in": "query",
            "required": true,
            "description": "The cluster node name.",
            "schema": {
              "type": "string",
              "description": "The cluster node name."
            }
          },
          {
            "name": "pos",
            "in": "query",
            "required": false,
            "description": "Update rule at position <pos>.",
            "schema": {
              "type": "integer",
              "description": "Update rule at position <pos>."
            }
          },
          {
            "name": "vmid",
            "in": "query",
            "required": true,
            "description": "The (unique) ID of the VM.",
            "schema": {
              "type": "integer",
              "description": "The (unique) ID of the VM."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/status/start": {
      "post": {
        "summary": "Vm Reset",
        "description": "Reset virtual machine.",
        "operationId": "post_nodes_node_qemu_vmid_status_start",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "skiplock",
            "in": "query",
            "required": false,
            "description": "Ignore locks - only root is allowed to use this option.",
            "schema": {
              "type": "boolean",
              "description": "Ignore locks - only root is allowed to use this option."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/osd/{osdid}/in": {
      "get": {
        "summary": "Osdindex",
        "description": "OSD index.",
        "operationId": "get_nodes_node_ceph_osd_osdid_in",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "osdid",
            "in": "path",
            "required": true,
            "description": "osdid identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Scrub",
        "description": "Instruct the OSD to scrub.",
        "operationId": "post_nodes_node_ceph_osd_osdid_in",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "osdid",
            "in": "path",
            "required": true,
            "description": "osdid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deep",
            "in": "query",
            "required": false,
            "description": "If set, instructs a deep scrub instead of a normal one.",
            "schema": {
              "type": "boolean",
              "description": "If set, instructs a deep scrub instead of a normal one.",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Destroyosd",
        "description": "Destroy OSD",
        "operationId": "delete_nodes_node_ceph_osd_osdid_in",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "osdid",
            "in": "path",
            "required": true,
            "description": "osdid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cleanup",
            "in": "query",
            "required": false,
            "description": "If set, we remove partition table entries.",
            "schema": {
              "type": "boolean",
              "description": "If set, we remove partition table entries.",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/ceph/status": {
      "get": {
        "summary": "Get All Flags",
        "description": "get the status of all ceph flags",
        "operationId": "get_cluster_ceph_status",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Update Flag",
        "description": "Set or clear (unset) a specific ceph flag",
        "operationId": "put_cluster_ceph_status",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "flag",
            "in": "query",
            "required": true,
            "description": "The ceph flag to update",
            "schema": {
              "type": "string",
              "description": "The ceph flag to update",
              "enum": [
                "nobackfill",
                "nodeep-scrub",
                "nodown",
                "noin",
                "noout",
                "norebalance",
                "norecover",
                "noscrub",
                "notieragent",
                "noup",
                "pause"
              ]
            }
          },
          {
            "name": "value",
            "in": "query",
            "required": true,
            "description": "The new value of the flag",
            "schema": {
              "type": "boolean",
              "description": "The new value of the flag"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/access/openid": {
      "get": {
        "summary": "Get Tfa Entry",
        "description": "Fetch a requested TFA entry if present.",
        "operationId": "get_access_openid",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "A TFA entry id.",
            "schema": {
              "type": "string",
              "description": "A TFA entry id."
            }
          },
          {
            "name": "userid",
            "in": "query",
            "required": true,
            "description": "Full User ID, in the `name@realm` format.",
            "schema": {
              "type": "string",
              "description": "Full User ID, in the `name@realm` format."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Tfa",
        "description": "Delete a TFA entry by ID.",
        "operationId": "delete_access_openid",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "A TFA entry id.",
            "schema": {
              "type": "string",
              "description": "A TFA entry id."
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": false,
            "description": "The current password of the user performing the change.",
            "schema": {
              "type": "string",
              "description": "The current password of the user performing the change."
            }
          },
          {
            "name": "userid",
            "in": "query",
            "required": true,
            "description": "Full User ID, in the `name@realm` format.",
            "schema": {
              "type": "string",
              "description": "Full User ID, in the `name@realm` format."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/disks/lvmthin/{name}": {
      "get": {
        "summary": "Index",
        "description": "List LVM thinpools",
        "operationId": "get_nodes_node_disks_lvmthin_name",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create",
        "description": "Create an LVM thinpool\n\n**Required permissions:** Requires additionally 'Datastore.Allocate' on /storage when setting 'add_storage'",
        "operationId": "post_nodes_node_disks_lvmthin_name",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "add_storage",
            "in": "query",
            "required": false,
            "description": "Configure storage using the thinpool.",
            "schema": {
              "type": "boolean",
              "description": "Configure storage using the thinpool.",
              "default": 0
            }
          },
          {
            "name": "device",
            "in": "query",
            "required": true,
            "description": "The block device you want to create the thinpool on.",
            "schema": {
              "type": "string",
              "description": "The block device you want to create the thinpool on."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Unmounts the storage and removes the mount unit.\n\n**Required permissions:** Requires additionally 'Datastore.Allocate' on /storage when setting 'cleanup-config'",
        "operationId": "delete_nodes_node_disks_lvmthin_name",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/firewall/rules/{pos}": {
      "get": {
        "summary": "Get Rules",
        "description": "List rules.",
        "operationId": "get_cluster_firewall_rules_pos",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "pos",
            "in": "path",
            "required": true,
            "description": "pos identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/access/users/{userid}/unlock-tfa": {
      "get": {
        "summary": "Read Token",
        "description": "Get specific API token information.",
        "operationId": "get_access_users_userid_unlock-tfa",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "description": "userid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenid",
            "in": "query",
            "required": true,
            "description": "User-specific token identifier.",
            "schema": {
              "type": "string",
              "description": "User-specific token identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Remove Token",
        "description": "Remove API token for a specific user.",
        "operationId": "delete_access_users_userid_unlock-tfa",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "description": "userid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenid",
            "in": "query",
            "required": true,
            "description": "User-specific token identifier.",
            "schema": {
              "type": "string",
              "description": "User-specific token identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/status": {
      "get": {
        "summary": "Get Snapshot Config",
        "description": "Get snapshot configuration",
        "operationId": "get_nodes_node_lxc_vmid_status",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "snapname",
            "in": "query",
            "required": true,
            "description": "The name of the snapshot.",
            "schema": {
              "type": "string",
              "description": "The name of the snapshot."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Rollback",
        "description": "Rollback LXC state to specified snapshot.",
        "operationId": "post_nodes_node_lxc_vmid_status",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "snapname",
            "in": "query",
            "required": true,
            "description": "The name of the snapshot.",
            "schema": {
              "type": "string",
              "description": "The name of the snapshot."
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "description": "Whether the container should get started after rolling back successfully",
            "schema": {
              "type": "boolean",
              "description": "Whether the container should get started after rolling back successfully",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/storage/{storage}": {
      "get": {
        "summary": "Index",
        "description": "Storage index.\n\n**Required permissions:** Only list entries where you have 'Datastore.Audit' or 'Datastore.AllocateSpace' permissions on '/storage/<storage>'",
        "operationId": "get_storage_storage",
        "tags": [
          "Storage"
        ],
        "parameters": [
          {
            "name": "storage",
            "in": "path",
            "required": true,
            "description": "storage identifier",
            "schema": {
              "type": "string",
              "description": "Storage identifier"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Only list storage of specific type",
            "schema": {
              "type": "string",
              "description": "Only list storage of specific type",
              "enum": [
                "btrfs",
                "cephfs",
                "cifs",
                "dir",
                "esxi",
                "glusterfs",
                "iscsi",
                "iscsidirect",
                "lvm",
                "lvmthin",
                "nfs",
                "pbs",
                "rbd",
                "zfs",
                "zfspool"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/mtunnelwebsocket": {
      "get": {
        "summary": "Vmdiridx",
        "description": "Directory index",
        "operationId": "get_nodes_node_lxc_vmid_mtunnelwebsocket",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Destroy Vm",
        "description": "Destroy the container (also delete all uses files).",
        "operationId": "delete_nodes_node_lxc_vmid_mtunnelwebsocket",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "Force destroy, even if running.",
            "schema": {
              "type": "boolean",
              "description": "Force destroy, even if running.",
              "default": 0
            }
          },
          {
            "name": "purge",
            "in": "query",
            "required": false,
            "description": "Remove container from all related configurations. For example, backup jobs, replication jobs or HA. Related ACLs and Firewall entries will *always* be removed.",
            "schema": {
              "type": "boolean",
              "description": "Remove container from all related configurations. For example, backup jobs, replication jobs or HA. Related ACLs and Firewall entries will *always* be removed.",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/osd/{osdid}/scrub": {
      "get": {
        "summary": "Index",
        "description": "Get Ceph osd list/tree.",
        "operationId": "get_nodes_node_ceph_osd_osdid_scrub",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "osdid",
            "in": "path",
            "required": true,
            "description": "osdid identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Destroyosd",
        "description": "Destroy OSD",
        "operationId": "delete_nodes_node_ceph_osd_osdid_scrub",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "osdid",
            "in": "path",
            "required": true,
            "description": "osdid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cleanup",
            "in": "query",
            "required": false,
            "description": "If set, we remove partition table entries.",
            "schema": {
              "type": "boolean",
              "description": "If set, we remove partition table entries.",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/get-timezone": {
      "get": {
        "summary": "Info",
        "description": "Execute info.",
        "operationId": "get_nodes_node_qemu_vmid_agent_get-timezone",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/pools/{poolid}": {
      "get": {
        "summary": "Version",
        "description": "API version details, including some parts of the global datacenter config.",
        "operationId": "get_pools_poolid",
        "tags": [
          "Resource Pools"
        ],
        "parameters": [
          {
            "name": "poolid",
            "in": "path",
            "required": true,
            "description": "poolid identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create Pool",
        "description": "Create new pool.",
        "operationId": "post_pools_poolid",
        "tags": [
          "Resource Pools"
        ],
        "parameters": [
          {
            "name": "poolid",
            "in": "path",
            "required": true,
            "description": "poolid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Update Pool",
        "description": "Update pool.\n\n**Required permissions:** You also need the right to modify permissions on any object you add/delete.",
        "operationId": "put_pools_poolid",
        "tags": [
          "Resource Pools"
        ],
        "parameters": [
          {
            "name": "poolid",
            "in": "path",
            "required": true,
            "description": "poolid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "required": false,
            "description": "Remove the passed VMIDs and/or storage IDs instead of adding them.",
            "schema": {
              "type": "boolean",
              "description": "Remove the passed VMIDs and/or storage IDs instead of adding them.",
              "default": 0
            }
          },
          {
            "name": "storage",
            "in": "query",
            "required": false,
            "description": "List of storage IDs to add or remove from this pool.",
            "schema": {
              "type": "string",
              "description": "List of storage IDs to add or remove from this pool."
            }
          },
          {
            "name": "vms",
            "in": "query",
            "required": false,
            "description": "List of guest VMIDs to add or remove from this pool.",
            "schema": {
              "type": "string",
              "description": "List of guest VMIDs to add or remove from this pool."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Pool",
        "description": "Delete pool.\n\n**Required permissions:** You can only delete empty pools (no members).",
        "operationId": "delete_pools_poolid",
        "tags": [
          "Resource Pools"
        ],
        "parameters": [
          {
            "name": "poolid",
            "in": "path",
            "required": true,
            "description": "poolid identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/hardware/pci": {
      "get": {
        "summary": "Index",
        "description": "List all custom and default CPU models.\n\n**Required permissions:** Only returns custom models when the current user has Sys.Audit on /nodes.",
        "operationId": "get_nodes_node_hardware_pci",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/storage/{storage}/content": {
      "get": {
        "summary": "Download",
        "description": "Extract a file or directory (as zip archive) from a PBS backup.\n\n**Required permissions:** You need read access for the volume.",
        "operationId": "get_nodes_node_storage_storage_content",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "required": true,
            "description": "storage identifier",
            "schema": {
              "type": "string",
              "description": "Storage identifier"
            }
          },
          {
            "name": "filepath",
            "in": "query",
            "required": true,
            "description": "base64-path to the directory or file to download.",
            "schema": {
              "type": "string",
              "description": "base64-path to the directory or file to download."
            }
          },
          {
            "name": "tar",
            "in": "query",
            "required": false,
            "description": "Download dirs as 'tar.zst' instead of 'zip'.",
            "schema": {
              "type": "boolean",
              "description": "Download dirs as 'tar.zst' instead of 'zip'.",
              "default": 0
            }
          },
          {
            "name": "volume",
            "in": "query",
            "required": true,
            "description": "Backup volume ID or name. Currently only PBS snapshots are supported.",
            "schema": {
              "type": "string",
              "description": "Backup volume ID or name. Currently only PBS snapshots are supported."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "any"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/access/tfa": {
      "get": {
        "summary": "Permissions",
        "description": "Retrieve effective permissions of given user/token.\n\n**Required permissions:** Each user/token is allowed to dump their own permissions (or that of owned tokens). A user can dump the permissions of another user or their tokens if they have 'Sys.Audit' permission on /access.",
        "operationId": "get_access_tfa",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "required": false,
            "description": "Only dump this specific path, not the whole tree.",
            "schema": {
              "type": "string",
              "description": "Only dump this specific path, not the whole tree."
            }
          },
          {
            "name": "userid",
            "in": "query",
            "required": false,
            "description": "User ID or full API token ID",
            "schema": {
              "type": "string",
              "description": "User ID or full API token ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create Ticket",
        "description": "Create or verify authentication ticket.\n\n**Required permissions:** You need to pass valid credientials.",
        "operationId": "post_access_tfa",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "otp",
            "in": "query",
            "required": false,
            "description": "One-time password for Two-factor authentication.",
            "schema": {
              "type": "string",
              "description": "One-time password for Two-factor authentication."
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": true,
            "description": "The secret password. This can also be a valid ticket.",
            "schema": {
              "type": "string",
              "description": "The secret password. This can also be a valid ticket."
            }
          },
          {
            "name": "path",
            "in": "query",
            "required": false,
            "description": "Verify ticket, and check if user have access 'privs' on 'path'",
            "schema": {
              "type": "string",
              "description": "Verify ticket, and check if user have access 'privs' on 'path'"
            }
          },
          {
            "name": "privs",
            "in": "query",
            "required": false,
            "description": "Verify ticket, and check if user have access 'privs' on 'path'",
            "schema": {
              "type": "string",
              "description": "Verify ticket, and check if user have access 'privs' on 'path'"
            }
          },
          {
            "name": "realm",
            "in": "query",
            "required": false,
            "description": "You can optionally pass the realm using this parameter. Normally the realm is simply added to the username <username>@<realm>.",
            "schema": {
              "type": "string",
              "description": "You can optionally pass the realm using this parameter. Normally the realm is simply added to the username <username>@<realm>."
            }
          },
          {
            "name": "username",
            "in": "query",
            "required": true,
            "description": "User name",
            "schema": {
              "type": "string",
              "description": "User name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Change Password",
        "description": "Change user password.\n\n**Required permissions:** Each user is allowed to change their own password. A user can change the password of another user if they have 'Realm.AllocateUser' (on the realm of user <userid>) and 'User.Modify' permission on /access/groups/<group> on a group where user <userid> is member of. For the PAM realm, a password change does not take  effect cluster-wide, but only applies to the local node.",
        "operationId": "put_access_tfa",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "password",
            "in": "query",
            "required": true,
            "description": "The new password.",
            "schema": {
              "type": "string",
              "description": "The new password."
            }
          },
          {
            "name": "userid",
            "in": "query",
            "required": true,
            "description": "Full User ID, in the `name@realm` format.",
            "schema": {
              "type": "string",
              "description": "Full User ID, in the `name@realm` format."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/osd/{osdid}/lv-info": {
      "post": {
        "summary": "Scrub",
        "description": "Instruct the OSD to scrub.",
        "operationId": "post_nodes_node_ceph_osd_osdid_lv-info",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "osdid",
            "in": "path",
            "required": true,
            "description": "osdid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deep",
            "in": "query",
            "required": false,
            "description": "If set, instructs a deep scrub instead of a normal one.",
            "schema": {
              "type": "boolean",
              "description": "If set, instructs a deep scrub instead of a normal one.",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/apt/update": {
      "get": {
        "summary": "Changelog",
        "description": "Get package changelogs.",
        "operationId": "get_nodes_node_apt_update",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "Package name.",
            "schema": {
              "type": "string",
              "description": "Package name."
            }
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "description": "Package version.",
            "schema": {
              "type": "string",
              "description": "Package version."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/access/openid/auth-url": {
      "get": {
        "summary": "Index",
        "description": "Directory index.",
        "operationId": "get_access_openid_auth-url",
        "tags": [
          "Access Control"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Login",
        "description": " Verify OpenID authorization code and create a ticket.",
        "operationId": "post_access_openid_auth-url",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": true,
            "description": "OpenId authorization code.",
            "schema": {
              "type": "string",
              "description": "OpenId authorization code."
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": true,
            "description": "OpenId state.",
            "schema": {
              "type": "string",
              "description": "OpenId state."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Tfa",
        "description": "Delete a TFA entry by ID.",
        "operationId": "delete_access_openid_auth-url",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "A TFA entry id.",
            "schema": {
              "type": "string",
              "description": "A TFA entry id."
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": false,
            "description": "The current password of the user performing the change.",
            "schema": {
              "type": "string",
              "description": "The current password of the user performing the change."
            }
          },
          {
            "name": "userid",
            "in": "query",
            "required": true,
            "description": "Full User ID, in the `name@realm` format.",
            "schema": {
              "type": "string",
              "description": "Full User ID, in the `name@realm` format."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/vncwebsocket": {
      "post": {
        "summary": "Spiceproxy",
        "description": "Returns a SPICE configuration to connect to the VM.",
        "operationId": "post_nodes_node_qemu_vmid_vncwebsocket",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "proxy",
            "in": "query",
            "required": false,
            "description": "SPICE proxy server. This can be used by the client to specify the proxy server. All nodes in a cluster runs 'spiceproxy', so it is up to the client to choose one. By default, we return the node where the VM is currently running. As reasonable setting is to use same node you use to connect to the API (This is window.location.hostname for the JS GUI).",
            "schema": {
              "type": "string",
              "description": "SPICE proxy server. This can be used by the client to specify the proxy server. All nodes in a cluster runs 'spiceproxy', so it is up to the client to choose one. By default, we return the node where the VM is currently running. As reasonable setting is to use same node you use to connect to the API (This is window.location.hostname for the JS GUI)."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/firewall/rules/{pos}": {
      "get": {
        "summary": "Get Rules",
        "description": "List rules.",
        "operationId": "get_nodes_node_firewall_rules_pos",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "pos",
            "in": "path",
            "required": true,
            "description": "pos identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/init": {
      "get": {
        "summary": "Status",
        "description": "Get ceph status.",
        "operationId": "get_nodes_node_ceph_init",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Restart",
        "description": "Restart ceph services.",
        "operationId": "post_nodes_node_ceph_init",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": false,
            "description": "Ceph service name.",
            "schema": {
              "type": "string",
              "description": "Ceph service name.",
              "default": "ceph.target"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/apt/versions": {
      "get": {
        "summary": "Index",
        "description": "Directory index for apt (Advanced Package Tool).",
        "operationId": "get_nodes_node_apt_versions",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Rule",
        "description": "Delete rule.",
        "operationId": "delete_nodes_node_apt_versions",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "pos",
            "in": "query",
            "required": false,
            "description": "Update rule at position <pos>.",
            "schema": {
              "type": "integer",
              "description": "Update rule at position <pos>."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/rules": {
      "get": {
        "summary": "Index",
        "description": "Directory index.",
        "operationId": "get_nodes_node_ceph_rules",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/firewall/rules": {
      "get": {
        "summary": "Read Ip",
        "description": "Read IP or Network settings from IPSet.",
        "operationId": "get_cluster_firewall_rules",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "cidr",
            "in": "query",
            "required": true,
            "description": "Network/IP specification in CIDR format.",
            "schema": {
              "type": "string",
              "description": "Network/IP specification in CIDR format."
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "IP set name.",
            "schema": {
              "type": "string",
              "description": "IP set name."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Update Ip",
        "description": "Update IP or Network settings",
        "operationId": "put_cluster_firewall_rules",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "cidr",
            "in": "query",
            "required": true,
            "description": "Network/IP specification in CIDR format.",
            "schema": {
              "type": "string",
              "description": "Network/IP specification in CIDR format."
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "IP set name.",
            "schema": {
              "type": "string",
              "description": "IP set name."
            }
          },
          {
            "name": "nomatch",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Remove Ip",
        "description": "Remove IP or Network from IPSet.",
        "operationId": "delete_cluster_firewall_rules",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "cidr",
            "in": "query",
            "required": true,
            "description": "Network/IP specification in CIDR format.",
            "schema": {
              "type": "string",
              "description": "Network/IP specification in CIDR format."
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "IP set name.",
            "schema": {
              "type": "string",
              "description": "IP set name."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/config/nodes/{node}": {
      "get": {
        "summary": "Join Info",
        "description": "Get information needed to join this cluster over the connected node.",
        "operationId": "get_cluster_config_nodes_node",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/sdn/ipams": {
      "get": {
        "summary": "Index",
        "description": "SDN dns index.\n\n**Required permissions:** Only list entries where you have 'SDN.Audit' or 'SDN.Allocate' permissions on '/sdn/dns/<dns>'",
        "operationId": "get_cluster_sdn_ipams",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Only list sdn dns of specific type",
            "schema": {
              "type": "string",
              "description": "Only list sdn dns of specific type",
              "enum": [
                "powerdns"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Update",
        "description": "Update sdn dns object configuration.",
        "operationId": "put_cluster_sdn_ipams",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "delete",
            "in": "query",
            "required": false,
            "description": "A list of settings you want to delete.",
            "schema": {
              "type": "string",
              "description": "A list of settings you want to delete."
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "dns",
            "in": "query",
            "required": true,
            "description": "The SDN dns object identifier.",
            "schema": {
              "type": "string",
              "description": "The SDN dns object identifier."
            }
          },
          {
            "name": "fingerprint",
            "in": "query",
            "required": false,
            "description": "Certificate SHA 256 fingerprint.",
            "schema": {
              "type": "string",
              "description": "Certificate SHA 256 fingerprint."
            }
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reversemaskv6",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ttl",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "url",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete sdn dns object configuration.",
        "operationId": "delete_cluster_sdn_ipams",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "dns",
            "in": "query",
            "required": true,
            "description": "The SDN dns object identifier.",
            "schema": {
              "type": "string",
              "description": "The SDN dns object identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/disks/zfs/{name}": {
      "get": {
        "summary": "Index",
        "description": "List Zpools.",
        "operationId": "get_nodes_node_disks_zfs_name",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create",
        "description": "Create a ZFS pool.\n\n**Required permissions:** Requires additionally 'Datastore.Allocate' on /storage when setting 'add_storage'",
        "operationId": "post_nodes_node_disks_zfs_name",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "add_storage",
            "in": "query",
            "required": false,
            "description": "Configure storage using the zpool.",
            "schema": {
              "type": "boolean",
              "description": "Configure storage using the zpool.",
              "default": 0
            }
          },
          {
            "name": "ashift",
            "in": "query",
            "required": false,
            "description": "Pool sector size exponent.",
            "schema": {
              "type": "integer",
              "description": "Pool sector size exponent.",
              "default": 12
            }
          },
          {
            "name": "compression",
            "in": "query",
            "required": false,
            "description": "The compression algorithm to use.",
            "schema": {
              "type": "string",
              "description": "The compression algorithm to use.",
              "default": "on",
              "enum": [
                "on",
                "off",
                "gzip",
                "lz4",
                "lzjb",
                "zle",
                "zstd"
              ]
            }
          },
          {
            "name": "devices",
            "in": "query",
            "required": true,
            "description": "The block devices you want to create the zpool on.",
            "schema": {
              "type": "string",
              "description": "The block devices you want to create the zpool on."
            }
          },
          {
            "name": "data",
            "in": "query",
            "required": true,
            "description": "The number of data devices per redundancy group. (dRAID)",
            "schema": {
              "type": "integer",
              "description": "The number of data devices per redundancy group. (dRAID)"
            }
          },
          {
            "name": "spares",
            "in": "query",
            "required": true,
            "description": "Number of dRAID spares.",
            "schema": {
              "type": "integer",
              "description": "Number of dRAID spares."
            }
          },
          {
            "name": "raidlevel",
            "in": "query",
            "required": true,
            "description": "The RAID level to use.",
            "schema": {
              "type": "string",
              "description": "The RAID level to use.",
              "enum": [
                "single",
                "mirror",
                "raid10",
                "raidz",
                "raidz2",
                "raidz3",
                "draid",
                "draid2",
                "draid3"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/suspend-disk": {
      "post": {
        "summary": "Set-User-Password",
        "description": "Sets the password for the given user to the given password",
        "operationId": "post_nodes_node_qemu_vmid_agent_suspend-disk",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "crypted",
            "in": "query",
            "required": false,
            "description": "set to 1 if the password has already been passed through crypt()",
            "schema": {
              "type": "boolean",
              "description": "set to 1 if the password has already been passed through crypt()",
              "default": 0
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": true,
            "description": "The new password.",
            "schema": {
              "type": "string",
              "description": "The new password."
            }
          },
          {
            "name": "username",
            "in": "query",
            "required": true,
            "description": "The user to set the password for.",
            "schema": {
              "type": "string",
              "description": "The user to set the password for."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/cfg": {
      "get": {
        "summary": "Osddetails",
        "description": "Get OSD details",
        "operationId": "get_nodes_node_ceph_cfg",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "osdid",
            "in": "query",
            "required": true,
            "description": "OSD ID",
            "schema": {
              "type": "integer",
              "description": "OSD ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/move_volume": {
      "get": {
        "summary": "Vm Pending",
        "description": "Get container configuration, including pending changes.",
        "operationId": "get_nodes_node_lxc_vmid_move_volume",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/startall": {
      "get": {
        "summary": "Get Etc Hosts",
        "description": "Get the content of /etc/hosts.",
        "operationId": "get_nodes_node_startall",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Migrateall",
        "description": "Migrate all VMs and Containers.\n\n**Required permissions:** The 'VM.Migrate' permission is required on '/' or on '/vms/<ID>' for each ID passed via the 'vms' parameter.",
        "operationId": "post_nodes_node_startall",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "maxworkers",
            "in": "query",
            "required": false,
            "description": "Maximal number of parallel migration job. If not set, uses'max_workers' from datacenter.cfg. One of both must be set!",
            "schema": {
              "type": "integer",
              "description": "Maximal number of parallel migration job. If not set, uses'max_workers' from datacenter.cfg. One of both must be set!"
            }
          },
          {
            "name": "target",
            "in": "query",
            "required": true,
            "description": "Target node.",
            "schema": {
              "type": "string",
              "description": "Target node."
            }
          },
          {
            "name": "vms",
            "in": "query",
            "required": false,
            "description": "Only consider Guests with these IDs.",
            "schema": {
              "type": "string",
              "description": "Only consider Guests with these IDs."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall/ipset/{name}/{cidr}": {
      "get": {
        "summary": "Get Ipset",
        "description": "List IPSet content",
        "operationId": "get_nodes_node_lxc_vmid_firewall_ipset_name_cidr",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cidr",
            "in": "path",
            "required": true,
            "description": "cidr identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Ipset",
        "description": "Delete IPSet",
        "operationId": "delete_nodes_node_lxc_vmid_firewall_ipset_name_cidr",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cidr",
            "in": "path",
            "required": true,
            "description": "cidr identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "Delete all members of the IPSet, if there are any.",
            "schema": {
              "type": "boolean",
              "description": "Delete all members of the IPSet, if there are any."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/status/current": {
      "post": {
        "summary": "Vm Stop",
        "description": "Stop the container. This will abruptly stop all processes running in the container.",
        "operationId": "post_nodes_node_lxc_vmid_status_current",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "skiplock",
            "in": "query",
            "required": false,
            "description": "Ignore locks - only root is allowed to use this option.",
            "schema": {
              "type": "boolean",
              "description": "Ignore locks - only root is allowed to use this option."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall": {
      "get": {
        "summary": "Rrddata",
        "description": "Read VM RRD statistics",
        "operationId": "get_nodes_node_lxc_vmid_firewall",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "cf",
            "in": "query",
            "required": false,
            "description": "The RRD consolidation function",
            "schema": {
              "type": "string",
              "description": "The RRD consolidation function",
              "enum": [
                "AVERAGE",
                "MAX"
              ]
            }
          },
          {
            "name": "timeframe",
            "in": "query",
            "required": true,
            "description": "Specify the time frame you are interested in.",
            "schema": {
              "type": "string",
              "description": "Specify the time frame you are interested in.",
              "enum": [
                "hour",
                "day",
                "week",
                "month",
                "year"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/acme/plugins": {
      "get": {
        "summary": "Account Index",
        "description": "ACMEAccount index.",
        "operationId": "get_cluster_acme_plugins",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Register Account",
        "description": "Register a new ACME account with CA.",
        "operationId": "post_cluster_acme_plugins",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "contact",
            "in": "query",
            "required": true,
            "description": "Contact email addresses.",
            "schema": {
              "type": "string",
              "description": "Contact email addresses."
            }
          },
          {
            "name": "directory",
            "in": "query",
            "required": false,
            "description": "URL of ACME CA directory endpoint.",
            "schema": {
              "type": "string",
              "description": "URL of ACME CA directory endpoint.",
              "default": "https://acme-v02.api.letsencrypt.org/directory"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "ACME account config file name.",
            "schema": {
              "type": "string",
              "description": "ACME account config file name.",
              "default": "default"
            }
          },
          {
            "name": "tos_url",
            "in": "query",
            "required": false,
            "description": "URL of CA TermsOfService - setting this indicates agreement.",
            "schema": {
              "type": "string",
              "description": "URL of CA TermsOfService - setting this indicates agreement."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Update Account",
        "description": "Update existing ACME account information with CA. Note: not specifying any new account information triggers a refresh.",
        "operationId": "put_cluster_acme_plugins",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "contact",
            "in": "query",
            "required": false,
            "description": "Contact email addresses.",
            "schema": {
              "type": "string",
              "description": "Contact email addresses."
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "ACME account config file name.",
            "schema": {
              "type": "string",
              "description": "ACME account config file name.",
              "default": "default"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Deactivate Account",
        "description": "Deactivate existing ACME account at CA.",
        "operationId": "delete_cluster_acme_plugins",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "ACME account config file name.",
            "schema": {
              "type": "string",
              "description": "ACME account config file name.",
              "default": "default"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/notifications": {
      "get": {
        "summary": "Nodes",
        "description": "Corosync node list.",
        "operationId": "get_cluster_notifications",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Addnode",
        "description": "Adds a node to the cluster configuration. This call is for internal use.",
        "operationId": "post_cluster_notifications",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "apiversion",
            "in": "query",
            "required": false,
            "description": "The JOIN_API_VERSION of the new node.",
            "schema": {
              "type": "integer",
              "description": "The JOIN_API_VERSION of the new node."
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "Do not throw error if node already exists.",
            "schema": {
              "type": "boolean",
              "description": "Do not throw error if node already exists."
            }
          },
          {
            "name": "address",
            "in": "query",
            "required": true,
            "description": "Hostname (or IP) of this corosync link address.",
            "schema": {
              "type": "string",
              "description": "Hostname (or IP) of this corosync link address."
            }
          },
          {
            "name": "priority",
            "in": "query",
            "required": false,
            "description": "The priority for the link when knet is used in 'passive' mode (default). Lower value means higher priority. Only valid for cluster create, ignored on node add.",
            "schema": {
              "type": "integer",
              "description": "The priority for the link when knet is used in 'passive' mode (default). Lower value means higher priority. Only valid for cluster create, ignored on node add.",
              "default": 0
            }
          },
          {
            "name": "new_node_ip",
            "in": "query",
            "required": false,
            "description": "IP Address of node to add. Used as fallback if no links are given.",
            "schema": {
              "type": "string",
              "description": "IP Address of node to add. Used as fallback if no links are given."
            }
          },
          {
            "name": "node",
            "in": "query",
            "required": true,
            "description": "The cluster node name.",
            "schema": {
              "type": "string",
              "description": "The cluster node name."
            }
          },
          {
            "name": "nodeid",
            "in": "query",
            "required": false,
            "description": "Node id for this node.",
            "schema": {
              "type": "integer",
              "description": "Node id for this node."
            }
          },
          {
            "name": "votes",
            "in": "query",
            "required": false,
            "description": "Number of votes for this node",
            "schema": {
              "type": "integer",
              "description": "Number of votes for this node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delnode",
        "description": "Removes a node from the cluster configuration.",
        "operationId": "delete_cluster_notifications",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "query",
            "required": true,
            "description": "The cluster node name.",
            "schema": {
              "type": "string",
              "description": "The cluster node name."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/mds": {
      "get": {
        "summary": "Index",
        "description": "MGR directory index.",
        "operationId": "get_nodes_node_ceph_mds",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Createmgr",
        "description": "Create Ceph Manager",
        "operationId": "post_nodes_node_ceph_mds",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "description": "The ID for the manager, when omitted the same as the nodename",
            "schema": {
              "type": "string",
              "description": "The ID for the manager, when omitted the same as the nodename"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Destroymon",
        "description": "Destroy Ceph Monitor and Manager.",
        "operationId": "delete_nodes_node_ceph_mds",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "monid",
            "in": "query",
            "required": true,
            "description": "Monitor ID",
            "schema": {
              "type": "string",
              "description": "Monitor ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/stop": {
      "get": {
        "summary": "Crush",
        "description": "Get OSD crush map",
        "operationId": "get_nodes_node_ceph_stop",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Restart",
        "description": "Restart ceph services.",
        "operationId": "post_nodes_node_ceph_stop",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": false,
            "description": "Ceph service name.",
            "schema": {
              "type": "string",
              "description": "Ceph service name.",
              "default": "ceph.target"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/status/shutdown": {
      "post": {
        "summary": "Vm Reboot",
        "description": "Reboot the container by shutting it down, and starting it again. Applies pending changes.",
        "operationId": "post_nodes_node_lxc_vmid_status_shutdown",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "required": false,
            "description": "Wait maximal timeout seconds for the shutdown.",
            "schema": {
              "type": "integer",
              "description": "Wait maximal timeout seconds for the shutdown."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/mds/{name}": {
      "get": {
        "summary": "Index",
        "description": "MDS directory index.",
        "operationId": "get_nodes_node_ceph_mds_name",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Createmgr",
        "description": "Create Ceph Manager",
        "operationId": "post_nodes_node_ceph_mds_name",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "description": "The ID for the manager, when omitted the same as the nodename",
            "schema": {
              "type": "string",
              "description": "The ID for the manager, when omitted the same as the nodename"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Destroymgr",
        "description": "Destroy Ceph Manager.",
        "operationId": "delete_nodes_node_ceph_mds_name",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The ID of the manager",
            "schema": {
              "type": "string",
              "description": "The ID of the manager"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/status/shutdown": {
      "post": {
        "summary": "Vm Suspend",
        "description": "Suspend virtual machine.\n\n**Required permissions:** You need 'VM.PowerMgmt' on /vms/{vmid}, and if you have set 'todisk', you need also 'VM.Config.Disk' on /vms/{vmid} and 'Datastore.AllocateSpace' on the storage for the vmstate.",
        "operationId": "post_nodes_node_qemu_vmid_status_shutdown",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "skiplock",
            "in": "query",
            "required": false,
            "description": "Ignore locks - only root is allowed to use this option.",
            "schema": {
              "type": "boolean",
              "description": "Ignore locks - only root is allowed to use this option."
            }
          },
          {
            "name": "statestorage",
            "in": "query",
            "required": false,
            "description": "The storage for the VM state",
            "schema": {
              "type": "string",
              "description": "The storage for the VM state"
            }
          },
          {
            "name": "todisk",
            "in": "query",
            "required": false,
            "description": "If set, suspends the VM to disk. Will be resumed on next VM start.",
            "schema": {
              "type": "boolean",
              "description": "If set, suspends the VM to disk. Will be resumed on next VM start.",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/osd/{osdid}/out": {
      "get": {
        "summary": "Index",
        "description": "Get Ceph osd list/tree.",
        "operationId": "get_nodes_node_ceph_osd_osdid_out",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "osdid",
            "in": "path",
            "required": true,
            "description": "osdid identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Scrub",
        "description": "Instruct the OSD to scrub.",
        "operationId": "post_nodes_node_ceph_osd_osdid_out",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "osdid",
            "in": "path",
            "required": true,
            "description": "osdid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deep",
            "in": "query",
            "required": false,
            "description": "If set, instructs a deep scrub instead of a normal one.",
            "schema": {
              "type": "boolean",
              "description": "If set, instructs a deep scrub instead of a normal one.",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Destroyosd",
        "description": "Destroy OSD",
        "operationId": "delete_nodes_node_ceph_osd_osdid_out",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "osdid",
            "in": "path",
            "required": true,
            "description": "osdid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cleanup",
            "in": "query",
            "required": false,
            "description": "If set, we remove partition table entries.",
            "schema": {
              "type": "boolean",
              "description": "If set, we remove partition table entries.",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/firewall/groups": {
      "get": {
        "summary": "Get Rule",
        "description": "Get single rule data.",
        "operationId": "get_cluster_firewall_groups",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "pos",
            "in": "query",
            "required": false,
            "description": "Update rule at position <pos>.",
            "schema": {
              "type": "integer",
              "description": "Update rule at position <pos>."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Rule",
        "description": "Delete rule.",
        "operationId": "delete_cluster_firewall_groups",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "pos",
            "in": "query",
            "required": false,
            "description": "Update rule at position <pos>.",
            "schema": {
              "type": "integer",
              "description": "Update rule at position <pos>."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/mtunnel": {
      "get": {
        "summary": "Vmdiridx",
        "description": "Directory index",
        "operationId": "get_nodes_node_lxc_vmid_mtunnel",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Destroy Vm",
        "description": "Destroy the container (also delete all uses files).",
        "operationId": "delete_nodes_node_lxc_vmid_mtunnel",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "Force destroy, even if running.",
            "schema": {
              "type": "boolean",
              "description": "Force destroy, even if running.",
              "default": 0
            }
          },
          {
            "name": "purge",
            "in": "query",
            "required": false,
            "description": "Remove container from all related configurations. For example, backup jobs, replication jobs or HA. Related ACLs and Firewall entries will *always* be removed.",
            "schema": {
              "type": "boolean",
              "description": "Remove container from all related configurations. For example, backup jobs, replication jobs or HA. Related ACLs and Firewall entries will *always* be removed.",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/snapshot/{snapname}": {
      "get": {
        "summary": "List",
        "description": "List all snapshots.",
        "operationId": "get_nodes_node_lxc_vmid_snapshot_snapname",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "snapname",
            "in": "path",
            "required": true,
            "description": "snapname identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Snapshot",
        "description": "Snapshot a container.",
        "operationId": "post_nodes_node_lxc_vmid_snapshot_snapname",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "snapname",
            "in": "path",
            "required": true,
            "description": "snapname identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "description": "A textual description or comment.",
            "schema": {
              "type": "string",
              "description": "A textual description or comment."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/backup/{id}/included_volumes": {
      "get": {
        "summary": "Read Job",
        "description": "Read vzdump backup job definition.",
        "operationId": "get_cluster_backup_id_included_volumes",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Job",
        "description": "Delete vzdump backup job definition.",
        "operationId": "delete_cluster_backup_id_included_volumes",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/disks/directory/{name}": {
      "get": {
        "summary": "Index",
        "description": "PVE Managed Directory storages.",
        "operationId": "get_nodes_node_disks_directory_name",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create",
        "description": "Create a Filesystem on an unused disk. Will be mounted under '/mnt/pve/NAME'.\n\n**Required permissions:** Requires additionally 'Datastore.Allocate' on /storage when setting 'add_storage'",
        "operationId": "post_nodes_node_disks_directory_name",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "add_storage",
            "in": "query",
            "required": false,
            "description": "Configure storage using the directory.",
            "schema": {
              "type": "boolean",
              "description": "Configure storage using the directory.",
              "default": 0
            }
          },
          {
            "name": "device",
            "in": "query",
            "required": true,
            "description": "The block device you want to create the filesystem on.",
            "schema": {
              "type": "string",
              "description": "The block device you want to create the filesystem on."
            }
          },
          {
            "name": "filesystem",
            "in": "query",
            "required": false,
            "description": "The desired filesystem.",
            "schema": {
              "type": "string",
              "description": "The desired filesystem.",
              "default": "ext4",
              "enum": [
                "ext4",
                "xfs"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall/aliases": {
      "get": {
        "summary": "Read Ip",
        "description": "Read IP or Network settings from IPSet.",
        "operationId": "get_nodes_node_qemu_vmid_firewall_aliases",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "cidr",
            "in": "query",
            "required": true,
            "description": "Network/IP specification in CIDR format.",
            "schema": {
              "type": "string",
              "description": "Network/IP specification in CIDR format."
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "IP set name.",
            "schema": {
              "type": "string",
              "description": "IP set name."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Remove Ip",
        "description": "Remove IP or Network from IPSet.",
        "operationId": "delete_nodes_node_qemu_vmid_firewall_aliases",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "cidr",
            "in": "query",
            "required": true,
            "description": "Network/IP specification in CIDR format.",
            "schema": {
              "type": "string",
              "description": "Network/IP specification in CIDR format."
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "IP set name.",
            "schema": {
              "type": "string",
              "description": "IP set name."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/access/acl": {
      "get": {
        "summary": "Read",
        "description": "Get auth server configuration.",
        "operationId": "get_access_acl",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "realm",
            "in": "query",
            "required": true,
            "description": "Authentication domain ID",
            "schema": {
              "type": "string",
              "description": "Authentication domain ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Sync",
        "description": "Syncs users and/or groups from the configured LDAP to user.cfg. NOTE: Synced groups will have the name 'name-$realm', so make sure those groups do not exist to prevent overwriting.\n\n**Required permissions:** 'Realm.AllocateUser' on '/access/realm/<realm>' and  'User.Modify' permissions to '/access/groups/'.",
        "operationId": "post_access_acl",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "full",
            "in": "query",
            "required": true,
            "description": "DEPRECATED: use 'remove-vanished' instead. If set, uses the LDAP Directory as source of truth, deleting users or groups not returned from the sync and removing all locally modified properties of synced users. If not set, only syncs information which is present in the synced data, and does not delete or modify anything else.",
            "schema": {
              "type": "boolean",
              "description": "DEPRECATED: use 'remove-vanished' instead. If set, uses the LDAP Directory as source of truth, deleting users or groups not returned from the sync and removing all locally modified properties of synced users. If not set, only syncs information which is present in the synced data, and does not delete or modify anything else."
            }
          },
          {
            "name": "purge",
            "in": "query",
            "required": true,
            "description": "DEPRECATED: use 'remove-vanished' instead. Remove ACLs for users or groups which were removed from the config during a sync.",
            "schema": {
              "type": "boolean",
              "description": "DEPRECATED: use 'remove-vanished' instead. Remove ACLs for users or groups which were removed from the config during a sync."
            }
          },
          {
            "name": "realm",
            "in": "query",
            "required": true,
            "description": "Authentication domain ID",
            "schema": {
              "type": "string",
              "description": "Authentication domain ID"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "required": true,
            "description": "Select what to sync.",
            "schema": {
              "type": "string",
              "description": "Select what to sync.",
              "enum": [
                "users",
                "groups",
                "both"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete an authentication server.",
        "operationId": "delete_access_acl",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "realm",
            "in": "query",
            "required": true,
            "description": "Authentication domain ID",
            "schema": {
              "type": "string",
              "description": "Authentication domain ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/access/domains/{realm}/sync": {
      "get": {
        "summary": "Read",
        "description": "Get auth server configuration.",
        "operationId": "get_access_domains_realm_sync",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "realm",
            "in": "path",
            "required": true,
            "description": "realm identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete an authentication server.",
        "operationId": "delete_access_domains_realm_sync",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "realm",
            "in": "path",
            "required": true,
            "description": "realm identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/replication/{id}": {
      "get": {
        "summary": "Status",
        "description": "List status of all replication jobs on this node.\n\n**Required permissions:** Requires the VM.Audit permission on /vms/<vmid>.",
        "operationId": "get_nodes_node_replication_id",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "guest",
            "in": "query",
            "required": false,
            "description": "Only list replication jobs for this guest.",
            "schema": {
              "type": "integer",
              "description": "Only list replication jobs for this guest."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "New Certificate",
        "description": "Order a new certificate from ACME-compatible CA.",
        "operationId": "post_nodes_node_replication_id",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "Overwrite existing custom certificate.",
            "schema": {
              "type": "boolean",
              "description": "Overwrite existing custom certificate.",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Renew Certificate",
        "description": "Renew existing certificate from CA.",
        "operationId": "put_nodes_node_replication_id",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "Force renewal even if expiry is more than 30 days away.",
            "schema": {
              "type": "boolean",
              "description": "Force renewal even if expiry is more than 30 days away.",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Revoke Certificate",
        "description": "Revoke existing certificate from CA.",
        "operationId": "delete_nodes_node_replication_id",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/storage/{storage}/status": {
      "get": {
        "summary": "Rrddata",
        "description": "Read storage RRD statistics.",
        "operationId": "get_nodes_node_storage_storage_status",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "required": true,
            "description": "storage identifier",
            "schema": {
              "type": "string",
              "description": "Storage identifier"
            }
          },
          {
            "name": "cf",
            "in": "query",
            "required": false,
            "description": "The RRD consolidation function",
            "schema": {
              "type": "string",
              "description": "The RRD consolidation function",
              "enum": [
                "AVERAGE",
                "MAX"
              ]
            }
          },
          {
            "name": "timeframe",
            "in": "query",
            "required": true,
            "description": "Specify the time frame you are interested in.",
            "schema": {
              "type": "string",
              "description": "Specify the time frame you are interested in.",
              "enum": [
                "hour",
                "day",
                "week",
                "month",
                "year"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall": {
      "post": {
        "summary": "Fsfreeze-Thaw",
        "description": "Execute fsfreeze-thaw.",
        "operationId": "post_nodes_node_qemu_vmid_firewall",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/get-memory-blocks": {
      "get": {
        "summary": "Get-Timezone",
        "description": "Execute get-timezone.",
        "operationId": "get_nodes_node_qemu_vmid_agent_get-memory-blocks",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/interfaces": {
      "get": {
        "summary": "Mtunnelwebsocket",
        "description": "Migration tunnel endpoint for websocket upgrade - only for internal use by VM migration.\n\n**Required permissions:** You need to pass a ticket valid for the selected socket. Tickets can be created via the mtunnel API call, which will check permissions accordingly.",
        "operationId": "get_nodes_node_lxc_vmid_interfaces",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "socket",
            "in": "query",
            "required": true,
            "description": "unix socket to forward to",
            "schema": {
              "type": "string",
              "description": "unix socket to forward to"
            }
          },
          {
            "name": "ticket",
            "in": "query",
            "required": true,
            "description": "ticket return by initial 'mtunnel' API call, or retrieved via 'ticket' tunnel command",
            "schema": {
              "type": "string",
              "description": "ticket return by initial 'mtunnel' API call, or retrieved via 'ticket' tunnel command"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Mtunnel",
        "description": "Migration tunnel endpoint - only for internal use by CT migration.\n\n**Required permissions:** You need 'VM.Allocate' permissions on '/vms/{vmid}' and Sys.Incoming on '/'. Further permission checks happen during the actual migration.",
        "operationId": "post_nodes_node_lxc_vmid_interfaces",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "bridges",
            "in": "query",
            "required": false,
            "description": "List of network bridges to check availability. Will be checked again for actually used bridges during migration.",
            "schema": {
              "type": "string",
              "description": "List of network bridges to check availability. Will be checked again for actually used bridges during migration."
            }
          },
          {
            "name": "storages",
            "in": "query",
            "required": false,
            "description": "List of storages to check permission and availability. Will be checked again for all actually used storages during migration.",
            "schema": {
              "type": "string",
              "description": "List of storages to check permission and availability. Will be checked again for all actually used storages during migration."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall/log": {
      "get": {
        "summary": "Index",
        "description": "Directory index.",
        "operationId": "get_nodes_node_lxc_vmid_firewall_log",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/osd": {
      "get": {
        "summary": "Index",
        "description": "MDS directory index.",
        "operationId": "get_nodes_node_ceph_osd",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Createmds",
        "description": "Create Ceph Metadata Server (MDS)",
        "operationId": "post_nodes_node_ceph_osd",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "hotstandby",
            "in": "query",
            "required": false,
            "description": "Determines whether a ceph-mds daemon should poll and replay the log of an active MDS. Faster switch on MDS failure, but needs more idle resources.",
            "schema": {
              "type": "boolean",
              "description": "Determines whether a ceph-mds daemon should poll and replay the log of an active MDS. Faster switch on MDS failure, but needs more idle resources.",
              "default": 0
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "The ID for the mds, when omitted the same as the nodename",
            "schema": {
              "type": "string",
              "description": "The ID for the mds, when omitted the same as the nodename",
              "default": "nodename"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Destroymds",
        "description": "Destroy Ceph Metadata Server",
        "operationId": "delete_nodes_node_ceph_osd",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "The name (ID) of the mds",
            "schema": {
              "type": "string",
              "description": "The name (ID) of the mds"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/status/reboot": {
      "post": {
        "summary": "Vm Resume",
        "description": "Resume virtual machine.",
        "operationId": "post_nodes_node_qemu_vmid_status_reboot",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "nocheck",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skiplock",
            "in": "query",
            "required": false,
            "description": "Ignore locks - only root is allowed to use this option.",
            "schema": {
              "type": "boolean",
              "description": "Ignore locks - only root is allowed to use this option."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/jobs": {
      "get": {
        "summary": "Get",
        "description": "Get directory mapping.",
        "operationId": "get_cluster_jobs",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Update",
        "description": "Update a directory mapping.",
        "operationId": "put_cluster_jobs",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "delete",
            "in": "query",
            "required": false,
            "description": "A list of settings you want to delete.",
            "schema": {
              "type": "string",
              "description": "A list of settings you want to delete."
            }
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "description": "Description of the directory mapping",
            "schema": {
              "type": "string",
              "description": "Description of the directory mapping"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The ID of the directory mapping",
            "schema": {
              "type": "string",
              "description": "The ID of the directory mapping"
            }
          },
          {
            "name": "node",
            "in": "query",
            "required": true,
            "description": "The cluster node name.",
            "schema": {
              "type": "string",
              "description": "The cluster node name."
            }
          },
          {
            "name": "path",
            "in": "query",
            "required": true,
            "description": "Absolute directory path that should be shared with the guest.",
            "schema": {
              "type": "string",
              "description": "Absolute directory path that should be shared with the guest."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Remove directory mapping.",
        "operationId": "delete_cluster_jobs",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/storage/{storage}/file-restore/download": {
      "get": {
        "summary": "Rrd",
        "description": "Read storage RRD statistics (returns PNG).",
        "operationId": "get_nodes_node_storage_storage_file-restore_download",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "required": true,
            "description": "storage identifier",
            "schema": {
              "type": "string",
              "description": "Storage identifier"
            }
          },
          {
            "name": "cf",
            "in": "query",
            "required": false,
            "description": "The RRD consolidation function",
            "schema": {
              "type": "string",
              "description": "The RRD consolidation function",
              "enum": [
                "AVERAGE",
                "MAX"
              ]
            }
          },
          {
            "name": "ds",
            "in": "query",
            "required": true,
            "description": "The list of datasources you want to display.",
            "schema": {
              "type": "string",
              "description": "The list of datasources you want to display."
            }
          },
          {
            "name": "timeframe",
            "in": "query",
            "required": true,
            "description": "Specify the time frame you are interested in.",
            "schema": {
              "type": "string",
              "description": "Specify the time frame you are interested in.",
              "enum": [
                "hour",
                "day",
                "week",
                "month",
                "year"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/tasks/{upid}": {
      "get": {
        "summary": "Node Tasks",
        "description": "Read task list for one node (finished tasks).\n\n**Required permissions:** List task associated with the current user, or all task the user has 'Sys.Audit' permissions on /nodes/<node> (the <node> the task runs on).",
        "operationId": "get_nodes_node_tasks_upid",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "upid",
            "in": "path",
            "required": true,
            "description": "upid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "errors",
            "in": "query",
            "required": false,
            "description": "Only list tasks with a status of ERROR.",
            "schema": {
              "type": "boolean",
              "description": "Only list tasks with a status of ERROR.",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Only list this amount of tasks.",
            "schema": {
              "type": "integer",
              "description": "Only list this amount of tasks.",
              "default": 50
            }
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "description": "Only list tasks since this UNIX epoch.",
            "schema": {
              "type": "integer",
              "description": "Only list tasks since this UNIX epoch."
            }
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "description": "List archived, active or all tasks.",
            "schema": {
              "type": "string",
              "description": "List archived, active or all tasks.",
              "default": "archive",
              "enum": [
                "archive",
                "active",
                "all"
              ]
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "description": "List tasks beginning from this offset.",
            "schema": {
              "type": "integer",
              "description": "List tasks beginning from this offset.",
              "default": 0
            }
          },
          {
            "name": "statusfilter",
            "in": "query",
            "required": false,
            "description": "List of Task States that should be returned.",
            "schema": {
              "type": "string",
              "description": "List of Task States that should be returned."
            }
          },
          {
            "name": "typefilter",
            "in": "query",
            "required": false,
            "description": "Only list tasks of this type (e.g., vzstart, vzdump).",
            "schema": {
              "type": "string",
              "description": "Only list tasks of this type (e.g., vzstart, vzdump)."
            }
          },
          {
            "name": "until",
            "in": "query",
            "required": false,
            "description": "Only list tasks until this UNIX epoch.",
            "schema": {
              "type": "integer",
              "description": "Only list tasks until this UNIX epoch."
            }
          },
          {
            "name": "userfilter",
            "in": "query",
            "required": false,
            "description": "Only list tasks from this user.",
            "schema": {
              "type": "string",
              "description": "Only list tasks from this user."
            }
          },
          {
            "name": "vmid",
            "in": "query",
            "required": false,
            "description": "Only list tasks for this VM.",
            "schema": {
              "type": "integer",
              "description": "Only list tasks for this VM."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/get-host-name": {
      "get": {
        "summary": "Get-Osinfo",
        "description": "Execute get-osinfo.",
        "operationId": "get_nodes_node_qemu_vmid_agent_get-host-name",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/config/join": {
      "get": {
        "summary": "Index",
        "description": "Directory index.",
        "operationId": "get_cluster_config_join",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create",
        "description": "Generate new cluster configuration. If no links given, default to local IP address as link0.",
        "operationId": "post_cluster_config_join",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "clustername",
            "in": "query",
            "required": true,
            "description": "The name of the cluster.",
            "schema": {
              "type": "string",
              "description": "The name of the cluster."
            }
          },
          {
            "name": "address",
            "in": "query",
            "required": true,
            "description": "Hostname (or IP) of this corosync link address.",
            "schema": {
              "type": "string",
              "description": "Hostname (or IP) of this corosync link address."
            }
          },
          {
            "name": "priority",
            "in": "query",
            "required": false,
            "description": "The priority for the link when knet is used in 'passive' mode (default). Lower value means higher priority. Only valid for cluster create, ignored on node add.",
            "schema": {
              "type": "integer",
              "description": "The priority for the link when knet is used in 'passive' mode (default). Lower value means higher priority. Only valid for cluster create, ignored on node add.",
              "default": 0
            }
          },
          {
            "name": "nodeid",
            "in": "query",
            "required": false,
            "description": "Node id for this node.",
            "schema": {
              "type": "integer",
              "description": "Node id for this node."
            }
          },
          {
            "name": "votes",
            "in": "query",
            "required": false,
            "description": "Number of votes for this node.",
            "schema": {
              "type": "integer",
              "description": "Number of votes for this node."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Rule",
        "description": "Delete rule.",
        "operationId": "delete_cluster_config_join",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "group",
            "in": "query",
            "required": true,
            "description": "Security Group name.",
            "schema": {
              "type": "string",
              "description": "Security Group name."
            }
          },
          {
            "name": "pos",
            "in": "query",
            "required": false,
            "description": "Update rule at position <pos>.",
            "schema": {
              "type": "integer",
              "description": "Update rule at position <pos>."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/sdn/dns/{dns}": {
      "get": {
        "summary": "Log",
        "description": "Read cluster log",
        "operationId": "get_cluster_sdn_dns_dns",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "dns",
            "in": "path",
            "required": true,
            "description": "dns identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max",
            "in": "query",
            "required": false,
            "description": "Maximum number of entries.",
            "schema": {
              "type": "integer",
              "description": "Maximum number of entries."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create",
        "description": "Create a new sdn dns object.",
        "operationId": "post_cluster_sdn_dns_dns",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "dns",
            "in": "path",
            "required": true,
            "description": "dns identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fingerprint",
            "in": "query",
            "required": false,
            "description": "Certificate SHA 256 fingerprint.",
            "schema": {
              "type": "string",
              "description": "Certificate SHA 256 fingerprint."
            }
          },
          {
            "name": "key",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reversemaskv6",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "reversev6mask",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ttl",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "description": "Plugin type.",
            "schema": {
              "type": "string",
              "description": "Plugin type.",
              "enum": [
                "powerdns"
              ]
            }
          },
          {
            "name": "url",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Reload",
        "description": "Apply sdn controller changes && reload.",
        "operationId": "put_cluster_sdn_dns_dns",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "dns",
            "in": "path",
            "required": true,
            "description": "dns identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/services/{service}/restart": {
      "get": {
        "summary": "Index",
        "description": "Service list.",
        "operationId": "get_nodes_node_services_service_restart",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "description": "service identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Service Reload",
        "description": "Reload service. Falls back to restart if service cannot be reloaded.",
        "operationId": "post_nodes_node_services_service_restart",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "description": "service identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/firewall/ipset/{name}/{cidr}": {
      "get": {
        "summary": "Ipset Index",
        "description": "List IPSets",
        "operationId": "get_cluster_firewall_ipset_name_cidr",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cidr",
            "in": "path",
            "required": true,
            "description": "cidr identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create Ip",
        "description": "Add IP or Network to IPSet.",
        "operationId": "post_cluster_firewall_ipset_name_cidr",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cidr",
            "in": "path",
            "required": true,
            "description": "cidr identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nomatch",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Ipset",
        "description": "Delete IPSet",
        "operationId": "delete_cluster_firewall_ipset_name_cidr",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cidr",
            "in": "path",
            "required": true,
            "description": "cidr identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "Delete all members of the IPSet, if there are any.",
            "schema": {
              "type": "boolean",
              "description": "Delete all members of the IPSet, if there are any."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/disks/list": {
      "get": {
        "summary": "Index",
        "description": "Node index.",
        "operationId": "get_nodes_node_disks_list",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Initgpt",
        "description": "Initialize Disk with GPT",
        "operationId": "post_nodes_node_disks_list",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "disk",
            "in": "query",
            "required": true,
            "description": "Block device name",
            "schema": {
              "type": "string",
              "description": "Block device name"
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "required": false,
            "description": "UUID for the GPT table",
            "schema": {
              "type": "string",
              "description": "UUID for the GPT table"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Wipe Disk",
        "description": "Wipe a disk or partition.",
        "operationId": "put_nodes_node_disks_list",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "disk",
            "in": "query",
            "required": true,
            "description": "Block device name",
            "schema": {
              "type": "string",
              "description": "Block device name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/replication/{id}/status": {
      "get": {
        "summary": "Index",
        "description": "Directory index.",
        "operationId": "get_nodes_node_replication_id_status",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Schedule Now",
        "description": "Schedule replication job to start as soon as possible.",
        "operationId": "post_nodes_node_replication_id_status",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/notifications/endpoints/webhook": {
      "get": {
        "summary": "Get All Targets",
        "description": "Returns a list of all entities that can be used as notification targets.",
        "operationId": "get_cluster_notifications_endpoints_webhook",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Test Target",
        "description": "Send a test notification to a provided target.",
        "operationId": "post_cluster_notifications_endpoints_webhook",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "Name of the target.",
            "schema": {
              "type": "string",
              "description": "Name of the target."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/snapshot/{snapname}/config": {
      "post": {
        "summary": "Rollback",
        "description": "Rollback VM state to specified snapshot.",
        "operationId": "post_nodes_node_qemu_vmid_snapshot_snapname_config",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "snapname",
            "in": "path",
            "required": true,
            "description": "snapname identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "description": "Whether the VM should get started after rolling back successfully. (Note: VMs will be automatically started if the snapshot includes RAM.)",
            "schema": {
              "type": "boolean",
              "description": "Whether the VM should get started after rolling back successfully. (Note: VMs will be automatically started if the snapshot includes RAM.)",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delsnapshot",
        "description": "Delete a VM snapshot.",
        "operationId": "delete_nodes_node_qemu_vmid_snapshot_snapname_config",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "snapname",
            "in": "path",
            "required": true,
            "description": "snapname identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "For removal from config file, even if removing disk snapshots fails.",
            "schema": {
              "type": "boolean",
              "description": "For removal from config file, even if removing disk snapshots fails."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/wakeonlan": {
      "get": {
        "summary": "Syslog",
        "description": "Read system log",
        "operationId": "get_nodes_node_wakeonlan",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": false,
            "description": "Service ID",
            "schema": {
              "type": "string",
              "description": "Service ID"
            }
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "description": "Display all log since this date-time string.",
            "schema": {
              "type": "string",
              "description": "Display all log since this date-time string."
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "until",
            "in": "query",
            "required": false,
            "description": "Display all log until this date-time string.",
            "schema": {
              "type": "string",
              "description": "Display all log until this date-time string."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/mapping/dir/{id}": {
      "get": {
        "summary": "Index",
        "description": "List directory mapping\n\n**Required permissions:** Only lists entries where you have 'Mapping.Modify', 'Mapping.Use' or 'Mapping.Audit' permissions on '/mapping/dir/<id>'.",
        "operationId": "get_cluster_mapping_dir_id",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create",
        "description": "Create a new directory mapping.",
        "operationId": "post_cluster_mapping_dir_id",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "description": "Description of the directory mapping",
            "schema": {
              "type": "string",
              "description": "Description of the directory mapping"
            }
          },
          {
            "name": "node",
            "in": "query",
            "required": true,
            "description": "The cluster node name.",
            "schema": {
              "type": "string",
              "description": "The cluster node name."
            }
          },
          {
            "name": "path",
            "in": "query",
            "required": true,
            "description": "Absolute directory path that should be shared with the guest.",
            "schema": {
              "type": "string",
              "description": "Absolute directory path that should be shared with the guest."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Remove Hardware Mapping.",
        "operationId": "delete_cluster_mapping_dir_id",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/storage/{storage}/prunebackups": {
      "get": {
        "summary": "Info",
        "description": "Get volume attributes\n\n**Required permissions:** You need read access for the volume.",
        "operationId": "get_nodes_node_storage_storage_prunebackups",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "required": true,
            "description": "storage identifier",
            "schema": {
              "type": "string",
              "description": "Storage identifier"
            }
          },
          {
            "name": "volume",
            "in": "query",
            "required": true,
            "description": "Volume identifier",
            "schema": {
              "type": "string",
              "description": "Volume identifier"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete volume\n\n**Required permissions:** You need 'Datastore.Allocate' privilege on the storage (or 'Datastore.AllocateSpace' for backup volumes if you have VM.Backup privilege on the VM).",
        "operationId": "delete_nodes_node_storage_storage_prunebackups",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "required": true,
            "description": "storage identifier",
            "schema": {
              "type": "string",
              "description": "Storage identifier"
            }
          },
          {
            "name": "delay",
            "in": "query",
            "required": false,
            "description": "Time to wait for the task to finish. We return 'null' if the task finish within that time.",
            "schema": {
              "type": "integer",
              "description": "Time to wait for the task to finish. We return 'null' if the task finish within that time."
            }
          },
          {
            "name": "volume",
            "in": "query",
            "required": true,
            "description": "Volume identifier",
            "schema": {
              "type": "string",
              "description": "Volume identifier"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/pending": {
      "get": {
        "summary": "Ip",
        "description": "Get IP addresses of the specified container interface.",
        "operationId": "get_nodes_node_lxc_vmid_pending",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/sdn": {
      "get": {
        "summary": "Log",
        "description": "Read cluster log",
        "operationId": "get_cluster_sdn",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "max",
            "in": "query",
            "required": false,
            "description": "Maximum number of entries.",
            "schema": {
              "type": "integer",
              "description": "Maximum number of entries."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Reload",
        "description": "Apply sdn controller changes && reload.",
        "operationId": "put_cluster_sdn",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/move_disk": {
      "get": {
        "summary": "Migrate Vm Precondition",
        "description": "Get preconditions for migration.",
        "operationId": "get_nodes_node_qemu_vmid_move_disk",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "target",
            "in": "query",
            "required": false,
            "description": "Target node.",
            "schema": {
              "type": "string",
              "description": "Target node."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/metrics/export": {
      "get": {
        "summary": "Get Matcher Field Values",
        "description": "Returns known notification metadata fields and their known values",
        "operationId": "get_cluster_metrics_export",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Sendmail Endpoint",
        "description": "Remove sendmail endpoint",
        "operationId": "delete_cluster_metrics_export",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent": {
      "get": {
        "summary": "Rrddata",
        "description": "Read VM RRD statistics",
        "operationId": "get_nodes_node_qemu_vmid_agent",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "cf",
            "in": "query",
            "required": false,
            "description": "The RRD consolidation function",
            "schema": {
              "type": "string",
              "description": "The RRD consolidation function",
              "enum": [
                "AVERAGE",
                "MAX"
              ]
            }
          },
          {
            "name": "timeframe",
            "in": "query",
            "required": true,
            "description": "Specify the time frame you are interested in.",
            "schema": {
              "type": "string",
              "description": "Specify the time frame you are interested in.",
              "enum": [
                "hour",
                "day",
                "week",
                "month",
                "year"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/storage/{storage}/file-restore/list": {
      "get": {
        "summary": "Read Status",
        "description": "Read storage status.",
        "operationId": "get_nodes_node_storage_storage_file-restore_list",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "required": true,
            "description": "storage identifier",
            "schema": {
              "type": "string",
              "description": "Storage identifier"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/tasks/{upid}/log": {
      "get": {
        "summary": "Upid Index",
        "description": "",
        "operationId": "get_nodes_node_tasks_upid_log",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "upid",
            "in": "path",
            "required": true,
            "description": "upid identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Stop Task",
        "description": "Stop a task.\n\n**Required permissions:** The user needs 'Sys.Modify' permissions on '/nodes/<node>' if they aren't the owner of the task.",
        "operationId": "delete_nodes_node_tasks_upid_log",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "upid",
            "in": "path",
            "required": true,
            "description": "upid identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/mapping/usb": {
      "get": {
        "summary": "Index",
        "description": "List resource types.",
        "operationId": "get_cluster_mapping_usb",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Rule",
        "description": "Delete rule.\n\n**Required permissions:** Needs SDN.Allocate permissions on '/sdn/zones/<zone>/<vnet>'",
        "operationId": "delete_cluster_mapping_usb",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "pos",
            "in": "query",
            "required": false,
            "description": "Update rule at position <pos>.",
            "schema": {
              "type": "integer",
              "description": "Update rule at position <pos>."
            }
          },
          {
            "name": "vnet",
            "in": "query",
            "required": true,
            "description": "The SDN vnet object identifier.",
            "schema": {
              "type": "string",
              "description": "The SDN vnet object identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/feature": {
      "post": {
        "summary": "Template",
        "description": "Create a Template.\n\n**Required permissions:** You need 'VM.Allocate' permissions on /vms/{vmid}",
        "operationId": "post_nodes_node_lxc_vmid_feature",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/snapshot/{snapname}/rollback": {
      "get": {
        "summary": "Get Snapshot Config",
        "description": "Get snapshot configuration",
        "operationId": "get_nodes_node_lxc_vmid_snapshot_snapname_rollback",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "snapname",
            "in": "path",
            "required": true,
            "description": "snapname identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Update Snapshot Config",
        "description": "Update snapshot metadata.",
        "operationId": "put_nodes_node_lxc_vmid_snapshot_snapname_rollback",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "snapname",
            "in": "path",
            "required": true,
            "description": "snapname identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "description": "A textual description or comment.",
            "schema": {
              "type": "string",
              "description": "A textual description or comment."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall/aliases/{name}": {
      "get": {
        "summary": "Get Aliases",
        "description": "List aliases",
        "operationId": "get_nodes_node_lxc_vmid_firewall_aliases_name",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create Alias",
        "description": "Create IP or Network Alias.",
        "operationId": "post_nodes_node_lxc_vmid_firewall_aliases_name",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cidr",
            "in": "query",
            "required": true,
            "description": "Network/IP specification in CIDR format.",
            "schema": {
              "type": "string",
              "description": "Network/IP specification in CIDR format."
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/firewall/log": {
      "get": {
        "summary": "Read Job Log",
        "description": "Read replication job log.\n\n**Required permissions:** Requires the VM.Audit permission on /vms/<vmid>, or 'Sys.Audit' on '/nodes/<node>'",
        "operationId": "get_nodes_node_firewall_log",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.",
            "schema": {
              "type": "string",
              "description": "Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'."
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/pools": {
      "get": {
        "summary": "Version",
        "description": "API version details, including some parts of the global datacenter config.",
        "operationId": "get_pools",
        "tags": [
          "Resource Pools"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/firewall": {
      "get": {
        "summary": "Read Job Log",
        "description": "Read replication job log.\n\n**Required permissions:** Requires the VM.Audit permission on /vms/<vmid>, or 'Sys.Audit' on '/nodes/<node>'",
        "operationId": "get_nodes_node_firewall",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.",
            "schema": {
              "type": "string",
              "description": "Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'."
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Schedule Now",
        "description": "Schedule replication job to start as soon as possible.",
        "operationId": "post_nodes_node_firewall",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.",
            "schema": {
              "type": "string",
              "description": "Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/storage/{storage}/upload": {
      "post": {
        "summary": "Download Url",
        "description": "Download templates, ISO images, OVAs and VM images by using an URL.\n\n**Required permissions:** Requires allocation access on the storage and as this allows one to probe the (local!) host network indirectly it also requires one of Sys.Modify on / (for backwards compatibility) or the newer Sys.AccessNetwork privilege on the node.",
        "operationId": "post_nodes_node_storage_storage_upload",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "required": true,
            "description": "storage identifier",
            "schema": {
              "type": "string",
              "description": "Storage identifier"
            }
          },
          {
            "name": "checksum",
            "in": "query",
            "required": false,
            "description": "The expected checksum of the file.",
            "schema": {
              "type": "string",
              "description": "The expected checksum of the file."
            }
          },
          {
            "name": "compression",
            "in": "query",
            "required": false,
            "description": "Decompress the downloaded file using the specified compression algorithm.",
            "schema": {
              "type": "string",
              "description": "Decompress the downloaded file using the specified compression algorithm."
            }
          },
          {
            "name": "content",
            "in": "query",
            "required": true,
            "description": "Content type.",
            "schema": {
              "type": "string",
              "description": "Content type.",
              "enum": [
                "iso",
                "vztmpl",
                "import"
              ]
            }
          },
          {
            "name": "filename",
            "in": "query",
            "required": true,
            "description": "The name of the file to create. Caution: This will be normalized!",
            "schema": {
              "type": "string",
              "description": "The name of the file to create. Caution: This will be normalized!"
            }
          },
          {
            "name": "url",
            "in": "query",
            "required": true,
            "description": "The URL to download the file from.",
            "schema": {
              "type": "string",
              "description": "The URL to download the file from."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/notifications/endpoints/gotify/{name}": {
      "get": {
        "summary": "Get Gotify Endpoints",
        "description": "Returns a list of all gotify endpoints",
        "operationId": "get_cluster_notifications_endpoints_gotify_name",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create Gotify Endpoint",
        "description": "Create a new gotify endpoint",
        "operationId": "post_cluster_notifications_endpoints_gotify_name",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "Comment",
            "schema": {
              "type": "string",
              "description": "Comment"
            }
          },
          {
            "name": "disable",
            "in": "query",
            "required": false,
            "description": "Disable this target",
            "schema": {
              "type": "boolean",
              "description": "Disable this target",
              "default": 0
            }
          },
          {
            "name": "server",
            "in": "query",
            "required": true,
            "description": "Server URL",
            "schema": {
              "type": "string",
              "description": "Server URL"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "description": "Secret token",
            "schema": {
              "type": "string",
              "description": "Secret token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Smtp Endpoint",
        "description": "Remove smtp endpoint",
        "operationId": "delete_cluster_notifications_endpoints_gotify_name",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/restart": {
      "get": {
        "summary": "Rules",
        "description": "List ceph rules.",
        "operationId": "get_nodes_node_ceph_restart",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/notifications/endpoints/smtp": {
      "get": {
        "summary": "Get Webhook Endpoint",
        "description": "Return a specific webhook endpoint",
        "operationId": "get_cluster_notifications_endpoints_smtp",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "Name of the endpoint.",
            "schema": {
              "type": "string",
              "description": "Name of the endpoint."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Webhook Endpoint",
        "description": "Remove webhook endpoint",
        "operationId": "delete_cluster_notifications_endpoints_smtp",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/firewall/options": {
      "get": {
        "summary": "Index",
        "description": "Directory index.",
        "operationId": "get_cluster_firewall_options",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/acme/meta": {
      "get": {
        "summary": "Index",
        "description": "ACMEAccount index.",
        "operationId": "get_cluster_acme_meta",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/stopall": {
      "get": {
        "summary": "Get Etc Hosts",
        "description": "Get the content of /etc/hosts.",
        "operationId": "get_nodes_node_stopall",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Write Etc Hosts",
        "description": "Write /etc/hosts.",
        "operationId": "post_nodes_node_stopall",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "data",
            "in": "query",
            "required": true,
            "description": "The target content of /etc/hosts.",
            "schema": {
              "type": "string",
              "description": "The target content of /etc/hosts."
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/disks/lvm": {
      "get": {
        "summary": "Index",
        "description": "List LVM thinpools",
        "operationId": "get_nodes_node_disks_lvm",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Remove an LVM thin pool.\n\n**Required permissions:** Requires additionally 'Datastore.Allocate' on /storage when setting 'cleanup-config'",
        "operationId": "delete_nodes_node_disks_lvm",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "The storage identifier.",
            "schema": {
              "type": "string",
              "description": "The storage identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/rrd": {
      "get": {
        "summary": "Rrddata",
        "description": "Read VM RRD statistics",
        "operationId": "get_nodes_node_qemu_vmid_rrd",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "cf",
            "in": "query",
            "required": false,
            "description": "The RRD consolidation function",
            "schema": {
              "type": "string",
              "description": "The RRD consolidation function",
              "enum": [
                "AVERAGE",
                "MAX"
              ]
            }
          },
          {
            "name": "timeframe",
            "in": "query",
            "required": true,
            "description": "Specify the time frame you are interested in.",
            "schema": {
              "type": "string",
              "description": "Specify the time frame you are interested in.",
              "enum": [
                "hour",
                "day",
                "week",
                "month",
                "year"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/access": {
      "get": {
        "summary": "Read Pool",
        "description": "Get pool configuration (deprecated, no support for nested pools, use 'GET /pools/?poolid={poolid}').",
        "operationId": "get_access",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "poolid",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string",
              "enum": [
                "qemu",
                "lxc",
                "storage"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Update Pool Deprecated",
        "description": "Update pool data (deprecated, no support for nested pools - use 'PUT /pools/?poolid={poolid}' instead).\n\n**Required permissions:** You also need the right to modify permissions on any object you add/delete.",
        "operationId": "put_access",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "required": false,
            "description": "Remove the passed VMIDs and/or storage IDs instead of adding them.",
            "schema": {
              "type": "boolean",
              "description": "Remove the passed VMIDs and/or storage IDs instead of adding them.",
              "default": 0
            }
          },
          {
            "name": "poolid",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storage",
            "in": "query",
            "required": false,
            "description": "List of storage IDs to add or remove from this pool.",
            "schema": {
              "type": "string",
              "description": "List of storage IDs to add or remove from this pool."
            }
          },
          {
            "name": "vms",
            "in": "query",
            "required": false,
            "description": "List of guest VMIDs to add or remove from this pool.",
            "schema": {
              "type": "string",
              "description": "List of guest VMIDs to add or remove from this pool."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Pool",
        "description": "Delete pool.\n\n**Required permissions:** You can only delete empty pools (no members).",
        "operationId": "delete_access",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "poolid",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/firewall/ipset": {
      "get": {
        "summary": "Get Aliases",
        "description": "List aliases",
        "operationId": "get_cluster_firewall_ipset",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Update Alias",
        "description": "Update IP or Network alias.",
        "operationId": "put_cluster_firewall_ipset",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "cidr",
            "in": "query",
            "required": true,
            "description": "Network/IP specification in CIDR format.",
            "schema": {
              "type": "string",
              "description": "Network/IP specification in CIDR format."
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "Alias name.",
            "schema": {
              "type": "string",
              "description": "Alias name."
            }
          },
          {
            "name": "rename",
            "in": "query",
            "required": false,
            "description": "Rename an existing alias.",
            "schema": {
              "type": "string",
              "description": "Rename an existing alias."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Remove Alias",
        "description": "Remove IP or Network alias.",
        "operationId": "delete_cluster_firewall_ipset",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "Alias name.",
            "schema": {
              "type": "string",
              "description": "Alias name."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/firewall": {
      "get": {
        "summary": "Read Job",
        "description": "Read vzdump backup job definition.",
        "operationId": "get_cluster_firewall",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The job ID.",
            "schema": {
              "type": "string",
              "description": "The job ID."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Job",
        "description": "Delete vzdump backup job definition.",
        "operationId": "delete_cluster_firewall",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The job ID.",
            "schema": {
              "type": "string",
              "description": "The job ID."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/services": {
      "get": {
        "summary": "Get",
        "description": "Read subscription info.",
        "operationId": "get_nodes_node_services",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Update",
        "description": "Update subscription info.",
        "operationId": "post_nodes_node_services",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "Always connect to server, even if local cache is still valid.",
            "schema": {
              "type": "boolean",
              "description": "Always connect to server, even if local cache is still valid.",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Set",
        "description": "Set subscription key.",
        "operationId": "put_nodes_node_services",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "key",
            "in": "query",
            "required": true,
            "description": "Proxmox VE subscription key",
            "schema": {
              "type": "string",
              "description": "Proxmox VE subscription key"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete subscription key of this node.",
        "operationId": "delete_nodes_node_services",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/ha/groups/{group}": {
      "get": {
        "summary": "Index",
        "description": "Get HA groups.",
        "operationId": "get_cluster_ha_groups_group",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "description": "group identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create",
        "description": "Create a new HA group.",
        "operationId": "post_cluster_ha_groups_group",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "description": "group identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "Description.",
            "schema": {
              "type": "string",
              "description": "Description."
            }
          },
          {
            "name": "nodes",
            "in": "query",
            "required": true,
            "description": "List of cluster node names with optional priority.",
            "schema": {
              "type": "string",
              "description": "List of cluster node names with optional priority."
            }
          },
          {
            "name": "nofailback",
            "in": "query",
            "required": false,
            "description": "The CRM tries to run services on the node with the highest priority. If a node with higher priority comes online, the CRM migrates the service to that node. Enabling nofailback prevents that behavior.",
            "schema": {
              "type": "boolean",
              "description": "The CRM tries to run services on the node with the highest priority. If a node with higher priority comes online, the CRM migrates the service to that node. Enabling nofailback prevents that behavior.",
              "default": 0
            }
          },
          {
            "name": "restricted",
            "in": "query",
            "required": false,
            "description": "Resources bound to restricted groups may only run on nodes defined by the group.",
            "schema": {
              "type": "boolean",
              "description": "Resources bound to restricted groups may only run on nodes defined by the group.",
              "default": 0
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Group type.",
            "schema": {
              "type": "string",
              "description": "Group type.",
              "enum": [
                "group"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/scan/zfs": {
      "get": {
        "summary": "Pci Index",
        "description": "Index of available pci methods",
        "operationId": "get_nodes_node_scan_zfs",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/acme/directories": {
      "get": {
        "summary": "Index",
        "description": "ACMEAccount index.",
        "operationId": "get_cluster_acme_directories",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/osd/{osdid}/metadata": {
      "get": {
        "summary": "Osdvolume",
        "description": "Get OSD volume details",
        "operationId": "get_nodes_node_ceph_osd_osdid_metadata",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "osdid",
            "in": "path",
            "required": true,
            "description": "osdid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "OSD device type",
            "schema": {
              "type": "string",
              "description": "OSD device type",
              "default": "block",
              "enum": [
                "block",
                "db",
                "wal"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Out",
        "description": "ceph osd out",
        "operationId": "post_nodes_node_ceph_osd_osdid_metadata",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "osdid",
            "in": "path",
            "required": true,
            "description": "osdid identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/vncproxy": {
      "get": {
        "summary": "Vncwebsocket",
        "description": "Opens a weksocket for VNC traffic.\n\n**Required permissions:** You also need to pass a valid ticket (vncticket).",
        "operationId": "get_nodes_node_qemu_vmid_vncproxy",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "port",
            "in": "query",
            "required": true,
            "description": "Port number returned by previous vncproxy call.",
            "schema": {
              "type": "integer",
              "description": "Port number returned by previous vncproxy call."
            }
          },
          {
            "name": "vncticket",
            "in": "query",
            "required": true,
            "description": "Ticket from previous call to vncproxy.",
            "schema": {
              "type": "string",
              "description": "Ticket from previous call to vncproxy."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Termproxy",
        "description": "Creates a TCP proxy connections.",
        "operationId": "post_nodes_node_qemu_vmid_vncproxy",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "serial",
            "in": "query",
            "required": false,
            "description": "opens a serial terminal (defaults to display)",
            "schema": {
              "type": "string",
              "description": "opens a serial terminal (defaults to display)",
              "enum": [
                "serial0",
                "serial1",
                "serial2",
                "serial3"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall/ipset": {
      "get": {
        "summary": "Get Options",
        "description": "Get VM firewall options.",
        "operationId": "get_nodes_node_lxc_vmid_firewall_ipset",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/log": {
      "get": {
        "summary": "Index",
        "description": "Directory index.",
        "operationId": "get_nodes_node_ceph_log",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/sdn/zones": {
      "get": {
        "summary": "Read",
        "description": "Read sdn controller configuration.",
        "operationId": "get_cluster_sdn_zones",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "controller",
            "in": "query",
            "required": true,
            "description": "The SDN controller object identifier.",
            "schema": {
              "type": "string",
              "description": "The SDN controller object identifier."
            }
          },
          {
            "name": "pending",
            "in": "query",
            "required": false,
            "description": "Display pending config.",
            "schema": {
              "type": "boolean",
              "description": "Display pending config."
            }
          },
          {
            "name": "running",
            "in": "query",
            "required": false,
            "description": "Display running config.",
            "schema": {
              "type": "boolean",
              "description": "Display running config."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete sdn controller object configuration.",
        "operationId": "delete_cluster_sdn_zones",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "controller",
            "in": "query",
            "required": true,
            "description": "The SDN controller object identifier.",
            "schema": {
              "type": "string",
              "description": "The SDN controller object identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/services/{service}/state": {
      "post": {
        "summary": "Service Stop",
        "description": "Stop service.",
        "operationId": "post_nodes_node_services_service_state",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "description": "service identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/mgr": {
      "get": {
        "summary": "Listmon",
        "description": "Get Ceph monitor list.",
        "operationId": "get_nodes_node_ceph_mgr",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Createmon",
        "description": "Create Ceph Monitor and Manager",
        "operationId": "post_nodes_node_ceph_mgr",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "monid",
            "in": "query",
            "required": false,
            "description": "The ID for the monitor, when omitted the same as the nodename",
            "schema": {
              "type": "string",
              "description": "The ID for the monitor, when omitted the same as the nodename"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Destroymon",
        "description": "Destroy Ceph Monitor and Manager.",
        "operationId": "delete_nodes_node_ceph_mgr",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "monid",
            "in": "query",
            "required": true,
            "description": "Monitor ID",
            "schema": {
              "type": "string",
              "description": "Monitor ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/cfg/db": {
      "get": {
        "summary": "Index",
        "description": "Directory index.",
        "operationId": "get_nodes_node_ceph_cfg_db",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/ha/resources/{sid}/migrate": {
      "get": {
        "summary": "Read",
        "description": "Read resource configuration.",
        "operationId": "get_cluster_ha_resources_sid_migrate",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "sid",
            "in": "path",
            "required": true,
            "description": "sid identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Relocate",
        "description": "Request resource relocatzion to another node. This stops the service on the old node, and restarts it on the target node.",
        "operationId": "post_cluster_ha_resources_sid_migrate",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "sid",
            "in": "path",
            "required": true,
            "description": "sid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "node",
            "in": "query",
            "required": true,
            "description": "Target node.",
            "schema": {
              "type": "string",
              "description": "Target node."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete resource configuration.",
        "operationId": "delete_cluster_ha_resources_sid_migrate",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "sid",
            "in": "path",
            "required": true,
            "description": "sid identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/backup/{id}": {
      "get": {
        "summary": "Index",
        "description": "List vzdump backup schedule.",
        "operationId": "get_cluster_backup_id",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/notifications/endpoints/gotify": {
      "get": {
        "summary": "Get Smtp Endpoint",
        "description": "Return a specific smtp endpoint",
        "operationId": "get_cluster_notifications_endpoints_gotify",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Smtp Endpoint",
        "description": "Remove smtp endpoint",
        "operationId": "delete_cluster_notifications_endpoints_gotify",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/fsfreeze-thaw": {
      "get": {
        "summary": "Get-Host-Name",
        "description": "Execute get-host-name.",
        "operationId": "get_nodes_node_qemu_vmid_agent_fsfreeze-thaw",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Fstrim",
        "description": "Execute fstrim.",
        "operationId": "post_nodes_node_qemu_vmid_agent_fsfreeze-thaw",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/replication/{id}/log": {
      "get": {
        "summary": "Status",
        "description": "List status of all replication jobs on this node.\n\n**Required permissions:** Requires the VM.Audit permission on /vms/<vmid>.",
        "operationId": "get_nodes_node_replication_id_log",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "guest",
            "in": "query",
            "required": false,
            "description": "Only list replication jobs for this guest.",
            "schema": {
              "type": "integer",
              "description": "Only list replication jobs for this guest."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Schedule Now",
        "description": "Schedule replication job to start as soon as possible.",
        "operationId": "post_nodes_node_replication_id_log",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Revoke Certificate",
        "description": "Revoke existing certificate from CA.",
        "operationId": "delete_nodes_node_replication_id_log",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/network-get-interfaces": {
      "post": {
        "summary": "Suspend-Disk",
        "description": "Execute suspend-disk.",
        "operationId": "post_nodes_node_qemu_vmid_agent_network-get-interfaces",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall/rules/{pos}": {
      "get": {
        "summary": "Get Rules",
        "description": "List rules.",
        "operationId": "get_nodes_node_qemu_vmid_firewall_rules_pos",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "pos",
            "in": "path",
            "required": true,
            "description": "pos identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall/ipset/{name}": {
      "get": {
        "summary": "Ipset Index",
        "description": "List IPSets",
        "operationId": "get_nodes_node_qemu_vmid_firewall_ipset_name",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create Ipset",
        "description": "Create new IPSet",
        "operationId": "post_nodes_node_qemu_vmid_firewall_ipset_name",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "rename",
            "in": "query",
            "required": false,
            "description": "Rename an existing IPSet. You can set 'rename' to the same value as 'name' to update the 'comment' of an existing IPSet.",
            "schema": {
              "type": "string",
              "description": "Rename an existing IPSet. You can set 'rename' to the same value as 'name' to update the 'comment' of an existing IPSet."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/feature": {
      "post": {
        "summary": "Clone Vm",
        "description": "Create a copy of virtual machine/template.\n\n**Required permissions:** You need 'VM.Clone' permissions on /vms/{vmid}, and 'VM.Allocate' permissions on /vms/{newid} (or on the VM pool /pool/{pool}). You also need 'Datastore.AllocateSpace' on any used storage and 'SDN.Use' on any used bridge/vnet",
        "operationId": "post_nodes_node_qemu_vmid_feature",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "bwlimit",
            "in": "query",
            "required": false,
            "description": "Override I/O bandwidth limit (in KiB/s).",
            "schema": {
              "type": "integer",
              "description": "Override I/O bandwidth limit (in KiB/s).",
              "default": "clone limit from datacenter or storage config"
            }
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "description": "Description for the new VM.",
            "schema": {
              "type": "string",
              "description": "Description for the new VM."
            }
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "description": "Target format for file storage. Only valid for full clone.",
            "schema": {
              "type": "string",
              "description": "Target format for file storage. Only valid for full clone.",
              "enum": [
                "raw",
                "qcow2",
                "vmdk"
              ]
            }
          },
          {
            "name": "full",
            "in": "query",
            "required": false,
            "description": "Create a full copy of all disks. This is always done when you clone a normal VM. For VM templates, we try to create a linked clone by default.",
            "schema": {
              "type": "boolean",
              "description": "Create a full copy of all disks. This is always done when you clone a normal VM. For VM templates, we try to create a linked clone by default."
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "Set a name for the new VM.",
            "schema": {
              "type": "string",
              "description": "Set a name for the new VM."
            }
          },
          {
            "name": "newid",
            "in": "query",
            "required": true,
            "description": "VMID for the clone.",
            "schema": {
              "type": "integer",
              "description": "VMID for the clone."
            }
          },
          {
            "name": "pool",
            "in": "query",
            "required": false,
            "description": "Add the new VM to the specified pool.",
            "schema": {
              "type": "string",
              "description": "Add the new VM to the specified pool."
            }
          },
          {
            "name": "snapname",
            "in": "query",
            "required": false,
            "description": "The name of the snapshot.",
            "schema": {
              "type": "string",
              "description": "The name of the snapshot."
            }
          },
          {
            "name": "storage",
            "in": "query",
            "required": false,
            "description": "Target storage for full clone.",
            "schema": {
              "type": "string",
              "description": "Target storage for full clone."
            }
          },
          {
            "name": "target",
            "in": "query",
            "required": false,
            "description": "Target node. Only allowed if the original VM is on shared storage.",
            "schema": {
              "type": "string",
              "description": "Target node. Only allowed if the original VM is on shared storage."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/disks/lvmthin": {
      "get": {
        "summary": "Index",
        "description": "PVE Managed Directory storages.",
        "operationId": "get_nodes_node_disks_lvmthin",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Unmounts the storage and removes the mount unit.\n\n**Required permissions:** Requires additionally 'Datastore.Allocate' on /storage when setting 'cleanup-config'",
        "operationId": "delete_nodes_node_disks_lvmthin",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "The storage identifier.",
            "schema": {
              "type": "string",
              "description": "The storage identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/ha/resources/{sid}": {
      "get": {
        "summary": "Index",
        "description": "List HA resources.",
        "operationId": "get_cluster_ha_resources_sid",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "sid",
            "in": "path",
            "required": true,
            "description": "sid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Only list resources of specific type",
            "schema": {
              "type": "string",
              "description": "Only list resources of specific type",
              "enum": [
                "ct",
                "vm"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create",
        "description": "Create a new HA resource.",
        "operationId": "post_cluster_ha_resources_sid",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "sid",
            "in": "path",
            "required": true,
            "description": "sid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "Description.",
            "schema": {
              "type": "string",
              "description": "Description."
            }
          },
          {
            "name": "group",
            "in": "query",
            "required": false,
            "description": "The HA group identifier.",
            "schema": {
              "type": "string",
              "description": "The HA group identifier."
            }
          },
          {
            "name": "max_relocate",
            "in": "query",
            "required": false,
            "description": "Maximal number of service relocate tries when a service failes to start.",
            "schema": {
              "type": "integer",
              "description": "Maximal number of service relocate tries when a service failes to start.",
              "default": 1
            }
          },
          {
            "name": "max_restart",
            "in": "query",
            "required": false,
            "description": "Maximal number of tries to restart the service on a node after its start failed.",
            "schema": {
              "type": "integer",
              "description": "Maximal number of tries to restart the service on a node after its start failed.",
              "default": 1
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "description": "Requested resource state.",
            "schema": {
              "type": "string",
              "description": "Requested resource state.",
              "default": "started",
              "enum": [
                "started",
                "stopped",
                "enabled",
                "disabled",
                "ignored"
              ]
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Resource type.",
            "schema": {
              "type": "string",
              "description": "Resource type.",
              "enum": [
                "ct",
                "vm"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete ha group configuration.",
        "operationId": "delete_cluster_ha_resources_sid",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "sid",
            "in": "path",
            "required": true,
            "description": "sid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "group",
            "in": "query",
            "required": true,
            "description": "The HA group identifier.",
            "schema": {
              "type": "string",
              "description": "The HA group identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/access/users/{userid}": {
      "get": {
        "summary": "Index",
        "description": "User index.\n\n**Required permissions:** The returned list is restricted to users where you have 'User.Modify' or 'Sys.Audit' permissions on '/access/groups' or on a group the user belongs too. But it always includes the current (authenticated) user.",
        "operationId": "get_access_users_userid",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "description": "userid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "required": false,
            "description": "Optional filter for enable property.",
            "schema": {
              "type": "boolean",
              "description": "Optional filter for enable property."
            }
          },
          {
            "name": "full",
            "in": "query",
            "required": false,
            "description": "Include group and token information.",
            "schema": {
              "type": "boolean",
              "description": "Include group and token information.",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/access/groups/{groupid}": {
      "get": {
        "summary": "Index",
        "description": "Group index.\n\n**Required permissions:** The returned list is restricted to groups where you have 'User.Modify', 'Sys.Audit'  or 'Group.Allocate' permissions on /access/groups/<group>.",
        "operationId": "get_access_groups_groupid",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "description": "groupid identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create Group",
        "description": "Create new group.",
        "operationId": "post_access_groups_groupid",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "description": "groupid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Role",
        "description": "Delete role.",
        "operationId": "delete_access_groups_groupid",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "description": "groupid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleid",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/spiceshell": {
      "get": {
        "summary": "Time",
        "description": "Read server time and time zone settings.",
        "operationId": "get_nodes_node_spiceshell",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Set Timezone",
        "description": "Set time zone.",
        "operationId": "put_nodes_node_spiceshell",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "timezone",
            "in": "query",
            "required": true,
            "description": "Time zone. The file '/usr/share/zoneinfo/zone.tab' contains the list of valid names.",
            "schema": {
              "type": "string",
              "description": "Time zone. The file '/usr/share/zoneinfo/zone.tab' contains the list of valid names."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/vncwebsocket": {
      "get": {
        "summary": "Dns",
        "description": "Read DNS settings.",
        "operationId": "get_nodes_node_vncwebsocket",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Spiceshell",
        "description": "Creates a SPICE shell.",
        "operationId": "post_nodes_node_vncwebsocket",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "cmd",
            "in": "query",
            "required": false,
            "description": "Run specific command or default to login (requires 'root@pam')",
            "schema": {
              "type": "string",
              "description": "Run specific command or default to login (requires 'root@pam')",
              "default": "login",
              "enum": [
                "ceph_install",
                "upgrade",
                "login"
              ]
            }
          },
          {
            "name": "proxy",
            "in": "query",
            "required": false,
            "description": "SPICE proxy server. This can be used by the client to specify the proxy server. All nodes in a cluster runs 'spiceproxy', so it is up to the client to choose one. By default, we return the node where the VM is currently running. As reasonable setting is to use same node you use to connect to the API (This is window.location.hostname for the JS GUI).",
            "schema": {
              "type": "string",
              "description": "SPICE proxy server. This can be used by the client to specify the proxy server. All nodes in a cluster runs 'spiceproxy', so it is up to the client to choose one. By default, we return the node where the VM is currently running. As reasonable setting is to use same node you use to connect to the API (This is window.location.hostname for the JS GUI)."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Update Dns",
        "description": "Write DNS settings.",
        "operationId": "put_nodes_node_vncwebsocket",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "dns1",
            "in": "query",
            "required": false,
            "description": "First name server IP address.",
            "schema": {
              "type": "string",
              "description": "First name server IP address."
            }
          },
          {
            "name": "dns2",
            "in": "query",
            "required": false,
            "description": "Second name server IP address.",
            "schema": {
              "type": "string",
              "description": "Second name server IP address."
            }
          },
          {
            "name": "dns3",
            "in": "query",
            "required": false,
            "description": "Third name server IP address.",
            "schema": {
              "type": "string",
              "description": "Third name server IP address."
            }
          },
          {
            "name": "search",
            "in": "query",
            "required": true,
            "description": "Search domain for host-name lookup.",
            "schema": {
              "type": "string",
              "description": "Search domain for host-name lookup."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes": {
      "get": {
        "summary": "Read",
        "description": "Read storage configuration.",
        "operationId": "get_nodes",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "storage",
            "in": "query",
            "required": true,
            "description": "The storage identifier.",
            "schema": {
              "type": "string",
              "description": "The storage identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete storage configuration.",
        "operationId": "delete_nodes",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "storage",
            "in": "query",
            "required": true,
            "description": "The storage identifier.",
            "schema": {
              "type": "string",
              "description": "The storage identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/sendkey": {
      "get": {
        "summary": "Vm Feature",
        "description": "Check if feature for virtual machine is available.",
        "operationId": "get_nodes_node_qemu_vmid_sendkey",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "feature",
            "in": "query",
            "required": true,
            "description": "Feature to check.",
            "schema": {
              "type": "string",
              "description": "Feature to check.",
              "enum": [
                "snapshot",
                "clone",
                "copy"
              ]
            }
          },
          {
            "name": "snapname",
            "in": "query",
            "required": false,
            "description": "The name of the snapshot.",
            "schema": {
              "type": "string",
              "description": "The name of the snapshot."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/status/suspend": {
      "get": {
        "summary": "Vmcmdidx",
        "description": "Directory index",
        "operationId": "get_nodes_node_lxc_vmid_status_suspend",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Vm Reboot",
        "description": "Reboot the container by shutting it down, and starting it again. Applies pending changes.",
        "operationId": "post_nodes_node_lxc_vmid_status_suspend",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "required": false,
            "description": "Wait maximal timeout seconds for the shutdown.",
            "schema": {
              "type": "integer",
              "description": "Wait maximal timeout seconds for the shutdown."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/access/password": {
      "get": {
        "summary": "Read Pool",
        "description": "Get pool configuration (deprecated, no support for nested pools, use 'GET /pools/?poolid={poolid}').",
        "operationId": "get_access_password",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "poolid",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string",
              "enum": [
                "qemu",
                "lxc",
                "storage"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Update Pool Deprecated",
        "description": "Update pool data (deprecated, no support for nested pools - use 'PUT /pools/?poolid={poolid}' instead).\n\n**Required permissions:** You also need the right to modify permissions on any object you add/delete.",
        "operationId": "put_access_password",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "required": false,
            "description": "Remove the passed VMIDs and/or storage IDs instead of adding them.",
            "schema": {
              "type": "boolean",
              "description": "Remove the passed VMIDs and/or storage IDs instead of adding them.",
              "default": 0
            }
          },
          {
            "name": "poolid",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storage",
            "in": "query",
            "required": false,
            "description": "List of storage IDs to add or remove from this pool.",
            "schema": {
              "type": "string",
              "description": "List of storage IDs to add or remove from this pool."
            }
          },
          {
            "name": "vms",
            "in": "query",
            "required": false,
            "description": "List of guest VMIDs to add or remove from this pool.",
            "schema": {
              "type": "string",
              "description": "List of guest VMIDs to add or remove from this pool."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Pool Deprecated",
        "description": "Delete pool (deprecated, no support for nested pools, use 'DELETE /pools/?poolid={poolid}').\n\n**Required permissions:** You can only delete empty pools (no members).",
        "operationId": "delete_access_password",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "poolid",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/sdn/dns": {
      "get": {
        "summary": "Log",
        "description": "Read cluster log",
        "operationId": "get_cluster_sdn_dns",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "max",
            "in": "query",
            "required": false,
            "description": "Maximum number of entries.",
            "schema": {
              "type": "integer",
              "description": "Maximum number of entries."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Reload",
        "description": "Apply sdn controller changes && reload.",
        "operationId": "put_cluster_sdn_dns",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/ceph/flags/{flag}": {
      "get": {
        "summary": "Cephindex",
        "description": "Cluster ceph index.",
        "operationId": "get_cluster_ceph_flags_flag",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "flag",
            "in": "path",
            "required": true,
            "description": "flag identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Set Flags",
        "description": "Set/Unset multiple ceph flags at once.",
        "operationId": "put_cluster_ceph_flags_flag",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "flag",
            "in": "path",
            "required": true,
            "description": "flag identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nobackfill",
            "in": "query",
            "required": false,
            "description": "Backfilling of PGs is suspended.",
            "schema": {
              "type": "boolean",
              "description": "Backfilling of PGs is suspended."
            }
          },
          {
            "name": "nodown",
            "in": "query",
            "required": false,
            "description": "OSD failure reports are being ignored, such that the monitors will not mark OSDs down.",
            "schema": {
              "type": "boolean",
              "description": "OSD failure reports are being ignored, such that the monitors will not mark OSDs down."
            }
          },
          {
            "name": "noin",
            "in": "query",
            "required": false,
            "description": "OSDs that were previously marked out will not be marked back in when they start.",
            "schema": {
              "type": "boolean",
              "description": "OSDs that were previously marked out will not be marked back in when they start."
            }
          },
          {
            "name": "noout",
            "in": "query",
            "required": false,
            "description": "OSDs will not automatically be marked out after the configured interval.",
            "schema": {
              "type": "boolean",
              "description": "OSDs will not automatically be marked out after the configured interval."
            }
          },
          {
            "name": "norebalance",
            "in": "query",
            "required": false,
            "description": "Rebalancing of PGs is suspended.",
            "schema": {
              "type": "boolean",
              "description": "Rebalancing of PGs is suspended."
            }
          },
          {
            "name": "norecover",
            "in": "query",
            "required": false,
            "description": "Recovery of PGs is suspended.",
            "schema": {
              "type": "boolean",
              "description": "Recovery of PGs is suspended."
            }
          },
          {
            "name": "noscrub",
            "in": "query",
            "required": false,
            "description": "Scrubbing is disabled.",
            "schema": {
              "type": "boolean",
              "description": "Scrubbing is disabled."
            }
          },
          {
            "name": "notieragent",
            "in": "query",
            "required": false,
            "description": "Cache tiering activity is suspended.",
            "schema": {
              "type": "boolean",
              "description": "Cache tiering activity is suspended."
            }
          },
          {
            "name": "noup",
            "in": "query",
            "required": false,
            "description": "OSDs are not allowed to start.",
            "schema": {
              "type": "boolean",
              "description": "OSDs are not allowed to start."
            }
          },
          {
            "name": "pause",
            "in": "query",
            "required": false,
            "description": "Pauses read and writes.",
            "schema": {
              "type": "boolean",
              "description": "Pauses read and writes."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Job",
        "description": "Delete realm-sync job definition.",
        "operationId": "delete_cluster_ceph_flags_flag",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "flag",
            "in": "path",
            "required": true,
            "description": "flag identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/backup": {
      "get": {
        "summary": "Index",
        "description": "Index for backup info related endpoints",
        "operationId": "get_cluster_backup",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Relocate",
        "description": "Request resource relocatzion to another node. This stops the service on the old node, and restarts it on the target node.",
        "operationId": "post_cluster_backup",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "query",
            "required": true,
            "description": "Target node.",
            "schema": {
              "type": "string",
              "description": "Target node."
            }
          },
          {
            "name": "sid",
            "in": "query",
            "required": true,
            "description": "HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100).",
            "schema": {
              "type": "string",
              "description": "HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100)."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/hardware/usb": {
      "get": {
        "summary": "Types",
        "description": "Get available QEMU/KVM machine types.",
        "operationId": "get_nodes_node_hardware_usb",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/report": {
      "post": {
        "summary": "Migrateall",
        "description": "Migrate all VMs and Containers.\n\n**Required permissions:** The 'VM.Migrate' permission is required on '/' or on '/vms/<ID>' for each ID passed via the 'vms' parameter.",
        "operationId": "post_nodes_node_report",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "maxworkers",
            "in": "query",
            "required": false,
            "description": "Maximal number of parallel migration job. If not set, uses'max_workers' from datacenter.cfg. One of both must be set!",
            "schema": {
              "type": "integer",
              "description": "Maximal number of parallel migration job. If not set, uses'max_workers' from datacenter.cfg. One of both must be set!"
            }
          },
          {
            "name": "target",
            "in": "query",
            "required": true,
            "description": "Target node.",
            "schema": {
              "type": "string",
              "description": "Target node."
            }
          },
          {
            "name": "vms",
            "in": "query",
            "required": false,
            "description": "Only consider Guests with these IDs.",
            "schema": {
              "type": "string",
              "description": "Only consider Guests with these IDs."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/sdn/zones/{zone}": {
      "get": {
        "summary": "Index",
        "description": "SDN zones index.\n\n**Required permissions:** Only list entries where you have 'SDN.Audit' or 'SDN.Allocate' permissions on '/sdn/zones/<zone>'",
        "operationId": "get_cluster_sdn_zones_zone",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "zone",
            "in": "path",
            "required": true,
            "description": "zone identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pending",
            "in": "query",
            "required": false,
            "description": "Display pending config.",
            "schema": {
              "type": "boolean",
              "description": "Display pending config."
            }
          },
          {
            "name": "running",
            "in": "query",
            "required": false,
            "description": "Display running config.",
            "schema": {
              "type": "boolean",
              "description": "Display running config."
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Only list SDN zones of specific type",
            "schema": {
              "type": "string",
              "description": "Only list SDN zones of specific type",
              "enum": [
                "evpn",
                "faucet",
                "qinq",
                "simple",
                "vlan",
                "vxlan"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/journal": {
      "get": {
        "summary": "Vncwebsocket",
        "description": "Opens a websocket for VNC traffic.\n\n**Required permissions:** You also need to pass a valid ticket (vncticket).",
        "operationId": "get_nodes_node_journal",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "port",
            "in": "query",
            "required": true,
            "description": "Port number returned by previous vncproxy call.",
            "schema": {
              "type": "integer",
              "description": "Port number returned by previous vncproxy call."
            }
          },
          {
            "name": "vncticket",
            "in": "query",
            "required": true,
            "description": "Ticket from previous call to vncproxy.",
            "schema": {
              "type": "string",
              "description": "Ticket from previous call to vncproxy."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Termproxy",
        "description": "Creates a VNC Shell proxy.",
        "operationId": "post_nodes_node_journal",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "cmd",
            "in": "query",
            "required": false,
            "description": "Run specific command or default to login (requires 'root@pam')",
            "schema": {
              "type": "string",
              "description": "Run specific command or default to login (requires 'root@pam')",
              "default": "login",
              "enum": [
                "ceph_install",
                "upgrade",
                "login"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/sdn/ipams/{ipam}/status": {
      "get": {
        "summary": "Index",
        "description": "SDN ipams index.\n\n**Required permissions:** Only list entries where you have 'SDN.Audit' or 'SDN.Allocate' permissions on '/sdn/ipams/<ipam>'",
        "operationId": "get_cluster_sdn_ipams_ipam_status",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "ipam",
            "in": "path",
            "required": true,
            "description": "ipam identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Only list sdn ipams of specific type",
            "schema": {
              "type": "string",
              "description": "Only list sdn ipams of specific type",
              "enum": [
                "netbox",
                "phpipam",
                "pve"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Update",
        "description": "Update sdn ipam object configuration.",
        "operationId": "put_cluster_sdn_ipams_ipam_status",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "ipam",
            "in": "path",
            "required": true,
            "description": "ipam identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "required": false,
            "description": "A list of settings you want to delete.",
            "schema": {
              "type": "string",
              "description": "A list of settings you want to delete."
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "fingerprint",
            "in": "query",
            "required": false,
            "description": "Certificate SHA 256 fingerprint.",
            "schema": {
              "type": "string",
              "description": "Certificate SHA 256 fingerprint."
            }
          },
          {
            "name": "section",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete sdn ipam object configuration.",
        "operationId": "delete_cluster_sdn_ipams_ipam_status",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "ipam",
            "in": "path",
            "required": true,
            "description": "ipam identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/snapshot/{snapname}/config": {
      "get": {
        "summary": "Snapshot Cmd Idx",
        "description": "",
        "operationId": "get_nodes_node_lxc_vmid_snapshot_snapname_config",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "snapname",
            "in": "path",
            "required": true,
            "description": "snapname identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delsnapshot",
        "description": "Delete a LXC snapshot.",
        "operationId": "delete_nodes_node_lxc_vmid_snapshot_snapname_config",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "snapname",
            "in": "path",
            "required": true,
            "description": "snapname identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "For removal from config file, even if removing disk snapshots fails.",
            "schema": {
              "type": "boolean",
              "description": "For removal from config file, even if removing disk snapshots fails."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/status/resume": {
      "get": {
        "summary": "Vmcmdidx",
        "description": "Directory index",
        "operationId": "get_nodes_node_qemu_vmid_status_resume",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Vm Sendkey",
        "description": "Send key event to virtual machine.",
        "operationId": "put_nodes_node_qemu_vmid_status_resume",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "key",
            "in": "query",
            "required": true,
            "description": "The key (qemu monitor encoding).",
            "schema": {
              "type": "string",
              "description": "The key (qemu monitor encoding)."
            }
          },
          {
            "name": "skiplock",
            "in": "query",
            "required": false,
            "description": "Ignore locks - only root is allowed to use this option.",
            "schema": {
              "type": "boolean",
              "description": "Ignore locks - only root is allowed to use this option."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/scan/nfs": {
      "get": {
        "summary": "Pbsscan",
        "description": "Scan remote Proxmox Backup Server.",
        "operationId": "get_nodes_node_scan_nfs",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "fingerprint",
            "in": "query",
            "required": false,
            "description": "Certificate SHA 256 fingerprint.",
            "schema": {
              "type": "string",
              "description": "Certificate SHA 256 fingerprint."
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": true,
            "description": "User password or API token secret.",
            "schema": {
              "type": "string",
              "description": "User password or API token secret."
            }
          },
          {
            "name": "port",
            "in": "query",
            "required": false,
            "description": "Optional port.",
            "schema": {
              "type": "integer",
              "description": "Optional port.",
              "default": 8007
            }
          },
          {
            "name": "server",
            "in": "query",
            "required": true,
            "description": "The server address (name or IP).",
            "schema": {
              "type": "string",
              "description": "The server address (name or IP)."
            }
          },
          {
            "name": "username",
            "in": "query",
            "required": true,
            "description": "User-name or API token-ID.",
            "schema": {
              "type": "string",
              "description": "User-name or API token-ID."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/hardware/pci/{pci-id-or-mapping}": {
      "get": {
        "summary": "Pci Scan",
        "description": "List local PCI devices.",
        "operationId": "get_nodes_node_hardware_pci_pci-id-or-mapping",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "pci-id-or-mapping",
            "in": "path",
            "required": true,
            "description": "pci-id-or-mapping identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "verbose",
            "in": "query",
            "required": false,
            "description": "If disabled, does only print the PCI IDs. Otherwise, additional information like vendor and device will be returned.",
            "schema": {
              "type": "boolean",
              "description": "If disabled, does only print the PCI IDs. Otherwise, additional information like vendor and device will be returned.",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/mgr/{id}": {
      "get": {
        "summary": "Index",
        "description": "MGR directory index.",
        "operationId": "get_nodes_node_ceph_mgr_id",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Createmon",
        "description": "Create Ceph Monitor and Manager",
        "operationId": "post_nodes_node_ceph_mgr_id",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "monid",
            "in": "query",
            "required": false,
            "description": "The ID for the monitor, when omitted the same as the nodename",
            "schema": {
              "type": "string",
              "description": "The ID for the monitor, when omitted the same as the nodename"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Destroymon",
        "description": "Destroy Ceph Monitor and Manager.",
        "operationId": "delete_nodes_node_ceph_mgr_id",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "monid",
            "in": "query",
            "required": true,
            "description": "Monitor ID",
            "schema": {
              "type": "string",
              "description": "Monitor ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/certificates/custom": {
      "get": {
        "summary": "Index",
        "description": "Node index.",
        "operationId": "get_nodes_node_certificates_custom",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/sdn/controllers/{controller}": {
      "get": {
        "summary": "Index",
        "description": "SDN controllers index.\n\n**Required permissions:** Only list entries where you have 'SDN.Audit' or 'SDN.Allocate' permissions on '/sdn/controllers/<controller>'",
        "operationId": "get_cluster_sdn_controllers_controller",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "controller",
            "in": "path",
            "required": true,
            "description": "controller identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pending",
            "in": "query",
            "required": false,
            "description": "Display pending config.",
            "schema": {
              "type": "boolean",
              "description": "Display pending config."
            }
          },
          {
            "name": "running",
            "in": "query",
            "required": false,
            "description": "Display running config.",
            "schema": {
              "type": "boolean",
              "description": "Display running config."
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Only list sdn controllers of specific type",
            "schema": {
              "type": "string",
              "description": "Only list sdn controllers of specific type",
              "enum": [
                "bgp",
                "evpn",
                "faucet",
                "isis"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create",
        "description": "Create a new sdn controller object.",
        "operationId": "post_cluster_sdn_controllers_controller",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "controller",
            "in": "path",
            "required": true,
            "description": "controller identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asn",
            "in": "query",
            "required": false,
            "description": "autonomous system number",
            "schema": {
              "type": "integer",
              "description": "autonomous system number"
            }
          },
          {
            "name": "ebgp",
            "in": "query",
            "required": false,
            "description": "Enable ebgp. (remote-as external)",
            "schema": {
              "type": "boolean",
              "description": "Enable ebgp. (remote-as external)"
            }
          },
          {
            "name": "loopback",
            "in": "query",
            "required": false,
            "description": "source loopback interface.",
            "schema": {
              "type": "string",
              "description": "source loopback interface."
            }
          },
          {
            "name": "node",
            "in": "query",
            "required": false,
            "description": "The cluster node name.",
            "schema": {
              "type": "string",
              "description": "The cluster node name."
            }
          },
          {
            "name": "peers",
            "in": "query",
            "required": false,
            "description": "peers address list.",
            "schema": {
              "type": "string",
              "description": "peers address list."
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "description": "Plugin type.",
            "schema": {
              "type": "string",
              "description": "Plugin type.",
              "enum": [
                "bgp",
                "evpn",
                "faucet",
                "isis"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/syslog": {
      "get": {
        "summary": "Journal",
        "description": "Read Journal",
        "operationId": "get_nodes_node_syslog",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "endcursor",
            "in": "query",
            "required": false,
            "description": "End before the given Cursor. Conflicts with 'until'",
            "schema": {
              "type": "string",
              "description": "End before the given Cursor. Conflicts with 'until'"
            }
          },
          {
            "name": "lastentries",
            "in": "query",
            "required": false,
            "description": "Limit to the last X lines. Conflicts with a range.",
            "schema": {
              "type": "integer",
              "description": "Limit to the last X lines. Conflicts with a range."
            }
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "description": "Display all log since this UNIX epoch. Conflicts with 'startcursor'.",
            "schema": {
              "type": "integer",
              "description": "Display all log since this UNIX epoch. Conflicts with 'startcursor'."
            }
          },
          {
            "name": "startcursor",
            "in": "query",
            "required": false,
            "description": "Start after the given Cursor. Conflicts with 'since'",
            "schema": {
              "type": "string",
              "description": "Start after the given Cursor. Conflicts with 'since'"
            }
          },
          {
            "name": "until",
            "in": "query",
            "required": false,
            "description": "Display all log until this UNIX epoch. Conflicts with 'endcursor'.",
            "schema": {
              "type": "integer",
              "description": "Display all log until this UNIX epoch. Conflicts with 'endcursor'."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Vncshell",
        "description": "Creates a VNC Shell proxy.",
        "operationId": "post_nodes_node_syslog",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "cmd",
            "in": "query",
            "required": false,
            "description": "Run specific command or default to login (requires 'root@pam')",
            "schema": {
              "type": "string",
              "description": "Run specific command or default to login (requires 'root@pam')",
              "default": "login",
              "enum": [
                "ceph_install",
                "upgrade",
                "login"
              ]
            }
          },
          {
            "name": "height",
            "in": "query",
            "required": false,
            "description": "sets the height of the console in pixels.",
            "schema": {
              "type": "integer",
              "description": "sets the height of the console in pixels."
            }
          },
          {
            "name": "websocket",
            "in": "query",
            "required": false,
            "description": "use websocket instead of standard vnc.",
            "schema": {
              "type": "boolean",
              "description": "use websocket instead of standard vnc."
            }
          },
          {
            "name": "width",
            "in": "query",
            "required": false,
            "description": "sets the width of the console in pixels.",
            "schema": {
              "type": "integer",
              "description": "sets the width of the console in pixels."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall/log": {
      "get": {
        "summary": "Index",
        "description": "Directory index.",
        "operationId": "get_nodes_node_qemu_vmid_firewall_log",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/firewall/groups/{group}": {
      "get": {
        "summary": "List Security Groups",
        "description": "List security groups.",
        "operationId": "get_cluster_firewall_groups_group",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "description": "group identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create Security Group",
        "description": "Create new security group.",
        "operationId": "post_cluster_firewall_groups_group",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "description": "group identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "rename",
            "in": "query",
            "required": false,
            "description": "Rename/update an existing security group. You can set 'rename' to the same value as 'name' to update the 'comment' of an existing group.",
            "schema": {
              "type": "string",
              "description": "Rename/update an existing security group. You can set 'rename' to the same value as 'name' to update the 'comment' of an existing group."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Rule",
        "description": "Delete rule.",
        "operationId": "delete_cluster_firewall_groups_group",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "description": "group identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "pos",
            "in": "query",
            "required": false,
            "description": "Update rule at position <pos>.",
            "schema": {
              "type": "integer",
              "description": "Update rule at position <pos>."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/services/{service}/start": {
      "post": {
        "summary": "Service Restart",
        "description": "Hard restart service. Use reload if you want to reduce interruptions.",
        "operationId": "post_nodes_node_services_service_start",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "description": "service identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/get-osinfo": {
      "get": {
        "summary": "Get-Users",
        "description": "Execute get-users.",
        "operationId": "get_nodes_node_qemu_vmid_agent_get-osinfo",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/storage/{storage}/rrddata": {
      "post": {
        "summary": "Upload",
        "description": "Upload templates, ISO images, OVAs and VM images.",
        "operationId": "post_nodes_node_storage_storage_rrddata",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "required": true,
            "description": "storage identifier",
            "schema": {
              "type": "string",
              "description": "Storage identifier"
            }
          },
          {
            "name": "checksum",
            "in": "query",
            "required": false,
            "description": "The expected checksum of the file.",
            "schema": {
              "type": "string",
              "description": "The expected checksum of the file."
            }
          },
          {
            "name": "content",
            "in": "query",
            "required": true,
            "description": "Content type.",
            "schema": {
              "type": "string",
              "description": "Content type.",
              "enum": [
                "iso",
                "vztmpl",
                "import"
              ]
            }
          },
          {
            "name": "filename",
            "in": "query",
            "required": true,
            "description": "The name of the file to create. Caution: This will be normalized!",
            "schema": {
              "type": "string",
              "description": "The name of the file to create. Caution: This will be normalized!"
            }
          },
          {
            "name": "tmpfilename",
            "in": "query",
            "required": false,
            "description": "The source file name. This parameter is usually set by the REST handler. You can only overwrite it when connecting to the trusted port on localhost.",
            "schema": {
              "type": "string",
              "description": "The source file name. This parameter is usually set by the REST handler. You can only overwrite it when connecting to the trusted port on localhost."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall/rules": {
      "get": {
        "summary": "Read Alias",
        "description": "Read alias.",
        "operationId": "get_nodes_node_qemu_vmid_firewall_rules",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "Alias name.",
            "schema": {
              "type": "string",
              "description": "Alias name."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Remove Alias",
        "description": "Remove IP or Network alias.",
        "operationId": "delete_nodes_node_qemu_vmid_firewall_rules",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "Alias name.",
            "schema": {
              "type": "string",
              "description": "Alias name."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/termproxy": {
      "get": {
        "summary": "Vncwebsocket",
        "description": "Opens a weksocket for VNC traffic.\n\n**Required permissions:** You also need to pass a valid ticket (vncticket).",
        "operationId": "get_nodes_node_qemu_vmid_termproxy",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "port",
            "in": "query",
            "required": true,
            "description": "Port number returned by previous vncproxy call.",
            "schema": {
              "type": "integer",
              "description": "Port number returned by previous vncproxy call."
            }
          },
          {
            "name": "vncticket",
            "in": "query",
            "required": true,
            "description": "Ticket from previous call to vncproxy.",
            "schema": {
              "type": "string",
              "description": "Ticket from previous call to vncproxy."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Spiceproxy",
        "description": "Returns a SPICE configuration to connect to the VM.",
        "operationId": "post_nodes_node_qemu_vmid_termproxy",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "proxy",
            "in": "query",
            "required": false,
            "description": "SPICE proxy server. This can be used by the client to specify the proxy server. All nodes in a cluster runs 'spiceproxy', so it is up to the client to choose one. By default, we return the node where the VM is currently running. As reasonable setting is to use same node you use to connect to the API (This is window.location.hostname for the JS GUI).",
            "schema": {
              "type": "string",
              "description": "SPICE proxy server. This can be used by the client to specify the proxy server. All nodes in a cluster runs 'spiceproxy', so it is up to the client to choose one. By default, we return the node where the VM is currently running. As reasonable setting is to use same node you use to connect to the API (This is window.location.hostname for the JS GUI)."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/rrddata": {
      "get": {
        "summary": "Journal",
        "description": "Read Journal",
        "operationId": "get_nodes_node_rrddata",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "endcursor",
            "in": "query",
            "required": false,
            "description": "End before the given Cursor. Conflicts with 'until'",
            "schema": {
              "type": "string",
              "description": "End before the given Cursor. Conflicts with 'until'"
            }
          },
          {
            "name": "lastentries",
            "in": "query",
            "required": false,
            "description": "Limit to the last X lines. Conflicts with a range.",
            "schema": {
              "type": "integer",
              "description": "Limit to the last X lines. Conflicts with a range."
            }
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "description": "Display all log since this UNIX epoch. Conflicts with 'startcursor'.",
            "schema": {
              "type": "integer",
              "description": "Display all log since this UNIX epoch. Conflicts with 'startcursor'."
            }
          },
          {
            "name": "startcursor",
            "in": "query",
            "required": false,
            "description": "Start after the given Cursor. Conflicts with 'since'",
            "schema": {
              "type": "string",
              "description": "Start after the given Cursor. Conflicts with 'since'"
            }
          },
          {
            "name": "until",
            "in": "query",
            "required": false,
            "description": "Display all log until this UNIX epoch. Conflicts with 'endcursor'.",
            "schema": {
              "type": "integer",
              "description": "Display all log until this UNIX epoch. Conflicts with 'endcursor'."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/scan/glusterfs": {
      "get": {
        "summary": "Zfsscan",
        "description": "Scan zfs pool list on local node.",
        "operationId": "get_nodes_node_scan_glusterfs",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/ha/status": {
      "get": {
        "summary": "Get Plugin Config",
        "description": "Get ACME plugin configuration.",
        "operationId": "get_cluster_ha_status",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "Unique identifier for ACME plugin instance.",
            "schema": {
              "type": "string",
              "description": "Unique identifier for ACME plugin instance."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Plugin",
        "description": "Delete ACME plugin configuration.",
        "operationId": "delete_cluster_ha_status",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "Unique identifier for ACME plugin instance.",
            "schema": {
              "type": "string",
              "description": "Unique identifier for ACME plugin instance."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/spiceproxy": {
      "post": {
        "summary": "Remote Migrate Vm",
        "description": "Migrate the container to another cluster. Creates a new migration task. EXPERIMENTAL feature!",
        "operationId": "post_nodes_node_lxc_vmid_spiceproxy",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "bwlimit",
            "in": "query",
            "required": false,
            "description": "Override I/O bandwidth limit (in KiB/s).",
            "schema": {
              "type": "number",
              "description": "Override I/O bandwidth limit (in KiB/s).",
              "default": "migrate limit from datacenter or storage config"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "required": false,
            "description": "Delete the original CT and related data after successful migration. By default the original CT is kept on the source cluster in a stopped state.",
            "schema": {
              "type": "boolean",
              "description": "Delete the original CT and related data after successful migration. By default the original CT is kept on the source cluster in a stopped state.",
              "default": 0
            }
          },
          {
            "name": "online",
            "in": "query",
            "required": false,
            "description": "Use online/live migration.",
            "schema": {
              "type": "boolean",
              "description": "Use online/live migration."
            }
          },
          {
            "name": "restart",
            "in": "query",
            "required": false,
            "description": "Use restart migration",
            "schema": {
              "type": "boolean",
              "description": "Use restart migration"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "required": false,
            "description": "Timeout in seconds for shutdown for restart migration",
            "schema": {
              "type": "integer",
              "description": "Timeout in seconds for shutdown for restart migration",
              "default": 180
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/storage/{storage}/import-metadata": {
      "get": {
        "summary": "Index",
        "description": "Get status for all datastores.\n\n**Required permissions:** Only list entries where you have 'Datastore.Audit' or 'Datastore.AllocateSpace' permissions on '/storage/<storage>'",
        "operationId": "get_nodes_node_storage_storage_import-metadata",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "required": true,
            "description": "storage identifier",
            "schema": {
              "type": "string",
              "description": "Storage identifier"
            }
          },
          {
            "name": "content",
            "in": "query",
            "required": false,
            "description": "Only list stores which support this content type.",
            "schema": {
              "type": "string",
              "description": "Only list stores which support this content type."
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "required": false,
            "description": "Only list stores which are enabled (not disabled in config).",
            "schema": {
              "type": "boolean",
              "description": "Only list stores which are enabled (not disabled in config).",
              "default": 0
            }
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "description": "Include information about formats",
            "schema": {
              "type": "boolean",
              "description": "Include information about formats",
              "default": 0
            }
          },
          {
            "name": "target",
            "in": "query",
            "required": false,
            "description": "If target is different to 'node', we only lists shared storages which content is accessible on this 'node' and the specified 'target' node.",
            "schema": {
              "type": "string",
              "description": "If target is different to 'node', we only lists shared storages which content is accessible on this 'node' and the specified 'target' node."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/osd/{osdid}": {
      "get": {
        "summary": "Index",
        "description": "Get Ceph osd list/tree.",
        "operationId": "get_nodes_node_ceph_osd_osdid",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "osdid",
            "in": "path",
            "required": true,
            "description": "osdid identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Createosd",
        "description": "Create OSD",
        "operationId": "post_nodes_node_ceph_osd_osdid",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "osdid",
            "in": "path",
            "required": true,
            "description": "osdid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "db_dev",
            "in": "query",
            "required": false,
            "description": "Block device name for block.db.",
            "schema": {
              "type": "string",
              "description": "Block device name for block.db."
            }
          },
          {
            "name": "db_dev_size",
            "in": "query",
            "required": false,
            "description": "Size in GiB for block.db.",
            "schema": {
              "type": "number",
              "description": "Size in GiB for block.db.",
              "default": "bluestore_block_db_size or 10% of OSD size"
            }
          },
          {
            "name": "dev",
            "in": "query",
            "required": true,
            "description": "Block device name.",
            "schema": {
              "type": "string",
              "description": "Block device name."
            }
          },
          {
            "name": "encrypted",
            "in": "query",
            "required": false,
            "description": "Enables encryption of the OSD.",
            "schema": {
              "type": "boolean",
              "description": "Enables encryption of the OSD.",
              "default": 0
            }
          },
          {
            "name": "wal_dev",
            "in": "query",
            "required": false,
            "description": "Block device name for block.wal.",
            "schema": {
              "type": "string",
              "description": "Block device name for block.wal."
            }
          },
          {
            "name": "wal_dev_size",
            "in": "query",
            "required": false,
            "description": "Size in GiB for block.wal.",
            "schema": {
              "type": "number",
              "description": "Size in GiB for block.wal.",
              "default": "bluestore_block_wal_size or 1% of OSD size"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/aplinfo": {
      "get": {
        "summary": "Report",
        "description": "Gather various systems information about a node",
        "operationId": "get_nodes_node_aplinfo",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Stopall",
        "description": "Stop all VMs and Containers.\n\n**Required permissions:** The 'VM.PowerMgmt' permission is required on '/' or on '/vms/<ID>' for each ID passed via the 'vms' parameter.",
        "operationId": "post_nodes_node_aplinfo",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "required": false,
            "description": "Timeout for each guest shutdown task. Depending on `force-stop`, the shutdown gets then simply aborted or a hard-stop is forced.",
            "schema": {
              "type": "integer",
              "description": "Timeout for each guest shutdown task. Depending on `force-stop`, the shutdown gets then simply aborted or a hard-stop is forced.",
              "default": 180
            }
          },
          {
            "name": "vms",
            "in": "query",
            "required": false,
            "description": "Only consider Guests with these IDs.",
            "schema": {
              "type": "string",
              "description": "Only consider Guests with these IDs."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/jobs/realm-sync": {
      "get": {
        "summary": "Get",
        "description": "Get directory mapping.",
        "operationId": "get_cluster_jobs_realm-sync",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Remove directory mapping.",
        "operationId": "delete_cluster_jobs_realm-sync",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/fsfreeze-status": {
      "get": {
        "summary": "Get-Fsinfo",
        "description": "Execute get-fsinfo.",
        "operationId": "get_nodes_node_qemu_vmid_agent_fsfreeze-status",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Fstrim",
        "description": "Execute fstrim.",
        "operationId": "post_nodes_node_qemu_vmid_agent_fsfreeze-status",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall/ipset/{name}/{cidr}": {
      "get": {
        "summary": "Get Ipset",
        "description": "List IPSet content",
        "operationId": "get_nodes_node_qemu_vmid_firewall_ipset_name_cidr",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cidr",
            "in": "path",
            "required": true,
            "description": "cidr identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Ipset",
        "description": "Delete IPSet",
        "operationId": "delete_nodes_node_qemu_vmid_firewall_ipset_name_cidr",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cidr",
            "in": "path",
            "required": true,
            "description": "cidr identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "Delete all members of the IPSet, if there are any.",
            "schema": {
              "type": "boolean",
              "description": "Delete all members of the IPSet, if there are any."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/snapshot": {
      "delete": {
        "summary": "Delete Rule",
        "description": "Delete rule.",
        "operationId": "delete_nodes_node_lxc_vmid_snapshot",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "pos",
            "in": "query",
            "required": false,
            "description": "Update rule at position <pos>.",
            "schema": {
              "type": "integer",
              "description": "Update rule at position <pos>."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/notifications/matcher-fields": {
      "get": {
        "summary": "Get Sendmail Endpoint",
        "description": "Return a specific sendmail endpoint",
        "operationId": "get_cluster_notifications_matcher-fields",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Sendmail Endpoint",
        "description": "Remove sendmail endpoint",
        "operationId": "delete_cluster_notifications_matcher-fields",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/migrateall": {
      "get": {
        "summary": "Index",
        "description": "Cluster node index.",
        "operationId": "get_nodes_node_migrateall",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Write Etc Hosts",
        "description": "Write /etc/hosts.",
        "operationId": "post_nodes_node_migrateall",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "data",
            "in": "query",
            "required": true,
            "description": "The target content of /etc/hosts.",
            "schema": {
              "type": "string",
              "description": "The target content of /etc/hosts."
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete storage configuration.",
        "operationId": "delete_nodes_node_migrateall",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "storage",
            "in": "query",
            "required": true,
            "description": "The storage identifier.",
            "schema": {
              "type": "string",
              "description": "The storage identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/sdn/vnets/{vnet}/firewall": {
      "get": {
        "summary": "Read",
        "description": "Read sdn subnet configuration.\n\n**Required permissions:** Require 'SDN.Audit' or 'SDN.Allocate' permissions on '/sdn/zones/<zone>/<vnet>'",
        "operationId": "get_cluster_sdn_vnets_vnet_firewall",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "vnet",
            "in": "path",
            "required": true,
            "description": "vnet identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pending",
            "in": "query",
            "required": false,
            "description": "Display pending config.",
            "schema": {
              "type": "boolean",
              "description": "Display pending config."
            }
          },
          {
            "name": "running",
            "in": "query",
            "required": false,
            "description": "Display running config.",
            "schema": {
              "type": "boolean",
              "description": "Display running config."
            }
          },
          {
            "name": "subnet",
            "in": "query",
            "required": true,
            "description": "The SDN subnet object identifier.",
            "schema": {
              "type": "string",
              "description": "The SDN subnet object identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete sdn subnet object configuration.\n\n**Required permissions:** Require 'SDN.Allocate' permission on '/sdn/zones/<zone>/<vnet>'",
        "operationId": "delete_cluster_sdn_vnets_vnet_firewall",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "vnet",
            "in": "path",
            "required": true,
            "description": "vnet identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subnet",
            "in": "query",
            "required": true,
            "description": "The SDN subnet object identifier.",
            "schema": {
              "type": "string",
              "description": "The SDN subnet object identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/notifications/endpoints": {
      "get": {
        "summary": "Get All Targets",
        "description": "Returns a list of all entities that can be used as notification targets.",
        "operationId": "get_cluster_notifications_endpoints",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Test Target",
        "description": "Send a test notification to a provided target.",
        "operationId": "post_cluster_notifications_endpoints",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "Name of the target.",
            "schema": {
              "type": "string",
              "description": "Name of the target."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Matcher",
        "description": "Remove matcher",
        "operationId": "delete_cluster_notifications_endpoints",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/network": {
      "get": {
        "summary": "Read Task Status",
        "description": "Read task status.\n\n**Required permissions:** The user needs 'Sys.Audit' permissions on '/nodes/<node>' if they are not the owner of the task.",
        "operationId": "get_nodes_node_network",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "upid",
            "in": "query",
            "required": true,
            "description": "The task's unique ID.",
            "schema": {
              "type": "string",
              "description": "The task's unique ID."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/disks/initgpt": {
      "get": {
        "summary": "Changelog",
        "description": "Get package changelogs.",
        "operationId": "get_nodes_node_disks_initgpt",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "Package name.",
            "schema": {
              "type": "string",
              "description": "Package name."
            }
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "description": "Package version.",
            "schema": {
              "type": "string",
              "description": "Package version."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Update Database",
        "description": "This is used to resynchronize the package index files from their sources (apt-get update).",
        "operationId": "post_nodes_node_disks_initgpt",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "notify",
            "in": "query",
            "required": false,
            "description": "Send notification about new packages.",
            "schema": {
              "type": "boolean",
              "description": "Send notification about new packages.",
              "default": 0
            }
          },
          {
            "name": "quiet",
            "in": "query",
            "required": false,
            "description": "Only produces output suitable for logging, omitting progress indicators.",
            "schema": {
              "type": "boolean",
              "description": "Only produces output suitable for logging, omitting progress indicators.",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Wipe Disk",
        "description": "Wipe a disk or partition.",
        "operationId": "put_nodes_node_disks_initgpt",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "disk",
            "in": "query",
            "required": true,
            "description": "Block device name",
            "schema": {
              "type": "string",
              "description": "Block device name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/capabilities/qemu": {
      "get": {
        "summary": "Index",
        "description": "Node capabilities index.",
        "operationId": "get_nodes_node_capabilities_qemu",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Prune backups. Only those using the standard naming scheme are considered.\n\n**Required permissions:** You need the 'Datastore.Allocate' privilege on the storage (or if a VM ID is specified, 'Datastore.AllocateSpace' and 'VM.Backup' for the VM).",
        "operationId": "delete_nodes_node_capabilities_qemu",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "storage",
            "in": "query",
            "required": true,
            "description": "The storage identifier.",
            "schema": {
              "type": "string",
              "description": "The storage identifier."
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Either 'qemu' or 'lxc'. Only consider backups for guests of this type.",
            "schema": {
              "type": "string",
              "description": "Either 'qemu' or 'lxc'. Only consider backups for guests of this type.",
              "enum": [
                "qemu",
                "lxc"
              ]
            }
          },
          {
            "name": "vmid",
            "in": "query",
            "required": false,
            "description": "Only prune backups for this VM.",
            "schema": {
              "type": "integer",
              "description": "Only prune backups for this VM."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/get-memory-block-info": {
      "get": {
        "summary": "Get-Time",
        "description": "Execute get-time.",
        "operationId": "get_nodes_node_qemu_vmid_agent_get-memory-block-info",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/sdn/vnets": {
      "get": {
        "summary": "Read",
        "description": "Read sdn zone configuration.",
        "operationId": "get_cluster_sdn_vnets",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "pending",
            "in": "query",
            "required": false,
            "description": "Display pending config.",
            "schema": {
              "type": "boolean",
              "description": "Display pending config."
            }
          },
          {
            "name": "running",
            "in": "query",
            "required": false,
            "description": "Display running config.",
            "schema": {
              "type": "boolean",
              "description": "Display running config."
            }
          },
          {
            "name": "zone",
            "in": "query",
            "required": true,
            "description": "The SDN zone object identifier.",
            "schema": {
              "type": "string",
              "description": "The SDN zone object identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete sdn zone object configuration.",
        "operationId": "delete_cluster_sdn_vnets",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "zone",
            "in": "query",
            "required": true,
            "description": "The SDN zone object identifier.",
            "schema": {
              "type": "string",
              "description": "The SDN zone object identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/rrd": {
      "get": {
        "summary": "Rrddata",
        "description": "Read VM RRD statistics",
        "operationId": "get_nodes_node_lxc_vmid_rrd",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "cf",
            "in": "query",
            "required": false,
            "description": "The RRD consolidation function",
            "schema": {
              "type": "string",
              "description": "The RRD consolidation function",
              "enum": [
                "AVERAGE",
                "MAX"
              ]
            }
          },
          {
            "name": "timeframe",
            "in": "query",
            "required": true,
            "description": "Specify the time frame you are interested in.",
            "schema": {
              "type": "string",
              "description": "Specify the time frame you are interested in.",
              "enum": [
                "hour",
                "day",
                "week",
                "month",
                "year"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Vncproxy",
        "description": "Creates a TCP VNC proxy connections.",
        "operationId": "post_nodes_node_lxc_vmid_rrd",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "height",
            "in": "query",
            "required": false,
            "description": "sets the height of the console in pixels.",
            "schema": {
              "type": "integer",
              "description": "sets the height of the console in pixels."
            }
          },
          {
            "name": "websocket",
            "in": "query",
            "required": false,
            "description": "use websocket instead of standard VNC.",
            "schema": {
              "type": "boolean",
              "description": "use websocket instead of standard VNC."
            }
          },
          {
            "name": "width",
            "in": "query",
            "required": false,
            "description": "sets the width of the console in pixels.",
            "schema": {
              "type": "integer",
              "description": "sets the width of the console in pixels."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/services/{service}/reload": {
      "get": {
        "summary": "Index",
        "description": "Service list.",
        "operationId": "get_nodes_node_services_service_reload",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "description": "service identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete subscription key of this node.",
        "operationId": "delete_nodes_node_services_service_reload",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "description": "service identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}": {
      "get": {
        "summary": "Vmlist",
        "description": "LXC container index (per node).\n\n**Required permissions:** Only list CTs where you have VM.Audit permission on /vms/<vmid>.",
        "operationId": "get_nodes_node_lxc_vmid",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/notifications/endpoints/smtp/{name}": {
      "get": {
        "summary": "Get Smtp Endpoints",
        "description": "Returns a list of all smtp endpoints",
        "operationId": "get_cluster_notifications_endpoints_smtp_name",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/scan/lvm": {
      "get": {
        "summary": "Index",
        "description": "Index of available scan methods",
        "operationId": "get_nodes_node_scan_lvm",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/sdn/vnets/{vnet}/firewall/rules": {
      "get": {
        "summary": "Get Options",
        "description": "Get vnet firewall options.\n\n**Required permissions:** Needs SDN.Audit or SDN.Allocate permissions on '/sdn/zones/<zone>/<vnet>'",
        "operationId": "get_cluster_sdn_vnets_vnet_firewall_rules",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "vnet",
            "in": "path",
            "required": true,
            "description": "vnet identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Set Options",
        "description": "Set Firewall options.\n\n**Required permissions:** Needs SDN.Allocate permissions on '/sdn/zones/<zone>/<vnet>'",
        "operationId": "put_cluster_sdn_vnets_vnet_firewall_rules",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "vnet",
            "in": "path",
            "required": true,
            "description": "vnet identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "required": false,
            "description": "A list of settings you want to delete.",
            "schema": {
              "type": "string",
              "description": "A list of settings you want to delete."
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "enable",
            "in": "query",
            "required": false,
            "description": "Enable/disable firewall rules.",
            "schema": {
              "type": "boolean",
              "description": "Enable/disable firewall rules.",
              "default": 0
            }
          },
          {
            "name": "log_level_forward",
            "in": "query",
            "required": false,
            "description": "Log level for forwarded traffic.",
            "schema": {
              "type": "string",
              "description": "Log level for forwarded traffic.",
              "enum": [
                "emerg",
                "alert",
                "crit",
                "err",
                "warning",
                "notice",
                "info",
                "debug",
                "nolog"
              ]
            }
          },
          {
            "name": "policy_forward",
            "in": "query",
            "required": false,
            "description": "Forward policy.",
            "schema": {
              "type": "string",
              "description": "Forward policy.",
              "enum": [
                "ACCEPT",
                "DROP"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/status/resume": {
      "get": {
        "summary": "Vmcmdidx",
        "description": "Directory index",
        "operationId": "get_nodes_node_lxc_vmid_status_resume",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Vm Reboot",
        "description": "Reboot the container by shutting it down, and starting it again. Applies pending changes.",
        "operationId": "post_nodes_node_lxc_vmid_status_resume",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "required": false,
            "description": "Wait maximal timeout seconds for the shutdown.",
            "schema": {
              "type": "integer",
              "description": "Wait maximal timeout seconds for the shutdown."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/scan/iscsi": {
      "get": {
        "summary": "Index",
        "description": "Index of available scan methods",
        "operationId": "get_nodes_node_scan_iscsi",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/access/domains/{realm}": {
      "get": {
        "summary": "Index",
        "description": "Authentication domain index.\n\n**Required permissions:** Anyone can access that, because we need that list for the login box (before the user is authenticated).",
        "operationId": "get_access_domains_realm",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "realm",
            "in": "path",
            "required": true,
            "description": "realm identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall/refs": {
      "get": {
        "summary": "Rrd",
        "description": "Read VM RRD statistics (returns PNG)",
        "operationId": "get_nodes_node_lxc_vmid_firewall_refs",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "cf",
            "in": "query",
            "required": false,
            "description": "The RRD consolidation function",
            "schema": {
              "type": "string",
              "description": "The RRD consolidation function",
              "enum": [
                "AVERAGE",
                "MAX"
              ]
            }
          },
          {
            "name": "ds",
            "in": "query",
            "required": true,
            "description": "The list of datasources you want to display.",
            "schema": {
              "type": "string",
              "description": "The list of datasources you want to display."
            }
          },
          {
            "name": "timeframe",
            "in": "query",
            "required": true,
            "description": "Specify the time frame you are interested in.",
            "schema": {
              "type": "string",
              "description": "Specify the time frame you are interested in.",
              "enum": [
                "hour",
                "day",
                "week",
                "month",
                "year"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/status/stop": {
      "post": {
        "summary": "Vm Resume",
        "description": "Resume the container.",
        "operationId": "post_nodes_node_lxc_vmid_status_stop",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/fs/{name}": {
      "get": {
        "summary": "Index",
        "description": "Directory index.",
        "operationId": "get_nodes_node_ceph_fs_name",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/status": {
      "get": {
        "summary": "Rrd",
        "description": "Read node RRD statistics (returns PNG)",
        "operationId": "get_nodes_node_status",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "cf",
            "in": "query",
            "required": false,
            "description": "The RRD consolidation function",
            "schema": {
              "type": "string",
              "description": "The RRD consolidation function",
              "enum": [
                "AVERAGE",
                "MAX"
              ]
            }
          },
          {
            "name": "ds",
            "in": "query",
            "required": true,
            "description": "The list of datasources you want to display.",
            "schema": {
              "type": "string",
              "description": "The list of datasources you want to display."
            }
          },
          {
            "name": "timeframe",
            "in": "query",
            "required": true,
            "description": "Specify the time frame you are interested in.",
            "schema": {
              "type": "string",
              "description": "Specify the time frame you are interested in.",
              "enum": [
                "hour",
                "day",
                "week",
                "month",
                "year"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Wakeonlan",
        "description": "Try to wake a node via 'wake on LAN' network packet.",
        "operationId": "post_nodes_node_status",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/monitor": {
      "put": {
        "summary": "Resize Vm",
        "description": "Extend volume size.",
        "operationId": "put_nodes_node_qemu_vmid_monitor",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "disk",
            "in": "query",
            "required": true,
            "description": "The disk you want to resize.",
            "schema": {
              "type": "string",
              "description": "The disk you want to resize.",
              "enum": [
                "ide0",
                "ide1",
                "ide2",
                "ide3",
                "scsi0",
                "scsi1",
                "scsi2",
                "scsi3",
                "scsi4",
                "scsi5",
                "scsi6",
                "scsi7",
                "scsi8",
                "scsi9",
                "scsi10",
                "scsi11",
                "scsi12",
                "scsi13",
                "scsi14",
                "scsi15",
                "scsi16",
                "scsi17",
                "scsi18",
                "scsi19",
                "scsi20",
                "scsi21",
                "scsi22",
                "scsi23",
                "scsi24",
                "scsi25",
                "scsi26",
                "scsi27",
                "scsi28",
                "scsi29",
                "scsi30",
                "virtio0",
                "virtio1",
                "virtio2",
                "virtio3",
                "virtio4",
                "virtio5",
                "virtio6",
                "virtio7",
                "virtio8",
                "virtio9",
                "virtio10",
                "virtio11",
                "virtio12",
                "virtio13",
                "virtio14",
                "virtio15",
                "sata0",
                "sata1",
                "sata2",
                "sata3",
                "sata4",
                "sata5",
                "efidisk0",
                "tpmstate0"
              ]
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": true,
            "description": "The new size. With the `+` sign the value is added to the actual size of the volume and without it, the value is taken as an absolute one. Shrinking disk size is not supported.",
            "schema": {
              "type": "string",
              "description": "The new size. With the `+` sign the value is added to the actual size of the volume and without it, the value is taken as an absolute one. Shrinking disk size is not supported."
            }
          },
          {
            "name": "skiplock",
            "in": "query",
            "required": false,
            "description": "Ignore locks - only root is allowed to use this option.",
            "schema": {
              "type": "boolean",
              "description": "Ignore locks - only root is allowed to use this option."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/migrate": {
      "get": {
        "summary": "Vm Feature",
        "description": "Check if feature for virtual machine is available.",
        "operationId": "get_nodes_node_lxc_vmid_migrate",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "feature",
            "in": "query",
            "required": true,
            "description": "Feature to check.",
            "schema": {
              "type": "string",
              "description": "Feature to check.",
              "enum": [
                "snapshot",
                "clone",
                "copy"
              ]
            }
          },
          {
            "name": "snapname",
            "in": "query",
            "required": false,
            "description": "The name of the snapshot.",
            "schema": {
              "type": "string",
              "description": "The name of the snapshot."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Template",
        "description": "Create a Template.\n\n**Required permissions:** You need 'VM.Allocate' permissions on /vms/{vmid}",
        "operationId": "post_nodes_node_lxc_vmid_migrate",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/mon/{monid}": {
      "get": {
        "summary": "Listmon",
        "description": "Get Ceph monitor list.",
        "operationId": "get_nodes_node_ceph_mon_monid",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "monid",
            "in": "path",
            "required": true,
            "description": "monid identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Createfs",
        "description": "Create a Ceph filesystem",
        "operationId": "post_nodes_node_ceph_mon_monid",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "monid",
            "in": "path",
            "required": true,
            "description": "monid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "The ceph filesystem name.",
            "schema": {
              "type": "string",
              "description": "The ceph filesystem name.",
              "default": "cephfs"
            }
          },
          {
            "name": "pg_num",
            "in": "query",
            "required": false,
            "description": "Number of placement groups for the backing data pool. The metadata pool will use a quarter of this.",
            "schema": {
              "type": "integer",
              "description": "Number of placement groups for the backing data pool. The metadata pool will use a quarter of this.",
              "default": 128
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/snapshot/{snapname}": {
      "get": {
        "summary": "Snapshot List",
        "description": "List all snapshots.",
        "operationId": "get_nodes_node_qemu_vmid_snapshot_snapname",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "snapname",
            "in": "path",
            "required": true,
            "description": "snapname identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Snapshot",
        "description": "Snapshot a VM.",
        "operationId": "post_nodes_node_qemu_vmid_snapshot_snapname",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "snapname",
            "in": "path",
            "required": true,
            "description": "snapname identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "description": "A textual description or comment.",
            "schema": {
              "type": "string",
              "description": "A textual description or comment."
            }
          },
          {
            "name": "vmstate",
            "in": "query",
            "required": false,
            "description": "Save the vmstate",
            "schema": {
              "type": "boolean",
              "description": "Save the vmstate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/status/stop": {
      "post": {
        "summary": "Vm Shutdown",
        "description": "Shutdown virtual machine. This is similar to pressing the power button on a physical machine. This will send an ACPI event for the guest OS, which should then proceed to a clean shutdown.",
        "operationId": "post_nodes_node_qemu_vmid_status_stop",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "forceStop",
            "in": "query",
            "required": false,
            "description": "Make sure the VM stops.",
            "schema": {
              "type": "boolean",
              "description": "Make sure the VM stops.",
              "default": 0
            }
          },
          {
            "name": "keepActive",
            "in": "query",
            "required": false,
            "description": "Do not deactivate storage volumes.",
            "schema": {
              "type": "boolean",
              "description": "Do not deactivate storage volumes.",
              "default": 0
            }
          },
          {
            "name": "skiplock",
            "in": "query",
            "required": false,
            "description": "Ignore locks - only root is allowed to use this option.",
            "schema": {
              "type": "boolean",
              "description": "Ignore locks - only root is allowed to use this option."
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "required": false,
            "description": "Wait maximal timeout seconds.",
            "schema": {
              "type": "integer",
              "description": "Wait maximal timeout seconds."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/disks/lvm/{name}": {
      "get": {
        "summary": "Index",
        "description": "List LVM Volume Groups",
        "operationId": "get_nodes_node_disks_lvm_name",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create",
        "description": "Create an LVM Volume Group\n\n**Required permissions:** Requires additionally 'Datastore.Allocate' on /storage when setting 'add_storage'",
        "operationId": "post_nodes_node_disks_lvm_name",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "add_storage",
            "in": "query",
            "required": false,
            "description": "Configure storage using the Volume Group",
            "schema": {
              "type": "boolean",
              "description": "Configure storage using the Volume Group",
              "default": 0
            }
          },
          {
            "name": "device",
            "in": "query",
            "required": true,
            "description": "The block device you want to create the volume group on",
            "schema": {
              "type": "string",
              "description": "The block device you want to create the volume group on"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/services/{service}/stop": {
      "post": {
        "summary": "Service Reload",
        "description": "Reload service. Falls back to restart if service cannot be reloaded.",
        "operationId": "post_nodes_node_services_service_stop",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "description": "service identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/subscription": {
      "get": {
        "summary": "Network Config",
        "description": "Read network device configuration",
        "operationId": "get_nodes_node_subscription",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "iface",
            "in": "query",
            "required": true,
            "description": "Network interface name.",
            "schema": {
              "type": "string",
              "description": "Network interface name."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Network",
        "description": "Delete network device configuration",
        "operationId": "delete_nodes_node_subscription",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "iface",
            "in": "query",
            "required": true,
            "description": "Network interface name.",
            "schema": {
              "type": "string",
              "description": "Network interface name."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/disks/directory": {
      "get": {
        "summary": "Detail",
        "description": "Get details about a zpool.",
        "operationId": "get_nodes_node_disks_directory",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "The storage identifier.",
            "schema": {
              "type": "string",
              "description": "The storage identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Destroy a ZFS pool.\n\n**Required permissions:** Requires additionally 'Datastore.Allocate' on /storage when setting 'cleanup-config'",
        "operationId": "delete_nodes_node_disks_directory",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "The storage identifier.",
            "schema": {
              "type": "string",
              "description": "The storage identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/hardware": {
      "get": {
        "summary": "Qemu Caps Index",
        "description": "QEMU capabilities index.",
        "operationId": "get_nodes_node_hardware",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/cloudinit": {
      "post": {
        "summary": "Vncproxy",
        "description": "Creates a TCP VNC proxy connections.",
        "operationId": "post_nodes_node_qemu_vmid_cloudinit",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "websocket",
            "in": "query",
            "required": false,
            "description": "Prepare for websocket upgrade (only required when using serial terminal, otherwise upgrade is always possible).",
            "schema": {
              "type": "boolean",
              "description": "Prepare for websocket upgrade (only required when using serial terminal, otherwise upgrade is always possible)."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Unlink",
        "description": "Unlink/delete disk images.",
        "operationId": "put_nodes_node_qemu_vmid_cloudinit",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "Force physical removal. Without this, we simple remove the disk from the config file and create an additional configuration entry called 'unused[n]', which contains the volume ID. Unlink of unused[n] always cause physical removal.",
            "schema": {
              "type": "boolean",
              "description": "Force physical removal. Without this, we simple remove the disk from the config file and create an additional configuration entry called 'unused[n]', which contains the volume ID. Unlink of unused[n] always cause physical removal."
            }
          },
          {
            "name": "idlist",
            "in": "query",
            "required": true,
            "description": "A list of disk IDs you want to delete.",
            "schema": {
              "type": "string",
              "description": "A list of disk IDs you want to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster": {
      "get": {
        "summary": "Index",
        "description": "Cluster index.",
        "operationId": "get_cluster",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Rule",
        "description": "Delete rule.",
        "operationId": "delete_cluster",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "node",
            "in": "query",
            "required": true,
            "description": "The cluster node name.",
            "schema": {
              "type": "string",
              "description": "The cluster node name."
            }
          },
          {
            "name": "pos",
            "in": "query",
            "required": false,
            "description": "Update rule at position <pos>.",
            "schema": {
              "type": "integer",
              "description": "Update rule at position <pos>."
            }
          },
          {
            "name": "vmid",
            "in": "query",
            "required": true,
            "description": "The (unique) ID of the VM.",
            "schema": {
              "type": "integer",
              "description": "The (unique) ID of the VM."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/metrics/server/{id}": {
      "get": {
        "summary": "Index",
        "description": "Metrics index.",
        "operationId": "get_cluster_metrics_server_id",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/file-read": {
      "get": {
        "summary": "Index",
        "description": "QEMU Guest Agent command index.",
        "operationId": "get_nodes_node_qemu_vmid_agent_file-read",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "File-Write",
        "description": "Writes the given file via guest agent.",
        "operationId": "post_nodes_node_qemu_vmid_agent_file-read",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "content",
            "in": "query",
            "required": true,
            "description": "The content to write into the file.",
            "schema": {
              "type": "string",
              "description": "The content to write into the file."
            }
          },
          {
            "name": "encode",
            "in": "query",
            "required": false,
            "description": "If set, the content will be encoded as base64 (required by QEMU).Otherwise the content needs to be encoded beforehand - defaults to true.",
            "schema": {
              "type": "boolean",
              "description": "If set, the content will be encoded as base64 (required by QEMU).Otherwise the content needs to be encoded beforehand - defaults to true.",
              "default": 1
            }
          },
          {
            "name": "file",
            "in": "query",
            "required": true,
            "description": "The path to the file.",
            "schema": {
              "type": "string",
              "description": "The path to the file."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/notifications/targets": {
      "get": {
        "summary": "Get Matcher",
        "description": "Return a specific matcher",
        "operationId": "get_cluster_notifications_targets",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Matcher",
        "description": "Remove matcher",
        "operationId": "delete_cluster_notifications_targets",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/config/totem": {
      "get": {
        "summary": "Index",
        "description": "Directory index.",
        "operationId": "get_cluster_config_totem",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create",
        "description": "Generate new cluster configuration. If no links given, default to local IP address as link0.",
        "operationId": "post_cluster_config_totem",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "clustername",
            "in": "query",
            "required": true,
            "description": "The name of the cluster.",
            "schema": {
              "type": "string",
              "description": "The name of the cluster."
            }
          },
          {
            "name": "address",
            "in": "query",
            "required": true,
            "description": "Hostname (or IP) of this corosync link address.",
            "schema": {
              "type": "string",
              "description": "Hostname (or IP) of this corosync link address."
            }
          },
          {
            "name": "priority",
            "in": "query",
            "required": false,
            "description": "The priority for the link when knet is used in 'passive' mode (default). Lower value means higher priority. Only valid for cluster create, ignored on node add.",
            "schema": {
              "type": "integer",
              "description": "The priority for the link when knet is used in 'passive' mode (default). Lower value means higher priority. Only valid for cluster create, ignored on node add.",
              "default": 0
            }
          },
          {
            "name": "nodeid",
            "in": "query",
            "required": false,
            "description": "Node id for this node.",
            "schema": {
              "type": "integer",
              "description": "Node id for this node."
            }
          },
          {
            "name": "votes",
            "in": "query",
            "required": false,
            "description": "Number of votes for this node.",
            "schema": {
              "type": "integer",
              "description": "Number of votes for this node."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Rule",
        "description": "Delete rule.",
        "operationId": "delete_cluster_config_totem",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "group",
            "in": "query",
            "required": true,
            "description": "Security Group name.",
            "schema": {
              "type": "string",
              "description": "Security Group name."
            }
          },
          {
            "name": "pos",
            "in": "query",
            "required": false,
            "description": "Update rule at position <pos>.",
            "schema": {
              "type": "integer",
              "description": "Update rule at position <pos>."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/acme/tos": {
      "get": {
        "summary": "Index",
        "description": "ACMEAccount index.",
        "operationId": "get_cluster_acme_tos",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/netstat": {
      "get": {
        "summary": "Rrddata",
        "description": "Read node RRD statistics",
        "operationId": "get_nodes_node_netstat",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "cf",
            "in": "query",
            "required": false,
            "description": "The RRD consolidation function",
            "schema": {
              "type": "string",
              "description": "The RRD consolidation function",
              "enum": [
                "AVERAGE",
                "MAX"
              ]
            }
          },
          {
            "name": "timeframe",
            "in": "query",
            "required": true,
            "description": "Specify the time frame you are interested in.",
            "schema": {
              "type": "string",
              "description": "Specify the time frame you are interested in.",
              "enum": [
                "hour",
                "day",
                "week",
                "month",
                "year"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Wakeonlan",
        "description": "Try to wake a node via 'wake on LAN' network packet.",
        "operationId": "post_nodes_node_netstat",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/acme/challenge-schema": {
      "get": {
        "summary": "Index",
        "description": "ACMEAccount index.",
        "operationId": "get_cluster_acme_challenge-schema",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/ceph": {
      "get": {
        "summary": "Read Job",
        "description": "Read realm-sync job definition.",
        "operationId": "get_cluster_ceph",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create Job",
        "description": "Create new realm-sync job.\n\n**Required permissions:** 'Realm.AllocateUser' on '/access/realm/<realm>' and 'User.Modify' permissions to '/access/groups/'.",
        "operationId": "post_cluster_ceph",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "Description for the Job.",
            "schema": {
              "type": "string",
              "description": "Description for the Job."
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "required": false,
            "description": "Determines if the job is enabled.",
            "schema": {
              "type": "boolean",
              "description": "Determines if the job is enabled.",
              "default": 1
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The ID of the job.",
            "schema": {
              "type": "string",
              "description": "The ID of the job."
            }
          },
          {
            "name": "realm",
            "in": "query",
            "required": false,
            "description": "Authentication domain ID",
            "schema": {
              "type": "string",
              "description": "Authentication domain ID"
            }
          },
          {
            "name": "schedule",
            "in": "query",
            "required": true,
            "description": "Backup schedule. The format is a subset of `systemd` calendar events.",
            "schema": {
              "type": "string",
              "description": "Backup schedule. The format is a subset of `systemd` calendar events."
            }
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "description": "Select what to sync.",
            "schema": {
              "type": "string",
              "description": "Select what to sync.",
              "enum": [
                "users",
                "groups",
                "both"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Job",
        "description": "Delete realm-sync job definition.",
        "operationId": "delete_cluster_ceph",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall/ipset/{name}": {
      "get": {
        "summary": "Ipset Index",
        "description": "List IPSets",
        "operationId": "get_nodes_node_lxc_vmid_firewall_ipset_name",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create Ipset",
        "description": "Create new IPSet",
        "operationId": "post_nodes_node_lxc_vmid_firewall_ipset_name",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "rename",
            "in": "query",
            "required": false,
            "description": "Rename an existing IPSet. You can set 'rename' to the same value as 'name' to update the 'comment' of an existing IPSet.",
            "schema": {
              "type": "string",
              "description": "Rename an existing IPSet. You can set 'rename' to the same value as 'name' to update the 'comment' of an existing IPSet."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/time": {
      "get": {
        "summary": "Report",
        "description": "Gather various systems information about a node",
        "operationId": "get_nodes_node_time",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Apl Download",
        "description": "Download appliance templates.",
        "operationId": "post_nodes_node_time",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "storage",
            "in": "query",
            "required": true,
            "description": "The storage where the template will be stored",
            "schema": {
              "type": "string",
              "description": "The storage where the template will be stored"
            }
          },
          {
            "name": "template",
            "in": "query",
            "required": true,
            "description": "The template which will downloaded",
            "schema": {
              "type": "string",
              "description": "The template which will downloaded"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/rrddata": {
      "post": {
        "summary": "Termproxy",
        "description": "Creates a TCP proxy connection.",
        "operationId": "post_nodes_node_lxc_vmid_rrddata",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/snapshot": {
      "post": {
        "summary": "Template",
        "description": "Create a Template.\n\n**Required permissions:** You need 'VM.Allocate' permissions on /vms/{vmid}",
        "operationId": "post_nodes_node_qemu_vmid_snapshot",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "disk",
            "in": "query",
            "required": false,
            "description": "If you want to convert only 1 disk to base image.",
            "schema": {
              "type": "string",
              "description": "If you want to convert only 1 disk to base image.",
              "enum": [
                "ide0",
                "ide1",
                "ide2",
                "ide3",
                "scsi0",
                "scsi1",
                "scsi2",
                "scsi3",
                "scsi4",
                "scsi5",
                "scsi6",
                "scsi7",
                "scsi8",
                "scsi9",
                "scsi10",
                "scsi11",
                "scsi12",
                "scsi13",
                "scsi14",
                "scsi15",
                "scsi16",
                "scsi17",
                "scsi18",
                "scsi19",
                "scsi20",
                "scsi21",
                "scsi22",
                "scsi23",
                "scsi24",
                "scsi25",
                "scsi26",
                "scsi27",
                "scsi28",
                "scsi29",
                "scsi30",
                "virtio0",
                "virtio1",
                "virtio2",
                "virtio3",
                "virtio4",
                "virtio5",
                "virtio6",
                "virtio7",
                "virtio8",
                "virtio9",
                "virtio10",
                "virtio11",
                "virtio12",
                "virtio13",
                "virtio14",
                "virtio15",
                "sata0",
                "sata1",
                "sata2",
                "sata3",
                "sata4",
                "sata5",
                "efidisk0",
                "tpmstate0"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/config": {
      "get": {
        "summary": "Get Rule",
        "description": "Get single rule data.",
        "operationId": "get_cluster_config",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "group",
            "in": "query",
            "required": true,
            "description": "Security Group name.",
            "schema": {
              "type": "string",
              "description": "Security Group name."
            }
          },
          {
            "name": "pos",
            "in": "query",
            "required": false,
            "description": "Update rule at position <pos>.",
            "schema": {
              "type": "integer",
              "description": "Update rule at position <pos>."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Rule",
        "description": "Delete rule.",
        "operationId": "delete_cluster_config",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "group",
            "in": "query",
            "required": true,
            "description": "Security Group name.",
            "schema": {
              "type": "string",
              "description": "Security Group name."
            }
          },
          {
            "name": "pos",
            "in": "query",
            "required": false,
            "description": "Update rule at position <pos>.",
            "schema": {
              "type": "integer",
              "description": "Update rule at position <pos>."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/mapping/pci": {
      "get": {
        "summary": "Get",
        "description": "Get USB Mapping.",
        "operationId": "get_cluster_mapping_pci",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Update",
        "description": "Update a hardware mapping.",
        "operationId": "put_cluster_mapping_pci",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "delete",
            "in": "query",
            "required": false,
            "description": "A list of settings you want to delete.",
            "schema": {
              "type": "string",
              "description": "A list of settings you want to delete."
            }
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "description": "Description of the node specific device.",
            "schema": {
              "type": "string",
              "description": "Description of the node specific device."
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The vendor and device ID that is expected. If a USB path is given, it is only used for detecting hardware changes",
            "schema": {
              "type": "string",
              "description": "The vendor and device ID that is expected. If a USB path is given, it is only used for detecting hardware changes"
            }
          },
          {
            "name": "node",
            "in": "query",
            "required": true,
            "description": "The cluster node name.",
            "schema": {
              "type": "string",
              "description": "The cluster node name."
            }
          },
          {
            "name": "path",
            "in": "query",
            "required": false,
            "description": "The path to the usb device.",
            "schema": {
              "type": "string",
              "description": "The path to the usb device."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Remove Hardware Mapping.",
        "operationId": "delete_cluster_mapping_pci",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/sdn/vnets/{vnet}": {
      "get": {
        "summary": "Read",
        "description": "Read sdn zone configuration.",
        "operationId": "get_cluster_sdn_vnets_vnet",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "vnet",
            "in": "path",
            "required": true,
            "description": "vnet identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pending",
            "in": "query",
            "required": false,
            "description": "Display pending config.",
            "schema": {
              "type": "boolean",
              "description": "Display pending config."
            }
          },
          {
            "name": "running",
            "in": "query",
            "required": false,
            "description": "Display running config.",
            "schema": {
              "type": "boolean",
              "description": "Display running config."
            }
          },
          {
            "name": "zone",
            "in": "query",
            "required": true,
            "description": "The SDN zone object identifier.",
            "schema": {
              "type": "string",
              "description": "The SDN zone object identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create",
        "description": "Create a new sdn vnet object.",
        "operationId": "post_cluster_sdn_vnets_vnet",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "vnet",
            "in": "path",
            "required": true,
            "description": "vnet identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "alias",
            "in": "query",
            "required": false,
            "description": "alias name of the vnet",
            "schema": {
              "type": "string",
              "description": "alias name of the vnet"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "required": false,
            "description": "vlan or vxlan id",
            "schema": {
              "type": "integer",
              "description": "vlan or vxlan id"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Type",
            "schema": {
              "type": "string",
              "description": "Type",
              "enum": [
                "vnet"
              ]
            }
          },
          {
            "name": "vlanaware",
            "in": "query",
            "required": false,
            "description": "Allow vm VLANs to pass through this vnet.",
            "schema": {
              "type": "boolean",
              "description": "Allow vm VLANs to pass through this vnet."
            }
          },
          {
            "name": "zone",
            "in": "query",
            "required": true,
            "description": "zone id",
            "schema": {
              "type": "string",
              "description": "zone id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete sdn zone object configuration.",
        "operationId": "delete_cluster_sdn_vnets_vnet",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "vnet",
            "in": "path",
            "required": true,
            "description": "vnet identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zone",
            "in": "query",
            "required": true,
            "description": "The SDN zone object identifier.",
            "schema": {
              "type": "string",
              "description": "The SDN zone object identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/sdn/zones/{zone}/content": {
      "get": {
        "summary": "Version",
        "description": "API version details",
        "operationId": "get_nodes_node_sdn_zones_zone_content",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "zone",
            "in": "path",
            "required": true,
            "description": "zone identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/cfg/raw": {
      "get": {
        "summary": "Index",
        "description": "Directory index.",
        "operationId": "get_nodes_node_ceph_cfg_raw",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/sdn/vnets/{vnet}/subnets/{subnet}": {
      "get": {
        "summary": "Index",
        "description": "SDN subnets index.\n\n**Required permissions:** Only list entries where you have 'SDN.Audit' or 'SDN.Allocate' permissions on '/sdn/zones/<zone>/<vnet>'",
        "operationId": "get_cluster_sdn_vnets_vnet_subnets_subnet",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "vnet",
            "in": "path",
            "required": true,
            "description": "vnet identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subnet",
            "in": "path",
            "required": true,
            "description": "subnet identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pending",
            "in": "query",
            "required": false,
            "description": "Display pending config.",
            "schema": {
              "type": "boolean",
              "description": "Display pending config."
            }
          },
          {
            "name": "running",
            "in": "query",
            "required": false,
            "description": "Display running config.",
            "schema": {
              "type": "boolean",
              "description": "Display running config."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create",
        "description": "Create a new sdn subnet object.\n\n**Required permissions:** Require 'SDN.Allocate' permission on '/sdn/zones/<zone>/<vnet>'",
        "operationId": "post_cluster_sdn_vnets_vnet_subnets_subnet",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "vnet",
            "in": "path",
            "required": true,
            "description": "vnet identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subnet",
            "in": "path",
            "required": true,
            "description": "subnet identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "items",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dnszoneprefix",
            "in": "query",
            "required": false,
            "description": "dns domain zone prefix  ex: 'adm' -> <hostname>.adm.mydomain.com",
            "schema": {
              "type": "string",
              "description": "dns domain zone prefix  ex: 'adm' -> <hostname>.adm.mydomain.com"
            }
          },
          {
            "name": "gateway",
            "in": "query",
            "required": false,
            "description": "Subnet Gateway: Will be assign on vnet for layer3 zones",
            "schema": {
              "type": "string",
              "description": "Subnet Gateway: Will be assign on vnet for layer3 zones"
            }
          },
          {
            "name": "snat",
            "in": "query",
            "required": false,
            "description": "enable masquerade for this subnet if pve-firewall",
            "schema": {
              "type": "boolean",
              "description": "enable masquerade for this subnet if pve-firewall"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string",
              "enum": [
                "subnet"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/tasks": {
      "get": {
        "summary": "Cifsscan",
        "description": "Scan remote CIFS server.",
        "operationId": "get_nodes_node_tasks",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "domain",
            "in": "query",
            "required": false,
            "description": "SMB domain (Workgroup).",
            "schema": {
              "type": "string",
              "description": "SMB domain (Workgroup)."
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": false,
            "description": "User password.",
            "schema": {
              "type": "string",
              "description": "User password."
            }
          },
          {
            "name": "server",
            "in": "query",
            "required": true,
            "description": "The server address (name or IP).",
            "schema": {
              "type": "string",
              "description": "The server address (name or IP)."
            }
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "description": "User name.",
            "schema": {
              "type": "string",
              "description": "User name."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/access/users/{userid}/token": {
      "get": {
        "summary": "Read User",
        "description": "Get user configuration.",
        "operationId": "get_access_users_userid_token",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "description": "userid identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete User",
        "description": "Delete user.",
        "operationId": "delete_access_users_userid_token",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "description": "userid identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/acme/account": {
      "get": {
        "summary": "Index",
        "description": "ACMEAccount index.",
        "operationId": "get_cluster_acme_account",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/certificates/acme": {
      "get": {
        "summary": "Info",
        "description": "Get information about node's certificates.",
        "operationId": "get_nodes_node_certificates_acme",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Remove Custom Cert",
        "description": "DELETE custom certificate chain and key.",
        "operationId": "delete_nodes_node_certificates_acme",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "restart",
            "in": "query",
            "required": false,
            "description": "Restart pveproxy.",
            "schema": {
              "type": "boolean",
              "description": "Restart pveproxy.",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/ceph/flags": {
      "get": {
        "summary": "Read Job",
        "description": "Read realm-sync job definition.",
        "operationId": "get_cluster_ceph_flags",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create Job",
        "description": "Create new realm-sync job.\n\n**Required permissions:** 'Realm.AllocateUser' on '/access/realm/<realm>' and 'User.Modify' permissions to '/access/groups/'.",
        "operationId": "post_cluster_ceph_flags",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "Description for the Job.",
            "schema": {
              "type": "string",
              "description": "Description for the Job."
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "required": false,
            "description": "Determines if the job is enabled.",
            "schema": {
              "type": "boolean",
              "description": "Determines if the job is enabled.",
              "default": 1
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The ID of the job.",
            "schema": {
              "type": "string",
              "description": "The ID of the job."
            }
          },
          {
            "name": "realm",
            "in": "query",
            "required": false,
            "description": "Authentication domain ID",
            "schema": {
              "type": "string",
              "description": "Authentication domain ID"
            }
          },
          {
            "name": "schedule",
            "in": "query",
            "required": true,
            "description": "Backup schedule. The format is a subset of `systemd` calendar events.",
            "schema": {
              "type": "string",
              "description": "Backup schedule. The format is a subset of `systemd` calendar events."
            }
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "description": "Select what to sync.",
            "schema": {
              "type": "string",
              "description": "Select what to sync.",
              "enum": [
                "users",
                "groups",
                "both"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Job",
        "description": "Delete realm-sync job definition.",
        "operationId": "delete_cluster_ceph_flags",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/firewall/macros": {
      "get": {
        "summary": "Get Volume Backup Included",
        "description": "Returns included guests and the backup status of their disks. Optimized to be used in ExtJS tree views.",
        "operationId": "get_cluster_firewall_macros",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The job ID.",
            "schema": {
              "type": "string",
              "description": "The job ID."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/get-vcpus": {
      "get": {
        "summary": "Network-Get-Interfaces",
        "description": "Execute network-get-interfaces.",
        "operationId": "get_nodes_node_qemu_vmid_agent_get-vcpus",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Ping",
        "description": "Execute ping.",
        "operationId": "post_nodes_node_qemu_vmid_agent_get-vcpus",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/cmd-safety": {
      "get": {
        "summary": "Index",
        "description": "Directory index.",
        "operationId": "get_nodes_node_ceph_cmd-safety",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/sdn/ipams/{ipam}": {
      "get": {
        "summary": "Read",
        "description": "Read sdn dns configuration.",
        "operationId": "get_cluster_sdn_ipams_ipam",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "ipam",
            "in": "path",
            "required": true,
            "description": "ipam identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dns",
            "in": "query",
            "required": true,
            "description": "The SDN dns object identifier.",
            "schema": {
              "type": "string",
              "description": "The SDN dns object identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create",
        "description": "Create a new sdn ipam object.",
        "operationId": "post_cluster_sdn_ipams_ipam",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "ipam",
            "in": "path",
            "required": true,
            "description": "ipam identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fingerprint",
            "in": "query",
            "required": false,
            "description": "Certificate SHA 256 fingerprint.",
            "schema": {
              "type": "string",
              "description": "Certificate SHA 256 fingerprint."
            }
          },
          {
            "name": "section",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "description": "Plugin type.",
            "schema": {
              "type": "string",
              "description": "Plugin type.",
              "enum": [
                "netbox",
                "phpipam",
                "pve"
              ]
            }
          },
          {
            "name": "url",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete sdn dns object configuration.",
        "operationId": "delete_cluster_sdn_ipams_ipam",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "ipam",
            "in": "path",
            "required": true,
            "description": "ipam identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dns",
            "in": "query",
            "required": true,
            "description": "The SDN dns object identifier.",
            "schema": {
              "type": "string",
              "description": "The SDN dns object identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}": {
      "get": {
        "summary": "Vmlist",
        "description": "Virtual machine index (per node).\n\n**Required permissions:** Only list VMs where you have VM.Audit permissions on /vms/<vmid>.",
        "operationId": "get_nodes_node_qemu_vmid",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "full",
            "in": "query",
            "required": false,
            "description": "Determine the full status of active VMs.",
            "schema": {
              "type": "boolean",
              "description": "Determine the full status of active VMs."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/replication/{id}/schedule_now": {
      "get": {
        "summary": "Status",
        "description": "List status of all replication jobs on this node.\n\n**Required permissions:** Requires the VM.Audit permission on /vms/<vmid>.",
        "operationId": "get_nodes_node_replication_id_schedule_now",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "guest",
            "in": "query",
            "required": false,
            "description": "Only list replication jobs for this guest.",
            "schema": {
              "type": "integer",
              "description": "Only list replication jobs for this guest."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "New Certificate",
        "description": "Order a new certificate from ACME-compatible CA.",
        "operationId": "post_nodes_node_replication_id_schedule_now",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "Overwrite existing custom certificate.",
            "schema": {
              "type": "boolean",
              "description": "Overwrite existing custom certificate.",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Revoke Certificate",
        "description": "Revoke existing certificate from CA.",
        "operationId": "delete_nodes_node_replication_id_schedule_now",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/version": {
      "get": {
        "summary": "Status",
        "description": "Read node status",
        "operationId": "get_nodes_node_version",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Node Cmd",
        "description": "Reboot or shutdown a node.",
        "operationId": "post_nodes_node_version",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "command",
            "in": "query",
            "required": true,
            "description": "Specify the command.",
            "schema": {
              "type": "string",
              "description": "Specify the command.",
              "enum": [
                "reboot",
                "shutdown"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/capabilities/qemu/cpu": {
      "get": {
        "summary": "Index",
        "description": "Node capabilities index.",
        "operationId": "get_nodes_node_capabilities_qemu_cpu",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/capabilities/qemu/machines": {
      "get": {
        "summary": "Index",
        "description": "Node capabilities index.",
        "operationId": "get_nodes_node_capabilities_qemu_machines",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Prune backups. Only those using the standard naming scheme are considered.\n\n**Required permissions:** You need the 'Datastore.Allocate' privilege on the storage (or if a VM ID is specified, 'Datastore.AllocateSpace' and 'VM.Backup' for the VM).",
        "operationId": "delete_nodes_node_capabilities_qemu_machines",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "storage",
            "in": "query",
            "required": true,
            "description": "The storage identifier.",
            "schema": {
              "type": "string",
              "description": "The storage identifier."
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Either 'qemu' or 'lxc'. Only consider backups for guests of this type.",
            "schema": {
              "type": "string",
              "description": "Either 'qemu' or 'lxc'. Only consider backups for guests of this type.",
              "enum": [
                "qemu",
                "lxc"
              ]
            }
          },
          {
            "name": "vmid",
            "in": "query",
            "required": false,
            "description": "Only prune backups for this VM.",
            "schema": {
              "type": "integer",
              "description": "Only prune backups for this VM."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/storage/{storage}/rrd": {
      "get": {
        "summary": "Rrddata",
        "description": "Read storage RRD statistics.",
        "operationId": "get_nodes_node_storage_storage_rrd",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "required": true,
            "description": "storage identifier",
            "schema": {
              "type": "string",
              "description": "Storage identifier"
            }
          },
          {
            "name": "cf",
            "in": "query",
            "required": false,
            "description": "The RRD consolidation function",
            "schema": {
              "type": "string",
              "description": "The RRD consolidation function",
              "enum": [
                "AVERAGE",
                "MAX"
              ]
            }
          },
          {
            "name": "timeframe",
            "in": "query",
            "required": true,
            "description": "Specify the time frame you are interested in.",
            "schema": {
              "type": "string",
              "description": "Specify the time frame you are interested in.",
              "enum": [
                "hour",
                "day",
                "week",
                "month",
                "year"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Upload",
        "description": "Upload templates, ISO images, OVAs and VM images.",
        "operationId": "post_nodes_node_storage_storage_rrd",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "required": true,
            "description": "storage identifier",
            "schema": {
              "type": "string",
              "description": "Storage identifier"
            }
          },
          {
            "name": "checksum",
            "in": "query",
            "required": false,
            "description": "The expected checksum of the file.",
            "schema": {
              "type": "string",
              "description": "The expected checksum of the file."
            }
          },
          {
            "name": "content",
            "in": "query",
            "required": true,
            "description": "Content type.",
            "schema": {
              "type": "string",
              "description": "Content type.",
              "enum": [
                "iso",
                "vztmpl",
                "import"
              ]
            }
          },
          {
            "name": "filename",
            "in": "query",
            "required": true,
            "description": "The name of the file to create. Caution: This will be normalized!",
            "schema": {
              "type": "string",
              "description": "The name of the file to create. Caution: This will be normalized!"
            }
          },
          {
            "name": "tmpfilename",
            "in": "query",
            "required": false,
            "description": "The source file name. This parameter is usually set by the REST handler. You can only overwrite it when connecting to the trusted port on localhost.",
            "schema": {
              "type": "string",
              "description": "The source file name. This parameter is usually set by the REST handler. You can only overwrite it when connecting to the trusted port on localhost."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall/ipset": {
      "get": {
        "summary": "Get Options",
        "description": "Get VM firewall options.",
        "operationId": "get_nodes_node_qemu_vmid_firewall_ipset",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/cfg/value": {
      "get": {
        "summary": "Index",
        "description": "Directory index.",
        "operationId": "get_nodes_node_ceph_cfg_value",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/firewall/aliases": {
      "get": {
        "summary": "Get Options",
        "description": "Get Firewall options.",
        "operationId": "get_cluster_firewall_aliases",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/mtunnelwebsocket": {
      "get": {
        "summary": "Vmdiridx",
        "description": "Directory index",
        "operationId": "get_nodes_node_qemu_vmid_mtunnelwebsocket",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Destroy Vm",
        "description": "Destroy the VM and  all used/owned volumes. Removes any VM specific permissions and firewall rules",
        "operationId": "delete_nodes_node_qemu_vmid_mtunnelwebsocket",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "purge",
            "in": "query",
            "required": false,
            "description": "Remove VMID from configurations, like backup & replication jobs and HA.",
            "schema": {
              "type": "boolean",
              "description": "Remove VMID from configurations, like backup & replication jobs and HA."
            }
          },
          {
            "name": "skiplock",
            "in": "query",
            "required": false,
            "description": "Ignore locks - only root is allowed to use this option.",
            "schema": {
              "type": "boolean",
              "description": "Ignore locks - only root is allowed to use this option."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/backup-info": {
      "post": {
        "summary": "Relocate",
        "description": "Request resource relocatzion to another node. This stops the service on the old node, and restarts it on the target node.",
        "operationId": "post_cluster_backup-info",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "query",
            "required": true,
            "description": "Target node.",
            "schema": {
              "type": "string",
              "description": "Target node."
            }
          },
          {
            "name": "sid",
            "in": "query",
            "required": true,
            "description": "HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100).",
            "schema": {
              "type": "string",
              "description": "HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100)."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete resource configuration.",
        "operationId": "delete_cluster_backup-info",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "sid",
            "in": "query",
            "required": true,
            "description": "HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100).",
            "schema": {
              "type": "string",
              "description": "HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100)."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/start": {
      "get": {
        "summary": "Log",
        "description": "Read ceph log",
        "operationId": "get_nodes_node_ceph_start",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Restart",
        "description": "Restart ceph services.",
        "operationId": "post_nodes_node_ceph_start",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": false,
            "description": "Ceph service name.",
            "schema": {
              "type": "string",
              "description": "Ceph service name.",
              "default": "ceph.target"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/disks": {
      "get": {
        "summary": "Changelog",
        "description": "Get package changelogs.",
        "operationId": "get_nodes_node_disks",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "Package name.",
            "schema": {
              "type": "string",
              "description": "Package name."
            }
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "description": "Package version.",
            "schema": {
              "type": "string",
              "description": "Package version."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Update Database",
        "description": "This is used to resynchronize the package index files from their sources (apt-get update).",
        "operationId": "post_nodes_node_disks",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "notify",
            "in": "query",
            "required": false,
            "description": "Send notification about new packages.",
            "schema": {
              "type": "boolean",
              "description": "Send notification about new packages.",
              "default": 0
            }
          },
          {
            "name": "quiet",
            "in": "query",
            "required": false,
            "description": "Only produces output suitable for logging, omitting progress indicators.",
            "schema": {
              "type": "boolean",
              "description": "Only produces output suitable for logging, omitting progress indicators.",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/options": {
      "get": {
        "summary": "Index",
        "description": "Cluster index.",
        "operationId": "get_cluster_options",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/vncwebsocket": {
      "post": {
        "summary": "Spiceproxy",
        "description": "Returns a SPICE configuration to connect to the CT.",
        "operationId": "post_nodes_node_lxc_vmid_vncwebsocket",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "proxy",
            "in": "query",
            "required": false,
            "description": "SPICE proxy server. This can be used by the client to specify the proxy server. All nodes in a cluster runs 'spiceproxy', so it is up to the client to choose one. By default, we return the node where the VM is currently running. As reasonable setting is to use same node you use to connect to the API (This is window.location.hostname for the JS GUI).",
            "schema": {
              "type": "string",
              "description": "SPICE proxy server. This can be used by the client to specify the proxy server. All nodes in a cluster runs 'spiceproxy', so it is up to the client to choose one. By default, we return the node where the VM is currently running. As reasonable setting is to use same node you use to connect to the API (This is window.location.hostname for the JS GUI)."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/mapping/pci/{id}": {
      "get": {
        "summary": "Index",
        "description": "List PCI Hardware Mapping\n\n**Required permissions:** Only lists entries where you have 'Mapping.Modify', 'Mapping.Use' or 'Mapping.Audit' permissions on '/mapping/pci/<id>'.",
        "operationId": "get_cluster_mapping_pci_id",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create",
        "description": "Create a new hardware mapping.",
        "operationId": "post_cluster_mapping_pci_id",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "description": "Description of the node specific device.",
            "schema": {
              "type": "string",
              "description": "Description of the node specific device."
            }
          },
          {
            "name": "iommugroup",
            "in": "query",
            "required": false,
            "description": "The IOMMU group in which the device is to be expected in. Used for detecting hardware changes.",
            "schema": {
              "type": "integer",
              "description": "The IOMMU group in which the device is to be expected in. Used for detecting hardware changes."
            }
          },
          {
            "name": "node",
            "in": "query",
            "required": true,
            "description": "The cluster node name.",
            "schema": {
              "type": "string",
              "description": "The cluster node name."
            }
          },
          {
            "name": "path",
            "in": "query",
            "required": true,
            "description": "The path to the device. If the function is omitted, the whole device is mapped. In that case use the attributes of the first device. You can give multiple paths as a semicolon seperated list, the first available will then be chosen on guest start.",
            "schema": {
              "type": "string",
              "description": "The path to the device. If the function is omitted, the whole device is mapped. In that case use the attributes of the first device. You can give multiple paths as a semicolon seperated list, the first available will then be chosen on guest start."
            }
          },
          {
            "name": "mdev",
            "in": "query",
            "required": false,
            "description": "Marks the device(s) as being capable of providing mediated devices.",
            "schema": {
              "type": "boolean",
              "description": "Marks the device(s) as being capable of providing mediated devices.",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/access/roles/{roleid}": {
      "get": {
        "summary": "Read Acl",
        "description": "Get Access Control List (ACLs).\n\n**Required permissions:** The returned list is restricted to objects where you have rights to modify permissions.",
        "operationId": "get_access_roles_roleid",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "roleid",
            "in": "path",
            "required": true,
            "description": "roleid identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create Role",
        "description": "Create new role.",
        "operationId": "post_access_roles_roleid",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "roleid",
            "in": "path",
            "required": true,
            "description": "roleid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "privs",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Update Acl",
        "description": "Update Access Control List (add or remove permissions).",
        "operationId": "put_access_roles_roleid",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "roleid",
            "in": "path",
            "required": true,
            "description": "roleid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "required": false,
            "description": "Remove permissions (instead of adding it).",
            "schema": {
              "type": "boolean",
              "description": "Remove permissions (instead of adding it)."
            }
          },
          {
            "name": "groups",
            "in": "query",
            "required": false,
            "description": "List of groups.",
            "schema": {
              "type": "string",
              "description": "List of groups."
            }
          },
          {
            "name": "path",
            "in": "query",
            "required": true,
            "description": "Access control path",
            "schema": {
              "type": "string",
              "description": "Access control path"
            }
          },
          {
            "name": "propagate",
            "in": "query",
            "required": false,
            "description": "Allow to propagate (inherit) permissions.",
            "schema": {
              "type": "boolean",
              "description": "Allow to propagate (inherit) permissions.",
              "default": 1
            }
          },
          {
            "name": "roles",
            "in": "query",
            "required": true,
            "description": "List of roles.",
            "schema": {
              "type": "string",
              "description": "List of roles."
            }
          },
          {
            "name": "tokens",
            "in": "query",
            "required": false,
            "description": "List of API tokens.",
            "schema": {
              "type": "string",
              "description": "List of API tokens."
            }
          },
          {
            "name": "users",
            "in": "query",
            "required": false,
            "description": "List of users.",
            "schema": {
              "type": "string",
              "description": "List of users."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/scan": {
      "get": {
        "summary": "Pci Index",
        "description": "Index of available pci methods",
        "operationId": "get_nodes_node_scan",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/access/domains": {
      "get": {
        "summary": "Index",
        "description": "Directory index.",
        "operationId": "get_access_domains",
        "tags": [
          "Access Control"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Login",
        "description": " Verify OpenID authorization code and create a ticket.",
        "operationId": "post_access_domains",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": true,
            "description": "OpenId authorization code.",
            "schema": {
              "type": "string",
              "description": "OpenId authorization code."
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": true,
            "description": "OpenId state.",
            "schema": {
              "type": "string",
              "description": "OpenId state."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Tfa",
        "description": "Delete a TFA entry by ID.",
        "operationId": "delete_access_domains",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "A TFA entry id.",
            "schema": {
              "type": "string",
              "description": "A TFA entry id."
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": false,
            "description": "The current password of the user performing the change.",
            "schema": {
              "type": "string",
              "description": "The current password of the user performing the change."
            }
          },
          {
            "name": "userid",
            "in": "query",
            "required": true,
            "description": "Full User ID, in the `name@realm` format.",
            "schema": {
              "type": "string",
              "description": "Full User ID, in the `name@realm` format."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/ha/groups": {
      "get": {
        "summary": "Index",
        "description": "Directory index.",
        "operationId": "get_cluster_ha_groups",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall/options": {
      "get": {
        "summary": "Log",
        "description": "Read firewall log",
        "operationId": "get_nodes_node_qemu_vmid_firewall_options",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "description": "Display log since this UNIX epoch.",
            "schema": {
              "type": "integer",
              "description": "Display log since this UNIX epoch."
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "until",
            "in": "query",
            "required": false,
            "description": "Display log until this UNIX epoch.",
            "schema": {
              "type": "integer",
              "description": "Display log until this UNIX epoch."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/scan/cifs": {
      "get": {
        "summary": "Iscsiscan",
        "description": "Scan remote iSCSI server.",
        "operationId": "get_nodes_node_scan_cifs",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "portal",
            "in": "query",
            "required": true,
            "description": "The iSCSI portal (IP or DNS name with optional port).",
            "schema": {
              "type": "string",
              "description": "The iSCSI portal (IP or DNS name with optional port)."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/config/nodes": {
      "get": {
        "summary": "Join Info",
        "description": "Get information needed to join this cluster over the connected node.",
        "operationId": "get_cluster_config_nodes",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "query",
            "required": false,
            "description": "The node for which the joinee gets the nodeinfo. ",
            "schema": {
              "type": "string",
              "description": "The node for which the joinee gets the nodeinfo. ",
              "default": "current connected node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Join",
        "description": "Joins this node into an existing cluster. If no links are given, default to IP resolved by node's hostname on single link (fallback fails for clusters with multiple links).",
        "operationId": "post_cluster_config_nodes",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "fingerprint",
            "in": "query",
            "required": true,
            "description": "Certificate SHA 256 fingerprint.",
            "schema": {
              "type": "string",
              "description": "Certificate SHA 256 fingerprint."
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "Do not throw error if node already exists.",
            "schema": {
              "type": "boolean",
              "description": "Do not throw error if node already exists."
            }
          },
          {
            "name": "hostname",
            "in": "query",
            "required": true,
            "description": "Hostname (or IP) of an existing cluster member.",
            "schema": {
              "type": "string",
              "description": "Hostname (or IP) of an existing cluster member."
            }
          },
          {
            "name": "address",
            "in": "query",
            "required": true,
            "description": "Hostname (or IP) of this corosync link address.",
            "schema": {
              "type": "string",
              "description": "Hostname (or IP) of this corosync link address."
            }
          },
          {
            "name": "priority",
            "in": "query",
            "required": false,
            "description": "The priority for the link when knet is used in 'passive' mode (default). Lower value means higher priority. Only valid for cluster create, ignored on node add.",
            "schema": {
              "type": "integer",
              "description": "The priority for the link when knet is used in 'passive' mode (default). Lower value means higher priority. Only valid for cluster create, ignored on node add.",
              "default": 0
            }
          },
          {
            "name": "nodeid",
            "in": "query",
            "required": false,
            "description": "Node id for this node.",
            "schema": {
              "type": "integer",
              "description": "Node id for this node."
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": true,
            "description": "Superuser (root) password of peer node.",
            "schema": {
              "type": "string",
              "description": "Superuser (root) password of peer node."
            }
          },
          {
            "name": "votes",
            "in": "query",
            "required": false,
            "description": "Number of votes for this node",
            "schema": {
              "type": "integer",
              "description": "Number of votes for this node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/sdn/vnets/{vnet}/firewall/options": {
      "get": {
        "summary": "Read",
        "description": "Read sdn subnet configuration.\n\n**Required permissions:** Require 'SDN.Audit' or 'SDN.Allocate' permissions on '/sdn/zones/<zone>/<vnet>'",
        "operationId": "get_cluster_sdn_vnets_vnet_firewall_options",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "vnet",
            "in": "path",
            "required": true,
            "description": "vnet identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pending",
            "in": "query",
            "required": false,
            "description": "Display pending config.",
            "schema": {
              "type": "boolean",
              "description": "Display pending config."
            }
          },
          {
            "name": "running",
            "in": "query",
            "required": false,
            "description": "Display running config.",
            "schema": {
              "type": "boolean",
              "description": "Display running config."
            }
          },
          {
            "name": "subnet",
            "in": "query",
            "required": true,
            "description": "The SDN subnet object identifier.",
            "schema": {
              "type": "string",
              "description": "The SDN subnet object identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete sdn subnet object configuration.\n\n**Required permissions:** Require 'SDN.Allocate' permission on '/sdn/zones/<zone>/<vnet>'",
        "operationId": "delete_cluster_sdn_vnets_vnet_firewall_options",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "vnet",
            "in": "path",
            "required": true,
            "description": "vnet identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subnet",
            "in": "query",
            "required": true,
            "description": "The SDN subnet object identifier.",
            "schema": {
              "type": "string",
              "description": "The SDN subnet object identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/replication/{id}": {
      "get": {
        "summary": "Read",
        "description": "Read metric server configuration.",
        "operationId": "get_cluster_replication_id",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create",
        "description": "Create a new replication job",
        "operationId": "post_cluster_replication_id",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "Description.",
            "schema": {
              "type": "string",
              "description": "Description."
            }
          },
          {
            "name": "disable",
            "in": "query",
            "required": false,
            "description": "Flag to disable/deactivate the entry.",
            "schema": {
              "type": "boolean",
              "description": "Flag to disable/deactivate the entry."
            }
          },
          {
            "name": "rate",
            "in": "query",
            "required": false,
            "description": "Rate limit in mbps (megabytes per second) as floating point number.",
            "schema": {
              "type": "number",
              "description": "Rate limit in mbps (megabytes per second) as floating point number."
            }
          },
          {
            "name": "remove_job",
            "in": "query",
            "required": false,
            "description": "Mark the replication job for removal. The job will remove all local replication snapshots. When set to 'full', it also tries to remove replicated volumes on the target. The job then removes itself from the configuration file.",
            "schema": {
              "type": "string",
              "description": "Mark the replication job for removal. The job will remove all local replication snapshots. When set to 'full', it also tries to remove replicated volumes on the target. The job then removes itself from the configuration file.",
              "enum": [
                "local",
                "full"
              ]
            }
          },
          {
            "name": "schedule",
            "in": "query",
            "required": false,
            "description": "Storage replication schedule. The format is a subset of `systemd` calendar events.",
            "schema": {
              "type": "string",
              "description": "Storage replication schedule. The format is a subset of `systemd` calendar events.",
              "default": "*/15"
            }
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "description": "For internal use, to detect if the guest was stolen.",
            "schema": {
              "type": "string",
              "description": "For internal use, to detect if the guest was stolen."
            }
          },
          {
            "name": "target",
            "in": "query",
            "required": true,
            "description": "Target node.",
            "schema": {
              "type": "string",
              "description": "Target node."
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "description": "Section type.",
            "schema": {
              "type": "string",
              "description": "Section type.",
              "enum": [
                "local"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Remove Metric server.",
        "operationId": "delete_cluster_replication_id",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/dns": {
      "get": {
        "summary": "Aplinfo",
        "description": "Get list of appliances.",
        "operationId": "get_nodes_node_dns",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Apl Download",
        "description": "Download appliance templates.",
        "operationId": "post_nodes_node_dns",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "storage",
            "in": "query",
            "required": true,
            "description": "The storage where the template will be stored",
            "schema": {
              "type": "string",
              "description": "The storage where the template will be stored"
            }
          },
          {
            "name": "template",
            "in": "query",
            "required": true,
            "description": "The template which will downloaded",
            "schema": {
              "type": "string",
              "description": "The template which will downloaded"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Set Timezone",
        "description": "Set time zone.",
        "operationId": "put_nodes_node_dns",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "timezone",
            "in": "query",
            "required": true,
            "description": "Time zone. The file '/usr/share/zoneinfo/zone.tab' contains the list of valid names.",
            "schema": {
              "type": "string",
              "description": "Time zone. The file '/usr/share/zoneinfo/zone.tab' contains the list of valid names."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/status/reset": {
      "post": {
        "summary": "Vm Reboot",
        "description": "Reboot the VM by shutting it down, and starting it again. Applies pending changes.",
        "operationId": "post_nodes_node_qemu_vmid_status_reset",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "required": false,
            "description": "Wait maximal timeout seconds for the shutdown.",
            "schema": {
              "type": "integer",
              "description": "Wait maximal timeout seconds for the shutdown."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/hardware/pci/{pci-id-or-mapping}/mdev": {
      "get": {
        "summary": "Pci Scan",
        "description": "List local PCI devices.",
        "operationId": "get_nodes_node_hardware_pci_pci-id-or-mapping_mdev",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "pci-id-or-mapping",
            "in": "path",
            "required": true,
            "description": "pci-id-or-mapping identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "verbose",
            "in": "query",
            "required": false,
            "description": "If disabled, does only print the PCI IDs. Otherwise, additional information like vendor and device will be returned.",
            "schema": {
              "type": "boolean",
              "description": "If disabled, does only print the PCI IDs. Otherwise, additional information like vendor and device will be returned.",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/mapping/usb/{id}": {
      "get": {
        "summary": "Index",
        "description": "List resource types.",
        "operationId": "get_cluster_mapping_usb_id",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create",
        "description": "Create a new hardware mapping.",
        "operationId": "post_cluster_mapping_usb_id",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "description": "Description of the node specific device.",
            "schema": {
              "type": "string",
              "description": "Description of the node specific device."
            }
          },
          {
            "name": "node",
            "in": "query",
            "required": true,
            "description": "The cluster node name.",
            "schema": {
              "type": "string",
              "description": "The cluster node name."
            }
          },
          {
            "name": "path",
            "in": "query",
            "required": false,
            "description": "The path to the usb device.",
            "schema": {
              "type": "string",
              "description": "The path to the usb device."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/firewall/groups/{group}/{pos}": {
      "get": {
        "summary": "Get Rules",
        "description": "List rules.",
        "operationId": "get_cluster_firewall_groups_group_pos",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "description": "group identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pos",
            "in": "path",
            "required": true,
            "description": "pos identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Security Group",
        "description": "Delete security group.",
        "operationId": "delete_cluster_firewall_groups_group_pos",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "description": "group identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pos",
            "in": "path",
            "required": true,
            "description": "pos identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/remote_migrate": {
      "post": {
        "summary": "Monitor",
        "description": "Execute QEMU monitor commands.\n\n**Required permissions:** Sys.Modify is required for (sub)commands which are not read-only ('info *' and 'help')",
        "operationId": "post_nodes_node_qemu_vmid_remote_migrate",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "command",
            "in": "query",
            "required": true,
            "description": "The monitor command.",
            "schema": {
              "type": "string",
              "description": "The monitor command."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/jobs/realm-sync/{id}": {
      "get": {
        "summary": "Index",
        "description": "Index for jobs related endpoints.",
        "operationId": "get_cluster_jobs_realm-sync_id",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/firewall/aliases/{name}": {
      "get": {
        "summary": "Get Options",
        "description": "Get Firewall options.",
        "operationId": "get_cluster_firewall_aliases_name",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create Alias",
        "description": "Create IP or Network Alias.",
        "operationId": "post_cluster_firewall_aliases_name",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cidr",
            "in": "query",
            "required": true,
            "description": "Network/IP specification in CIDR format.",
            "schema": {
              "type": "string",
              "description": "Network/IP specification in CIDR format."
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/config": {
      "get": {
        "summary": "Diridx",
        "description": "",
        "operationId": "get_nodes_node_config",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "zone",
            "in": "query",
            "required": true,
            "description": "The SDN zone object identifier.",
            "schema": {
              "type": "string",
              "description": "The SDN zone object identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/config/qdevice": {
      "get": {
        "summary": "Index",
        "description": "Directory index.",
        "operationId": "get_cluster_config_qdevice",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create",
        "description": "Generate new cluster configuration. If no links given, default to local IP address as link0.",
        "operationId": "post_cluster_config_qdevice",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "clustername",
            "in": "query",
            "required": true,
            "description": "The name of the cluster.",
            "schema": {
              "type": "string",
              "description": "The name of the cluster."
            }
          },
          {
            "name": "address",
            "in": "query",
            "required": true,
            "description": "Hostname (or IP) of this corosync link address.",
            "schema": {
              "type": "string",
              "description": "Hostname (or IP) of this corosync link address."
            }
          },
          {
            "name": "priority",
            "in": "query",
            "required": false,
            "description": "The priority for the link when knet is used in 'passive' mode (default). Lower value means higher priority. Only valid for cluster create, ignored on node add.",
            "schema": {
              "type": "integer",
              "description": "The priority for the link when knet is used in 'passive' mode (default). Lower value means higher priority. Only valid for cluster create, ignored on node add.",
              "default": 0
            }
          },
          {
            "name": "nodeid",
            "in": "query",
            "required": false,
            "description": "Node id for this node.",
            "schema": {
              "type": "integer",
              "description": "Node id for this node."
            }
          },
          {
            "name": "votes",
            "in": "query",
            "required": false,
            "description": "Number of votes for this node.",
            "schema": {
              "type": "integer",
              "description": "Number of votes for this node."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Rule",
        "description": "Delete rule.",
        "operationId": "delete_cluster_config_qdevice",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "group",
            "in": "query",
            "required": true,
            "description": "Security Group name.",
            "schema": {
              "type": "string",
              "description": "Security Group name."
            }
          },
          {
            "name": "pos",
            "in": "query",
            "required": false,
            "description": "Update rule at position <pos>.",
            "schema": {
              "type": "integer",
              "description": "Update rule at position <pos>."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/firewall/options": {
      "get": {
        "summary": "Job Status",
        "description": "Get replication job status.\n\n**Required permissions:** Requires the VM.Audit permission on /vms/<vmid>.",
        "operationId": "get_nodes_node_firewall_options",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.",
            "schema": {
              "type": "string",
              "description": "Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/replication": {
      "get": {
        "summary": "Index",
        "description": "ACME index.",
        "operationId": "get_nodes_node_replication",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "New Certificate",
        "description": "Order a new certificate from ACME-compatible CA.",
        "operationId": "post_nodes_node_replication",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "Overwrite existing custom certificate.",
            "schema": {
              "type": "boolean",
              "description": "Overwrite existing custom certificate.",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Renew Certificate",
        "description": "Renew existing certificate from CA.",
        "operationId": "put_nodes_node_replication",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "Force renewal even if expiry is more than 30 days away.",
            "schema": {
              "type": "boolean",
              "description": "Force renewal even if expiry is more than 30 days away.",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Revoke Certificate",
        "description": "Revoke existing certificate from CA.",
        "operationId": "delete_nodes_node_replication",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/cloudinit/dump": {
      "get": {
        "summary": "Cloudinit Pending",
        "description": "Get the cloudinit configuration with both current and pending values.",
        "operationId": "get_nodes_node_qemu_vmid_cloudinit_dump",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Unlink",
        "description": "Unlink/delete disk images.",
        "operationId": "put_nodes_node_qemu_vmid_cloudinit_dump",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "Force physical removal. Without this, we simple remove the disk from the config file and create an additional configuration entry called 'unused[n]', which contains the volume ID. Unlink of unused[n] always cause physical removal.",
            "schema": {
              "type": "boolean",
              "description": "Force physical removal. Without this, we simple remove the disk from the config file and create an additional configuration entry called 'unused[n]', which contains the volume ID. Unlink of unused[n] always cause physical removal."
            }
          },
          {
            "name": "idlist",
            "in": "query",
            "required": true,
            "description": "A list of disk IDs you want to delete.",
            "schema": {
              "type": "string",
              "description": "A list of disk IDs you want to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/disks/zfs": {
      "get": {
        "summary": "Smart",
        "description": "Get SMART Health of a disk.",
        "operationId": "get_nodes_node_disks_zfs",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "disk",
            "in": "query",
            "required": true,
            "description": "Block device name",
            "schema": {
              "type": "string",
              "description": "Block device name"
            }
          },
          {
            "name": "healthonly",
            "in": "query",
            "required": false,
            "description": "If true returns only the health status",
            "schema": {
              "type": "boolean",
              "description": "If true returns only the health status"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/certificates/info": {
      "post": {
        "summary": "Upload Custom Cert",
        "description": "Upload or update custom certificate chain and key.",
        "operationId": "post_nodes_node_certificates_info",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "certificates",
            "in": "query",
            "required": true,
            "description": "PEM encoded certificate (chain).",
            "schema": {
              "type": "string",
              "description": "PEM encoded certificate (chain)."
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "Overwrite existing custom or ACME certificate files.",
            "schema": {
              "type": "boolean",
              "description": "Overwrite existing custom or ACME certificate files.",
              "default": 0
            }
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "description": "PEM encoded private key.",
            "schema": {
              "type": "string",
              "description": "PEM encoded private key."
            }
          },
          {
            "name": "restart",
            "in": "query",
            "required": false,
            "description": "Restart pveproxy.",
            "schema": {
              "type": "boolean",
              "description": "Restart pveproxy.",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Remove Custom Cert",
        "description": "DELETE custom certificate chain and key.",
        "operationId": "delete_nodes_node_certificates_info",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "restart",
            "in": "query",
            "required": false,
            "description": "Restart pveproxy.",
            "schema": {
              "type": "boolean",
              "description": "Restart pveproxy.",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/notifications/endpoints/sendmail": {
      "get": {
        "summary": "Get Gotify Endpoint",
        "description": "Return a specific gotify endpoint",
        "operationId": "get_cluster_notifications_endpoints_sendmail",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "Name of the endpoint.",
            "schema": {
              "type": "string",
              "description": "Name of the endpoint."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Gotify Endpoint",
        "description": "Remove gotify endpoint",
        "operationId": "delete_cluster_notifications_endpoints_sendmail",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/storage/{storage}/download-url": {
      "get": {
        "summary": "Get Import Metadata",
        "description": "Get the base parameters for creating a guest which imports data from a foreign importable guest, like an ESXi VM\n\n**Required permissions:** You need read access for the volume.",
        "operationId": "get_nodes_node_storage_storage_download-url",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "required": true,
            "description": "storage identifier",
            "schema": {
              "type": "string",
              "description": "Storage identifier"
            }
          },
          {
            "name": "volume",
            "in": "query",
            "required": true,
            "description": "Volume identifier for the guest archive/entry.",
            "schema": {
              "type": "string",
              "description": "Volume identifier for the guest archive/entry."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/vzdump": {
      "get": {
        "summary": "Service State",
        "description": "Read service properties",
        "operationId": "get_nodes_node_vzdump",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": true,
            "description": "Service ID",
            "schema": {
              "type": "string",
              "description": "Service ID",
              "enum": [
                "chrony",
                "corosync",
                "cron",
                "ksmtuned",
                "postfix",
                "pve-cluster",
                "pve-firewall",
                "pve-ha-crm",
                "pve-ha-lrm",
                "pvedaemon",
                "pvefw-logger",
                "pveproxy",
                "pvescheduler",
                "pvestatd",
                "spiceproxy",
                "sshd",
                "syslog",
                "systemd-journald",
                "systemd-timesyncd"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Service Start",
        "description": "Start service.",
        "operationId": "post_nodes_node_vzdump",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": true,
            "description": "Service ID",
            "schema": {
              "type": "string",
              "description": "Service ID",
              "enum": [
                "chrony",
                "corosync",
                "cron",
                "ksmtuned",
                "postfix",
                "pve-cluster",
                "pve-firewall",
                "pve-ha-crm",
                "pve-ha-lrm",
                "pvedaemon",
                "pvefw-logger",
                "pveproxy",
                "pvescheduler",
                "pvestatd",
                "spiceproxy",
                "sshd",
                "syslog",
                "systemd-journald",
                "systemd-timesyncd"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/firewall/ipset/{name}": {
      "get": {
        "summary": "Read Alias",
        "description": "Read alias.",
        "operationId": "get_cluster_firewall_ipset_name",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create Ipset",
        "description": "Create new IPSet",
        "operationId": "post_cluster_firewall_ipset_name",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "rename",
            "in": "query",
            "required": false,
            "description": "Rename an existing IPSet. You can set 'rename' to the same value as 'name' to update the 'comment' of an existing IPSet.",
            "schema": {
              "type": "string",
              "description": "Rename an existing IPSet. You can set 'rename' to the same value as 'name' to update the 'comment' of an existing IPSet."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Remove Alias",
        "description": "Remove IP or Network alias.",
        "operationId": "delete_cluster_firewall_ipset_name",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/services/{service}": {
      "get": {
        "summary": "Get",
        "description": "Read subscription info.",
        "operationId": "get_nodes_node_services_service",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "description": "service identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Update",
        "description": "Update subscription info.",
        "operationId": "post_nodes_node_services_service",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "description": "service identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "Always connect to server, even if local cache is still valid.",
            "schema": {
              "type": "boolean",
              "description": "Always connect to server, even if local cache is still valid.",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete subscription key of this node.",
        "operationId": "delete_nodes_node_services_service",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "service",
            "in": "path",
            "required": true,
            "description": "service identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/pool": {
      "post": {
        "summary": "Start",
        "description": "Start ceph services.",
        "operationId": "post_nodes_node_ceph_pool",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": false,
            "description": "Ceph service name.",
            "schema": {
              "type": "string",
              "description": "Ceph service name.",
              "default": "ceph.target"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/shutdown": {
      "post": {
        "summary": "Suspend-Ram",
        "description": "Execute suspend-ram.",
        "operationId": "post_nodes_node_qemu_vmid_agent_shutdown",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/access/groups": {
      "delete": {
        "summary": "Delete Role",
        "description": "Delete role.",
        "operationId": "delete_access_groups",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "roleid",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/suspendall": {
      "get": {
        "summary": "Index",
        "description": "Node index.",
        "operationId": "get_nodes_node_suspendall",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Write Etc Hosts",
        "description": "Write /etc/hosts.",
        "operationId": "post_nodes_node_suspendall",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "data",
            "in": "query",
            "required": true,
            "description": "The target content of /etc/hosts.",
            "schema": {
              "type": "string",
              "description": "The target content of /etc/hosts."
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/notifications/endpoints/webhook/{name}": {
      "get": {
        "summary": "Get Webhook Endpoints",
        "description": "Returns a list of all webhook endpoints",
        "operationId": "get_cluster_notifications_endpoints_webhook_name",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/scan/pbs": {
      "get": {
        "summary": "Lvmthinscan",
        "description": "List local LVM Thin Pools.",
        "operationId": "get_nodes_node_scan_pbs",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vg",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/ping": {
      "post": {
        "summary": "Suspend-Hybrid",
        "description": "Execute suspend-hybrid.",
        "operationId": "post_nodes_node_qemu_vmid_agent_ping",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/mon": {
      "get": {
        "summary": "Index",
        "description": "Directory index.",
        "operationId": "get_nodes_node_ceph_mon",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Createfs",
        "description": "Create a Ceph filesystem",
        "operationId": "post_nodes_node_ceph_mon",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "The ceph filesystem name.",
            "schema": {
              "type": "string",
              "description": "The ceph filesystem name.",
              "default": "cephfs"
            }
          },
          {
            "name": "pg_num",
            "in": "query",
            "required": false,
            "description": "Number of placement groups for the backing data pool. The metadata pool will use a quarter of this.",
            "schema": {
              "type": "integer",
              "description": "Number of placement groups for the backing data pool. The metadata pool will use a quarter of this.",
              "default": 128
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/fsfreeze-freeze": {
      "post": {
        "summary": "Fstrim",
        "description": "Execute fstrim.",
        "operationId": "post_nodes_node_qemu_vmid_agent_fsfreeze-freeze",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/notifications/matcher-field-values": {
      "get": {
        "summary": "Get Sendmail Endpoint",
        "description": "Return a specific sendmail endpoint",
        "operationId": "get_cluster_notifications_matcher-field-values",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Sendmail Endpoint",
        "description": "Remove sendmail endpoint",
        "operationId": "delete_cluster_notifications_matcher-field-values",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/access/users": {
      "get": {
        "summary": "Index",
        "description": "Group index.\n\n**Required permissions:** The returned list is restricted to groups where you have 'User.Modify', 'Sys.Audit'  or 'Group.Allocate' permissions on /access/groups/<group>.",
        "operationId": "get_access_users",
        "tags": [
          "Access Control"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create Group",
        "description": "Create new group.",
        "operationId": "post_access_users",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupid",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Update Group",
        "description": "Update group data.",
        "operationId": "put_access_users",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupid",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Role",
        "description": "Delete role.",
        "operationId": "delete_access_users",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "roleid",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/access/openid/login": {
      "get": {
        "summary": "Get Tfa Entry",
        "description": "Fetch a requested TFA entry if present.",
        "operationId": "get_access_openid_login",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "A TFA entry id.",
            "schema": {
              "type": "string",
              "description": "A TFA entry id."
            }
          },
          {
            "name": "userid",
            "in": "query",
            "required": true,
            "description": "Full User ID, in the `name@realm` format.",
            "schema": {
              "type": "string",
              "description": "Full User ID, in the `name@realm` format."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Tfa",
        "description": "Delete a TFA entry by ID.",
        "operationId": "delete_access_openid_login",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "A TFA entry id.",
            "schema": {
              "type": "string",
              "description": "A TFA entry id."
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": false,
            "description": "The current password of the user performing the change.",
            "schema": {
              "type": "string",
              "description": "The current password of the user performing the change."
            }
          },
          {
            "name": "userid",
            "in": "query",
            "required": true,
            "description": "Full User ID, in the `name@realm` format.",
            "schema": {
              "type": "string",
              "description": "Full User ID, in the `name@realm` format."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall/rules": {
      "get": {
        "summary": "Read Alias",
        "description": "Read alias.",
        "operationId": "get_nodes_node_lxc_vmid_firewall_rules",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "Alias name.",
            "schema": {
              "type": "string",
              "description": "Alias name."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Remove Alias",
        "description": "Remove IP or Network alias.",
        "operationId": "delete_nodes_node_lxc_vmid_firewall_rules",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "Alias name.",
            "schema": {
              "type": "string",
              "description": "Alias name."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/disks/smart": {
      "get": {
        "summary": "List Updates",
        "description": "List available updates.",
        "operationId": "get_nodes_node_disks_smart",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Update Database",
        "description": "This is used to resynchronize the package index files from their sources (apt-get update).",
        "operationId": "post_nodes_node_disks_smart",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "notify",
            "in": "query",
            "required": false,
            "description": "Send notification about new packages.",
            "schema": {
              "type": "boolean",
              "description": "Send notification about new packages.",
              "default": 0
            }
          },
          {
            "name": "quiet",
            "in": "query",
            "required": false,
            "description": "Only produces output suitable for logging, omitting progress indicators.",
            "schema": {
              "type": "boolean",
              "description": "Only produces output suitable for logging, omitting progress indicators.",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Wipe Disk",
        "description": "Wipe a disk or partition.",
        "operationId": "put_nodes_node_disks_smart",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "disk",
            "in": "query",
            "required": true,
            "description": "Block device name",
            "schema": {
              "type": "string",
              "description": "Block device name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall/options": {
      "get": {
        "summary": "Log",
        "description": "Read firewall log",
        "operationId": "get_nodes_node_lxc_vmid_firewall_options",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "description": "Display log since this UNIX epoch.",
            "schema": {
              "type": "integer",
              "description": "Display log since this UNIX epoch."
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "until",
            "in": "query",
            "required": false,
            "description": "Display log until this UNIX epoch.",
            "schema": {
              "type": "integer",
              "description": "Display log until this UNIX epoch."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/set-user-password": {
      "post": {
        "summary": "Exec",
        "description": "Executes the given command in the vm via the guest-agent and returns an object with the pid.",
        "operationId": "post_nodes_node_qemu_vmid_agent_set-user-password",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "items",
            "in": "query",
            "required": true,
            "description": "A single part of the program + arguments.",
            "schema": {
              "type": "string",
              "description": "A single part of the program + arguments."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/crush": {
      "get": {
        "summary": "Cmd Safety",
        "description": "Heuristical check if it is safe to perform an action.",
        "operationId": "get_nodes_node_ceph_crush",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "action",
            "in": "query",
            "required": true,
            "description": "Action to check",
            "schema": {
              "type": "string",
              "description": "Action to check",
              "enum": [
                "stop",
                "destroy"
              ]
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "ID of the service",
            "schema": {
              "type": "string",
              "description": "ID of the service"
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": true,
            "description": "Service type",
            "schema": {
              "type": "string",
              "description": "Service type",
              "enum": [
                "osd",
                "mon",
                "mds"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/mapping": {
      "get": {
        "summary": "Index",
        "description": "List resource types.",
        "operationId": "get_cluster_mapping",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Rule",
        "description": "Delete rule.\n\n**Required permissions:** Needs SDN.Allocate permissions on '/sdn/zones/<zone>/<vnet>'",
        "operationId": "delete_cluster_mapping",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "pos",
            "in": "query",
            "required": false,
            "description": "Update rule at position <pos>.",
            "schema": {
              "type": "integer",
              "description": "Update rule at position <pos>."
            }
          },
          {
            "name": "vnet",
            "in": "query",
            "required": true,
            "description": "The SDN vnet object identifier.",
            "schema": {
              "type": "string",
              "description": "The SDN vnet object identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/notifications/endpoints/sendmail/{name}": {
      "get": {
        "summary": "Get Sendmail Endpoints",
        "description": "Returns a list of all sendmail endpoints",
        "operationId": "get_cluster_notifications_endpoints_sendmail_name",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/pending": {
      "get": {
        "summary": "Cloudinit Pending",
        "description": "Get the cloudinit configuration with both current and pending values.",
        "operationId": "get_nodes_node_qemu_vmid_pending",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Cloudinit Update",
        "description": "Regenerate and change cloudinit config drive.",
        "operationId": "put_nodes_node_qemu_vmid_pending",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/access/tfa/{userid}/{id}": {
      "get": {
        "summary": "List User Tfa",
        "description": "List TFA configurations of users.",
        "operationId": "get_access_tfa_userid_id",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "description": "userid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Add Tfa Entry",
        "description": "Add a TFA entry for a user.",
        "operationId": "post_access_tfa_userid_id",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "description": "userid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "challenge",
            "in": "query",
            "required": false,
            "description": "When responding to a u2f challenge: the original challenge string",
            "schema": {
              "type": "string",
              "description": "When responding to a u2f challenge: the original challenge string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "description": "A description to distinguish multiple entries from one another",
            "schema": {
              "type": "string",
              "description": "A description to distinguish multiple entries from one another"
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": false,
            "description": "The current password of the user performing the change.",
            "schema": {
              "type": "string",
              "description": "The current password of the user performing the change."
            }
          },
          {
            "name": "totp",
            "in": "query",
            "required": false,
            "description": "A totp URI.",
            "schema": {
              "type": "string",
              "description": "A totp URI."
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "description": "TFA Entry Type.",
            "schema": {
              "type": "string",
              "description": "TFA Entry Type.",
              "enum": [
                "totp",
                "u2f",
                "webauthn",
                "recovery",
                "yubico"
              ]
            }
          },
          {
            "name": "value",
            "in": "query",
            "required": false,
            "description": "The current value for the provided totp URI, or a Webauthn/U2F challenge response",
            "schema": {
              "type": "string",
              "description": "The current value for the provided totp URI, or a Webauthn/U2F challenge response"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/get-time": {
      "get": {
        "summary": "Get-Vcpus",
        "description": "Execute get-vcpus.",
        "operationId": "get_nodes_node_qemu_vmid_agent_get-time",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/execute": {
      "get": {
        "summary": "Rrddata",
        "description": "Read node RRD statistics",
        "operationId": "get_nodes_node_execute",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "cf",
            "in": "query",
            "required": false,
            "description": "The RRD consolidation function",
            "schema": {
              "type": "string",
              "description": "The RRD consolidation function",
              "enum": [
                "AVERAGE",
                "MAX"
              ]
            }
          },
          {
            "name": "timeframe",
            "in": "query",
            "required": true,
            "description": "Specify the time frame you are interested in.",
            "schema": {
              "type": "string",
              "description": "Specify the time frame you are interested in.",
              "enum": [
                "hour",
                "day",
                "week",
                "month",
                "year"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Wakeonlan",
        "description": "Try to wake a node via 'wake on LAN' network packet.",
        "operationId": "post_nodes_node_execute",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/access/permissions": {
      "get": {
        "summary": "Read Pool",
        "description": "Get pool configuration (deprecated, no support for nested pools, use 'GET /pools/?poolid={poolid}').",
        "operationId": "get_access_permissions",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "poolid",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string",
              "enum": [
                "qemu",
                "lxc",
                "storage"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Update Pool Deprecated",
        "description": "Update pool data (deprecated, no support for nested pools - use 'PUT /pools/?poolid={poolid}' instead).\n\n**Required permissions:** You also need the right to modify permissions on any object you add/delete.",
        "operationId": "put_access_permissions",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "required": false,
            "description": "Remove the passed VMIDs and/or storage IDs instead of adding them.",
            "schema": {
              "type": "boolean",
              "description": "Remove the passed VMIDs and/or storage IDs instead of adding them.",
              "default": 0
            }
          },
          {
            "name": "poolid",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storage",
            "in": "query",
            "required": false,
            "description": "List of storage IDs to add or remove from this pool.",
            "schema": {
              "type": "string",
              "description": "List of storage IDs to add or remove from this pool."
            }
          },
          {
            "name": "vms",
            "in": "query",
            "required": false,
            "description": "List of guest VMIDs to add or remove from this pool.",
            "schema": {
              "type": "string",
              "description": "List of guest VMIDs to add or remove from this pool."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Pool",
        "description": "Delete pool.\n\n**Required permissions:** You can only delete empty pools (no members).",
        "operationId": "delete_access_permissions",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "poolid",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/sdn/controllers": {
      "get": {
        "summary": "Read",
        "description": "Read sdn ipam configuration.",
        "operationId": "get_cluster_sdn_controllers",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "ipam",
            "in": "query",
            "required": true,
            "description": "The SDN ipam object identifier.",
            "schema": {
              "type": "string",
              "description": "The SDN ipam object identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Update",
        "description": "Update sdn ipam object configuration.",
        "operationId": "put_cluster_sdn_controllers",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "delete",
            "in": "query",
            "required": false,
            "description": "A list of settings you want to delete.",
            "schema": {
              "type": "string",
              "description": "A list of settings you want to delete."
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "fingerprint",
            "in": "query",
            "required": false,
            "description": "Certificate SHA 256 fingerprint.",
            "schema": {
              "type": "string",
              "description": "Certificate SHA 256 fingerprint."
            }
          },
          {
            "name": "ipam",
            "in": "query",
            "required": true,
            "description": "The SDN ipam object identifier.",
            "schema": {
              "type": "string",
              "description": "The SDN ipam object identifier."
            }
          },
          {
            "name": "section",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete sdn ipam object configuration.",
        "operationId": "delete_cluster_sdn_controllers",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "ipam",
            "in": "query",
            "required": true,
            "description": "The SDN ipam object identifier.",
            "schema": {
              "type": "string",
              "description": "The SDN ipam object identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/get-fsinfo": {
      "get": {
        "summary": "Get-Memory-Blocks",
        "description": "Execute get-memory-blocks.",
        "operationId": "get_nodes_node_qemu_vmid_agent_get-fsinfo",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/query-url-metadata": {
      "get": {
        "summary": "Report",
        "description": "Gather various systems information about a node",
        "operationId": "get_nodes_node_query-url-metadata",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Suspendall",
        "description": "Suspend all VMs.\n\n**Required permissions:** The 'VM.PowerMgmt' permission is required on '/' or on '/vms/<ID>' for each ID passed via the 'vms' parameter. Additionally, you need 'VM.Config.Disk' on the '/vms/{vmid}' path and 'Datastore.AllocateSpace' for the configured state-storage(s)",
        "operationId": "post_nodes_node_query-url-metadata",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vms",
            "in": "query",
            "required": false,
            "description": "Only consider Guests with these IDs.",
            "schema": {
              "type": "string",
              "description": "Only consider Guests with these IDs."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/scan/lvmthin": {
      "get": {
        "summary": "Mdevscan",
        "description": "List mediated device types for given PCI device.",
        "operationId": "get_nodes_node_scan_lvmthin",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/ceph/metadata": {
      "get": {
        "summary": "Get All Flags",
        "description": "get the status of all ceph flags",
        "operationId": "get_cluster_ceph_metadata",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Update Flag",
        "description": "Set or clear (unset) a specific ceph flag",
        "operationId": "put_cluster_ceph_metadata",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "flag",
            "in": "query",
            "required": true,
            "description": "The ceph flag to update",
            "schema": {
              "type": "string",
              "description": "The ceph flag to update",
              "enum": [
                "nobackfill",
                "nodeep-scrub",
                "nodown",
                "noin",
                "noout",
                "norebalance",
                "norecover",
                "noscrub",
                "notieragent",
                "noup",
                "pause"
              ]
            }
          },
          {
            "name": "value",
            "in": "query",
            "required": true,
            "description": "The new value of the flag",
            "schema": {
              "type": "boolean",
              "description": "The new value of the flag"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/template": {
      "get": {
        "summary": "Mtunnelwebsocket",
        "description": "Migration tunnel endpoint for websocket upgrade - only for internal use by VM migration.\n\n**Required permissions:** You need to pass a ticket valid for the selected socket. Tickets can be created via the mtunnel API call, which will check permissions accordingly.",
        "operationId": "get_nodes_node_qemu_vmid_template",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "socket",
            "in": "query",
            "required": true,
            "description": "unix socket to forward to",
            "schema": {
              "type": "string",
              "description": "unix socket to forward to"
            }
          },
          {
            "name": "ticket",
            "in": "query",
            "required": true,
            "description": "ticket return by initial 'mtunnel' API call, or retrieved via 'ticket' tunnel command",
            "schema": {
              "type": "string",
              "description": "ticket return by initial 'mtunnel' API call, or retrieved via 'ticket' tunnel command"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Mtunnel",
        "description": "Migration tunnel endpoint - only for internal use by VM migration.\n\n**Required permissions:** You need 'VM.Allocate' permissions on '/vms/{vmid}' and Sys.Incoming on '/'. Further permission checks happen during the actual migration.",
        "operationId": "post_nodes_node_qemu_vmid_template",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "bridges",
            "in": "query",
            "required": false,
            "description": "List of network bridges to check availability. Will be checked again for actually used bridges during migration.",
            "schema": {
              "type": "string",
              "description": "List of network bridges to check availability. Will be checked again for actually used bridges during migration."
            }
          },
          {
            "name": "storages",
            "in": "query",
            "required": false,
            "description": "List of storages to check permission and availability. Will be checked again for all actually used storages during migration.",
            "schema": {
              "type": "string",
              "description": "List of storages to check permission and availability. Will be checked again for all actually used storages during migration."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/notifications/targets/{name}": {
      "get": {
        "summary": "Get All Targets",
        "description": "Returns a list of all entities that can be used as notification targets.",
        "operationId": "get_cluster_notifications_targets_name",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Matcher",
        "description": "Remove matcher",
        "operationId": "delete_cluster_notifications_targets_name",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/nextid": {
      "get": {
        "summary": "Index",
        "description": "Cluster index.",
        "operationId": "get_cluster_nextid",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Rule",
        "description": "Delete rule.",
        "operationId": "delete_cluster_nextid",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "node",
            "in": "query",
            "required": true,
            "description": "The cluster node name.",
            "schema": {
              "type": "string",
              "description": "The cluster node name."
            }
          },
          {
            "name": "pos",
            "in": "query",
            "required": false,
            "description": "Update rule at position <pos>.",
            "schema": {
              "type": "integer",
              "description": "Update rule at position <pos>."
            }
          },
          {
            "name": "vmid",
            "in": "query",
            "required": true,
            "description": "The (unique) ID of the VM.",
            "schema": {
              "type": "integer",
              "description": "The (unique) ID of the VM."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/exec": {
      "get": {
        "summary": "File-Read",
        "description": "Reads the given file via guest agent. Is limited to 16777216 bytes.",
        "operationId": "get_nodes_node_qemu_vmid_agent_exec",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "file",
            "in": "query",
            "required": true,
            "description": "The path to the file",
            "schema": {
              "type": "string",
              "description": "The path to the file"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/metrics": {
      "get": {
        "summary": "Get Matcher Field Values",
        "description": "Returns known notification metadata fields and their known values",
        "operationId": "get_cluster_metrics",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Sendmail Endpoint",
        "description": "Remove sendmail endpoint",
        "operationId": "delete_cluster_metrics",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/snapshot/{snapname}/rollback": {
      "get": {
        "summary": "Snapshot Cmd Idx",
        "description": "",
        "operationId": "get_nodes_node_qemu_vmid_snapshot_snapname_rollback",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "snapname",
            "in": "path",
            "required": true,
            "description": "snapname identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delsnapshot",
        "description": "Delete a VM snapshot.",
        "operationId": "delete_nodes_node_qemu_vmid_snapshot_snapname_rollback",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "snapname",
            "in": "path",
            "required": true,
            "description": "snapname identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "For removal from config file, even if removing disk snapshots fails.",
            "schema": {
              "type": "boolean",
              "description": "For removal from config file, even if removing disk snapshots fails."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/status": {
      "get": {
        "summary": "Rules",
        "description": "List ceph rules.",
        "operationId": "get_nodes_node_ceph_status",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/replication": {
      "get": {
        "summary": "Read",
        "description": "Read metric server configuration.",
        "operationId": "get_cluster_replication",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Remove Metric server.",
        "operationId": "delete_cluster_replication",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/status": {
      "get": {
        "summary": "Vm Feature",
        "description": "Check if feature for virtual machine is available.",
        "operationId": "get_nodes_node_qemu_vmid_status",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "feature",
            "in": "query",
            "required": true,
            "description": "Feature to check.",
            "schema": {
              "type": "string",
              "description": "Feature to check.",
              "enum": [
                "snapshot",
                "clone",
                "copy"
              ]
            }
          },
          {
            "name": "snapname",
            "in": "query",
            "required": false,
            "description": "The name of the snapshot.",
            "schema": {
              "type": "string",
              "description": "The name of the snapshot."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Vm Sendkey",
        "description": "Send key event to virtual machine.",
        "operationId": "put_nodes_node_qemu_vmid_status",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "key",
            "in": "query",
            "required": true,
            "description": "The key (qemu monitor encoding).",
            "schema": {
              "type": "string",
              "description": "The key (qemu monitor encoding)."
            }
          },
          {
            "name": "skiplock",
            "in": "query",
            "required": false,
            "description": "Ignore locks - only root is allowed to use this option.",
            "schema": {
              "type": "boolean",
              "description": "Ignore locks - only root is allowed to use this option."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/tasks/{upid}/status": {
      "get": {
        "summary": "Upid Index",
        "description": "",
        "operationId": "get_nodes_node_tasks_upid_status",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "upid",
            "in": "path",
            "required": true,
            "description": "upid identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Stop Task",
        "description": "Stop a task.\n\n**Required permissions:** The user needs 'Sys.Modify' permissions on '/nodes/<node>' if they aren't the owner of the task.",
        "operationId": "delete_nodes_node_tasks_upid_status",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "upid",
            "in": "path",
            "required": true,
            "description": "upid identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/metrics/server": {
      "get": {
        "summary": "Get Matcher Fields",
        "description": "Returns known notification metadata fields",
        "operationId": "get_cluster_metrics_server",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/vncproxy": {
      "get": {
        "summary": "Vncwebsocket",
        "description": "Opens a weksocket for VNC traffic.\n\n**Required permissions:** You also need to pass a valid ticket (vncticket).",
        "operationId": "get_nodes_node_lxc_vmid_vncproxy",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "port",
            "in": "query",
            "required": true,
            "description": "Port number returned by previous vncproxy call.",
            "schema": {
              "type": "integer",
              "description": "Port number returned by previous vncproxy call."
            }
          },
          {
            "name": "vncticket",
            "in": "query",
            "required": true,
            "description": "Ticket from previous call to vncproxy.",
            "schema": {
              "type": "string",
              "description": "Ticket from previous call to vncproxy."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Termproxy",
        "description": "Creates a TCP proxy connection.",
        "operationId": "post_nodes_node_lxc_vmid_vncproxy",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall/refs": {
      "get": {
        "summary": "Index",
        "description": "Directory index.",
        "operationId": "get_nodes_node_qemu_vmid_firewall_refs",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Fsfreeze-Status",
        "description": "Execute fsfreeze-status.",
        "operationId": "post_nodes_node_qemu_vmid_firewall_refs",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/sdn/zones/{zone}": {
      "get": {
        "summary": "Version",
        "description": "API version details",
        "operationId": "get_nodes_node_sdn_zones_zone",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "zone",
            "in": "path",
            "required": true,
            "description": "zone identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/ha/resources": {
      "get": {
        "summary": "Index",
        "description": "Get HA groups.",
        "operationId": "get_cluster_ha_resources",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Update",
        "description": "Update ha group configuration.",
        "operationId": "put_cluster_ha_resources",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "Description.",
            "schema": {
              "type": "string",
              "description": "Description."
            }
          },
          {
            "name": "delete",
            "in": "query",
            "required": false,
            "description": "A list of settings you want to delete.",
            "schema": {
              "type": "string",
              "description": "A list of settings you want to delete."
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "group",
            "in": "query",
            "required": true,
            "description": "The HA group identifier.",
            "schema": {
              "type": "string",
              "description": "The HA group identifier."
            }
          },
          {
            "name": "nodes",
            "in": "query",
            "required": false,
            "description": "List of cluster node names with optional priority.",
            "schema": {
              "type": "string",
              "description": "List of cluster node names with optional priority."
            }
          },
          {
            "name": "nofailback",
            "in": "query",
            "required": false,
            "description": "The CRM tries to run services on the node with the highest priority. If a node with higher priority comes online, the CRM migrates the service to that node. Enabling nofailback prevents that behavior.",
            "schema": {
              "type": "boolean",
              "description": "The CRM tries to run services on the node with the highest priority. If a node with higher priority comes online, the CRM migrates the service to that node. Enabling nofailback prevents that behavior.",
              "default": 0
            }
          },
          {
            "name": "restricted",
            "in": "query",
            "required": false,
            "description": "Resources bound to restricted groups may only run on nodes defined by the group.",
            "schema": {
              "type": "boolean",
              "description": "Resources bound to restricted groups may only run on nodes defined by the group.",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete ha group configuration.",
        "operationId": "delete_cluster_ha_resources",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "group",
            "in": "query",
            "required": true,
            "description": "The HA group identifier.",
            "schema": {
              "type": "string",
              "description": "The HA group identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/access/tfa/{userid}": {
      "get": {
        "summary": "Get Ticket",
        "description": "Dummy. Useful for formatters which want to provide a login page.",
        "operationId": "get_access_tfa_userid",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "description": "userid identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create Ticket",
        "description": "Create or verify authentication ticket.\n\n**Required permissions:** You need to pass valid credientials.",
        "operationId": "post_access_tfa_userid",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "description": "userid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "otp",
            "in": "query",
            "required": false,
            "description": "One-time password for Two-factor authentication.",
            "schema": {
              "type": "string",
              "description": "One-time password for Two-factor authentication."
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": true,
            "description": "The secret password. This can also be a valid ticket.",
            "schema": {
              "type": "string",
              "description": "The secret password. This can also be a valid ticket."
            }
          },
          {
            "name": "path",
            "in": "query",
            "required": false,
            "description": "Verify ticket, and check if user have access 'privs' on 'path'",
            "schema": {
              "type": "string",
              "description": "Verify ticket, and check if user have access 'privs' on 'path'"
            }
          },
          {
            "name": "privs",
            "in": "query",
            "required": false,
            "description": "Verify ticket, and check if user have access 'privs' on 'path'",
            "schema": {
              "type": "string",
              "description": "Verify ticket, and check if user have access 'privs' on 'path'"
            }
          },
          {
            "name": "realm",
            "in": "query",
            "required": false,
            "description": "You can optionally pass the realm using this parameter. Normally the realm is simply added to the username <username>@<realm>.",
            "schema": {
              "type": "string",
              "description": "You can optionally pass the realm using this parameter. Normally the realm is simply added to the username <username>@<realm>."
            }
          },
          {
            "name": "username",
            "in": "query",
            "required": true,
            "description": "User name",
            "schema": {
              "type": "string",
              "description": "User name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/config": {
      "get": {
        "summary": "Cloudinit Generated Config Dump",
        "description": "Get automatically generated cloudinit config.",
        "operationId": "get_nodes_node_qemu_vmid_config",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "description": "Config type.",
            "schema": {
              "type": "string",
              "description": "Config type.",
              "enum": [
                "user",
                "network",
                "meta"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/config/apiversion": {
      "get": {
        "summary": "Nodes",
        "description": "Corosync node list.",
        "operationId": "get_cluster_config_apiversion",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Addnode",
        "description": "Adds a node to the cluster configuration. This call is for internal use.",
        "operationId": "post_cluster_config_apiversion",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "apiversion",
            "in": "query",
            "required": false,
            "description": "The JOIN_API_VERSION of the new node.",
            "schema": {
              "type": "integer",
              "description": "The JOIN_API_VERSION of the new node."
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "Do not throw error if node already exists.",
            "schema": {
              "type": "boolean",
              "description": "Do not throw error if node already exists."
            }
          },
          {
            "name": "address",
            "in": "query",
            "required": true,
            "description": "Hostname (or IP) of this corosync link address.",
            "schema": {
              "type": "string",
              "description": "Hostname (or IP) of this corosync link address."
            }
          },
          {
            "name": "priority",
            "in": "query",
            "required": false,
            "description": "The priority for the link when knet is used in 'passive' mode (default). Lower value means higher priority. Only valid for cluster create, ignored on node add.",
            "schema": {
              "type": "integer",
              "description": "The priority for the link when knet is used in 'passive' mode (default). Lower value means higher priority. Only valid for cluster create, ignored on node add.",
              "default": 0
            }
          },
          {
            "name": "new_node_ip",
            "in": "query",
            "required": false,
            "description": "IP Address of node to add. Used as fallback if no links are given.",
            "schema": {
              "type": "string",
              "description": "IP Address of node to add. Used as fallback if no links are given."
            }
          },
          {
            "name": "node",
            "in": "query",
            "required": true,
            "description": "The cluster node name.",
            "schema": {
              "type": "string",
              "description": "The cluster node name."
            }
          },
          {
            "name": "nodeid",
            "in": "query",
            "required": false,
            "description": "Node id for this node.",
            "schema": {
              "type": "integer",
              "description": "Node id for this node."
            }
          },
          {
            "name": "votes",
            "in": "query",
            "required": false,
            "description": "Number of votes for this node",
            "schema": {
              "type": "integer",
              "description": "Number of votes for this node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delnode",
        "description": "Removes a node from the cluster configuration.",
        "operationId": "delete_cluster_config_apiversion",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "query",
            "required": true,
            "description": "The cluster node name.",
            "schema": {
              "type": "string",
              "description": "The cluster node name."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/ha/resources/{sid}/relocate": {
      "get": {
        "summary": "Read",
        "description": "Read resource configuration.",
        "operationId": "get_cluster_ha_resources_sid_relocate",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "sid",
            "in": "path",
            "required": true,
            "description": "sid identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete resource configuration.",
        "operationId": "delete_cluster_ha_resources_sid_relocate",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "sid",
            "in": "path",
            "required": true,
            "description": "sid identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/migrate": {
      "post": {
        "summary": "Monitor",
        "description": "Execute QEMU monitor commands.\n\n**Required permissions:** Sys.Modify is required for (sub)commands which are not read-only ('info *' and 'help')",
        "operationId": "post_nodes_node_qemu_vmid_migrate",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "command",
            "in": "query",
            "required": true,
            "description": "The monitor command.",
            "schema": {
              "type": "string",
              "description": "The monitor command."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/firewall/refs": {
      "get": {
        "summary": "Read Job",
        "description": "Read vzdump backup job definition.",
        "operationId": "get_cluster_firewall_refs",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The job ID.",
            "schema": {
              "type": "string",
              "description": "The job ID."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Job",
        "description": "Delete vzdump backup job definition.",
        "operationId": "delete_cluster_firewall_refs",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The job ID.",
            "schema": {
              "type": "string",
              "description": "The job ID."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/ha/status/current": {
      "get": {
        "summary": "Get Plugin Config",
        "description": "Get ACME plugin configuration.",
        "operationId": "get_cluster_ha_status_current",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "Unique identifier for ACME plugin instance.",
            "schema": {
              "type": "string",
              "description": "Unique identifier for ACME plugin instance."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Plugin",
        "description": "Delete ACME plugin configuration.",
        "operationId": "delete_cluster_ha_status_current",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "Unique identifier for ACME plugin instance.",
            "schema": {
              "type": "string",
              "description": "Unique identifier for ACME plugin instance."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/sdn/vnets/{vnet}/firewall/rules/{pos}": {
      "get": {
        "summary": "Get Rules",
        "description": "List rules.\n\n**Required permissions:** Needs SDN.Audit or SDN.Allocate permissions on '/sdn/zones/<zone>/<vnet>'",
        "operationId": "get_cluster_sdn_vnets_vnet_firewall_rules_pos",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "vnet",
            "in": "path",
            "required": true,
            "description": "vnet identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pos",
            "in": "path",
            "required": true,
            "description": "pos identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/termproxy": {
      "get": {
        "summary": "Dns",
        "description": "Read DNS settings.",
        "operationId": "get_nodes_node_termproxy",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Spiceshell",
        "description": "Creates a SPICE shell.",
        "operationId": "post_nodes_node_termproxy",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "cmd",
            "in": "query",
            "required": false,
            "description": "Run specific command or default to login (requires 'root@pam')",
            "schema": {
              "type": "string",
              "description": "Run specific command or default to login (requires 'root@pam')",
              "default": "login",
              "enum": [
                "ceph_install",
                "upgrade",
                "login"
              ]
            }
          },
          {
            "name": "proxy",
            "in": "query",
            "required": false,
            "description": "SPICE proxy server. This can be used by the client to specify the proxy server. All nodes in a cluster runs 'spiceproxy', so it is up to the client to choose one. By default, we return the node where the VM is currently running. As reasonable setting is to use same node you use to connect to the API (This is window.location.hostname for the JS GUI).",
            "schema": {
              "type": "string",
              "description": "SPICE proxy server. This can be used by the client to specify the proxy server. All nodes in a cluster runs 'spiceproxy', so it is up to the client to choose one. By default, we return the node where the VM is currently running. As reasonable setting is to use same node you use to connect to the API (This is window.location.hostname for the JS GUI)."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/certificates/acme/certificate": {
      "get": {
        "summary": "Info",
        "description": "Get information about node's certificates.",
        "operationId": "get_nodes_node_certificates_acme_certificate",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Remove Custom Cert",
        "description": "DELETE custom certificate chain and key.",
        "operationId": "delete_nodes_node_certificates_acme_certificate",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "restart",
            "in": "query",
            "required": false,
            "description": "Restart pveproxy.",
            "schema": {
              "type": "boolean",
              "description": "Restart pveproxy.",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/sdn/vnets/{vnet}/subnets": {
      "post": {
        "summary": "Ipcreate",
        "description": "Create IP Mapping in a VNet",
        "operationId": "post_cluster_sdn_vnets_vnet_subnets",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "vnet",
            "in": "path",
            "required": true,
            "description": "vnet identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ip",
            "in": "query",
            "required": true,
            "description": "The IP address to associate with the given MAC address",
            "schema": {
              "type": "string",
              "description": "The IP address to associate with the given MAC address"
            }
          },
          {
            "name": "mac",
            "in": "query",
            "required": false,
            "description": "Unicast MAC address.",
            "schema": {
              "type": "string",
              "description": "Unicast MAC address."
            }
          },
          {
            "name": "zone",
            "in": "query",
            "required": true,
            "description": "The SDN zone object identifier.",
            "schema": {
              "type": "string",
              "description": "The SDN zone object identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Ipdelete",
        "description": "Delete IP Mappings in a VNet",
        "operationId": "delete_cluster_sdn_vnets_vnet_subnets",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "vnet",
            "in": "path",
            "required": true,
            "description": "vnet identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ip",
            "in": "query",
            "required": true,
            "description": "The IP address to delete",
            "schema": {
              "type": "string",
              "description": "The IP address to delete"
            }
          },
          {
            "name": "mac",
            "in": "query",
            "required": false,
            "description": "Unicast MAC address.",
            "schema": {
              "type": "string",
              "description": "Unicast MAC address."
            }
          },
          {
            "name": "zone",
            "in": "query",
            "required": true,
            "description": "The SDN zone object identifier.",
            "schema": {
              "type": "string",
              "description": "The SDN zone object identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/template": {
      "post": {
        "summary": "Clone Vm",
        "description": "Create a container clone/copy\n\n**Required permissions:** You need 'VM.Clone' permissions on /vms/{vmid}, and 'VM.Allocate' permissions on /vms/{newid} (or on the VM pool /pool/{pool}). You also need 'Datastore.AllocateSpace' on any used storage, and 'SDN.Use' on any bridge.",
        "operationId": "post_nodes_node_lxc_vmid_template",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "bwlimit",
            "in": "query",
            "required": false,
            "description": "Override I/O bandwidth limit (in KiB/s).",
            "schema": {
              "type": "number",
              "description": "Override I/O bandwidth limit (in KiB/s).",
              "default": "clone limit from datacenter or storage config"
            }
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "description": "Description for the new CT.",
            "schema": {
              "type": "string",
              "description": "Description for the new CT."
            }
          },
          {
            "name": "full",
            "in": "query",
            "required": false,
            "description": "Create a full copy of all disks. This is always done when you clone a normal CT. For CT templates, we try to create a linked clone by default.",
            "schema": {
              "type": "boolean",
              "description": "Create a full copy of all disks. This is always done when you clone a normal CT. For CT templates, we try to create a linked clone by default."
            }
          },
          {
            "name": "hostname",
            "in": "query",
            "required": false,
            "description": "Set a hostname for the new CT.",
            "schema": {
              "type": "string",
              "description": "Set a hostname for the new CT."
            }
          },
          {
            "name": "newid",
            "in": "query",
            "required": true,
            "description": "VMID for the clone.",
            "schema": {
              "type": "integer",
              "description": "VMID for the clone."
            }
          },
          {
            "name": "pool",
            "in": "query",
            "required": false,
            "description": "Add the new CT to the specified pool.",
            "schema": {
              "type": "string",
              "description": "Add the new CT to the specified pool."
            }
          },
          {
            "name": "snapname",
            "in": "query",
            "required": false,
            "description": "The name of the snapshot.",
            "schema": {
              "type": "string",
              "description": "The name of the snapshot."
            }
          },
          {
            "name": "storage",
            "in": "query",
            "required": false,
            "description": "Target storage for full clone.",
            "schema": {
              "type": "string",
              "description": "Target storage for full clone."
            }
          },
          {
            "name": "target",
            "in": "query",
            "required": false,
            "description": "Target node. Only allowed if the original VM is on shared storage.",
            "schema": {
              "type": "string",
              "description": "Target node. Only allowed if the original VM is on shared storage."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/capabilities": {
      "delete": {
        "summary": "Delete",
        "description": "Prune backups. Only those using the standard naming scheme are considered.\n\n**Required permissions:** You need the 'Datastore.Allocate' privilege on the storage (or if a VM ID is specified, 'Datastore.AllocateSpace' and 'VM.Backup' for the VM).",
        "operationId": "delete_nodes_node_capabilities",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "storage",
            "in": "query",
            "required": true,
            "description": "The storage identifier.",
            "schema": {
              "type": "string",
              "description": "The storage identifier."
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Either 'qemu' or 'lxc'. Only consider backups for guests of this type.",
            "schema": {
              "type": "string",
              "description": "Either 'qemu' or 'lxc'. Only consider backups for guests of this type.",
              "enum": [
                "qemu",
                "lxc"
              ]
            }
          },
          {
            "name": "vmid",
            "in": "query",
            "required": false,
            "description": "Only prune backups for this VM.",
            "schema": {
              "type": "integer",
              "description": "Only prune backups for this VM."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall/aliases": {
      "get": {
        "summary": "Read Ip",
        "description": "Read IP or Network settings from IPSet.",
        "operationId": "get_nodes_node_lxc_vmid_firewall_aliases",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "cidr",
            "in": "query",
            "required": true,
            "description": "Network/IP specification in CIDR format.",
            "schema": {
              "type": "string",
              "description": "Network/IP specification in CIDR format."
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "IP set name.",
            "schema": {
              "type": "string",
              "description": "IP set name."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Remove Ip",
        "description": "Remove IP or Network from IPSet.",
        "operationId": "delete_nodes_node_lxc_vmid_firewall_aliases",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "cidr",
            "in": "query",
            "required": true,
            "description": "Network/IP specification in CIDR format.",
            "schema": {
              "type": "string",
              "description": "Network/IP specification in CIDR format."
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "IP set name.",
            "schema": {
              "type": "string",
              "description": "IP set name."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/acme/account/{name}": {
      "get": {
        "summary": "Get Directories",
        "description": "Get named known ACME directory endpoints.",
        "operationId": "get_cluster_acme_account_name",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Register Account",
        "description": "Register a new ACME account with CA.",
        "operationId": "post_cluster_acme_account_name",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contact",
            "in": "query",
            "required": true,
            "description": "Contact email addresses.",
            "schema": {
              "type": "string",
              "description": "Contact email addresses."
            }
          },
          {
            "name": "directory",
            "in": "query",
            "required": false,
            "description": "URL of ACME CA directory endpoint.",
            "schema": {
              "type": "string",
              "description": "URL of ACME CA directory endpoint.",
              "default": "https://acme-v02.api.letsencrypt.org/directory"
            }
          },
          {
            "name": "tos_url",
            "in": "query",
            "required": false,
            "description": "URL of CA TermsOfService - setting this indicates agreement.",
            "schema": {
              "type": "string",
              "description": "URL of CA TermsOfService - setting this indicates agreement."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/apt/repositories": {
      "get": {
        "summary": "Index",
        "description": "Directory index for apt (Advanced Package Tool).",
        "operationId": "get_nodes_node_apt_repositories",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Rule",
        "description": "Delete rule.",
        "operationId": "delete_nodes_node_apt_repositories",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "pos",
            "in": "query",
            "required": false,
            "description": "Update rule at position <pos>.",
            "schema": {
              "type": "integer",
              "description": "Update rule at position <pos>."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/access/users/{userid}/tfa": {
      "get": {
        "summary": "Read Token",
        "description": "Get specific API token information.",
        "operationId": "get_access_users_userid_tfa",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "description": "userid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenid",
            "in": "query",
            "required": true,
            "description": "User-specific token identifier.",
            "schema": {
              "type": "string",
              "description": "User-specific token identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Unlock Tfa",
        "description": "Unlock a user's TFA authentication.",
        "operationId": "put_access_users_userid_tfa",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "description": "userid identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Remove Token",
        "description": "Remove API token for a specific user.",
        "operationId": "delete_access_users_userid_tfa",
        "tags": [
          "Access Control"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "description": "userid identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenid",
            "in": "query",
            "required": true,
            "description": "User-specific token identifier.",
            "schema": {
              "type": "string",
              "description": "User-specific token identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/file-write": {
      "get": {
        "summary": "Index",
        "description": "QEMU Guest Agent command index.",
        "operationId": "get_nodes_node_qemu_vmid_agent_file-write",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Agent",
        "description": "Execute QEMU Guest Agent commands.",
        "operationId": "post_nodes_node_qemu_vmid_agent_file-write",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "command",
            "in": "query",
            "required": true,
            "description": "The QGA command.",
            "schema": {
              "type": "string",
              "description": "The QGA command.",
              "enum": [
                "fsfreeze-freeze",
                "fsfreeze-status",
                "fsfreeze-thaw",
                "fstrim",
                "get-fsinfo",
                "get-host-name",
                "get-memory-block-info",
                "get-memory-blocks",
                "get-osinfo",
                "get-time",
                "get-timezone",
                "get-users",
                "get-vcpus",
                "info",
                "network-get-interfaces",
                "ping",
                "shutdown",
                "suspend-disk",
                "suspend-hybrid",
                "suspend-ram"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall/aliases/{name}": {
      "get": {
        "summary": "Get Aliases",
        "description": "List aliases",
        "operationId": "get_nodes_node_qemu_vmid_firewall_aliases_name",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Create Alias",
        "description": "Create IP or Network Alias.",
        "operationId": "post_nodes_node_qemu_vmid_firewall_aliases_name",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cidr",
            "in": "query",
            "required": true,
            "description": "Network/IP specification in CIDR format.",
            "schema": {
              "type": "string",
              "description": "Network/IP specification in CIDR format."
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/resize": {
      "get": {
        "summary": "Get Snapshot Config",
        "description": "Get snapshot configuration",
        "operationId": "get_nodes_node_qemu_vmid_resize",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "snapname",
            "in": "query",
            "required": true,
            "description": "The name of the snapshot.",
            "schema": {
              "type": "string",
              "description": "The name of the snapshot."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Update Snapshot Config",
        "description": "Update snapshot metadata.",
        "operationId": "put_nodes_node_qemu_vmid_resize",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "description": "A textual description or comment.",
            "schema": {
              "type": "string",
              "description": "A textual description or comment."
            }
          },
          {
            "name": "snapname",
            "in": "query",
            "required": true,
            "description": "The name of the snapshot.",
            "schema": {
              "type": "string",
              "description": "The name of the snapshot."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/suspend-hybrid": {
      "post": {
        "summary": "Set-User-Password",
        "description": "Sets the password for the given user to the given password",
        "operationId": "post_nodes_node_qemu_vmid_agent_suspend-hybrid",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "crypted",
            "in": "query",
            "required": false,
            "description": "set to 1 if the password has already been passed through crypt()",
            "schema": {
              "type": "boolean",
              "description": "set to 1 if the password has already been passed through crypt()",
              "default": 0
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": true,
            "description": "The new password.",
            "schema": {
              "type": "string",
              "description": "The new password."
            }
          },
          {
            "name": "username",
            "in": "query",
            "required": true,
            "description": "The user to set the password for.",
            "schema": {
              "type": "string",
              "description": "The user to set the password for."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/resources": {
      "get": {
        "summary": "Get Options",
        "description": "Get datacenter options. Without 'Sys.Audit' on '/' not all options are returned.",
        "operationId": "get_cluster_resources",
        "tags": [
          "Cluster"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/ha": {
      "get": {
        "summary": "Get Plugin Config",
        "description": "Get ACME plugin configuration.",
        "operationId": "get_cluster_ha",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "Unique identifier for ACME plugin instance.",
            "schema": {
              "type": "string",
              "description": "Unique identifier for ACME plugin instance."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Plugin",
        "description": "Delete ACME plugin configuration.",
        "operationId": "delete_cluster_ha",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "Unique identifier for ACME plugin instance.",
            "schema": {
              "type": "string",
              "description": "Unique identifier for ACME plugin instance."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/ceph/pool/{name}/status": {
      "get": {
        "summary": "Poolindex",
        "description": "Pool index.",
        "operationId": "get_nodes_node_ceph_pool_name_status",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Destroypool",
        "description": "Destroy pool",
        "operationId": "delete_nodes_node_ceph_pool_name_status",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "name identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "If true, destroys pool even if in use",
            "schema": {
              "type": "boolean",
              "description": "If true, destroys pool even if in use",
              "default": 0
            }
          },
          {
            "name": "remove_ecprofile",
            "in": "query",
            "required": false,
            "description": "Remove the erasure code profile. Defaults to true, if applicable.",
            "schema": {
              "type": "boolean",
              "description": "Remove the erasure code profile. Defaults to true, if applicable.",
              "default": 1
            }
          },
          {
            "name": "remove_storages",
            "in": "query",
            "required": false,
            "description": "Remove all pveceph-managed storages configured for this pool",
            "schema": {
              "type": "boolean",
              "description": "Remove all pveceph-managed storages configured for this pool",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/storage": {
      "get": {
        "summary": "Index",
        "description": "List LVM Volume Groups",
        "operationId": "get_nodes_node_storage",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Remove an LVM Volume Group.\n\n**Required permissions:** Requires additionally 'Datastore.Allocate' on /storage when setting 'cleanup-config'",
        "operationId": "delete_nodes_node_storage",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "The storage identifier.",
            "schema": {
              "type": "string",
              "description": "The storage identifier."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall/rules/{pos}": {
      "get": {
        "summary": "Get Rules",
        "description": "List rules.",
        "operationId": "get_nodes_node_lxc_vmid_firewall_rules_pos",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          },
          {
            "name": "pos",
            "in": "path",
            "required": true,
            "description": "pos identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/vncshell": {
      "get": {
        "summary": "Vncwebsocket",
        "description": "Opens a websocket for VNC traffic.\n\n**Required permissions:** You also need to pass a valid ticket (vncticket).",
        "operationId": "get_nodes_node_vncshell",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "port",
            "in": "query",
            "required": true,
            "description": "Port number returned by previous vncproxy call.",
            "schema": {
              "type": "integer",
              "description": "Port number returned by previous vncproxy call."
            }
          },
          {
            "name": "vncticket",
            "in": "query",
            "required": true,
            "description": "Ticket from previous call to vncproxy.",
            "schema": {
              "type": "string",
              "description": "Ticket from previous call to vncproxy."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Spiceshell",
        "description": "Creates a SPICE shell.",
        "operationId": "post_nodes_node_vncshell",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "cmd",
            "in": "query",
            "required": false,
            "description": "Run specific command or default to login (requires 'root@pam')",
            "schema": {
              "type": "string",
              "description": "Run specific command or default to login (requires 'root@pam')",
              "default": "login",
              "enum": [
                "ceph_install",
                "upgrade",
                "login"
              ]
            }
          },
          {
            "name": "proxy",
            "in": "query",
            "required": false,
            "description": "SPICE proxy server. This can be used by the client to specify the proxy server. All nodes in a cluster runs 'spiceproxy', so it is up to the client to choose one. By default, we return the node where the VM is currently running. As reasonable setting is to use same node you use to connect to the API (This is window.location.hostname for the JS GUI).",
            "schema": {
              "type": "string",
              "description": "SPICE proxy server. This can be used by the client to specify the proxy server. All nodes in a cluster runs 'spiceproxy', so it is up to the client to choose one. By default, we return the node where the VM is currently running. As reasonable setting is to use same node you use to connect to the API (This is window.location.hostname for the JS GUI)."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/storage/{storage}": {
      "get": {
        "summary": "Index",
        "description": "Get status for all datastores.\n\n**Required permissions:** Only list entries where you have 'Datastore.Audit' or 'Datastore.AllocateSpace' permissions on '/storage/<storage>'",
        "operationId": "get_nodes_node_storage_storage",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "required": true,
            "description": "storage identifier",
            "schema": {
              "type": "string",
              "description": "Storage identifier"
            }
          },
          {
            "name": "content",
            "in": "query",
            "required": false,
            "description": "Only list stores which support this content type.",
            "schema": {
              "type": "string",
              "description": "Only list stores which support this content type."
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "required": false,
            "description": "Only list stores which are enabled (not disabled in config).",
            "schema": {
              "type": "boolean",
              "description": "Only list stores which are enabled (not disabled in config).",
              "default": 0
            }
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "description": "Include information about formats",
            "schema": {
              "type": "boolean",
              "description": "Include information about formats",
              "default": 0
            }
          },
          {
            "name": "target",
            "in": "query",
            "required": false,
            "description": "If target is different to 'node', we only lists shared storages which content is accessible on this 'node' and the specified 'target' node.",
            "schema": {
              "type": "string",
              "description": "If target is different to 'node', we only lists shared storages which content is accessible on this 'node' and the specified 'target' node."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/rrd": {
      "get": {
        "summary": "Journal",
        "description": "Read Journal",
        "operationId": "get_nodes_node_rrd",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "endcursor",
            "in": "query",
            "required": false,
            "description": "End before the given Cursor. Conflicts with 'until'",
            "schema": {
              "type": "string",
              "description": "End before the given Cursor. Conflicts with 'until'"
            }
          },
          {
            "name": "lastentries",
            "in": "query",
            "required": false,
            "description": "Limit to the last X lines. Conflicts with a range.",
            "schema": {
              "type": "integer",
              "description": "Limit to the last X lines. Conflicts with a range."
            }
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "description": "Display all log since this UNIX epoch. Conflicts with 'startcursor'.",
            "schema": {
              "type": "integer",
              "description": "Display all log since this UNIX epoch. Conflicts with 'startcursor'."
            }
          },
          {
            "name": "startcursor",
            "in": "query",
            "required": false,
            "description": "Start after the given Cursor. Conflicts with 'since'",
            "schema": {
              "type": "string",
              "description": "Start after the given Cursor. Conflicts with 'since'"
            }
          },
          {
            "name": "until",
            "in": "query",
            "required": false,
            "description": "Display all log until this UNIX epoch. Conflicts with 'endcursor'.",
            "schema": {
              "type": "integer",
              "description": "Display all log until this UNIX epoch. Conflicts with 'endcursor'."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/cluster/sdn/vnets/{vnet}/ips": {
      "get": {
        "summary": "Index",
        "description": "SDN vnets index.\n\n**Required permissions:** Only list entries where you have 'SDN.Audit' or 'SDN.Allocate' permissions on '/sdn/zones/<zone>/<vnet>'",
        "operationId": "get_cluster_sdn_vnets_vnet_ips",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "vnet",
            "in": "path",
            "required": true,
            "description": "vnet identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pending",
            "in": "query",
            "required": false,
            "description": "Display pending config.",
            "schema": {
              "type": "boolean",
              "description": "Display pending config."
            }
          },
          {
            "name": "running",
            "in": "query",
            "required": false,
            "description": "Display running config.",
            "schema": {
              "type": "boolean",
              "description": "Display running config."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "put": {
        "summary": "Update",
        "description": "Update sdn vnet object configuration.\n\n**Required permissions:** Require 'SDN.Allocate' permission on '/sdn/zones/<zone>/<vnet>'",
        "operationId": "put_cluster_sdn_vnets_vnet_ips",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "vnet",
            "in": "path",
            "required": true,
            "description": "vnet identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "alias",
            "in": "query",
            "required": false,
            "description": "alias name of the vnet",
            "schema": {
              "type": "string",
              "description": "alias name of the vnet"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "required": false,
            "description": "A list of settings you want to delete.",
            "schema": {
              "type": "string",
              "description": "A list of settings you want to delete."
            }
          },
          {
            "name": "digest",
            "in": "query",
            "required": false,
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "schema": {
              "type": "string",
              "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
            }
          },
          {
            "name": "tag",
            "in": "query",
            "required": false,
            "description": "vlan or vxlan id",
            "schema": {
              "type": "integer",
              "description": "vlan or vxlan id"
            }
          },
          {
            "name": "vlanaware",
            "in": "query",
            "required": false,
            "description": "Allow vm VLANs to pass through this vnet.",
            "schema": {
              "type": "boolean",
              "description": "Allow vm VLANs to pass through this vnet."
            }
          },
          {
            "name": "zone",
            "in": "query",
            "required": false,
            "description": "zone id",
            "schema": {
              "type": "string",
              "description": "zone id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete sdn vnet object configuration.\n\n**Required permissions:** Require 'SDN.Allocate' permission on '/sdn/zones/<zone>/<vnet>'",
        "operationId": "delete_cluster_sdn_vnets_vnet_ips",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "name": "vnet",
            "in": "path",
            "required": true,
            "description": "vnet identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/info": {
      "get": {
        "summary": "Network-Get-Interfaces",
        "description": "Execute network-get-interfaces.",
        "operationId": "get_nodes_node_qemu_vmid_agent_info",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      },
      "post": {
        "summary": "Shutdown",
        "description": "Execute shutdown.",
        "operationId": "post_nodes_node_qemu_vmid_agent_info",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "required": true,
            "description": "vmid identifier",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 999999999,
              "description": "Virtual machine ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    },
    "/nodes/{node}/network/{iface}": {
      "delete": {
        "summary": "Revert Network Changes",
        "description": "Revert network configuration changes.",
        "operationId": "delete_nodes_node_network_iface",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "required": true,
            "description": "node identifier",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$",
              "description": "Node name"
            }
          },
          {
            "name": "iface",
            "in": "path",
            "required": true,
            "description": "iface identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiTokenAuth": []
          },
          {
            "CookieAuth": [],
            "CSRFPreventionToken": []
          }
        ]
      }
    }
  }
}
